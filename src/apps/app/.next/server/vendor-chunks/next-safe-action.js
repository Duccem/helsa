"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/next-safe-action";
exports.ids = ["vendor-chunks/next-safe-action"];
exports.modules = {

/***/ "(action-browser)/../../../node_modules/next-safe-action/dist/index.mjs":
/*!*************************************************************!*\
  !*** ../../../node_modules/next-safe-action/dist/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionMetadataValidationError: () => (/* binding */ ActionMetadataValidationError),\n/* harmony export */   ActionOutputDataValidationError: () => (/* binding */ ActionOutputDataValidationError),\n/* harmony export */   ActionValidationError: () => (/* binding */ ActionValidationError),\n/* harmony export */   DEFAULT_SERVER_ERROR_MESSAGE: () => (/* binding */ DEFAULT_SERVER_ERROR_MESSAGE),\n/* harmony export */   createMiddleware: () => (/* binding */ createMiddleware),\n/* harmony export */   createSafeActionClient: () => (/* binding */ createSafeActionClient),\n/* harmony export */   flattenBindArgsValidationErrors: () => (/* binding */ flattenBindArgsValidationErrors),\n/* harmony export */   flattenValidationErrors: () => (/* binding */ flattenValidationErrors),\n/* harmony export */   formatBindArgsValidationErrors: () => (/* binding */ formatBindArgsValidationErrors),\n/* harmony export */   formatValidationErrors: () => (/* binding */ formatValidationErrors),\n/* harmony export */   returnValidationErrors: () => (/* binding */ returnValidationErrors)\n/* harmony export */ });\n// src/adapters/zod.ts\nvar ZodAdapter = class {\n\tasync validate(schema, data) {\n\t\tconst result = await schema.safeParseAsync(data);\n\t\tif (result.success) {\n\t\t\treturn {\n\t\t\t\tsuccess: true,\n\t\t\t\tdata: result.data,\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tsuccess: false,\n\t\t\tissues: result.error.issues.map(({ message, path }) => ({ message, path })),\n\t\t};\n\t}\n};\nfunction zodAdapter() {\n\treturn new ZodAdapter();\n}\n\n// ../../node_modules/.pnpm/deepmerge-ts@7.1.3/node_modules/deepmerge-ts/dist/index.mjs\nvar actions = {\n\tdefaultMerge: Symbol(\"deepmerge-ts: default merge\"),\n\tskip: Symbol(\"deepmerge-ts: skip\"),\n};\nvar actionsInto = {\n\tdefaultMerge: actions.defaultMerge,\n};\nfunction defaultMetaDataUpdater(previousMeta, metaMeta) {\n\treturn metaMeta;\n}\nfunction defaultFilterValues(values, meta) {\n\treturn values.filter((value) => value !== void 0);\n}\nvar ObjectType;\n(function (ObjectType2) {\n\tObjectType2[(ObjectType2[\"NOT\"] = 0)] = \"NOT\";\n\tObjectType2[(ObjectType2[\"RECORD\"] = 1)] = \"RECORD\";\n\tObjectType2[(ObjectType2[\"ARRAY\"] = 2)] = \"ARRAY\";\n\tObjectType2[(ObjectType2[\"SET\"] = 3)] = \"SET\";\n\tObjectType2[(ObjectType2[\"MAP\"] = 4)] = \"MAP\";\n\tObjectType2[(ObjectType2[\"OTHER\"] = 5)] = \"OTHER\";\n})(ObjectType || (ObjectType = {}));\nfunction getObjectType(object) {\n\tif (typeof object !== \"object\" || object === null) {\n\t\treturn 0;\n\t}\n\tif (Array.isArray(object)) {\n\t\treturn 2;\n\t}\n\tif (isRecord(object)) {\n\t\treturn 1;\n\t}\n\tif (object instanceof Set) {\n\t\treturn 3;\n\t}\n\tif (object instanceof Map) {\n\t\treturn 4;\n\t}\n\treturn 5;\n}\nfunction getKeys(objects) {\n\tconst keys = /* @__PURE__ */ new Set();\n\tfor (const object of objects) {\n\t\tfor (const key of [...Object.keys(object), ...Object.getOwnPropertySymbols(object)]) {\n\t\t\tkeys.add(key);\n\t\t}\n\t}\n\treturn keys;\n}\nfunction objectHasProperty(object, property) {\n\treturn typeof object === \"object\" && Object.prototype.propertyIsEnumerable.call(object, property);\n}\nfunction getIterableOfIterables(iterables) {\n\tlet m_iterablesIndex = 0;\n\tlet m_iterator = iterables[0]?.[Symbol.iterator]();\n\treturn {\n\t\t[Symbol.iterator]() {\n\t\t\treturn {\n\t\t\t\tnext() {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (m_iterator === void 0) {\n\t\t\t\t\t\t\treturn { done: true, value: void 0 };\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst result = m_iterator.next();\n\t\t\t\t\t\tif (result.done === true) {\n\t\t\t\t\t\t\tm_iterablesIndex += 1;\n\t\t\t\t\t\t\tm_iterator = iterables[m_iterablesIndex]?.[Symbol.iterator]();\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\t\tvalue: result.value,\n\t\t\t\t\t\t};\n\t\t\t\t\t} while (true);\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t};\n}\nvar validRecordToStringValues = [\"[object Object]\", \"[object Module]\"];\nfunction isRecord(value) {\n\tif (!validRecordToStringValues.includes(Object.prototype.toString.call(value))) {\n\t\treturn false;\n\t}\n\tconst { constructor } = value;\n\tif (constructor === void 0) {\n\t\treturn true;\n\t}\n\tconst prototype = constructor.prototype;\n\tif (\n\t\tprototype === null ||\n\t\ttypeof prototype !== \"object\" ||\n\t\t!validRecordToStringValues.includes(Object.prototype.toString.call(prototype))\n\t) {\n\t\treturn false;\n\t}\n\tif (!prototype.hasOwnProperty(\"isPrototypeOf\")) {\n\t\treturn false;\n\t}\n\treturn true;\n}\nfunction mergeRecords$1(values, utils, meta) {\n\tconst result = {};\n\tfor (const key of getKeys(values)) {\n\t\tconst propValues = [];\n\t\tfor (const value of values) {\n\t\t\tif (objectHasProperty(value, key)) {\n\t\t\t\tpropValues.push(value[key]);\n\t\t\t}\n\t\t}\n\t\tif (propValues.length === 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst updatedMeta = utils.metaDataUpdater(meta, {\n\t\t\tkey,\n\t\t\tparents: values,\n\t\t});\n\t\tconst propertyResult = mergeUnknowns(propValues, utils, updatedMeta);\n\t\tif (propertyResult === actions.skip) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (key === \"__proto__\") {\n\t\t\tObject.defineProperty(result, key, {\n\t\t\t\tvalue: propertyResult,\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\twritable: true,\n\t\t\t});\n\t\t} else {\n\t\t\tresult[key] = propertyResult;\n\t\t}\n\t}\n\treturn result;\n}\nfunction mergeArrays$1(values) {\n\treturn values.flat();\n}\nfunction mergeSets$1(values) {\n\treturn new Set(getIterableOfIterables(values));\n}\nfunction mergeMaps$1(values) {\n\treturn new Map(getIterableOfIterables(values));\n}\nfunction mergeOthers$1(values) {\n\treturn values.at(-1);\n}\nvar mergeFunctions = {\n\tmergeRecords: mergeRecords$1,\n\tmergeArrays: mergeArrays$1,\n\tmergeSets: mergeSets$1,\n\tmergeMaps: mergeMaps$1,\n\tmergeOthers: mergeOthers$1,\n};\nfunction deepmerge(...objects) {\n\treturn deepmergeCustom({})(...objects);\n}\nfunction deepmergeCustom(options, rootMetaData) {\n\tconst utils = getUtils(options, customizedDeepmerge);\n\tfunction customizedDeepmerge(...objects) {\n\t\treturn mergeUnknowns(objects, utils, rootMetaData);\n\t}\n\treturn customizedDeepmerge;\n}\nfunction getUtils(options, customizedDeepmerge) {\n\treturn {\n\t\tdefaultMergeFunctions: mergeFunctions,\n\t\tmergeFunctions: {\n\t\t\t...mergeFunctions,\n\t\t\t...Object.fromEntries(\n\t\t\t\tObject.entries(options)\n\t\t\t\t\t.filter(([key, option]) => Object.hasOwn(mergeFunctions, key))\n\t\t\t\t\t.map(([key, option]) => (option === false ? [key, mergeFunctions.mergeOthers] : [key, option]))\n\t\t\t),\n\t\t},\n\t\tmetaDataUpdater: options.metaDataUpdater ?? defaultMetaDataUpdater,\n\t\tdeepmerge: customizedDeepmerge,\n\t\tuseImplicitDefaultMerging: options.enableImplicitDefaultMerging ?? false,\n\t\tfilterValues: options.filterValues === false ? void 0 : (options.filterValues ?? defaultFilterValues),\n\t\tactions,\n\t};\n}\nfunction mergeUnknowns(values, utils, meta) {\n\tconst filteredValues = utils.filterValues?.(values, meta) ?? values;\n\tif (filteredValues.length === 0) {\n\t\treturn void 0;\n\t}\n\tif (filteredValues.length === 1) {\n\t\treturn mergeOthers(filteredValues, utils, meta);\n\t}\n\tconst type = getObjectType(filteredValues[0]);\n\tif (type !== 0 && type !== 5) {\n\t\tfor (let m_index = 1; m_index < filteredValues.length; m_index++) {\n\t\t\tif (getObjectType(filteredValues[m_index]) === type) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn mergeOthers(filteredValues, utils, meta);\n\t\t}\n\t}\n\tswitch (type) {\n\t\tcase 1: {\n\t\t\treturn mergeRecords(filteredValues, utils, meta);\n\t\t}\n\t\tcase 2: {\n\t\t\treturn mergeArrays(filteredValues, utils, meta);\n\t\t}\n\t\tcase 3: {\n\t\t\treturn mergeSets(filteredValues, utils, meta);\n\t\t}\n\t\tcase 4: {\n\t\t\treturn mergeMaps(filteredValues, utils, meta);\n\t\t}\n\t\tdefault: {\n\t\t\treturn mergeOthers(filteredValues, utils, meta);\n\t\t}\n\t}\n}\nfunction mergeRecords(values, utils, meta) {\n\tconst result = utils.mergeFunctions.mergeRecords(values, utils, meta);\n\tif (\n\t\tresult === actions.defaultMerge ||\n\t\t(utils.useImplicitDefaultMerging &&\n\t\t\tresult === void 0 &&\n\t\t\tutils.mergeFunctions.mergeRecords !== utils.defaultMergeFunctions.mergeRecords)\n\t) {\n\t\treturn utils.defaultMergeFunctions.mergeRecords(values, utils, meta);\n\t}\n\treturn result;\n}\nfunction mergeArrays(values, utils, meta) {\n\tconst result = utils.mergeFunctions.mergeArrays(values, utils, meta);\n\tif (\n\t\tresult === actions.defaultMerge ||\n\t\t(utils.useImplicitDefaultMerging &&\n\t\t\tresult === void 0 &&\n\t\t\tutils.mergeFunctions.mergeArrays !== utils.defaultMergeFunctions.mergeArrays)\n\t) {\n\t\treturn utils.defaultMergeFunctions.mergeArrays(values);\n\t}\n\treturn result;\n}\nfunction mergeSets(values, utils, meta) {\n\tconst result = utils.mergeFunctions.mergeSets(values, utils, meta);\n\tif (\n\t\tresult === actions.defaultMerge ||\n\t\t(utils.useImplicitDefaultMerging &&\n\t\t\tresult === void 0 &&\n\t\t\tutils.mergeFunctions.mergeSets !== utils.defaultMergeFunctions.mergeSets)\n\t) {\n\t\treturn utils.defaultMergeFunctions.mergeSets(values);\n\t}\n\treturn result;\n}\nfunction mergeMaps(values, utils, meta) {\n\tconst result = utils.mergeFunctions.mergeMaps(values, utils, meta);\n\tif (\n\t\tresult === actions.defaultMerge ||\n\t\t(utils.useImplicitDefaultMerging &&\n\t\t\tresult === void 0 &&\n\t\t\tutils.mergeFunctions.mergeMaps !== utils.defaultMergeFunctions.mergeMaps)\n\t) {\n\t\treturn utils.defaultMergeFunctions.mergeMaps(values);\n\t}\n\treturn result;\n}\nfunction mergeOthers(values, utils, meta) {\n\tconst result = utils.mergeFunctions.mergeOthers(values, utils, meta);\n\tif (\n\t\tresult === actions.defaultMerge ||\n\t\t(utils.useImplicitDefaultMerging &&\n\t\t\tresult === void 0 &&\n\t\t\tutils.mergeFunctions.mergeOthers !== utils.defaultMergeFunctions.mergeOthers)\n\t) {\n\t\treturn utils.defaultMergeFunctions.mergeOthers(values);\n\t}\n\treturn result;\n}\n\n// src/next/errors/bailout-to-csr.ts\nvar BAILOUT_TO_CSR = \"BAILOUT_TO_CLIENT_SIDE_RENDERING\";\nfunction isBailoutToCSRError(err) {\n\tif (typeof err !== \"object\" || err === null || !(\"digest\" in err)) {\n\t\treturn false;\n\t}\n\treturn err.digest === BAILOUT_TO_CSR;\n}\n\n// src/next/errors/http-access-fallback.ts\nvar HTTPAccessErrorStatus = {\n\tNOT_FOUND: 404,\n\tFORBIDDEN: 403,\n\tUNAUTHORIZED: 401,\n};\nvar ALLOWED_CODES = new Set(Object.values(HTTPAccessErrorStatus));\nvar HTTP_ERROR_FALLBACK_ERROR_CODE = \"NEXT_HTTP_ERROR_FALLBACK\";\nfunction isHTTPAccessFallbackError(error) {\n\tif (typeof error !== \"object\" || error === null || !(\"digest\" in error) || typeof error.digest !== \"string\") {\n\t\treturn false;\n\t}\n\tconst [prefix, httpStatus] = error.digest.split(\";\");\n\treturn prefix === HTTP_ERROR_FALLBACK_ERROR_CODE && ALLOWED_CODES.has(Number(httpStatus));\n}\nfunction getAccessFallbackHTTPStatus(error) {\n\tconst httpStatus = error.digest.split(\";\")[1];\n\treturn Number(httpStatus);\n}\n\n// src/next/errors/redirect.ts\nvar RedirectStatusCode = /* @__PURE__ */ ((RedirectStatusCode2) => {\n\tRedirectStatusCode2[(RedirectStatusCode2[\"SeeOther\"] = 303)] = \"SeeOther\";\n\tRedirectStatusCode2[(RedirectStatusCode2[\"TemporaryRedirect\"] = 307)] = \"TemporaryRedirect\";\n\tRedirectStatusCode2[(RedirectStatusCode2[\"PermanentRedirect\"] = 308)] = \"PermanentRedirect\";\n\treturn RedirectStatusCode2;\n})(RedirectStatusCode || {});\nvar REDIRECT_ERROR_CODE = \"NEXT_REDIRECT\";\nfunction isRedirectError(error) {\n\tif (typeof error !== \"object\" || error === null || !(\"digest\" in error) || typeof error.digest !== \"string\") {\n\t\treturn false;\n\t}\n\tconst digest = error.digest.split(\";\");\n\tconst [errorCode, type] = digest;\n\tconst destination = digest.slice(2, -2).join(\";\");\n\tconst status = digest.at(-2);\n\tconst statusCode = Number(status);\n\treturn (\n\t\terrorCode === REDIRECT_ERROR_CODE &&\n\t\t(type === \"replace\" || type === \"push\") &&\n\t\ttypeof destination === \"string\" &&\n\t\t!isNaN(statusCode) &&\n\t\tstatusCode in RedirectStatusCode\n\t);\n}\n\n// src/next/errors/router.ts\nfunction isNextRouterError(error) {\n\treturn isRedirectError(error) || isHTTPAccessFallbackError(error);\n}\n\n// src/next/errors/dynamic-usage.ts\nvar DYNAMIC_ERROR_CODE = \"DYNAMIC_SERVER_USAGE\";\nfunction isDynamicServerError(err) {\n\tif (typeof err !== \"object\" || err === null || !(\"digest\" in err) || typeof err.digest !== \"string\") {\n\t\treturn false;\n\t}\n\treturn err.digest === DYNAMIC_ERROR_CODE;\n}\nfunction isDynamicPostponeReason(reason) {\n\treturn (\n\t\treason.includes(\"needs to bail out of prerendering at this point because it used\") &&\n\t\treason.includes(\"Learn more: https://nextjs.org/docs/messages/ppr-caught-error\")\n\t);\n}\nfunction isDynamicPostpone(err) {\n\tif (\n\t\ttypeof err === \"object\" &&\n\t\terr !== null && // eslint-disable-next-line\n\t\ttypeof err.message === \"string\"\n\t) {\n\t\treturn isDynamicPostponeReason(err.message);\n\t}\n\treturn false;\n}\nvar isDynamicUsageError = (err) =>\n\tisDynamicServerError(err) || isBailoutToCSRError(err) || isNextRouterError(err) || isDynamicPostpone(err);\n\n// src/next/errors/postpone.ts\nvar REACT_POSTPONE_TYPE = Symbol.for(\"react.postpone\");\nfunction isPostpone(error) {\n\treturn (\n\t\ttypeof error === \"object\" &&\n\t\terror !== null && // eslint-disable-next-line\n\t\terror.$$typeof === REACT_POSTPONE_TYPE\n\t);\n}\n\n// src/next/errors/index.ts\nfunction isNotFoundError(error) {\n\treturn isHTTPAccessFallbackError(error) && getAccessFallbackHTTPStatus(error) === 404;\n}\nfunction isForbiddenError(error) {\n\treturn isHTTPAccessFallbackError(error) && getAccessFallbackHTTPStatus(error) === 403;\n}\nfunction isUnauthorizedError(error) {\n\treturn isHTTPAccessFallbackError(error) && getAccessFallbackHTTPStatus(error) === 401;\n}\nfunction isFrameworkError(error) {\n\treturn isNextRouterError(error) || isBailoutToCSRError(error) || isDynamicUsageError(error) || isPostpone(error);\n}\n\n// src/utils.ts\nvar DEFAULT_SERVER_ERROR_MESSAGE = \"Something went wrong while executing the operation.\";\nvar isError = (error) => error instanceof Error;\nvar winningBoolean = (...args) => {\n\treturn args.reduce((acc, v) => (typeof v === \"boolean\" ? v : acc), false);\n};\n\n// src/validation-errors.ts\nvar buildValidationErrors = (issues) => {\n\tconst ve = {};\n\tfor (const issue of issues) {\n\t\tconst { path, message } = issue;\n\t\tif (!path || path.length === 0) {\n\t\t\tve._errors = ve._errors ? [...ve._errors, message] : [message];\n\t\t\tcontinue;\n\t\t}\n\t\tlet ref = ve;\n\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\tconst k = path[i];\n\t\t\tif (!ref[k]) {\n\t\t\t\tref[k] = {};\n\t\t\t}\n\t\t\tref = ref[k];\n\t\t}\n\t\tconst key = path[path.length - 1];\n\t\tref[key] = ref[key]?._errors\n\t\t\t? {\n\t\t\t\t\t...structuredClone(ref[key]),\n\t\t\t\t\t_errors: [...ref[key]._errors, message],\n\t\t\t\t}\n\t\t\t: { ...structuredClone(ref[key]), _errors: [message] };\n\t}\n\treturn ve;\n};\nvar ActionServerValidationError = class extends Error {\n\tvalidationErrors;\n\tconstructor(validationErrors) {\n\t\tsuper(\"Server Action server validation error(s) occurred\");\n\t\tthis.validationErrors = validationErrors;\n\t}\n};\nvar ActionValidationError = class extends Error {\n\tvalidationErrors;\n\tconstructor(validationErrors) {\n\t\tsuper(\"Server Action validation error(s) occurred\");\n\t\tthis.validationErrors = validationErrors;\n\t}\n};\nfunction returnValidationErrors(schema, validationErrors) {\n\tthrow new ActionServerValidationError(validationErrors);\n}\nfunction formatValidationErrors(validationErrors) {\n\treturn validationErrors;\n}\nfunction formatBindArgsValidationErrors(bindArgsValidationErrors) {\n\treturn bindArgsValidationErrors;\n}\nfunction flattenValidationErrors(validationErrors) {\n\tconst flattened = {\n\t\tformErrors: [],\n\t\tfieldErrors: {},\n\t};\n\tfor (const [key, value] of Object.entries(validationErrors ?? {})) {\n\t\tif (key === \"_errors\" && Array.isArray(value)) {\n\t\t\tflattened.formErrors = [...value];\n\t\t} else {\n\t\t\tif (\"_errors\" in value) {\n\t\t\t\tflattened.fieldErrors[key] = [...value._errors];\n\t\t\t}\n\t\t}\n\t}\n\treturn flattened;\n}\nfunction flattenBindArgsValidationErrors(bindArgsValidationErrors) {\n\treturn bindArgsValidationErrors.map((ve) => flattenValidationErrors(ve));\n}\nvar ActionMetadataValidationError = class extends Error {\n\tvalidationErrors;\n\tconstructor(validationErrors) {\n\t\tsuper(\"Invalid metadata input. Please be sure to pass metadata via `metadata` method before defining the action.\");\n\t\tthis.name = \"ActionMetadataError\";\n\t\tthis.validationErrors = validationErrors;\n\t}\n};\nvar ActionOutputDataValidationError = class extends Error {\n\tvalidationErrors;\n\tconstructor(validationErrors) {\n\t\tsuper(\n\t\t\t\"Invalid action data (output). Please be sure to return data following the shape of the schema passed to `dataSchema` method.\"\n\t\t);\n\t\tthis.name = \"ActionOutputDataError\";\n\t\tthis.validationErrors = validationErrors;\n\t}\n};\n\n// src/action-builder.ts\nfunction actionBuilder(args) {\n\tconst bindArgsSchemas = args.bindArgsSchemas ?? [];\n\tfunction buildAction({ withState }) {\n\t\treturn {\n\t\t\taction: (serverCodeFn, utils) => {\n\t\t\t\treturn async (...clientInputs) => {\n\t\t\t\t\tlet currentCtx = {};\n\t\t\t\t\tconst middlewareResult = { success: false };\n\t\t\t\t\tlet prevResult = void 0;\n\t\t\t\t\tconst parsedInputDatas = [];\n\t\t\t\t\tlet frameworkError = null;\n\t\t\t\t\tif (withState) {\n\t\t\t\t\t\tprevResult = clientInputs.splice(bindArgsSchemas.length, 1)[0];\n\t\t\t\t\t}\n\t\t\t\t\tif (bindArgsSchemas.length + 1 > clientInputs.length) {\n\t\t\t\t\t\tclientInputs.push(void 0);\n\t\t\t\t\t}\n\t\t\t\t\tconst executeMiddlewareStack = async (idx = 0) => {\n\t\t\t\t\t\tif (frameworkError) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst middlewareFn = args.middlewareFns[idx];\n\t\t\t\t\t\tmiddlewareResult.ctx = currentCtx;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (idx === 0) {\n\t\t\t\t\t\t\t\tif (args.metadataSchema) {\n\t\t\t\t\t\t\t\t\tconst parsedMd = await args.validationAdapter.validate(args.metadataSchema, args.metadata);\n\t\t\t\t\t\t\t\t\tif (!parsedMd.success) {\n\t\t\t\t\t\t\t\t\t\tthrow new ActionMetadataValidationError(buildValidationErrors(parsedMd.issues));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (middlewareFn) {\n\t\t\t\t\t\t\t\tawait middlewareFn({\n\t\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\t\t// pass raw client input\n\t\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\t\tnext: async (nextOpts) => {\n\t\t\t\t\t\t\t\t\t\tcurrentCtx = deepmerge(currentCtx, nextOpts?.ctx ?? {});\n\t\t\t\t\t\t\t\t\t\tawait executeMiddlewareStack(idx + 1);\n\t\t\t\t\t\t\t\t\t\treturn middlewareResult;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst parsedInputs = await Promise.all(\n\t\t\t\t\t\t\t\t\tclientInputs.map(async (input, i) => {\n\t\t\t\t\t\t\t\t\t\tif (i === clientInputs.length - 1) {\n\t\t\t\t\t\t\t\t\t\t\tif (typeof args.inputSchemaFn === \"undefined\") {\n\t\t\t\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdata: void 0,\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\treturn args.validationAdapter.validate(await args.inputSchemaFn(), input);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\treturn args.validationAdapter.validate(bindArgsSchemas[i], input);\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tlet hasBindValidationErrors = false;\n\t\t\t\t\t\t\t\tconst bindArgsValidationErrors = Array(parsedInputs.length - 1).fill({});\n\t\t\t\t\t\t\t\tfor (let i = 0; i < parsedInputs.length; i++) {\n\t\t\t\t\t\t\t\t\tconst parsedInput = parsedInputs[i];\n\t\t\t\t\t\t\t\t\tif (parsedInput.success) {\n\t\t\t\t\t\t\t\t\t\tparsedInputDatas.push(parsedInput.data);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tif (i < parsedInputs.length - 1) {\n\t\t\t\t\t\t\t\t\t\t\tbindArgsValidationErrors[i] = buildValidationErrors(parsedInput.issues);\n\t\t\t\t\t\t\t\t\t\t\thasBindValidationErrors = true;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tconst validationErrors = buildValidationErrors(parsedInput.issues);\n\t\t\t\t\t\t\t\t\t\t\tmiddlewareResult.validationErrors = await Promise.resolve(\n\t\t\t\t\t\t\t\t\t\t\t\targs.handleValidationErrorsShape(validationErrors, {\n\t\t\t\t\t\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (hasBindValidationErrors) {\n\t\t\t\t\t\t\t\t\tmiddlewareResult.bindArgsValidationErrors = await Promise.resolve(\n\t\t\t\t\t\t\t\t\t\targs.handleBindArgsValidationErrorsShape(bindArgsValidationErrors, {\n\t\t\t\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (middlewareResult.validationErrors || middlewareResult.bindArgsValidationErrors) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst scfArgs = [];\n\t\t\t\t\t\t\t\tscfArgs[0] = {\n\t\t\t\t\t\t\t\t\tparsedInput: parsedInputDatas.at(-1),\n\t\t\t\t\t\t\t\t\tbindArgsParsedInputs: parsedInputDatas.slice(0, -1),\n\t\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tif (withState) {\n\t\t\t\t\t\t\t\t\tscfArgs[1] = { prevResult: structuredClone(prevResult) };\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst data = await serverCodeFn(...scfArgs);\n\t\t\t\t\t\t\t\tif (typeof args.outputSchema !== \"undefined\") {\n\t\t\t\t\t\t\t\t\tconst parsedData = await args.validationAdapter.validate(args.outputSchema, data);\n\t\t\t\t\t\t\t\t\tif (!parsedData.success) {\n\t\t\t\t\t\t\t\t\t\tthrow new ActionOutputDataValidationError(buildValidationErrors(parsedData.issues));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmiddlewareResult.success = true;\n\t\t\t\t\t\t\t\tmiddlewareResult.data = data;\n\t\t\t\t\t\t\t\tmiddlewareResult.parsedInput = parsedInputDatas.at(-1);\n\t\t\t\t\t\t\t\tmiddlewareResult.bindArgsParsedInputs = parsedInputDatas.slice(0, -1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tif (isFrameworkError(e)) {\n\t\t\t\t\t\t\t\tmiddlewareResult.success = true;\n\t\t\t\t\t\t\t\tframeworkError = e;\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (e instanceof ActionServerValidationError) {\n\t\t\t\t\t\t\t\tconst ve = e.validationErrors;\n\t\t\t\t\t\t\t\tmiddlewareResult.validationErrors = await Promise.resolve(\n\t\t\t\t\t\t\t\t\targs.handleValidationErrorsShape(ve, {\n\t\t\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst error = isError(e) ? e : new Error(DEFAULT_SERVER_ERROR_MESSAGE);\n\t\t\t\t\t\t\t\tconst returnedError = await Promise.resolve(\n\t\t\t\t\t\t\t\t\targs.handleServerError(error, {\n\t\t\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\t\t\t// pass raw client input\n\t\t\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tmiddlewareResult.serverError = returnedError;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tawait executeMiddlewareStack();\n\t\t\t\t\tconst callbackPromises = [];\n\t\t\t\t\tif (frameworkError) {\n\t\t\t\t\t\tcallbackPromises.push(\n\t\t\t\t\t\t\tutils?.onSuccess?.({\n\t\t\t\t\t\t\t\tdata: void 0,\n\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\tparsedInput: parsedInputDatas.at(-1),\n\t\t\t\t\t\t\t\tbindArgsParsedInputs: parsedInputDatas.slice(0, -1),\n\t\t\t\t\t\t\t\thasRedirected: isRedirectError(frameworkError),\n\t\t\t\t\t\t\t\thasNotFound: isNotFoundError(frameworkError),\n\t\t\t\t\t\t\t\thasForbidden: isForbiddenError(frameworkError),\n\t\t\t\t\t\t\t\thasUnauthorized: isUnauthorizedError(frameworkError),\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcallbackPromises.push(\n\t\t\t\t\t\t\tutils?.onSettled?.({\n\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\tresult: {},\n\t\t\t\t\t\t\t\thasRedirected: isRedirectError(frameworkError),\n\t\t\t\t\t\t\t\thasNotFound: isNotFoundError(frameworkError),\n\t\t\t\t\t\t\t\thasForbidden: isForbiddenError(frameworkError),\n\t\t\t\t\t\t\t\thasUnauthorized: isUnauthorizedError(frameworkError),\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t\tawait Promise.all(callbackPromises);\n\t\t\t\t\t\tthrow frameworkError;\n\t\t\t\t\t}\n\t\t\t\t\tconst actionResult = {};\n\t\t\t\t\tif (typeof middlewareResult.validationErrors !== \"undefined\") {\n\t\t\t\t\t\tif (winningBoolean(args.throwValidationErrors, utils?.throwValidationErrors)) {\n\t\t\t\t\t\t\tthrow new ActionValidationError(middlewareResult.validationErrors);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tactionResult.validationErrors = middlewareResult.validationErrors;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof middlewareResult.bindArgsValidationErrors !== \"undefined\") {\n\t\t\t\t\t\tactionResult.bindArgsValidationErrors = middlewareResult.bindArgsValidationErrors;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof middlewareResult.serverError !== \"undefined\") {\n\t\t\t\t\t\tif (utils?.throwServerError) {\n\t\t\t\t\t\t\tthrow middlewareResult.serverError;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tactionResult.serverError = middlewareResult.serverError;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (middlewareResult.success) {\n\t\t\t\t\t\tif (typeof middlewareResult.data !== \"undefined\") {\n\t\t\t\t\t\t\tactionResult.data = middlewareResult.data;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcallbackPromises.push(\n\t\t\t\t\t\t\tutils?.onSuccess?.({\n\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\tdata: actionResult.data,\n\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\tparsedInput: parsedInputDatas.at(-1),\n\t\t\t\t\t\t\t\tbindArgsParsedInputs: parsedInputDatas.slice(0, -1),\n\t\t\t\t\t\t\t\thasRedirected: false,\n\t\t\t\t\t\t\t\thasNotFound: false,\n\t\t\t\t\t\t\t\thasForbidden: false,\n\t\t\t\t\t\t\t\thasUnauthorized: false,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcallbackPromises.push(\n\t\t\t\t\t\t\tutils?.onError?.({\n\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\terror: actionResult,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tcallbackPromises.push(\n\t\t\t\t\t\tutils?.onSettled?.({\n\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\tresult: actionResult,\n\t\t\t\t\t\t\thasRedirected: false,\n\t\t\t\t\t\t\thasNotFound: false,\n\t\t\t\t\t\t\thasForbidden: false,\n\t\t\t\t\t\t\thasUnauthorized: false,\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\tawait Promise.all(callbackPromises);\n\t\t\t\t\treturn actionResult;\n\t\t\t\t};\n\t\t\t},\n\t\t};\n\t}\n\treturn {\n\t\t/**\n\t\t * Define the action.\n\t\t * @param serverCodeFn Code that will be executed on the **server side**\n\t\t *\n\t\t * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#action--stateaction See docs for more information}\n\t\t */\n\t\taction: buildAction({ withState: false }).action,\n\t\t/**\n\t\t * Define the stateful action. To be used with the [`useStateAction`](https://next-safe-action.dev/docs/execute-actions/hooks/usestateaction) hook.\n\t\t * @param serverCodeFn Code that will be executed on the **server side**\n\t\t *\n\t\t * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#action--stateaction See docs for more information}\n\t\t */\n\t\tstateAction: buildAction({ withState: true }).action,\n\t};\n}\n\n// src/safe-action-client.ts\nvar SafeActionClient = class _SafeActionClient {\n\t#handleServerError;\n\t#middlewareFns;\n\t#metadataSchema;\n\t#metadata;\n\t#inputSchemaFn;\n\t#outputSchema;\n\t#ctxType;\n\t#bindArgsSchemas;\n\t#validationAdapter;\n\t#handleValidationErrorsShape;\n\t#handleBindArgsValidationErrorsShape;\n\t#defaultValidationErrorsShape;\n\t#throwValidationErrors;\n\tconstructor(opts) {\n\t\tthis.#middlewareFns = opts.middlewareFns;\n\t\tthis.#handleServerError = opts.handleServerError;\n\t\tthis.#metadataSchema = opts.metadataSchema;\n\t\tthis.#metadata = opts.metadata;\n\t\tthis.#inputSchemaFn = opts.inputSchemaFn ?? void 0;\n\t\tthis.#outputSchema = opts.outputSchema;\n\t\tthis.#bindArgsSchemas = opts.bindArgsSchemas ?? [];\n\t\tthis.#validationAdapter = opts.validationAdapter;\n\t\tthis.#ctxType = opts.ctxType;\n\t\tthis.#handleValidationErrorsShape = opts.handleValidationErrorsShape;\n\t\tthis.#handleBindArgsValidationErrorsShape = opts.handleBindArgsValidationErrorsShape;\n\t\tthis.#defaultValidationErrorsShape = opts.defaultValidationErrorsShape;\n\t\tthis.#throwValidationErrors = opts.throwValidationErrors;\n\t}\n\t/**\n\t * Use a middleware function.\n\t * @param middlewareFn Middleware function\n\t *\n\t * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#use See docs for more information}\n\t */\n\tuse(middlewareFn) {\n\t\treturn new _SafeActionClient({\n\t\t\tmiddlewareFns: [...this.#middlewareFns, middlewareFn],\n\t\t\thandleServerError: this.#handleServerError,\n\t\t\tmetadataSchema: this.#metadataSchema,\n\t\t\tmetadata: this.#metadata,\n\t\t\tinputSchemaFn: this.#inputSchemaFn,\n\t\t\toutputSchema: this.#outputSchema,\n\t\t\tbindArgsSchemas: this.#bindArgsSchemas,\n\t\t\tvalidationAdapter: this.#validationAdapter,\n\t\t\thandleValidationErrorsShape: this.#handleValidationErrorsShape,\n\t\t\thandleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,\n\t\t\tctxType: {},\n\t\t\tdefaultValidationErrorsShape: this.#defaultValidationErrorsShape,\n\t\t\tthrowValidationErrors: this.#throwValidationErrors,\n\t\t});\n\t}\n\t/**\n\t * Define metadata for the action.\n\t * @param data Metadata with the same type as the return value of the [`defineMetadataSchema`](https://next-safe-action.dev/docs/define-actions/create-the-client#definemetadataschema) optional initialization function\n\t *\n\t * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#metadata See docs for more information}\n\t */\n\tmetadata(data) {\n\t\treturn new _SafeActionClient({\n\t\t\tmiddlewareFns: this.#middlewareFns,\n\t\t\thandleServerError: this.#handleServerError,\n\t\t\tmetadataSchema: this.#metadataSchema,\n\t\t\tmetadata: data,\n\t\t\tinputSchemaFn: this.#inputSchemaFn,\n\t\t\tbindArgsSchemas: this.#bindArgsSchemas,\n\t\t\toutputSchema: this.#outputSchema,\n\t\t\tvalidationAdapter: this.#validationAdapter,\n\t\t\thandleValidationErrorsShape: this.#handleValidationErrorsShape,\n\t\t\thandleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,\n\t\t\tctxType: {},\n\t\t\tdefaultValidationErrorsShape: this.#defaultValidationErrorsShape,\n\t\t\tthrowValidationErrors: this.#throwValidationErrors,\n\t\t});\n\t}\n\t/**\n\t * Define the input validation schema for the action.\n\t * @param inputSchema Input validation schema\n\t * @param utils Optional utils object\n\t *\n\t * {@link https://next-safe-action.dev/docs/define-actions/create-the-client#inputschema See docs for more information}\n\t */\n\tschema(inputSchema, utils) {\n\t\treturn new _SafeActionClient({\n\t\t\tmiddlewareFns: this.#middlewareFns,\n\t\t\thandleServerError: this.#handleServerError,\n\t\t\tmetadataSchema: this.#metadataSchema,\n\t\t\tmetadata: this.#metadata,\n\t\t\t// @ts-expect-error\n\t\t\tinputSchemaFn:\n\t\t\t\tinputSchema[Symbol.toStringTag] === \"AsyncFunction\"\n\t\t\t\t\t? async () => {\n\t\t\t\t\t\t\tconst prevSchema = await this.#inputSchemaFn?.();\n\t\t\t\t\t\t\treturn inputSchema(prevSchema);\n\t\t\t\t\t\t}\n\t\t\t\t\t: async () => inputSchema,\n\t\t\tbindArgsSchemas: this.#bindArgsSchemas,\n\t\t\toutputSchema: this.#outputSchema,\n\t\t\tvalidationAdapter: this.#validationAdapter,\n\t\t\thandleValidationErrorsShape: utils?.handleValidationErrorsShape ?? this.#handleValidationErrorsShape,\n\t\t\thandleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,\n\t\t\tctxType: {},\n\t\t\tdefaultValidationErrorsShape: this.#defaultValidationErrorsShape,\n\t\t\tthrowValidationErrors: this.#throwValidationErrors,\n\t\t});\n\t}\n\t/**\n\t * Define the bind args input validation schema for the action.\n\t * @param bindArgsSchemas Bind args input validation schemas\n\t * @param utils Optional utils object\n\t *\n\t * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#bindargsschemas See docs for more information}\n\t */\n\tbindArgsSchemas(bindArgsSchemas, utils) {\n\t\treturn new _SafeActionClient({\n\t\t\tmiddlewareFns: this.#middlewareFns,\n\t\t\thandleServerError: this.#handleServerError,\n\t\t\tmetadataSchema: this.#metadataSchema,\n\t\t\tmetadata: this.#metadata,\n\t\t\tinputSchemaFn: this.#inputSchemaFn,\n\t\t\tbindArgsSchemas,\n\t\t\toutputSchema: this.#outputSchema,\n\t\t\tvalidationAdapter: this.#validationAdapter,\n\t\t\thandleValidationErrorsShape: this.#handleValidationErrorsShape,\n\t\t\thandleBindArgsValidationErrorsShape:\n\t\t\t\tutils?.handleBindArgsValidationErrorsShape ?? this.#handleBindArgsValidationErrorsShape,\n\t\t\tctxType: {},\n\t\t\tdefaultValidationErrorsShape: this.#defaultValidationErrorsShape,\n\t\t\tthrowValidationErrors: this.#throwValidationErrors,\n\t\t});\n\t}\n\t/**\n\t * Define the output data validation schema for the action.\n\t * @param schema Output data validation schema\n\t *\n\t * {@link https://next-safe-action.dev/docs/define-actions/create-the-client#outputschema See docs for more information}\n\t */\n\toutputSchema(dataSchema) {\n\t\treturn new _SafeActionClient({\n\t\t\tmiddlewareFns: this.#middlewareFns,\n\t\t\thandleServerError: this.#handleServerError,\n\t\t\tmetadataSchema: this.#metadataSchema,\n\t\t\tmetadata: this.#metadata,\n\t\t\tinputSchemaFn: this.#inputSchemaFn,\n\t\t\tbindArgsSchemas: this.#bindArgsSchemas,\n\t\t\toutputSchema: dataSchema,\n\t\t\tvalidationAdapter: this.#validationAdapter,\n\t\t\thandleValidationErrorsShape: this.#handleValidationErrorsShape,\n\t\t\thandleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,\n\t\t\tctxType: {},\n\t\t\tdefaultValidationErrorsShape: this.#defaultValidationErrorsShape,\n\t\t\tthrowValidationErrors: this.#throwValidationErrors,\n\t\t});\n\t}\n\t/**\n\t * Define the action.\n\t * @param serverCodeFn Code that will be executed on the **server side**\n\t * @param [cb] Optional callbacks that will be called after action execution, on the server.\n\t *\n\t * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#action--stateaction See docs for more information}\n\t */\n\taction(serverCodeFn, utils) {\n\t\treturn actionBuilder({\n\t\t\thandleServerError: this.#handleServerError,\n\t\t\tmiddlewareFns: this.#middlewareFns,\n\t\t\tctxType: this.#ctxType,\n\t\t\tmetadataSchema: this.#metadataSchema,\n\t\t\tmetadata: this.#metadata,\n\t\t\tinputSchemaFn: this.#inputSchemaFn,\n\t\t\tbindArgsSchemas: this.#bindArgsSchemas,\n\t\t\toutputSchema: this.#outputSchema,\n\t\t\tvalidationAdapter: this.#validationAdapter,\n\t\t\thandleValidationErrorsShape: this.#handleValidationErrorsShape,\n\t\t\thandleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,\n\t\t\tthrowValidationErrors: this.#throwValidationErrors,\n\t\t}).action(serverCodeFn, utils);\n\t}\n\t/**\n\t * Define the stateful action.\n\t * To be used with the [`useStateAction`](https://next-safe-action.dev/docs/execute-actions/hooks/usestateaction) hook.\n\t * @param serverCodeFn Code that will be executed on the **server side**\n\t * @param [cb] Optional callbacks that will be called after action execution, on the server.\n\t *\n\t * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#action--stateaction See docs for more information}\n\t */\n\tstateAction(serverCodeFn, utils) {\n\t\treturn actionBuilder({\n\t\t\thandleServerError: this.#handleServerError,\n\t\t\tmiddlewareFns: this.#middlewareFns,\n\t\t\tctxType: this.#ctxType,\n\t\t\tmetadataSchema: this.#metadataSchema,\n\t\t\tmetadata: this.#metadata,\n\t\t\tinputSchemaFn: this.#inputSchemaFn,\n\t\t\tbindArgsSchemas: this.#bindArgsSchemas,\n\t\t\toutputSchema: this.#outputSchema,\n\t\t\tvalidationAdapter: this.#validationAdapter,\n\t\t\thandleValidationErrorsShape: this.#handleValidationErrorsShape,\n\t\t\thandleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,\n\t\t\tthrowValidationErrors: this.#throwValidationErrors,\n\t\t}).stateAction(serverCodeFn, utils);\n\t}\n};\n\n// src/middleware.ts\nvar createMiddleware = () => {\n\treturn {\n\t\tdefine: (middlewareFn) => middlewareFn,\n\t};\n};\n\n// src/index.ts\nvar createSafeActionClient = (createOpts) => {\n\tconst handleServerError =\n\t\tcreateOpts?.handleServerError ||\n\t\t((e) => {\n\t\t\tconsole.error(\"Action error:\", e.message);\n\t\t\treturn DEFAULT_SERVER_ERROR_MESSAGE;\n\t\t});\n\treturn new SafeActionClient({\n\t\tmiddlewareFns: [async ({ next }) => next({ ctx: {} })],\n\t\thandleServerError,\n\t\tinputSchemaFn: void 0,\n\t\tbindArgsSchemas: [],\n\t\toutputSchema: void 0,\n\t\tvalidationAdapter: createOpts?.validationAdapter ?? zodAdapter(),\n\t\t// use zod adapter by default\n\t\tctxType: {},\n\t\tmetadataSchema: createOpts?.defineMetadataSchema?.() ?? void 0,\n\t\tmetadata: void 0,\n\t\tdefaultValidationErrorsShape: createOpts?.defaultValidationErrorsShape ?? \"formatted\",\n\t\tthrowValidationErrors: Boolean(createOpts?.throwValidationErrors),\n\t\thandleValidationErrorsShape: async (ve) =>\n\t\t\tcreateOpts?.defaultValidationErrorsShape === \"flattened\"\n\t\t\t\t? flattenValidationErrors(ve)\n\t\t\t\t: formatValidationErrors(ve),\n\t\thandleBindArgsValidationErrorsShape: async (ve) =>\n\t\t\tcreateOpts?.defaultValidationErrorsShape === \"flattened\"\n\t\t\t\t? flattenBindArgsValidationErrors(ve)\n\t\t\t\t: formatBindArgsValidationErrors(ve),\n\t});\n};\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbmV4dC1zYWZlLWFjdGlvbi9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxlQUFlLFFBQVEsZUFBZTtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdDQUFnQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGNBQWM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGlDQUFpQztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwQkFBMEI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGdCQUFnQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHFCQUFxQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlFQUFpRTtBQUNqRTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixXQUFXO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0U7QUFDaEU7QUFDQTtBQUNBLFVBQVU7QUFDVixTQUFTO0FBQ1QsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsK0VBQStFO0FBQy9FLHdCQUF3Qix5QkFBeUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0Esd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLDZCQUE2QixpQkFBaUI7QUFDOUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsMkJBQTJCLE1BQU0sWUFBWSxTQUFTO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFhRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGhlbHNhL2FwcC8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbmV4dC1zYWZlLWFjdGlvbi9kaXN0L2luZGV4Lm1qcz83NDNiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9hZGFwdGVycy96b2QudHNcbnZhciBab2RBZGFwdGVyID0gY2xhc3Mge1xuXHRhc3luYyB2YWxpZGF0ZShzY2hlbWEsIGRhdGEpIHtcblx0XHRjb25zdCByZXN1bHQgPSBhd2FpdCBzY2hlbWEuc2FmZVBhcnNlQXN5bmMoZGF0YSk7XG5cdFx0aWYgKHJlc3VsdC5zdWNjZXNzKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRzdWNjZXNzOiB0cnVlLFxuXHRcdFx0XHRkYXRhOiByZXN1bHQuZGF0YSxcblx0XHRcdH07XG5cdFx0fVxuXHRcdHJldHVybiB7XG5cdFx0XHRzdWNjZXNzOiBmYWxzZSxcblx0XHRcdGlzc3VlczogcmVzdWx0LmVycm9yLmlzc3Vlcy5tYXAoKHsgbWVzc2FnZSwgcGF0aCB9KSA9PiAoeyBtZXNzYWdlLCBwYXRoIH0pKSxcblx0XHR9O1xuXHR9XG59O1xuZnVuY3Rpb24gem9kQWRhcHRlcigpIHtcblx0cmV0dXJuIG5ldyBab2RBZGFwdGVyKCk7XG59XG5cbi8vIC4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9kZWVwbWVyZ2UtdHNANy4xLjMvbm9kZV9tb2R1bGVzL2RlZXBtZXJnZS10cy9kaXN0L2luZGV4Lm1qc1xudmFyIGFjdGlvbnMgPSB7XG5cdGRlZmF1bHRNZXJnZTogU3ltYm9sKFwiZGVlcG1lcmdlLXRzOiBkZWZhdWx0IG1lcmdlXCIpLFxuXHRza2lwOiBTeW1ib2woXCJkZWVwbWVyZ2UtdHM6IHNraXBcIiksXG59O1xudmFyIGFjdGlvbnNJbnRvID0ge1xuXHRkZWZhdWx0TWVyZ2U6IGFjdGlvbnMuZGVmYXVsdE1lcmdlLFxufTtcbmZ1bmN0aW9uIGRlZmF1bHRNZXRhRGF0YVVwZGF0ZXIocHJldmlvdXNNZXRhLCBtZXRhTWV0YSkge1xuXHRyZXR1cm4gbWV0YU1ldGE7XG59XG5mdW5jdGlvbiBkZWZhdWx0RmlsdGVyVmFsdWVzKHZhbHVlcywgbWV0YSkge1xuXHRyZXR1cm4gdmFsdWVzLmZpbHRlcigodmFsdWUpID0+IHZhbHVlICE9PSB2b2lkIDApO1xufVxudmFyIE9iamVjdFR5cGU7XG4oZnVuY3Rpb24gKE9iamVjdFR5cGUyKSB7XG5cdE9iamVjdFR5cGUyWyhPYmplY3RUeXBlMltcIk5PVFwiXSA9IDApXSA9IFwiTk9UXCI7XG5cdE9iamVjdFR5cGUyWyhPYmplY3RUeXBlMltcIlJFQ09SRFwiXSA9IDEpXSA9IFwiUkVDT1JEXCI7XG5cdE9iamVjdFR5cGUyWyhPYmplY3RUeXBlMltcIkFSUkFZXCJdID0gMildID0gXCJBUlJBWVwiO1xuXHRPYmplY3RUeXBlMlsoT2JqZWN0VHlwZTJbXCJTRVRcIl0gPSAzKV0gPSBcIlNFVFwiO1xuXHRPYmplY3RUeXBlMlsoT2JqZWN0VHlwZTJbXCJNQVBcIl0gPSA0KV0gPSBcIk1BUFwiO1xuXHRPYmplY3RUeXBlMlsoT2JqZWN0VHlwZTJbXCJPVEhFUlwiXSA9IDUpXSA9IFwiT1RIRVJcIjtcbn0pKE9iamVjdFR5cGUgfHwgKE9iamVjdFR5cGUgPSB7fSkpO1xuZnVuY3Rpb24gZ2V0T2JqZWN0VHlwZShvYmplY3QpIHtcblx0aWYgKHR5cGVvZiBvYmplY3QgIT09IFwib2JqZWN0XCIgfHwgb2JqZWN0ID09PSBudWxsKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblx0aWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuXHRcdHJldHVybiAyO1xuXHR9XG5cdGlmIChpc1JlY29yZChvYmplY3QpKSB7XG5cdFx0cmV0dXJuIDE7XG5cdH1cblx0aWYgKG9iamVjdCBpbnN0YW5jZW9mIFNldCkge1xuXHRcdHJldHVybiAzO1xuXHR9XG5cdGlmIChvYmplY3QgaW5zdGFuY2VvZiBNYXApIHtcblx0XHRyZXR1cm4gNDtcblx0fVxuXHRyZXR1cm4gNTtcbn1cbmZ1bmN0aW9uIGdldEtleXMob2JqZWN0cykge1xuXHRjb25zdCBrZXlzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcblx0Zm9yIChjb25zdCBvYmplY3Qgb2Ygb2JqZWN0cykge1xuXHRcdGZvciAoY29uc3Qga2V5IG9mIFsuLi5PYmplY3Qua2V5cyhvYmplY3QpLCAuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCldKSB7XG5cdFx0XHRrZXlzLmFkZChrZXkpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4ga2V5cztcbn1cbmZ1bmN0aW9uIG9iamVjdEhhc1Byb3BlcnR5KG9iamVjdCwgcHJvcGVydHkpIHtcblx0cmV0dXJuIHR5cGVvZiBvYmplY3QgPT09IFwib2JqZWN0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgcHJvcGVydHkpO1xufVxuZnVuY3Rpb24gZ2V0SXRlcmFibGVPZkl0ZXJhYmxlcyhpdGVyYWJsZXMpIHtcblx0bGV0IG1faXRlcmFibGVzSW5kZXggPSAwO1xuXHRsZXQgbV9pdGVyYXRvciA9IGl0ZXJhYmxlc1swXT8uW1N5bWJvbC5pdGVyYXRvcl0oKTtcblx0cmV0dXJuIHtcblx0XHRbU3ltYm9sLml0ZXJhdG9yXSgpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdG5leHQoKSB7XG5cdFx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdFx0aWYgKG1faXRlcmF0b3IgPT09IHZvaWQgMCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogdm9pZCAwIH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRjb25zdCByZXN1bHQgPSBtX2l0ZXJhdG9yLm5leHQoKTtcblx0XHRcdFx0XHRcdGlmIChyZXN1bHQuZG9uZSA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRcdFx0XHRtX2l0ZXJhYmxlc0luZGV4ICs9IDE7XG5cdFx0XHRcdFx0XHRcdG1faXRlcmF0b3IgPSBpdGVyYWJsZXNbbV9pdGVyYWJsZXNJbmRleF0/LltTeW1ib2wuaXRlcmF0b3JdKCk7XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0ZG9uZTogZmFsc2UsXG5cdFx0XHRcdFx0XHRcdHZhbHVlOiByZXN1bHQudmFsdWUsXG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH0gd2hpbGUgKHRydWUpO1xuXHRcdFx0XHR9LFxuXHRcdFx0fTtcblx0XHR9LFxuXHR9O1xufVxudmFyIHZhbGlkUmVjb3JkVG9TdHJpbmdWYWx1ZXMgPSBbXCJbb2JqZWN0IE9iamVjdF1cIiwgXCJbb2JqZWN0IE1vZHVsZV1cIl07XG5mdW5jdGlvbiBpc1JlY29yZCh2YWx1ZSkge1xuXHRpZiAoIXZhbGlkUmVjb3JkVG9TdHJpbmdWYWx1ZXMuaW5jbHVkZXMoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSkpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0Y29uc3QgeyBjb25zdHJ1Y3RvciB9ID0gdmFsdWU7XG5cdGlmIChjb25zdHJ1Y3RvciA9PT0gdm9pZCAwKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0Y29uc3QgcHJvdG90eXBlID0gY29uc3RydWN0b3IucHJvdG90eXBlO1xuXHRpZiAoXG5cdFx0cHJvdG90eXBlID09PSBudWxsIHx8XG5cdFx0dHlwZW9mIHByb3RvdHlwZSAhPT0gXCJvYmplY3RcIiB8fFxuXHRcdCF2YWxpZFJlY29yZFRvU3RyaW5nVmFsdWVzLmluY2x1ZGVzKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm90b3R5cGUpKVxuXHQpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKCFwcm90b3R5cGUuaGFzT3duUHJvcGVydHkoXCJpc1Byb3RvdHlwZU9mXCIpKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gbWVyZ2VSZWNvcmRzJDEodmFsdWVzLCB1dGlscywgbWV0YSkge1xuXHRjb25zdCByZXN1bHQgPSB7fTtcblx0Zm9yIChjb25zdCBrZXkgb2YgZ2V0S2V5cyh2YWx1ZXMpKSB7XG5cdFx0Y29uc3QgcHJvcFZhbHVlcyA9IFtdO1xuXHRcdGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XG5cdFx0XHRpZiAob2JqZWN0SGFzUHJvcGVydHkodmFsdWUsIGtleSkpIHtcblx0XHRcdFx0cHJvcFZhbHVlcy5wdXNoKHZhbHVlW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAocHJvcFZhbHVlcy5sZW5ndGggPT09IDApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHRjb25zdCB1cGRhdGVkTWV0YSA9IHV0aWxzLm1ldGFEYXRhVXBkYXRlcihtZXRhLCB7XG5cdFx0XHRrZXksXG5cdFx0XHRwYXJlbnRzOiB2YWx1ZXMsXG5cdFx0fSk7XG5cdFx0Y29uc3QgcHJvcGVydHlSZXN1bHQgPSBtZXJnZVVua25vd25zKHByb3BWYWx1ZXMsIHV0aWxzLCB1cGRhdGVkTWV0YSk7XG5cdFx0aWYgKHByb3BlcnR5UmVzdWx0ID09PSBhY3Rpb25zLnNraXApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHRpZiAoa2V5ID09PSBcIl9fcHJvdG9fX1wiKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzdWx0LCBrZXksIHtcblx0XHRcdFx0dmFsdWU6IHByb3BlcnR5UmVzdWx0LFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdFtrZXldID0gcHJvcGVydHlSZXN1bHQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtZXJnZUFycmF5cyQxKHZhbHVlcykge1xuXHRyZXR1cm4gdmFsdWVzLmZsYXQoKTtcbn1cbmZ1bmN0aW9uIG1lcmdlU2V0cyQxKHZhbHVlcykge1xuXHRyZXR1cm4gbmV3IFNldChnZXRJdGVyYWJsZU9mSXRlcmFibGVzKHZhbHVlcykpO1xufVxuZnVuY3Rpb24gbWVyZ2VNYXBzJDEodmFsdWVzKSB7XG5cdHJldHVybiBuZXcgTWFwKGdldEl0ZXJhYmxlT2ZJdGVyYWJsZXModmFsdWVzKSk7XG59XG5mdW5jdGlvbiBtZXJnZU90aGVycyQxKHZhbHVlcykge1xuXHRyZXR1cm4gdmFsdWVzLmF0KC0xKTtcbn1cbnZhciBtZXJnZUZ1bmN0aW9ucyA9IHtcblx0bWVyZ2VSZWNvcmRzOiBtZXJnZVJlY29yZHMkMSxcblx0bWVyZ2VBcnJheXM6IG1lcmdlQXJyYXlzJDEsXG5cdG1lcmdlU2V0czogbWVyZ2VTZXRzJDEsXG5cdG1lcmdlTWFwczogbWVyZ2VNYXBzJDEsXG5cdG1lcmdlT3RoZXJzOiBtZXJnZU90aGVycyQxLFxufTtcbmZ1bmN0aW9uIGRlZXBtZXJnZSguLi5vYmplY3RzKSB7XG5cdHJldHVybiBkZWVwbWVyZ2VDdXN0b20oe30pKC4uLm9iamVjdHMpO1xufVxuZnVuY3Rpb24gZGVlcG1lcmdlQ3VzdG9tKG9wdGlvbnMsIHJvb3RNZXRhRGF0YSkge1xuXHRjb25zdCB1dGlscyA9IGdldFV0aWxzKG9wdGlvbnMsIGN1c3RvbWl6ZWREZWVwbWVyZ2UpO1xuXHRmdW5jdGlvbiBjdXN0b21pemVkRGVlcG1lcmdlKC4uLm9iamVjdHMpIHtcblx0XHRyZXR1cm4gbWVyZ2VVbmtub3ducyhvYmplY3RzLCB1dGlscywgcm9vdE1ldGFEYXRhKTtcblx0fVxuXHRyZXR1cm4gY3VzdG9taXplZERlZXBtZXJnZTtcbn1cbmZ1bmN0aW9uIGdldFV0aWxzKG9wdGlvbnMsIGN1c3RvbWl6ZWREZWVwbWVyZ2UpIHtcblx0cmV0dXJuIHtcblx0XHRkZWZhdWx0TWVyZ2VGdW5jdGlvbnM6IG1lcmdlRnVuY3Rpb25zLFxuXHRcdG1lcmdlRnVuY3Rpb25zOiB7XG5cdFx0XHQuLi5tZXJnZUZ1bmN0aW9ucyxcblx0XHRcdC4uLk9iamVjdC5mcm9tRW50cmllcyhcblx0XHRcdFx0T2JqZWN0LmVudHJpZXMob3B0aW9ucylcblx0XHRcdFx0XHQuZmlsdGVyKChba2V5LCBvcHRpb25dKSA9PiBPYmplY3QuaGFzT3duKG1lcmdlRnVuY3Rpb25zLCBrZXkpKVxuXHRcdFx0XHRcdC5tYXAoKFtrZXksIG9wdGlvbl0pID0+IChvcHRpb24gPT09IGZhbHNlID8gW2tleSwgbWVyZ2VGdW5jdGlvbnMubWVyZ2VPdGhlcnNdIDogW2tleSwgb3B0aW9uXSkpXG5cdFx0XHQpLFxuXHRcdH0sXG5cdFx0bWV0YURhdGFVcGRhdGVyOiBvcHRpb25zLm1ldGFEYXRhVXBkYXRlciA/PyBkZWZhdWx0TWV0YURhdGFVcGRhdGVyLFxuXHRcdGRlZXBtZXJnZTogY3VzdG9taXplZERlZXBtZXJnZSxcblx0XHR1c2VJbXBsaWNpdERlZmF1bHRNZXJnaW5nOiBvcHRpb25zLmVuYWJsZUltcGxpY2l0RGVmYXVsdE1lcmdpbmcgPz8gZmFsc2UsXG5cdFx0ZmlsdGVyVmFsdWVzOiBvcHRpb25zLmZpbHRlclZhbHVlcyA9PT0gZmFsc2UgPyB2b2lkIDAgOiAob3B0aW9ucy5maWx0ZXJWYWx1ZXMgPz8gZGVmYXVsdEZpbHRlclZhbHVlcyksXG5cdFx0YWN0aW9ucyxcblx0fTtcbn1cbmZ1bmN0aW9uIG1lcmdlVW5rbm93bnModmFsdWVzLCB1dGlscywgbWV0YSkge1xuXHRjb25zdCBmaWx0ZXJlZFZhbHVlcyA9IHV0aWxzLmZpbHRlclZhbHVlcz8uKHZhbHVlcywgbWV0YSkgPz8gdmFsdWVzO1xuXHRpZiAoZmlsdGVyZWRWYWx1ZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0cmV0dXJuIHZvaWQgMDtcblx0fVxuXHRpZiAoZmlsdGVyZWRWYWx1ZXMubGVuZ3RoID09PSAxKSB7XG5cdFx0cmV0dXJuIG1lcmdlT3RoZXJzKGZpbHRlcmVkVmFsdWVzLCB1dGlscywgbWV0YSk7XG5cdH1cblx0Y29uc3QgdHlwZSA9IGdldE9iamVjdFR5cGUoZmlsdGVyZWRWYWx1ZXNbMF0pO1xuXHRpZiAodHlwZSAhPT0gMCAmJiB0eXBlICE9PSA1KSB7XG5cdFx0Zm9yIChsZXQgbV9pbmRleCA9IDE7IG1faW5kZXggPCBmaWx0ZXJlZFZhbHVlcy5sZW5ndGg7IG1faW5kZXgrKykge1xuXHRcdFx0aWYgKGdldE9iamVjdFR5cGUoZmlsdGVyZWRWYWx1ZXNbbV9pbmRleF0pID09PSB0eXBlKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1lcmdlT3RoZXJzKGZpbHRlcmVkVmFsdWVzLCB1dGlscywgbWV0YSk7XG5cdFx0fVxuXHR9XG5cdHN3aXRjaCAodHlwZSkge1xuXHRcdGNhc2UgMToge1xuXHRcdFx0cmV0dXJuIG1lcmdlUmVjb3JkcyhmaWx0ZXJlZFZhbHVlcywgdXRpbHMsIG1ldGEpO1xuXHRcdH1cblx0XHRjYXNlIDI6IHtcblx0XHRcdHJldHVybiBtZXJnZUFycmF5cyhmaWx0ZXJlZFZhbHVlcywgdXRpbHMsIG1ldGEpO1xuXHRcdH1cblx0XHRjYXNlIDM6IHtcblx0XHRcdHJldHVybiBtZXJnZVNldHMoZmlsdGVyZWRWYWx1ZXMsIHV0aWxzLCBtZXRhKTtcblx0XHR9XG5cdFx0Y2FzZSA0OiB7XG5cdFx0XHRyZXR1cm4gbWVyZ2VNYXBzKGZpbHRlcmVkVmFsdWVzLCB1dGlscywgbWV0YSk7XG5cdFx0fVxuXHRcdGRlZmF1bHQ6IHtcblx0XHRcdHJldHVybiBtZXJnZU90aGVycyhmaWx0ZXJlZFZhbHVlcywgdXRpbHMsIG1ldGEpO1xuXHRcdH1cblx0fVxufVxuZnVuY3Rpb24gbWVyZ2VSZWNvcmRzKHZhbHVlcywgdXRpbHMsIG1ldGEpIHtcblx0Y29uc3QgcmVzdWx0ID0gdXRpbHMubWVyZ2VGdW5jdGlvbnMubWVyZ2VSZWNvcmRzKHZhbHVlcywgdXRpbHMsIG1ldGEpO1xuXHRpZiAoXG5cdFx0cmVzdWx0ID09PSBhY3Rpb25zLmRlZmF1bHRNZXJnZSB8fFxuXHRcdCh1dGlscy51c2VJbXBsaWNpdERlZmF1bHRNZXJnaW5nICYmXG5cdFx0XHRyZXN1bHQgPT09IHZvaWQgMCAmJlxuXHRcdFx0dXRpbHMubWVyZ2VGdW5jdGlvbnMubWVyZ2VSZWNvcmRzICE9PSB1dGlscy5kZWZhdWx0TWVyZ2VGdW5jdGlvbnMubWVyZ2VSZWNvcmRzKVxuXHQpIHtcblx0XHRyZXR1cm4gdXRpbHMuZGVmYXVsdE1lcmdlRnVuY3Rpb25zLm1lcmdlUmVjb3Jkcyh2YWx1ZXMsIHV0aWxzLCBtZXRhKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbWVyZ2VBcnJheXModmFsdWVzLCB1dGlscywgbWV0YSkge1xuXHRjb25zdCByZXN1bHQgPSB1dGlscy5tZXJnZUZ1bmN0aW9ucy5tZXJnZUFycmF5cyh2YWx1ZXMsIHV0aWxzLCBtZXRhKTtcblx0aWYgKFxuXHRcdHJlc3VsdCA9PT0gYWN0aW9ucy5kZWZhdWx0TWVyZ2UgfHxcblx0XHQodXRpbHMudXNlSW1wbGljaXREZWZhdWx0TWVyZ2luZyAmJlxuXHRcdFx0cmVzdWx0ID09PSB2b2lkIDAgJiZcblx0XHRcdHV0aWxzLm1lcmdlRnVuY3Rpb25zLm1lcmdlQXJyYXlzICE9PSB1dGlscy5kZWZhdWx0TWVyZ2VGdW5jdGlvbnMubWVyZ2VBcnJheXMpXG5cdCkge1xuXHRcdHJldHVybiB1dGlscy5kZWZhdWx0TWVyZ2VGdW5jdGlvbnMubWVyZ2VBcnJheXModmFsdWVzKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbWVyZ2VTZXRzKHZhbHVlcywgdXRpbHMsIG1ldGEpIHtcblx0Y29uc3QgcmVzdWx0ID0gdXRpbHMubWVyZ2VGdW5jdGlvbnMubWVyZ2VTZXRzKHZhbHVlcywgdXRpbHMsIG1ldGEpO1xuXHRpZiAoXG5cdFx0cmVzdWx0ID09PSBhY3Rpb25zLmRlZmF1bHRNZXJnZSB8fFxuXHRcdCh1dGlscy51c2VJbXBsaWNpdERlZmF1bHRNZXJnaW5nICYmXG5cdFx0XHRyZXN1bHQgPT09IHZvaWQgMCAmJlxuXHRcdFx0dXRpbHMubWVyZ2VGdW5jdGlvbnMubWVyZ2VTZXRzICE9PSB1dGlscy5kZWZhdWx0TWVyZ2VGdW5jdGlvbnMubWVyZ2VTZXRzKVxuXHQpIHtcblx0XHRyZXR1cm4gdXRpbHMuZGVmYXVsdE1lcmdlRnVuY3Rpb25zLm1lcmdlU2V0cyh2YWx1ZXMpO1xuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtZXJnZU1hcHModmFsdWVzLCB1dGlscywgbWV0YSkge1xuXHRjb25zdCByZXN1bHQgPSB1dGlscy5tZXJnZUZ1bmN0aW9ucy5tZXJnZU1hcHModmFsdWVzLCB1dGlscywgbWV0YSk7XG5cdGlmIChcblx0XHRyZXN1bHQgPT09IGFjdGlvbnMuZGVmYXVsdE1lcmdlIHx8XG5cdFx0KHV0aWxzLnVzZUltcGxpY2l0RGVmYXVsdE1lcmdpbmcgJiZcblx0XHRcdHJlc3VsdCA9PT0gdm9pZCAwICYmXG5cdFx0XHR1dGlscy5tZXJnZUZ1bmN0aW9ucy5tZXJnZU1hcHMgIT09IHV0aWxzLmRlZmF1bHRNZXJnZUZ1bmN0aW9ucy5tZXJnZU1hcHMpXG5cdCkge1xuXHRcdHJldHVybiB1dGlscy5kZWZhdWx0TWVyZ2VGdW5jdGlvbnMubWVyZ2VNYXBzKHZhbHVlcyk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1lcmdlT3RoZXJzKHZhbHVlcywgdXRpbHMsIG1ldGEpIHtcblx0Y29uc3QgcmVzdWx0ID0gdXRpbHMubWVyZ2VGdW5jdGlvbnMubWVyZ2VPdGhlcnModmFsdWVzLCB1dGlscywgbWV0YSk7XG5cdGlmIChcblx0XHRyZXN1bHQgPT09IGFjdGlvbnMuZGVmYXVsdE1lcmdlIHx8XG5cdFx0KHV0aWxzLnVzZUltcGxpY2l0RGVmYXVsdE1lcmdpbmcgJiZcblx0XHRcdHJlc3VsdCA9PT0gdm9pZCAwICYmXG5cdFx0XHR1dGlscy5tZXJnZUZ1bmN0aW9ucy5tZXJnZU90aGVycyAhPT0gdXRpbHMuZGVmYXVsdE1lcmdlRnVuY3Rpb25zLm1lcmdlT3RoZXJzKVxuXHQpIHtcblx0XHRyZXR1cm4gdXRpbHMuZGVmYXVsdE1lcmdlRnVuY3Rpb25zLm1lcmdlT3RoZXJzKHZhbHVlcyk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gc3JjL25leHQvZXJyb3JzL2JhaWxvdXQtdG8tY3NyLnRzXG52YXIgQkFJTE9VVF9UT19DU1IgPSBcIkJBSUxPVVRfVE9fQ0xJRU5UX1NJREVfUkVOREVSSU5HXCI7XG5mdW5jdGlvbiBpc0JhaWxvdXRUb0NTUkVycm9yKGVycikge1xuXHRpZiAodHlwZW9mIGVyciAhPT0gXCJvYmplY3RcIiB8fCBlcnIgPT09IG51bGwgfHwgIShcImRpZ2VzdFwiIGluIGVycikpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuIGVyci5kaWdlc3QgPT09IEJBSUxPVVRfVE9fQ1NSO1xufVxuXG4vLyBzcmMvbmV4dC9lcnJvcnMvaHR0cC1hY2Nlc3MtZmFsbGJhY2sudHNcbnZhciBIVFRQQWNjZXNzRXJyb3JTdGF0dXMgPSB7XG5cdE5PVF9GT1VORDogNDA0LFxuXHRGT1JCSURERU46IDQwMyxcblx0VU5BVVRIT1JJWkVEOiA0MDEsXG59O1xudmFyIEFMTE9XRURfQ09ERVMgPSBuZXcgU2V0KE9iamVjdC52YWx1ZXMoSFRUUEFjY2Vzc0Vycm9yU3RhdHVzKSk7XG52YXIgSFRUUF9FUlJPUl9GQUxMQkFDS19FUlJPUl9DT0RFID0gXCJORVhUX0hUVFBfRVJST1JfRkFMTEJBQ0tcIjtcbmZ1bmN0aW9uIGlzSFRUUEFjY2Vzc0ZhbGxiYWNrRXJyb3IoZXJyb3IpIHtcblx0aWYgKHR5cGVvZiBlcnJvciAhPT0gXCJvYmplY3RcIiB8fCBlcnJvciA9PT0gbnVsbCB8fCAhKFwiZGlnZXN0XCIgaW4gZXJyb3IpIHx8IHR5cGVvZiBlcnJvci5kaWdlc3QgIT09IFwic3RyaW5nXCIpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0Y29uc3QgW3ByZWZpeCwgaHR0cFN0YXR1c10gPSBlcnJvci5kaWdlc3Quc3BsaXQoXCI7XCIpO1xuXHRyZXR1cm4gcHJlZml4ID09PSBIVFRQX0VSUk9SX0ZBTExCQUNLX0VSUk9SX0NPREUgJiYgQUxMT1dFRF9DT0RFUy5oYXMoTnVtYmVyKGh0dHBTdGF0dXMpKTtcbn1cbmZ1bmN0aW9uIGdldEFjY2Vzc0ZhbGxiYWNrSFRUUFN0YXR1cyhlcnJvcikge1xuXHRjb25zdCBodHRwU3RhdHVzID0gZXJyb3IuZGlnZXN0LnNwbGl0KFwiO1wiKVsxXTtcblx0cmV0dXJuIE51bWJlcihodHRwU3RhdHVzKTtcbn1cblxuLy8gc3JjL25leHQvZXJyb3JzL3JlZGlyZWN0LnRzXG52YXIgUmVkaXJlY3RTdGF0dXNDb2RlID0gLyogQF9fUFVSRV9fICovICgoUmVkaXJlY3RTdGF0dXNDb2RlMikgPT4ge1xuXHRSZWRpcmVjdFN0YXR1c0NvZGUyWyhSZWRpcmVjdFN0YXR1c0NvZGUyW1wiU2VlT3RoZXJcIl0gPSAzMDMpXSA9IFwiU2VlT3RoZXJcIjtcblx0UmVkaXJlY3RTdGF0dXNDb2RlMlsoUmVkaXJlY3RTdGF0dXNDb2RlMltcIlRlbXBvcmFyeVJlZGlyZWN0XCJdID0gMzA3KV0gPSBcIlRlbXBvcmFyeVJlZGlyZWN0XCI7XG5cdFJlZGlyZWN0U3RhdHVzQ29kZTJbKFJlZGlyZWN0U3RhdHVzQ29kZTJbXCJQZXJtYW5lbnRSZWRpcmVjdFwiXSA9IDMwOCldID0gXCJQZXJtYW5lbnRSZWRpcmVjdFwiO1xuXHRyZXR1cm4gUmVkaXJlY3RTdGF0dXNDb2RlMjtcbn0pKFJlZGlyZWN0U3RhdHVzQ29kZSB8fCB7fSk7XG52YXIgUkVESVJFQ1RfRVJST1JfQ09ERSA9IFwiTkVYVF9SRURJUkVDVFwiO1xuZnVuY3Rpb24gaXNSZWRpcmVjdEVycm9yKGVycm9yKSB7XG5cdGlmICh0eXBlb2YgZXJyb3IgIT09IFwib2JqZWN0XCIgfHwgZXJyb3IgPT09IG51bGwgfHwgIShcImRpZ2VzdFwiIGluIGVycm9yKSB8fCB0eXBlb2YgZXJyb3IuZGlnZXN0ICE9PSBcInN0cmluZ1wiKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGNvbnN0IGRpZ2VzdCA9IGVycm9yLmRpZ2VzdC5zcGxpdChcIjtcIik7XG5cdGNvbnN0IFtlcnJvckNvZGUsIHR5cGVdID0gZGlnZXN0O1xuXHRjb25zdCBkZXN0aW5hdGlvbiA9IGRpZ2VzdC5zbGljZSgyLCAtMikuam9pbihcIjtcIik7XG5cdGNvbnN0IHN0YXR1cyA9IGRpZ2VzdC5hdCgtMik7XG5cdGNvbnN0IHN0YXR1c0NvZGUgPSBOdW1iZXIoc3RhdHVzKTtcblx0cmV0dXJuIChcblx0XHRlcnJvckNvZGUgPT09IFJFRElSRUNUX0VSUk9SX0NPREUgJiZcblx0XHQodHlwZSA9PT0gXCJyZXBsYWNlXCIgfHwgdHlwZSA9PT0gXCJwdXNoXCIpICYmXG5cdFx0dHlwZW9mIGRlc3RpbmF0aW9uID09PSBcInN0cmluZ1wiICYmXG5cdFx0IWlzTmFOKHN0YXR1c0NvZGUpICYmXG5cdFx0c3RhdHVzQ29kZSBpbiBSZWRpcmVjdFN0YXR1c0NvZGVcblx0KTtcbn1cblxuLy8gc3JjL25leHQvZXJyb3JzL3JvdXRlci50c1xuZnVuY3Rpb24gaXNOZXh0Um91dGVyRXJyb3IoZXJyb3IpIHtcblx0cmV0dXJuIGlzUmVkaXJlY3RFcnJvcihlcnJvcikgfHwgaXNIVFRQQWNjZXNzRmFsbGJhY2tFcnJvcihlcnJvcik7XG59XG5cbi8vIHNyYy9uZXh0L2Vycm9ycy9keW5hbWljLXVzYWdlLnRzXG52YXIgRFlOQU1JQ19FUlJPUl9DT0RFID0gXCJEWU5BTUlDX1NFUlZFUl9VU0FHRVwiO1xuZnVuY3Rpb24gaXNEeW5hbWljU2VydmVyRXJyb3IoZXJyKSB7XG5cdGlmICh0eXBlb2YgZXJyICE9PSBcIm9iamVjdFwiIHx8IGVyciA9PT0gbnVsbCB8fCAhKFwiZGlnZXN0XCIgaW4gZXJyKSB8fCB0eXBlb2YgZXJyLmRpZ2VzdCAhPT0gXCJzdHJpbmdcIikge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gZXJyLmRpZ2VzdCA9PT0gRFlOQU1JQ19FUlJPUl9DT0RFO1xufVxuZnVuY3Rpb24gaXNEeW5hbWljUG9zdHBvbmVSZWFzb24ocmVhc29uKSB7XG5cdHJldHVybiAoXG5cdFx0cmVhc29uLmluY2x1ZGVzKFwibmVlZHMgdG8gYmFpbCBvdXQgb2YgcHJlcmVuZGVyaW5nIGF0IHRoaXMgcG9pbnQgYmVjYXVzZSBpdCB1c2VkXCIpICYmXG5cdFx0cmVhc29uLmluY2x1ZGVzKFwiTGVhcm4gbW9yZTogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvcHByLWNhdWdodC1lcnJvclwiKVxuXHQpO1xufVxuZnVuY3Rpb24gaXNEeW5hbWljUG9zdHBvbmUoZXJyKSB7XG5cdGlmIChcblx0XHR0eXBlb2YgZXJyID09PSBcIm9iamVjdFwiICYmXG5cdFx0ZXJyICE9PSBudWxsICYmIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXHRcdHR5cGVvZiBlcnIubWVzc2FnZSA9PT0gXCJzdHJpbmdcIlxuXHQpIHtcblx0XHRyZXR1cm4gaXNEeW5hbWljUG9zdHBvbmVSZWFzb24oZXJyLm1lc3NhZ2UpO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn1cbnZhciBpc0R5bmFtaWNVc2FnZUVycm9yID0gKGVycikgPT5cblx0aXNEeW5hbWljU2VydmVyRXJyb3IoZXJyKSB8fCBpc0JhaWxvdXRUb0NTUkVycm9yKGVycikgfHwgaXNOZXh0Um91dGVyRXJyb3IoZXJyKSB8fCBpc0R5bmFtaWNQb3N0cG9uZShlcnIpO1xuXG4vLyBzcmMvbmV4dC9lcnJvcnMvcG9zdHBvbmUudHNcbnZhciBSRUFDVF9QT1NUUE9ORV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnBvc3Rwb25lXCIpO1xuZnVuY3Rpb24gaXNQb3N0cG9uZShlcnJvcikge1xuXHRyZXR1cm4gKFxuXHRcdHR5cGVvZiBlcnJvciA9PT0gXCJvYmplY3RcIiAmJlxuXHRcdGVycm9yICE9PSBudWxsICYmIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXHRcdGVycm9yLiQkdHlwZW9mID09PSBSRUFDVF9QT1NUUE9ORV9UWVBFXG5cdCk7XG59XG5cbi8vIHNyYy9uZXh0L2Vycm9ycy9pbmRleC50c1xuZnVuY3Rpb24gaXNOb3RGb3VuZEVycm9yKGVycm9yKSB7XG5cdHJldHVybiBpc0hUVFBBY2Nlc3NGYWxsYmFja0Vycm9yKGVycm9yKSAmJiBnZXRBY2Nlc3NGYWxsYmFja0hUVFBTdGF0dXMoZXJyb3IpID09PSA0MDQ7XG59XG5mdW5jdGlvbiBpc0ZvcmJpZGRlbkVycm9yKGVycm9yKSB7XG5cdHJldHVybiBpc0hUVFBBY2Nlc3NGYWxsYmFja0Vycm9yKGVycm9yKSAmJiBnZXRBY2Nlc3NGYWxsYmFja0hUVFBTdGF0dXMoZXJyb3IpID09PSA0MDM7XG59XG5mdW5jdGlvbiBpc1VuYXV0aG9yaXplZEVycm9yKGVycm9yKSB7XG5cdHJldHVybiBpc0hUVFBBY2Nlc3NGYWxsYmFja0Vycm9yKGVycm9yKSAmJiBnZXRBY2Nlc3NGYWxsYmFja0hUVFBTdGF0dXMoZXJyb3IpID09PSA0MDE7XG59XG5mdW5jdGlvbiBpc0ZyYW1ld29ya0Vycm9yKGVycm9yKSB7XG5cdHJldHVybiBpc05leHRSb3V0ZXJFcnJvcihlcnJvcikgfHwgaXNCYWlsb3V0VG9DU1JFcnJvcihlcnJvcikgfHwgaXNEeW5hbWljVXNhZ2VFcnJvcihlcnJvcikgfHwgaXNQb3N0cG9uZShlcnJvcik7XG59XG5cbi8vIHNyYy91dGlscy50c1xudmFyIERFRkFVTFRfU0VSVkVSX0VSUk9SX01FU1NBR0UgPSBcIlNvbWV0aGluZyB3ZW50IHdyb25nIHdoaWxlIGV4ZWN1dGluZyB0aGUgb3BlcmF0aW9uLlwiO1xudmFyIGlzRXJyb3IgPSAoZXJyb3IpID0+IGVycm9yIGluc3RhbmNlb2YgRXJyb3I7XG52YXIgd2lubmluZ0Jvb2xlYW4gPSAoLi4uYXJncykgPT4ge1xuXHRyZXR1cm4gYXJncy5yZWR1Y2UoKGFjYywgdikgPT4gKHR5cGVvZiB2ID09PSBcImJvb2xlYW5cIiA/IHYgOiBhY2MpLCBmYWxzZSk7XG59O1xuXG4vLyBzcmMvdmFsaWRhdGlvbi1lcnJvcnMudHNcbnZhciBidWlsZFZhbGlkYXRpb25FcnJvcnMgPSAoaXNzdWVzKSA9PiB7XG5cdGNvbnN0IHZlID0ge307XG5cdGZvciAoY29uc3QgaXNzdWUgb2YgaXNzdWVzKSB7XG5cdFx0Y29uc3QgeyBwYXRoLCBtZXNzYWdlIH0gPSBpc3N1ZTtcblx0XHRpZiAoIXBhdGggfHwgcGF0aC5sZW5ndGggPT09IDApIHtcblx0XHRcdHZlLl9lcnJvcnMgPSB2ZS5fZXJyb3JzID8gWy4uLnZlLl9lcnJvcnMsIG1lc3NhZ2VdIDogW21lc3NhZ2VdO1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXHRcdGxldCByZWYgPSB2ZTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHBhdGgubGVuZ3RoIC0gMTsgaSsrKSB7XG5cdFx0XHRjb25zdCBrID0gcGF0aFtpXTtcblx0XHRcdGlmICghcmVmW2tdKSB7XG5cdFx0XHRcdHJlZltrXSA9IHt9O1xuXHRcdFx0fVxuXHRcdFx0cmVmID0gcmVmW2tdO1xuXHRcdH1cblx0XHRjb25zdCBrZXkgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG5cdFx0cmVmW2tleV0gPSByZWZba2V5XT8uX2Vycm9yc1xuXHRcdFx0PyB7XG5cdFx0XHRcdFx0Li4uc3RydWN0dXJlZENsb25lKHJlZltrZXldKSxcblx0XHRcdFx0XHRfZXJyb3JzOiBbLi4ucmVmW2tleV0uX2Vycm9ycywgbWVzc2FnZV0sXG5cdFx0XHRcdH1cblx0XHRcdDogeyAuLi5zdHJ1Y3R1cmVkQ2xvbmUocmVmW2tleV0pLCBfZXJyb3JzOiBbbWVzc2FnZV0gfTtcblx0fVxuXHRyZXR1cm4gdmU7XG59O1xudmFyIEFjdGlvblNlcnZlclZhbGlkYXRpb25FcnJvciA9IGNsYXNzIGV4dGVuZHMgRXJyb3Ige1xuXHR2YWxpZGF0aW9uRXJyb3JzO1xuXHRjb25zdHJ1Y3Rvcih2YWxpZGF0aW9uRXJyb3JzKSB7XG5cdFx0c3VwZXIoXCJTZXJ2ZXIgQWN0aW9uIHNlcnZlciB2YWxpZGF0aW9uIGVycm9yKHMpIG9jY3VycmVkXCIpO1xuXHRcdHRoaXMudmFsaWRhdGlvbkVycm9ycyA9IHZhbGlkYXRpb25FcnJvcnM7XG5cdH1cbn07XG52YXIgQWN0aW9uVmFsaWRhdGlvbkVycm9yID0gY2xhc3MgZXh0ZW5kcyBFcnJvciB7XG5cdHZhbGlkYXRpb25FcnJvcnM7XG5cdGNvbnN0cnVjdG9yKHZhbGlkYXRpb25FcnJvcnMpIHtcblx0XHRzdXBlcihcIlNlcnZlciBBY3Rpb24gdmFsaWRhdGlvbiBlcnJvcihzKSBvY2N1cnJlZFwiKTtcblx0XHR0aGlzLnZhbGlkYXRpb25FcnJvcnMgPSB2YWxpZGF0aW9uRXJyb3JzO1xuXHR9XG59O1xuZnVuY3Rpb24gcmV0dXJuVmFsaWRhdGlvbkVycm9ycyhzY2hlbWEsIHZhbGlkYXRpb25FcnJvcnMpIHtcblx0dGhyb3cgbmV3IEFjdGlvblNlcnZlclZhbGlkYXRpb25FcnJvcih2YWxpZGF0aW9uRXJyb3JzKTtcbn1cbmZ1bmN0aW9uIGZvcm1hdFZhbGlkYXRpb25FcnJvcnModmFsaWRhdGlvbkVycm9ycykge1xuXHRyZXR1cm4gdmFsaWRhdGlvbkVycm9ycztcbn1cbmZ1bmN0aW9uIGZvcm1hdEJpbmRBcmdzVmFsaWRhdGlvbkVycm9ycyhiaW5kQXJnc1ZhbGlkYXRpb25FcnJvcnMpIHtcblx0cmV0dXJuIGJpbmRBcmdzVmFsaWRhdGlvbkVycm9ycztcbn1cbmZ1bmN0aW9uIGZsYXR0ZW5WYWxpZGF0aW9uRXJyb3JzKHZhbGlkYXRpb25FcnJvcnMpIHtcblx0Y29uc3QgZmxhdHRlbmVkID0ge1xuXHRcdGZvcm1FcnJvcnM6IFtdLFxuXHRcdGZpZWxkRXJyb3JzOiB7fSxcblx0fTtcblx0Zm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModmFsaWRhdGlvbkVycm9ycyA/PyB7fSkpIHtcblx0XHRpZiAoa2V5ID09PSBcIl9lcnJvcnNcIiAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0ZmxhdHRlbmVkLmZvcm1FcnJvcnMgPSBbLi4udmFsdWVdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoXCJfZXJyb3JzXCIgaW4gdmFsdWUpIHtcblx0XHRcdFx0ZmxhdHRlbmVkLmZpZWxkRXJyb3JzW2tleV0gPSBbLi4udmFsdWUuX2Vycm9yc107XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiBmbGF0dGVuZWQ7XG59XG5mdW5jdGlvbiBmbGF0dGVuQmluZEFyZ3NWYWxpZGF0aW9uRXJyb3JzKGJpbmRBcmdzVmFsaWRhdGlvbkVycm9ycykge1xuXHRyZXR1cm4gYmluZEFyZ3NWYWxpZGF0aW9uRXJyb3JzLm1hcCgodmUpID0+IGZsYXR0ZW5WYWxpZGF0aW9uRXJyb3JzKHZlKSk7XG59XG52YXIgQWN0aW9uTWV0YWRhdGFWYWxpZGF0aW9uRXJyb3IgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcblx0dmFsaWRhdGlvbkVycm9ycztcblx0Y29uc3RydWN0b3IodmFsaWRhdGlvbkVycm9ycykge1xuXHRcdHN1cGVyKFwiSW52YWxpZCBtZXRhZGF0YSBpbnB1dC4gUGxlYXNlIGJlIHN1cmUgdG8gcGFzcyBtZXRhZGF0YSB2aWEgYG1ldGFkYXRhYCBtZXRob2QgYmVmb3JlIGRlZmluaW5nIHRoZSBhY3Rpb24uXCIpO1xuXHRcdHRoaXMubmFtZSA9IFwiQWN0aW9uTWV0YWRhdGFFcnJvclwiO1xuXHRcdHRoaXMudmFsaWRhdGlvbkVycm9ycyA9IHZhbGlkYXRpb25FcnJvcnM7XG5cdH1cbn07XG52YXIgQWN0aW9uT3V0cHV0RGF0YVZhbGlkYXRpb25FcnJvciA9IGNsYXNzIGV4dGVuZHMgRXJyb3Ige1xuXHR2YWxpZGF0aW9uRXJyb3JzO1xuXHRjb25zdHJ1Y3Rvcih2YWxpZGF0aW9uRXJyb3JzKSB7XG5cdFx0c3VwZXIoXG5cdFx0XHRcIkludmFsaWQgYWN0aW9uIGRhdGEgKG91dHB1dCkuIFBsZWFzZSBiZSBzdXJlIHRvIHJldHVybiBkYXRhIGZvbGxvd2luZyB0aGUgc2hhcGUgb2YgdGhlIHNjaGVtYSBwYXNzZWQgdG8gYGRhdGFTY2hlbWFgIG1ldGhvZC5cIlxuXHRcdCk7XG5cdFx0dGhpcy5uYW1lID0gXCJBY3Rpb25PdXRwdXREYXRhRXJyb3JcIjtcblx0XHR0aGlzLnZhbGlkYXRpb25FcnJvcnMgPSB2YWxpZGF0aW9uRXJyb3JzO1xuXHR9XG59O1xuXG4vLyBzcmMvYWN0aW9uLWJ1aWxkZXIudHNcbmZ1bmN0aW9uIGFjdGlvbkJ1aWxkZXIoYXJncykge1xuXHRjb25zdCBiaW5kQXJnc1NjaGVtYXMgPSBhcmdzLmJpbmRBcmdzU2NoZW1hcyA/PyBbXTtcblx0ZnVuY3Rpb24gYnVpbGRBY3Rpb24oeyB3aXRoU3RhdGUgfSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRhY3Rpb246IChzZXJ2ZXJDb2RlRm4sIHV0aWxzKSA9PiB7XG5cdFx0XHRcdHJldHVybiBhc3luYyAoLi4uY2xpZW50SW5wdXRzKSA9PiB7XG5cdFx0XHRcdFx0bGV0IGN1cnJlbnRDdHggPSB7fTtcblx0XHRcdFx0XHRjb25zdCBtaWRkbGV3YXJlUmVzdWx0ID0geyBzdWNjZXNzOiBmYWxzZSB9O1xuXHRcdFx0XHRcdGxldCBwcmV2UmVzdWx0ID0gdm9pZCAwO1xuXHRcdFx0XHRcdGNvbnN0IHBhcnNlZElucHV0RGF0YXMgPSBbXTtcblx0XHRcdFx0XHRsZXQgZnJhbWV3b3JrRXJyb3IgPSBudWxsO1xuXHRcdFx0XHRcdGlmICh3aXRoU3RhdGUpIHtcblx0XHRcdFx0XHRcdHByZXZSZXN1bHQgPSBjbGllbnRJbnB1dHMuc3BsaWNlKGJpbmRBcmdzU2NoZW1hcy5sZW5ndGgsIDEpWzBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoYmluZEFyZ3NTY2hlbWFzLmxlbmd0aCArIDEgPiBjbGllbnRJbnB1dHMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRjbGllbnRJbnB1dHMucHVzaCh2b2lkIDApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb25zdCBleGVjdXRlTWlkZGxld2FyZVN0YWNrID0gYXN5bmMgKGlkeCA9IDApID0+IHtcblx0XHRcdFx0XHRcdGlmIChmcmFtZXdvcmtFcnJvcikge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRjb25zdCBtaWRkbGV3YXJlRm4gPSBhcmdzLm1pZGRsZXdhcmVGbnNbaWR4XTtcblx0XHRcdFx0XHRcdG1pZGRsZXdhcmVSZXN1bHQuY3R4ID0gY3VycmVudEN0eDtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdGlmIChpZHggPT09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoYXJncy5tZXRhZGF0YVNjaGVtYSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29uc3QgcGFyc2VkTWQgPSBhd2FpdCBhcmdzLnZhbGlkYXRpb25BZGFwdGVyLnZhbGlkYXRlKGFyZ3MubWV0YWRhdGFTY2hlbWEsIGFyZ3MubWV0YWRhdGEpO1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCFwYXJzZWRNZC5zdWNjZXNzKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBBY3Rpb25NZXRhZGF0YVZhbGlkYXRpb25FcnJvcihidWlsZFZhbGlkYXRpb25FcnJvcnMocGFyc2VkTWQuaXNzdWVzKSk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmIChtaWRkbGV3YXJlRm4pIHtcblx0XHRcdFx0XHRcdFx0XHRhd2FpdCBtaWRkbGV3YXJlRm4oe1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2xpZW50SW5wdXQ6IGNsaWVudElucHV0cy5hdCgtMSksXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBwYXNzIHJhdyBjbGllbnQgaW5wdXRcblx0XHRcdFx0XHRcdFx0XHRcdGJpbmRBcmdzQ2xpZW50SW5wdXRzOiBiaW5kQXJnc1NjaGVtYXMubGVuZ3RoID8gY2xpZW50SW5wdXRzLnNsaWNlKDAsIC0xKSA6IFtdLFxuXHRcdFx0XHRcdFx0XHRcdFx0Y3R4OiBjdXJyZW50Q3R4LFxuXHRcdFx0XHRcdFx0XHRcdFx0bWV0YWRhdGE6IGFyZ3MubWV0YWRhdGEsXG5cdFx0XHRcdFx0XHRcdFx0XHRuZXh0OiBhc3luYyAobmV4dE9wdHMpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudEN0eCA9IGRlZXBtZXJnZShjdXJyZW50Q3R4LCBuZXh0T3B0cz8uY3R4ID8/IHt9KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0YXdhaXQgZXhlY3V0ZU1pZGRsZXdhcmVTdGFjayhpZHggKyAxKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIG1pZGRsZXdhcmVSZXN1bHQ7XG5cdFx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IHBhcnNlZElucHV0cyA9IGF3YWl0IFByb21pc2UuYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0Y2xpZW50SW5wdXRzLm1hcChhc3luYyAoaW5wdXQsIGkpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKGkgPT09IGNsaWVudElucHV0cy5sZW5ndGggLSAxKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBhcmdzLmlucHV0U2NoZW1hRm4gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHN1Y2Nlc3M6IHRydWUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRhdGE6IHZvaWQgMCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBhcmdzLnZhbGlkYXRpb25BZGFwdGVyLnZhbGlkYXRlKGF3YWl0IGFyZ3MuaW5wdXRTY2hlbWFGbigpLCBpbnB1dCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGFyZ3MudmFsaWRhdGlvbkFkYXB0ZXIudmFsaWRhdGUoYmluZEFyZ3NTY2hlbWFzW2ldLCBpbnB1dCk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0bGV0IGhhc0JpbmRWYWxpZGF0aW9uRXJyb3JzID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgYmluZEFyZ3NWYWxpZGF0aW9uRXJyb3JzID0gQXJyYXkocGFyc2VkSW5wdXRzLmxlbmd0aCAtIDEpLmZpbGwoe30pO1xuXHRcdFx0XHRcdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcGFyc2VkSW5wdXRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBwYXJzZWRJbnB1dCA9IHBhcnNlZElucHV0c1tpXTtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChwYXJzZWRJbnB1dC5zdWNjZXNzKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBhcnNlZElucHV0RGF0YXMucHVzaChwYXJzZWRJbnB1dC5kYXRhKTtcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChpIDwgcGFyc2VkSW5wdXRzLmxlbmd0aCAtIDEpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRiaW5kQXJnc1ZhbGlkYXRpb25FcnJvcnNbaV0gPSBidWlsZFZhbGlkYXRpb25FcnJvcnMocGFyc2VkSW5wdXQuaXNzdWVzKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRoYXNCaW5kVmFsaWRhdGlvbkVycm9ycyA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y29uc3QgdmFsaWRhdGlvbkVycm9ycyA9IGJ1aWxkVmFsaWRhdGlvbkVycm9ycyhwYXJzZWRJbnB1dC5pc3N1ZXMpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZGRsZXdhcmVSZXN1bHQudmFsaWRhdGlvbkVycm9ycyA9IGF3YWl0IFByb21pc2UucmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MuaGFuZGxlVmFsaWRhdGlvbkVycm9yc1NoYXBlKHZhbGlkYXRpb25FcnJvcnMsIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2xpZW50SW5wdXQ6IGNsaWVudElucHV0cy5hdCgtMSksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJpbmRBcmdzQ2xpZW50SW5wdXRzOiBiaW5kQXJnc1NjaGVtYXMubGVuZ3RoID8gY2xpZW50SW5wdXRzLnNsaWNlKDAsIC0xKSA6IFtdLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjdHg6IGN1cnJlbnRDdHgsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1ldGFkYXRhOiBhcmdzLm1ldGFkYXRhLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGlmIChoYXNCaW5kVmFsaWRhdGlvbkVycm9ycykge1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlkZGxld2FyZVJlc3VsdC5iaW5kQXJnc1ZhbGlkYXRpb25FcnJvcnMgPSBhd2FpdCBQcm9taXNlLnJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MuaGFuZGxlQmluZEFyZ3NWYWxpZGF0aW9uRXJyb3JzU2hhcGUoYmluZEFyZ3NWYWxpZGF0aW9uRXJyb3JzLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2xpZW50SW5wdXQ6IGNsaWVudElucHV0cy5hdCgtMSksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YmluZEFyZ3NDbGllbnRJbnB1dHM6IGJpbmRBcmdzU2NoZW1hcy5sZW5ndGggPyBjbGllbnRJbnB1dHMuc2xpY2UoMCwgLTEpIDogW10sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y3R4OiBjdXJyZW50Q3R4LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1ldGFkYXRhOiBhcmdzLm1ldGFkYXRhLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0aWYgKG1pZGRsZXdhcmVSZXN1bHQudmFsaWRhdGlvbkVycm9ycyB8fCBtaWRkbGV3YXJlUmVzdWx0LmJpbmRBcmdzVmFsaWRhdGlvbkVycm9ycykge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRjb25zdCBzY2ZBcmdzID0gW107XG5cdFx0XHRcdFx0XHRcdFx0c2NmQXJnc1swXSA9IHtcblx0XHRcdFx0XHRcdFx0XHRcdHBhcnNlZElucHV0OiBwYXJzZWRJbnB1dERhdGFzLmF0KC0xKSxcblx0XHRcdFx0XHRcdFx0XHRcdGJpbmRBcmdzUGFyc2VkSW5wdXRzOiBwYXJzZWRJbnB1dERhdGFzLnNsaWNlKDAsIC0xKSxcblx0XHRcdFx0XHRcdFx0XHRcdGNsaWVudElucHV0OiBjbGllbnRJbnB1dHMuYXQoLTEpLFxuXHRcdFx0XHRcdFx0XHRcdFx0YmluZEFyZ3NDbGllbnRJbnB1dHM6IGJpbmRBcmdzU2NoZW1hcy5sZW5ndGggPyBjbGllbnRJbnB1dHMuc2xpY2UoMCwgLTEpIDogW10sXG5cdFx0XHRcdFx0XHRcdFx0XHRjdHg6IGN1cnJlbnRDdHgsXG5cdFx0XHRcdFx0XHRcdFx0XHRtZXRhZGF0YTogYXJncy5tZXRhZGF0YSxcblx0XHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0XHRcdGlmICh3aXRoU3RhdGUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHNjZkFyZ3NbMV0gPSB7IHByZXZSZXN1bHQ6IHN0cnVjdHVyZWRDbG9uZShwcmV2UmVzdWx0KSB9O1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRjb25zdCBkYXRhID0gYXdhaXQgc2VydmVyQ29kZUZuKC4uLnNjZkFyZ3MpO1xuXHRcdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgYXJncy5vdXRwdXRTY2hlbWEgIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IHBhcnNlZERhdGEgPSBhd2FpdCBhcmdzLnZhbGlkYXRpb25BZGFwdGVyLnZhbGlkYXRlKGFyZ3Mub3V0cHV0U2NoZW1hLCBkYXRhKTtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICghcGFyc2VkRGF0YS5zdWNjZXNzKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBBY3Rpb25PdXRwdXREYXRhVmFsaWRhdGlvbkVycm9yKGJ1aWxkVmFsaWRhdGlvbkVycm9ycyhwYXJzZWREYXRhLmlzc3VlcykpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRtaWRkbGV3YXJlUmVzdWx0LnN1Y2Nlc3MgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdG1pZGRsZXdhcmVSZXN1bHQuZGF0YSA9IGRhdGE7XG5cdFx0XHRcdFx0XHRcdFx0bWlkZGxld2FyZVJlc3VsdC5wYXJzZWRJbnB1dCA9IHBhcnNlZElucHV0RGF0YXMuYXQoLTEpO1xuXHRcdFx0XHRcdFx0XHRcdG1pZGRsZXdhcmVSZXN1bHQuYmluZEFyZ3NQYXJzZWRJbnB1dHMgPSBwYXJzZWRJbnB1dERhdGFzLnNsaWNlKDAsIC0xKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0XHRpZiAoaXNGcmFtZXdvcmtFcnJvcihlKSkge1xuXHRcdFx0XHRcdFx0XHRcdG1pZGRsZXdhcmVSZXN1bHQuc3VjY2VzcyA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0ZnJhbWV3b3JrRXJyb3IgPSBlO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAoZSBpbnN0YW5jZW9mIEFjdGlvblNlcnZlclZhbGlkYXRpb25FcnJvcikge1xuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IHZlID0gZS52YWxpZGF0aW9uRXJyb3JzO1xuXHRcdFx0XHRcdFx0XHRcdG1pZGRsZXdhcmVSZXN1bHQudmFsaWRhdGlvbkVycm9ycyA9IGF3YWl0IFByb21pc2UucmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MuaGFuZGxlVmFsaWRhdGlvbkVycm9yc1NoYXBlKHZlLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNsaWVudElucHV0OiBjbGllbnRJbnB1dHMuYXQoLTEpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRiaW5kQXJnc0NsaWVudElucHV0czogYmluZEFyZ3NTY2hlbWFzLmxlbmd0aCA/IGNsaWVudElucHV0cy5zbGljZSgwLCAtMSkgOiBbXSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y3R4OiBjdXJyZW50Q3R4LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRtZXRhZGF0YTogYXJncy5tZXRhZGF0YSxcblx0XHRcdFx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCBlcnJvciA9IGlzRXJyb3IoZSkgPyBlIDogbmV3IEVycm9yKERFRkFVTFRfU0VSVkVSX0VSUk9SX01FU1NBR0UpO1xuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IHJldHVybmVkRXJyb3IgPSBhd2FpdCBQcm9taXNlLnJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0XHRhcmdzLmhhbmRsZVNlcnZlckVycm9yKGVycm9yLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNsaWVudElucHV0OiBjbGllbnRJbnB1dHMuYXQoLTEpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBwYXNzIHJhdyBjbGllbnQgaW5wdXRcblx0XHRcdFx0XHRcdFx0XHRcdFx0YmluZEFyZ3NDbGllbnRJbnB1dHM6IGJpbmRBcmdzU2NoZW1hcy5sZW5ndGggPyBjbGllbnRJbnB1dHMuc2xpY2UoMCwgLTEpIDogW10sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGN0eDogY3VycmVudEN0eCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0bWV0YWRhdGE6IGFyZ3MubWV0YWRhdGEsXG5cdFx0XHRcdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0bWlkZGxld2FyZVJlc3VsdC5zZXJ2ZXJFcnJvciA9IHJldHVybmVkRXJyb3I7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGF3YWl0IGV4ZWN1dGVNaWRkbGV3YXJlU3RhY2soKTtcblx0XHRcdFx0XHRjb25zdCBjYWxsYmFja1Byb21pc2VzID0gW107XG5cdFx0XHRcdFx0aWYgKGZyYW1ld29ya0Vycm9yKSB7XG5cdFx0XHRcdFx0XHRjYWxsYmFja1Byb21pc2VzLnB1c2goXG5cdFx0XHRcdFx0XHRcdHV0aWxzPy5vblN1Y2Nlc3M/Lih7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YTogdm9pZCAwLFxuXHRcdFx0XHRcdFx0XHRcdG1ldGFkYXRhOiBhcmdzLm1ldGFkYXRhLFxuXHRcdFx0XHRcdFx0XHRcdGN0eDogY3VycmVudEN0eCxcblx0XHRcdFx0XHRcdFx0XHRjbGllbnRJbnB1dDogY2xpZW50SW5wdXRzLmF0KC0xKSxcblx0XHRcdFx0XHRcdFx0XHRiaW5kQXJnc0NsaWVudElucHV0czogYmluZEFyZ3NTY2hlbWFzLmxlbmd0aCA/IGNsaWVudElucHV0cy5zbGljZSgwLCAtMSkgOiBbXSxcblx0XHRcdFx0XHRcdFx0XHRwYXJzZWRJbnB1dDogcGFyc2VkSW5wdXREYXRhcy5hdCgtMSksXG5cdFx0XHRcdFx0XHRcdFx0YmluZEFyZ3NQYXJzZWRJbnB1dHM6IHBhcnNlZElucHV0RGF0YXMuc2xpY2UoMCwgLTEpLFxuXHRcdFx0XHRcdFx0XHRcdGhhc1JlZGlyZWN0ZWQ6IGlzUmVkaXJlY3RFcnJvcihmcmFtZXdvcmtFcnJvciksXG5cdFx0XHRcdFx0XHRcdFx0aGFzTm90Rm91bmQ6IGlzTm90Rm91bmRFcnJvcihmcmFtZXdvcmtFcnJvciksXG5cdFx0XHRcdFx0XHRcdFx0aGFzRm9yYmlkZGVuOiBpc0ZvcmJpZGRlbkVycm9yKGZyYW1ld29ya0Vycm9yKSxcblx0XHRcdFx0XHRcdFx0XHRoYXNVbmF1dGhvcml6ZWQ6IGlzVW5hdXRob3JpemVkRXJyb3IoZnJhbWV3b3JrRXJyb3IpLFxuXHRcdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrUHJvbWlzZXMucHVzaChcblx0XHRcdFx0XHRcdFx0dXRpbHM/Lm9uU2V0dGxlZD8uKHtcblx0XHRcdFx0XHRcdFx0XHRtZXRhZGF0YTogYXJncy5tZXRhZGF0YSxcblx0XHRcdFx0XHRcdFx0XHRjdHg6IGN1cnJlbnRDdHgsXG5cdFx0XHRcdFx0XHRcdFx0Y2xpZW50SW5wdXQ6IGNsaWVudElucHV0cy5hdCgtMSksXG5cdFx0XHRcdFx0XHRcdFx0YmluZEFyZ3NDbGllbnRJbnB1dHM6IGJpbmRBcmdzU2NoZW1hcy5sZW5ndGggPyBjbGllbnRJbnB1dHMuc2xpY2UoMCwgLTEpIDogW10sXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0OiB7fSxcblx0XHRcdFx0XHRcdFx0XHRoYXNSZWRpcmVjdGVkOiBpc1JlZGlyZWN0RXJyb3IoZnJhbWV3b3JrRXJyb3IpLFxuXHRcdFx0XHRcdFx0XHRcdGhhc05vdEZvdW5kOiBpc05vdEZvdW5kRXJyb3IoZnJhbWV3b3JrRXJyb3IpLFxuXHRcdFx0XHRcdFx0XHRcdGhhc0ZvcmJpZGRlbjogaXNGb3JiaWRkZW5FcnJvcihmcmFtZXdvcmtFcnJvciksXG5cdFx0XHRcdFx0XHRcdFx0aGFzVW5hdXRob3JpemVkOiBpc1VuYXV0aG9yaXplZEVycm9yKGZyYW1ld29ya0Vycm9yKSxcblx0XHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRhd2FpdCBQcm9taXNlLmFsbChjYWxsYmFja1Byb21pc2VzKTtcblx0XHRcdFx0XHRcdHRocm93IGZyYW1ld29ya0Vycm9yO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb25zdCBhY3Rpb25SZXN1bHQgPSB7fTtcblx0XHRcdFx0XHRpZiAodHlwZW9mIG1pZGRsZXdhcmVSZXN1bHQudmFsaWRhdGlvbkVycm9ycyAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0XHRcdFx0aWYgKHdpbm5pbmdCb29sZWFuKGFyZ3MudGhyb3dWYWxpZGF0aW9uRXJyb3JzLCB1dGlscz8udGhyb3dWYWxpZGF0aW9uRXJyb3JzKSkge1xuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgQWN0aW9uVmFsaWRhdGlvbkVycm9yKG1pZGRsZXdhcmVSZXN1bHQudmFsaWRhdGlvbkVycm9ycyk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRhY3Rpb25SZXN1bHQudmFsaWRhdGlvbkVycm9ycyA9IG1pZGRsZXdhcmVSZXN1bHQudmFsaWRhdGlvbkVycm9ycztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBtaWRkbGV3YXJlUmVzdWx0LmJpbmRBcmdzVmFsaWRhdGlvbkVycm9ycyAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0XHRcdFx0YWN0aW9uUmVzdWx0LmJpbmRBcmdzVmFsaWRhdGlvbkVycm9ycyA9IG1pZGRsZXdhcmVSZXN1bHQuYmluZEFyZ3NWYWxpZGF0aW9uRXJyb3JzO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodHlwZW9mIG1pZGRsZXdhcmVSZXN1bHQuc2VydmVyRXJyb3IgIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdFx0XHRcdGlmICh1dGlscz8udGhyb3dTZXJ2ZXJFcnJvcikge1xuXHRcdFx0XHRcdFx0XHR0aHJvdyBtaWRkbGV3YXJlUmVzdWx0LnNlcnZlckVycm9yO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0YWN0aW9uUmVzdWx0LnNlcnZlckVycm9yID0gbWlkZGxld2FyZVJlc3VsdC5zZXJ2ZXJFcnJvcjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKG1pZGRsZXdhcmVSZXN1bHQuc3VjY2Vzcykge1xuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBtaWRkbGV3YXJlUmVzdWx0LmRhdGEgIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdFx0XHRcdFx0YWN0aW9uUmVzdWx0LmRhdGEgPSBtaWRkbGV3YXJlUmVzdWx0LmRhdGE7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRjYWxsYmFja1Byb21pc2VzLnB1c2goXG5cdFx0XHRcdFx0XHRcdHV0aWxzPy5vblN1Y2Nlc3M/Lih7XG5cdFx0XHRcdFx0XHRcdFx0bWV0YWRhdGE6IGFyZ3MubWV0YWRhdGEsXG5cdFx0XHRcdFx0XHRcdFx0Y3R4OiBjdXJyZW50Q3R4LFxuXHRcdFx0XHRcdFx0XHRcdGRhdGE6IGFjdGlvblJlc3VsdC5kYXRhLFxuXHRcdFx0XHRcdFx0XHRcdGNsaWVudElucHV0OiBjbGllbnRJbnB1dHMuYXQoLTEpLFxuXHRcdFx0XHRcdFx0XHRcdGJpbmRBcmdzQ2xpZW50SW5wdXRzOiBiaW5kQXJnc1NjaGVtYXMubGVuZ3RoID8gY2xpZW50SW5wdXRzLnNsaWNlKDAsIC0xKSA6IFtdLFxuXHRcdFx0XHRcdFx0XHRcdHBhcnNlZElucHV0OiBwYXJzZWRJbnB1dERhdGFzLmF0KC0xKSxcblx0XHRcdFx0XHRcdFx0XHRiaW5kQXJnc1BhcnNlZElucHV0czogcGFyc2VkSW5wdXREYXRhcy5zbGljZSgwLCAtMSksXG5cdFx0XHRcdFx0XHRcdFx0aGFzUmVkaXJlY3RlZDogZmFsc2UsXG5cdFx0XHRcdFx0XHRcdFx0aGFzTm90Rm91bmQ6IGZhbHNlLFxuXHRcdFx0XHRcdFx0XHRcdGhhc0ZvcmJpZGRlbjogZmFsc2UsXG5cdFx0XHRcdFx0XHRcdFx0aGFzVW5hdXRob3JpemVkOiBmYWxzZSxcblx0XHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNhbGxiYWNrUHJvbWlzZXMucHVzaChcblx0XHRcdFx0XHRcdFx0dXRpbHM/Lm9uRXJyb3I/Lih7XG5cdFx0XHRcdFx0XHRcdFx0bWV0YWRhdGE6IGFyZ3MubWV0YWRhdGEsXG5cdFx0XHRcdFx0XHRcdFx0Y3R4OiBjdXJyZW50Q3R4LFxuXHRcdFx0XHRcdFx0XHRcdGNsaWVudElucHV0OiBjbGllbnRJbnB1dHMuYXQoLTEpLFxuXHRcdFx0XHRcdFx0XHRcdGJpbmRBcmdzQ2xpZW50SW5wdXRzOiBiaW5kQXJnc1NjaGVtYXMubGVuZ3RoID8gY2xpZW50SW5wdXRzLnNsaWNlKDAsIC0xKSA6IFtdLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBhY3Rpb25SZXN1bHQsXG5cdFx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjYWxsYmFja1Byb21pc2VzLnB1c2goXG5cdFx0XHRcdFx0XHR1dGlscz8ub25TZXR0bGVkPy4oe1xuXHRcdFx0XHRcdFx0XHRtZXRhZGF0YTogYXJncy5tZXRhZGF0YSxcblx0XHRcdFx0XHRcdFx0Y3R4OiBjdXJyZW50Q3R4LFxuXHRcdFx0XHRcdFx0XHRjbGllbnRJbnB1dDogY2xpZW50SW5wdXRzLmF0KC0xKSxcblx0XHRcdFx0XHRcdFx0YmluZEFyZ3NDbGllbnRJbnB1dHM6IGJpbmRBcmdzU2NoZW1hcy5sZW5ndGggPyBjbGllbnRJbnB1dHMuc2xpY2UoMCwgLTEpIDogW10sXG5cdFx0XHRcdFx0XHRcdHJlc3VsdDogYWN0aW9uUmVzdWx0LFxuXHRcdFx0XHRcdFx0XHRoYXNSZWRpcmVjdGVkOiBmYWxzZSxcblx0XHRcdFx0XHRcdFx0aGFzTm90Rm91bmQ6IGZhbHNlLFxuXHRcdFx0XHRcdFx0XHRoYXNGb3JiaWRkZW46IGZhbHNlLFxuXHRcdFx0XHRcdFx0XHRoYXNVbmF1dGhvcml6ZWQ6IGZhbHNlLFxuXHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGF3YWl0IFByb21pc2UuYWxsKGNhbGxiYWNrUHJvbWlzZXMpO1xuXHRcdFx0XHRcdHJldHVybiBhY3Rpb25SZXN1bHQ7XG5cdFx0XHRcdH07XG5cdFx0XHR9LFxuXHRcdH07XG5cdH1cblx0cmV0dXJuIHtcblx0XHQvKipcblx0XHQgKiBEZWZpbmUgdGhlIGFjdGlvbi5cblx0XHQgKiBAcGFyYW0gc2VydmVyQ29kZUZuIENvZGUgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIG9uIHRoZSAqKnNlcnZlciBzaWRlKipcblx0XHQgKlxuXHRcdCAqIHtAbGluayBodHRwczovL25leHQtc2FmZS1hY3Rpb24uZGV2L2RvY3MvZGVmaW5lLWFjdGlvbnMvaW5zdGFuY2UtbWV0aG9kcyNhY3Rpb24tLXN0YXRlYWN0aW9uIFNlZSBkb2NzIGZvciBtb3JlIGluZm9ybWF0aW9ufVxuXHRcdCAqL1xuXHRcdGFjdGlvbjogYnVpbGRBY3Rpb24oeyB3aXRoU3RhdGU6IGZhbHNlIH0pLmFjdGlvbixcblx0XHQvKipcblx0XHQgKiBEZWZpbmUgdGhlIHN0YXRlZnVsIGFjdGlvbi4gVG8gYmUgdXNlZCB3aXRoIHRoZSBbYHVzZVN0YXRlQWN0aW9uYF0oaHR0cHM6Ly9uZXh0LXNhZmUtYWN0aW9uLmRldi9kb2NzL2V4ZWN1dGUtYWN0aW9ucy9ob29rcy91c2VzdGF0ZWFjdGlvbikgaG9vay5cblx0XHQgKiBAcGFyYW0gc2VydmVyQ29kZUZuIENvZGUgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIG9uIHRoZSAqKnNlcnZlciBzaWRlKipcblx0XHQgKlxuXHRcdCAqIHtAbGluayBodHRwczovL25leHQtc2FmZS1hY3Rpb24uZGV2L2RvY3MvZGVmaW5lLWFjdGlvbnMvaW5zdGFuY2UtbWV0aG9kcyNhY3Rpb24tLXN0YXRlYWN0aW9uIFNlZSBkb2NzIGZvciBtb3JlIGluZm9ybWF0aW9ufVxuXHRcdCAqL1xuXHRcdHN0YXRlQWN0aW9uOiBidWlsZEFjdGlvbih7IHdpdGhTdGF0ZTogdHJ1ZSB9KS5hY3Rpb24sXG5cdH07XG59XG5cbi8vIHNyYy9zYWZlLWFjdGlvbi1jbGllbnQudHNcbnZhciBTYWZlQWN0aW9uQ2xpZW50ID0gY2xhc3MgX1NhZmVBY3Rpb25DbGllbnQge1xuXHQjaGFuZGxlU2VydmVyRXJyb3I7XG5cdCNtaWRkbGV3YXJlRm5zO1xuXHQjbWV0YWRhdGFTY2hlbWE7XG5cdCNtZXRhZGF0YTtcblx0I2lucHV0U2NoZW1hRm47XG5cdCNvdXRwdXRTY2hlbWE7XG5cdCNjdHhUeXBlO1xuXHQjYmluZEFyZ3NTY2hlbWFzO1xuXHQjdmFsaWRhdGlvbkFkYXB0ZXI7XG5cdCNoYW5kbGVWYWxpZGF0aW9uRXJyb3JzU2hhcGU7XG5cdCNoYW5kbGVCaW5kQXJnc1ZhbGlkYXRpb25FcnJvcnNTaGFwZTtcblx0I2RlZmF1bHRWYWxpZGF0aW9uRXJyb3JzU2hhcGU7XG5cdCN0aHJvd1ZhbGlkYXRpb25FcnJvcnM7XG5cdGNvbnN0cnVjdG9yKG9wdHMpIHtcblx0XHR0aGlzLiNtaWRkbGV3YXJlRm5zID0gb3B0cy5taWRkbGV3YXJlRm5zO1xuXHRcdHRoaXMuI2hhbmRsZVNlcnZlckVycm9yID0gb3B0cy5oYW5kbGVTZXJ2ZXJFcnJvcjtcblx0XHR0aGlzLiNtZXRhZGF0YVNjaGVtYSA9IG9wdHMubWV0YWRhdGFTY2hlbWE7XG5cdFx0dGhpcy4jbWV0YWRhdGEgPSBvcHRzLm1ldGFkYXRhO1xuXHRcdHRoaXMuI2lucHV0U2NoZW1hRm4gPSBvcHRzLmlucHV0U2NoZW1hRm4gPz8gdm9pZCAwO1xuXHRcdHRoaXMuI291dHB1dFNjaGVtYSA9IG9wdHMub3V0cHV0U2NoZW1hO1xuXHRcdHRoaXMuI2JpbmRBcmdzU2NoZW1hcyA9IG9wdHMuYmluZEFyZ3NTY2hlbWFzID8/IFtdO1xuXHRcdHRoaXMuI3ZhbGlkYXRpb25BZGFwdGVyID0gb3B0cy52YWxpZGF0aW9uQWRhcHRlcjtcblx0XHR0aGlzLiNjdHhUeXBlID0gb3B0cy5jdHhUeXBlO1xuXHRcdHRoaXMuI2hhbmRsZVZhbGlkYXRpb25FcnJvcnNTaGFwZSA9IG9wdHMuaGFuZGxlVmFsaWRhdGlvbkVycm9yc1NoYXBlO1xuXHRcdHRoaXMuI2hhbmRsZUJpbmRBcmdzVmFsaWRhdGlvbkVycm9yc1NoYXBlID0gb3B0cy5oYW5kbGVCaW5kQXJnc1ZhbGlkYXRpb25FcnJvcnNTaGFwZTtcblx0XHR0aGlzLiNkZWZhdWx0VmFsaWRhdGlvbkVycm9yc1NoYXBlID0gb3B0cy5kZWZhdWx0VmFsaWRhdGlvbkVycm9yc1NoYXBlO1xuXHRcdHRoaXMuI3Rocm93VmFsaWRhdGlvbkVycm9ycyA9IG9wdHMudGhyb3dWYWxpZGF0aW9uRXJyb3JzO1xuXHR9XG5cdC8qKlxuXHQgKiBVc2UgYSBtaWRkbGV3YXJlIGZ1bmN0aW9uLlxuXHQgKiBAcGFyYW0gbWlkZGxld2FyZUZuIE1pZGRsZXdhcmUgZnVuY3Rpb25cblx0ICpcblx0ICoge0BsaW5rIGh0dHBzOi8vbmV4dC1zYWZlLWFjdGlvbi5kZXYvZG9jcy9kZWZpbmUtYWN0aW9ucy9pbnN0YW5jZS1tZXRob2RzI3VzZSBTZWUgZG9jcyBmb3IgbW9yZSBpbmZvcm1hdGlvbn1cblx0ICovXG5cdHVzZShtaWRkbGV3YXJlRm4pIHtcblx0XHRyZXR1cm4gbmV3IF9TYWZlQWN0aW9uQ2xpZW50KHtcblx0XHRcdG1pZGRsZXdhcmVGbnM6IFsuLi50aGlzLiNtaWRkbGV3YXJlRm5zLCBtaWRkbGV3YXJlRm5dLFxuXHRcdFx0aGFuZGxlU2VydmVyRXJyb3I6IHRoaXMuI2hhbmRsZVNlcnZlckVycm9yLFxuXHRcdFx0bWV0YWRhdGFTY2hlbWE6IHRoaXMuI21ldGFkYXRhU2NoZW1hLFxuXHRcdFx0bWV0YWRhdGE6IHRoaXMuI21ldGFkYXRhLFxuXHRcdFx0aW5wdXRTY2hlbWFGbjogdGhpcy4jaW5wdXRTY2hlbWFGbixcblx0XHRcdG91dHB1dFNjaGVtYTogdGhpcy4jb3V0cHV0U2NoZW1hLFxuXHRcdFx0YmluZEFyZ3NTY2hlbWFzOiB0aGlzLiNiaW5kQXJnc1NjaGVtYXMsXG5cdFx0XHR2YWxpZGF0aW9uQWRhcHRlcjogdGhpcy4jdmFsaWRhdGlvbkFkYXB0ZXIsXG5cdFx0XHRoYW5kbGVWYWxpZGF0aW9uRXJyb3JzU2hhcGU6IHRoaXMuI2hhbmRsZVZhbGlkYXRpb25FcnJvcnNTaGFwZSxcblx0XHRcdGhhbmRsZUJpbmRBcmdzVmFsaWRhdGlvbkVycm9yc1NoYXBlOiB0aGlzLiNoYW5kbGVCaW5kQXJnc1ZhbGlkYXRpb25FcnJvcnNTaGFwZSxcblx0XHRcdGN0eFR5cGU6IHt9LFxuXHRcdFx0ZGVmYXVsdFZhbGlkYXRpb25FcnJvcnNTaGFwZTogdGhpcy4jZGVmYXVsdFZhbGlkYXRpb25FcnJvcnNTaGFwZSxcblx0XHRcdHRocm93VmFsaWRhdGlvbkVycm9yczogdGhpcy4jdGhyb3dWYWxpZGF0aW9uRXJyb3JzLFxuXHRcdH0pO1xuXHR9XG5cdC8qKlxuXHQgKiBEZWZpbmUgbWV0YWRhdGEgZm9yIHRoZSBhY3Rpb24uXG5cdCAqIEBwYXJhbSBkYXRhIE1ldGFkYXRhIHdpdGggdGhlIHNhbWUgdHlwZSBhcyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBbYGRlZmluZU1ldGFkYXRhU2NoZW1hYF0oaHR0cHM6Ly9uZXh0LXNhZmUtYWN0aW9uLmRldi9kb2NzL2RlZmluZS1hY3Rpb25zL2NyZWF0ZS10aGUtY2xpZW50I2RlZmluZW1ldGFkYXRhc2NoZW1hKSBvcHRpb25hbCBpbml0aWFsaXphdGlvbiBmdW5jdGlvblxuXHQgKlxuXHQgKiB7QGxpbmsgaHR0cHM6Ly9uZXh0LXNhZmUtYWN0aW9uLmRldi9kb2NzL2RlZmluZS1hY3Rpb25zL2luc3RhbmNlLW1ldGhvZHMjbWV0YWRhdGEgU2VlIGRvY3MgZm9yIG1vcmUgaW5mb3JtYXRpb259XG5cdCAqL1xuXHRtZXRhZGF0YShkYXRhKSB7XG5cdFx0cmV0dXJuIG5ldyBfU2FmZUFjdGlvbkNsaWVudCh7XG5cdFx0XHRtaWRkbGV3YXJlRm5zOiB0aGlzLiNtaWRkbGV3YXJlRm5zLFxuXHRcdFx0aGFuZGxlU2VydmVyRXJyb3I6IHRoaXMuI2hhbmRsZVNlcnZlckVycm9yLFxuXHRcdFx0bWV0YWRhdGFTY2hlbWE6IHRoaXMuI21ldGFkYXRhU2NoZW1hLFxuXHRcdFx0bWV0YWRhdGE6IGRhdGEsXG5cdFx0XHRpbnB1dFNjaGVtYUZuOiB0aGlzLiNpbnB1dFNjaGVtYUZuLFxuXHRcdFx0YmluZEFyZ3NTY2hlbWFzOiB0aGlzLiNiaW5kQXJnc1NjaGVtYXMsXG5cdFx0XHRvdXRwdXRTY2hlbWE6IHRoaXMuI291dHB1dFNjaGVtYSxcblx0XHRcdHZhbGlkYXRpb25BZGFwdGVyOiB0aGlzLiN2YWxpZGF0aW9uQWRhcHRlcixcblx0XHRcdGhhbmRsZVZhbGlkYXRpb25FcnJvcnNTaGFwZTogdGhpcy4jaGFuZGxlVmFsaWRhdGlvbkVycm9yc1NoYXBlLFxuXHRcdFx0aGFuZGxlQmluZEFyZ3NWYWxpZGF0aW9uRXJyb3JzU2hhcGU6IHRoaXMuI2hhbmRsZUJpbmRBcmdzVmFsaWRhdGlvbkVycm9yc1NoYXBlLFxuXHRcdFx0Y3R4VHlwZToge30sXG5cdFx0XHRkZWZhdWx0VmFsaWRhdGlvbkVycm9yc1NoYXBlOiB0aGlzLiNkZWZhdWx0VmFsaWRhdGlvbkVycm9yc1NoYXBlLFxuXHRcdFx0dGhyb3dWYWxpZGF0aW9uRXJyb3JzOiB0aGlzLiN0aHJvd1ZhbGlkYXRpb25FcnJvcnMsXG5cdFx0fSk7XG5cdH1cblx0LyoqXG5cdCAqIERlZmluZSB0aGUgaW5wdXQgdmFsaWRhdGlvbiBzY2hlbWEgZm9yIHRoZSBhY3Rpb24uXG5cdCAqIEBwYXJhbSBpbnB1dFNjaGVtYSBJbnB1dCB2YWxpZGF0aW9uIHNjaGVtYVxuXHQgKiBAcGFyYW0gdXRpbHMgT3B0aW9uYWwgdXRpbHMgb2JqZWN0XG5cdCAqXG5cdCAqIHtAbGluayBodHRwczovL25leHQtc2FmZS1hY3Rpb24uZGV2L2RvY3MvZGVmaW5lLWFjdGlvbnMvY3JlYXRlLXRoZS1jbGllbnQjaW5wdXRzY2hlbWEgU2VlIGRvY3MgZm9yIG1vcmUgaW5mb3JtYXRpb259XG5cdCAqL1xuXHRzY2hlbWEoaW5wdXRTY2hlbWEsIHV0aWxzKSB7XG5cdFx0cmV0dXJuIG5ldyBfU2FmZUFjdGlvbkNsaWVudCh7XG5cdFx0XHRtaWRkbGV3YXJlRm5zOiB0aGlzLiNtaWRkbGV3YXJlRm5zLFxuXHRcdFx0aGFuZGxlU2VydmVyRXJyb3I6IHRoaXMuI2hhbmRsZVNlcnZlckVycm9yLFxuXHRcdFx0bWV0YWRhdGFTY2hlbWE6IHRoaXMuI21ldGFkYXRhU2NoZW1hLFxuXHRcdFx0bWV0YWRhdGE6IHRoaXMuI21ldGFkYXRhLFxuXHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRcdFx0aW5wdXRTY2hlbWFGbjpcblx0XHRcdFx0aW5wdXRTY2hlbWFbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gXCJBc3luY0Z1bmN0aW9uXCJcblx0XHRcdFx0XHQ/IGFzeW5jICgpID0+IHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgcHJldlNjaGVtYSA9IGF3YWl0IHRoaXMuI2lucHV0U2NoZW1hRm4/LigpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaW5wdXRTY2hlbWEocHJldlNjaGVtYSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0OiBhc3luYyAoKSA9PiBpbnB1dFNjaGVtYSxcblx0XHRcdGJpbmRBcmdzU2NoZW1hczogdGhpcy4jYmluZEFyZ3NTY2hlbWFzLFxuXHRcdFx0b3V0cHV0U2NoZW1hOiB0aGlzLiNvdXRwdXRTY2hlbWEsXG5cdFx0XHR2YWxpZGF0aW9uQWRhcHRlcjogdGhpcy4jdmFsaWRhdGlvbkFkYXB0ZXIsXG5cdFx0XHRoYW5kbGVWYWxpZGF0aW9uRXJyb3JzU2hhcGU6IHV0aWxzPy5oYW5kbGVWYWxpZGF0aW9uRXJyb3JzU2hhcGUgPz8gdGhpcy4jaGFuZGxlVmFsaWRhdGlvbkVycm9yc1NoYXBlLFxuXHRcdFx0aGFuZGxlQmluZEFyZ3NWYWxpZGF0aW9uRXJyb3JzU2hhcGU6IHRoaXMuI2hhbmRsZUJpbmRBcmdzVmFsaWRhdGlvbkVycm9yc1NoYXBlLFxuXHRcdFx0Y3R4VHlwZToge30sXG5cdFx0XHRkZWZhdWx0VmFsaWRhdGlvbkVycm9yc1NoYXBlOiB0aGlzLiNkZWZhdWx0VmFsaWRhdGlvbkVycm9yc1NoYXBlLFxuXHRcdFx0dGhyb3dWYWxpZGF0aW9uRXJyb3JzOiB0aGlzLiN0aHJvd1ZhbGlkYXRpb25FcnJvcnMsXG5cdFx0fSk7XG5cdH1cblx0LyoqXG5cdCAqIERlZmluZSB0aGUgYmluZCBhcmdzIGlucHV0IHZhbGlkYXRpb24gc2NoZW1hIGZvciB0aGUgYWN0aW9uLlxuXHQgKiBAcGFyYW0gYmluZEFyZ3NTY2hlbWFzIEJpbmQgYXJncyBpbnB1dCB2YWxpZGF0aW9uIHNjaGVtYXNcblx0ICogQHBhcmFtIHV0aWxzIE9wdGlvbmFsIHV0aWxzIG9iamVjdFxuXHQgKlxuXHQgKiB7QGxpbmsgaHR0cHM6Ly9uZXh0LXNhZmUtYWN0aW9uLmRldi9kb2NzL2RlZmluZS1hY3Rpb25zL2luc3RhbmNlLW1ldGhvZHMjYmluZGFyZ3NzY2hlbWFzIFNlZSBkb2NzIGZvciBtb3JlIGluZm9ybWF0aW9ufVxuXHQgKi9cblx0YmluZEFyZ3NTY2hlbWFzKGJpbmRBcmdzU2NoZW1hcywgdXRpbHMpIHtcblx0XHRyZXR1cm4gbmV3IF9TYWZlQWN0aW9uQ2xpZW50KHtcblx0XHRcdG1pZGRsZXdhcmVGbnM6IHRoaXMuI21pZGRsZXdhcmVGbnMsXG5cdFx0XHRoYW5kbGVTZXJ2ZXJFcnJvcjogdGhpcy4jaGFuZGxlU2VydmVyRXJyb3IsXG5cdFx0XHRtZXRhZGF0YVNjaGVtYTogdGhpcy4jbWV0YWRhdGFTY2hlbWEsXG5cdFx0XHRtZXRhZGF0YTogdGhpcy4jbWV0YWRhdGEsXG5cdFx0XHRpbnB1dFNjaGVtYUZuOiB0aGlzLiNpbnB1dFNjaGVtYUZuLFxuXHRcdFx0YmluZEFyZ3NTY2hlbWFzLFxuXHRcdFx0b3V0cHV0U2NoZW1hOiB0aGlzLiNvdXRwdXRTY2hlbWEsXG5cdFx0XHR2YWxpZGF0aW9uQWRhcHRlcjogdGhpcy4jdmFsaWRhdGlvbkFkYXB0ZXIsXG5cdFx0XHRoYW5kbGVWYWxpZGF0aW9uRXJyb3JzU2hhcGU6IHRoaXMuI2hhbmRsZVZhbGlkYXRpb25FcnJvcnNTaGFwZSxcblx0XHRcdGhhbmRsZUJpbmRBcmdzVmFsaWRhdGlvbkVycm9yc1NoYXBlOlxuXHRcdFx0XHR1dGlscz8uaGFuZGxlQmluZEFyZ3NWYWxpZGF0aW9uRXJyb3JzU2hhcGUgPz8gdGhpcy4jaGFuZGxlQmluZEFyZ3NWYWxpZGF0aW9uRXJyb3JzU2hhcGUsXG5cdFx0XHRjdHhUeXBlOiB7fSxcblx0XHRcdGRlZmF1bHRWYWxpZGF0aW9uRXJyb3JzU2hhcGU6IHRoaXMuI2RlZmF1bHRWYWxpZGF0aW9uRXJyb3JzU2hhcGUsXG5cdFx0XHR0aHJvd1ZhbGlkYXRpb25FcnJvcnM6IHRoaXMuI3Rocm93VmFsaWRhdGlvbkVycm9ycyxcblx0XHR9KTtcblx0fVxuXHQvKipcblx0ICogRGVmaW5lIHRoZSBvdXRwdXQgZGF0YSB2YWxpZGF0aW9uIHNjaGVtYSBmb3IgdGhlIGFjdGlvbi5cblx0ICogQHBhcmFtIHNjaGVtYSBPdXRwdXQgZGF0YSB2YWxpZGF0aW9uIHNjaGVtYVxuXHQgKlxuXHQgKiB7QGxpbmsgaHR0cHM6Ly9uZXh0LXNhZmUtYWN0aW9uLmRldi9kb2NzL2RlZmluZS1hY3Rpb25zL2NyZWF0ZS10aGUtY2xpZW50I291dHB1dHNjaGVtYSBTZWUgZG9jcyBmb3IgbW9yZSBpbmZvcm1hdGlvbn1cblx0ICovXG5cdG91dHB1dFNjaGVtYShkYXRhU2NoZW1hKSB7XG5cdFx0cmV0dXJuIG5ldyBfU2FmZUFjdGlvbkNsaWVudCh7XG5cdFx0XHRtaWRkbGV3YXJlRm5zOiB0aGlzLiNtaWRkbGV3YXJlRm5zLFxuXHRcdFx0aGFuZGxlU2VydmVyRXJyb3I6IHRoaXMuI2hhbmRsZVNlcnZlckVycm9yLFxuXHRcdFx0bWV0YWRhdGFTY2hlbWE6IHRoaXMuI21ldGFkYXRhU2NoZW1hLFxuXHRcdFx0bWV0YWRhdGE6IHRoaXMuI21ldGFkYXRhLFxuXHRcdFx0aW5wdXRTY2hlbWFGbjogdGhpcy4jaW5wdXRTY2hlbWFGbixcblx0XHRcdGJpbmRBcmdzU2NoZW1hczogdGhpcy4jYmluZEFyZ3NTY2hlbWFzLFxuXHRcdFx0b3V0cHV0U2NoZW1hOiBkYXRhU2NoZW1hLFxuXHRcdFx0dmFsaWRhdGlvbkFkYXB0ZXI6IHRoaXMuI3ZhbGlkYXRpb25BZGFwdGVyLFxuXHRcdFx0aGFuZGxlVmFsaWRhdGlvbkVycm9yc1NoYXBlOiB0aGlzLiNoYW5kbGVWYWxpZGF0aW9uRXJyb3JzU2hhcGUsXG5cdFx0XHRoYW5kbGVCaW5kQXJnc1ZhbGlkYXRpb25FcnJvcnNTaGFwZTogdGhpcy4jaGFuZGxlQmluZEFyZ3NWYWxpZGF0aW9uRXJyb3JzU2hhcGUsXG5cdFx0XHRjdHhUeXBlOiB7fSxcblx0XHRcdGRlZmF1bHRWYWxpZGF0aW9uRXJyb3JzU2hhcGU6IHRoaXMuI2RlZmF1bHRWYWxpZGF0aW9uRXJyb3JzU2hhcGUsXG5cdFx0XHR0aHJvd1ZhbGlkYXRpb25FcnJvcnM6IHRoaXMuI3Rocm93VmFsaWRhdGlvbkVycm9ycyxcblx0XHR9KTtcblx0fVxuXHQvKipcblx0ICogRGVmaW5lIHRoZSBhY3Rpb24uXG5cdCAqIEBwYXJhbSBzZXJ2ZXJDb2RlRm4gQ29kZSB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgb24gdGhlICoqc2VydmVyIHNpZGUqKlxuXHQgKiBAcGFyYW0gW2NiXSBPcHRpb25hbCBjYWxsYmFja3MgdGhhdCB3aWxsIGJlIGNhbGxlZCBhZnRlciBhY3Rpb24gZXhlY3V0aW9uLCBvbiB0aGUgc2VydmVyLlxuXHQgKlxuXHQgKiB7QGxpbmsgaHR0cHM6Ly9uZXh0LXNhZmUtYWN0aW9uLmRldi9kb2NzL2RlZmluZS1hY3Rpb25zL2luc3RhbmNlLW1ldGhvZHMjYWN0aW9uLS1zdGF0ZWFjdGlvbiBTZWUgZG9jcyBmb3IgbW9yZSBpbmZvcm1hdGlvbn1cblx0ICovXG5cdGFjdGlvbihzZXJ2ZXJDb2RlRm4sIHV0aWxzKSB7XG5cdFx0cmV0dXJuIGFjdGlvbkJ1aWxkZXIoe1xuXHRcdFx0aGFuZGxlU2VydmVyRXJyb3I6IHRoaXMuI2hhbmRsZVNlcnZlckVycm9yLFxuXHRcdFx0bWlkZGxld2FyZUZuczogdGhpcy4jbWlkZGxld2FyZUZucyxcblx0XHRcdGN0eFR5cGU6IHRoaXMuI2N0eFR5cGUsXG5cdFx0XHRtZXRhZGF0YVNjaGVtYTogdGhpcy4jbWV0YWRhdGFTY2hlbWEsXG5cdFx0XHRtZXRhZGF0YTogdGhpcy4jbWV0YWRhdGEsXG5cdFx0XHRpbnB1dFNjaGVtYUZuOiB0aGlzLiNpbnB1dFNjaGVtYUZuLFxuXHRcdFx0YmluZEFyZ3NTY2hlbWFzOiB0aGlzLiNiaW5kQXJnc1NjaGVtYXMsXG5cdFx0XHRvdXRwdXRTY2hlbWE6IHRoaXMuI291dHB1dFNjaGVtYSxcblx0XHRcdHZhbGlkYXRpb25BZGFwdGVyOiB0aGlzLiN2YWxpZGF0aW9uQWRhcHRlcixcblx0XHRcdGhhbmRsZVZhbGlkYXRpb25FcnJvcnNTaGFwZTogdGhpcy4jaGFuZGxlVmFsaWRhdGlvbkVycm9yc1NoYXBlLFxuXHRcdFx0aGFuZGxlQmluZEFyZ3NWYWxpZGF0aW9uRXJyb3JzU2hhcGU6IHRoaXMuI2hhbmRsZUJpbmRBcmdzVmFsaWRhdGlvbkVycm9yc1NoYXBlLFxuXHRcdFx0dGhyb3dWYWxpZGF0aW9uRXJyb3JzOiB0aGlzLiN0aHJvd1ZhbGlkYXRpb25FcnJvcnMsXG5cdFx0fSkuYWN0aW9uKHNlcnZlckNvZGVGbiwgdXRpbHMpO1xuXHR9XG5cdC8qKlxuXHQgKiBEZWZpbmUgdGhlIHN0YXRlZnVsIGFjdGlvbi5cblx0ICogVG8gYmUgdXNlZCB3aXRoIHRoZSBbYHVzZVN0YXRlQWN0aW9uYF0oaHR0cHM6Ly9uZXh0LXNhZmUtYWN0aW9uLmRldi9kb2NzL2V4ZWN1dGUtYWN0aW9ucy9ob29rcy91c2VzdGF0ZWFjdGlvbikgaG9vay5cblx0ICogQHBhcmFtIHNlcnZlckNvZGVGbiBDb2RlIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBvbiB0aGUgKipzZXJ2ZXIgc2lkZSoqXG5cdCAqIEBwYXJhbSBbY2JdIE9wdGlvbmFsIGNhbGxiYWNrcyB0aGF0IHdpbGwgYmUgY2FsbGVkIGFmdGVyIGFjdGlvbiBleGVjdXRpb24sIG9uIHRoZSBzZXJ2ZXIuXG5cdCAqXG5cdCAqIHtAbGluayBodHRwczovL25leHQtc2FmZS1hY3Rpb24uZGV2L2RvY3MvZGVmaW5lLWFjdGlvbnMvaW5zdGFuY2UtbWV0aG9kcyNhY3Rpb24tLXN0YXRlYWN0aW9uIFNlZSBkb2NzIGZvciBtb3JlIGluZm9ybWF0aW9ufVxuXHQgKi9cblx0c3RhdGVBY3Rpb24oc2VydmVyQ29kZUZuLCB1dGlscykge1xuXHRcdHJldHVybiBhY3Rpb25CdWlsZGVyKHtcblx0XHRcdGhhbmRsZVNlcnZlckVycm9yOiB0aGlzLiNoYW5kbGVTZXJ2ZXJFcnJvcixcblx0XHRcdG1pZGRsZXdhcmVGbnM6IHRoaXMuI21pZGRsZXdhcmVGbnMsXG5cdFx0XHRjdHhUeXBlOiB0aGlzLiNjdHhUeXBlLFxuXHRcdFx0bWV0YWRhdGFTY2hlbWE6IHRoaXMuI21ldGFkYXRhU2NoZW1hLFxuXHRcdFx0bWV0YWRhdGE6IHRoaXMuI21ldGFkYXRhLFxuXHRcdFx0aW5wdXRTY2hlbWFGbjogdGhpcy4jaW5wdXRTY2hlbWFGbixcblx0XHRcdGJpbmRBcmdzU2NoZW1hczogdGhpcy4jYmluZEFyZ3NTY2hlbWFzLFxuXHRcdFx0b3V0cHV0U2NoZW1hOiB0aGlzLiNvdXRwdXRTY2hlbWEsXG5cdFx0XHR2YWxpZGF0aW9uQWRhcHRlcjogdGhpcy4jdmFsaWRhdGlvbkFkYXB0ZXIsXG5cdFx0XHRoYW5kbGVWYWxpZGF0aW9uRXJyb3JzU2hhcGU6IHRoaXMuI2hhbmRsZVZhbGlkYXRpb25FcnJvcnNTaGFwZSxcblx0XHRcdGhhbmRsZUJpbmRBcmdzVmFsaWRhdGlvbkVycm9yc1NoYXBlOiB0aGlzLiNoYW5kbGVCaW5kQXJnc1ZhbGlkYXRpb25FcnJvcnNTaGFwZSxcblx0XHRcdHRocm93VmFsaWRhdGlvbkVycm9yczogdGhpcy4jdGhyb3dWYWxpZGF0aW9uRXJyb3JzLFxuXHRcdH0pLnN0YXRlQWN0aW9uKHNlcnZlckNvZGVGbiwgdXRpbHMpO1xuXHR9XG59O1xuXG4vLyBzcmMvbWlkZGxld2FyZS50c1xudmFyIGNyZWF0ZU1pZGRsZXdhcmUgPSAoKSA9PiB7XG5cdHJldHVybiB7XG5cdFx0ZGVmaW5lOiAobWlkZGxld2FyZUZuKSA9PiBtaWRkbGV3YXJlRm4sXG5cdH07XG59O1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBjcmVhdGVTYWZlQWN0aW9uQ2xpZW50ID0gKGNyZWF0ZU9wdHMpID0+IHtcblx0Y29uc3QgaGFuZGxlU2VydmVyRXJyb3IgPVxuXHRcdGNyZWF0ZU9wdHM/LmhhbmRsZVNlcnZlckVycm9yIHx8XG5cdFx0KChlKSA9PiB7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwiQWN0aW9uIGVycm9yOlwiLCBlLm1lc3NhZ2UpO1xuXHRcdFx0cmV0dXJuIERFRkFVTFRfU0VSVkVSX0VSUk9SX01FU1NBR0U7XG5cdFx0fSk7XG5cdHJldHVybiBuZXcgU2FmZUFjdGlvbkNsaWVudCh7XG5cdFx0bWlkZGxld2FyZUZuczogW2FzeW5jICh7IG5leHQgfSkgPT4gbmV4dCh7IGN0eDoge30gfSldLFxuXHRcdGhhbmRsZVNlcnZlckVycm9yLFxuXHRcdGlucHV0U2NoZW1hRm46IHZvaWQgMCxcblx0XHRiaW5kQXJnc1NjaGVtYXM6IFtdLFxuXHRcdG91dHB1dFNjaGVtYTogdm9pZCAwLFxuXHRcdHZhbGlkYXRpb25BZGFwdGVyOiBjcmVhdGVPcHRzPy52YWxpZGF0aW9uQWRhcHRlciA/PyB6b2RBZGFwdGVyKCksXG5cdFx0Ly8gdXNlIHpvZCBhZGFwdGVyIGJ5IGRlZmF1bHRcblx0XHRjdHhUeXBlOiB7fSxcblx0XHRtZXRhZGF0YVNjaGVtYTogY3JlYXRlT3B0cz8uZGVmaW5lTWV0YWRhdGFTY2hlbWE/LigpID8/IHZvaWQgMCxcblx0XHRtZXRhZGF0YTogdm9pZCAwLFxuXHRcdGRlZmF1bHRWYWxpZGF0aW9uRXJyb3JzU2hhcGU6IGNyZWF0ZU9wdHM/LmRlZmF1bHRWYWxpZGF0aW9uRXJyb3JzU2hhcGUgPz8gXCJmb3JtYXR0ZWRcIixcblx0XHR0aHJvd1ZhbGlkYXRpb25FcnJvcnM6IEJvb2xlYW4oY3JlYXRlT3B0cz8udGhyb3dWYWxpZGF0aW9uRXJyb3JzKSxcblx0XHRoYW5kbGVWYWxpZGF0aW9uRXJyb3JzU2hhcGU6IGFzeW5jICh2ZSkgPT5cblx0XHRcdGNyZWF0ZU9wdHM/LmRlZmF1bHRWYWxpZGF0aW9uRXJyb3JzU2hhcGUgPT09IFwiZmxhdHRlbmVkXCJcblx0XHRcdFx0PyBmbGF0dGVuVmFsaWRhdGlvbkVycm9ycyh2ZSlcblx0XHRcdFx0OiBmb3JtYXRWYWxpZGF0aW9uRXJyb3JzKHZlKSxcblx0XHRoYW5kbGVCaW5kQXJnc1ZhbGlkYXRpb25FcnJvcnNTaGFwZTogYXN5bmMgKHZlKSA9PlxuXHRcdFx0Y3JlYXRlT3B0cz8uZGVmYXVsdFZhbGlkYXRpb25FcnJvcnNTaGFwZSA9PT0gXCJmbGF0dGVuZWRcIlxuXHRcdFx0XHQ/IGZsYXR0ZW5CaW5kQXJnc1ZhbGlkYXRpb25FcnJvcnModmUpXG5cdFx0XHRcdDogZm9ybWF0QmluZEFyZ3NWYWxpZGF0aW9uRXJyb3JzKHZlKSxcblx0fSk7XG59O1xuZXhwb3J0IHtcblx0QWN0aW9uTWV0YWRhdGFWYWxpZGF0aW9uRXJyb3IsXG5cdEFjdGlvbk91dHB1dERhdGFWYWxpZGF0aW9uRXJyb3IsXG5cdEFjdGlvblZhbGlkYXRpb25FcnJvcixcblx0REVGQVVMVF9TRVJWRVJfRVJST1JfTUVTU0FHRSxcblx0Y3JlYXRlTWlkZGxld2FyZSxcblx0Y3JlYXRlU2FmZUFjdGlvbkNsaWVudCxcblx0ZmxhdHRlbkJpbmRBcmdzVmFsaWRhdGlvbkVycm9ycyxcblx0ZmxhdHRlblZhbGlkYXRpb25FcnJvcnMsXG5cdGZvcm1hdEJpbmRBcmdzVmFsaWRhdGlvbkVycm9ycyxcblx0Zm9ybWF0VmFsaWRhdGlvbkVycm9ycyxcblx0cmV0dXJuVmFsaWRhdGlvbkVycm9ycyxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/../../../node_modules/next-safe-action/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/../../../node_modules/next-safe-action/dist/index.mjs":
/*!*************************************************************!*\
  !*** ../../../node_modules/next-safe-action/dist/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionMetadataValidationError: () => (/* binding */ ActionMetadataValidationError),\n/* harmony export */   ActionOutputDataValidationError: () => (/* binding */ ActionOutputDataValidationError),\n/* harmony export */   ActionValidationError: () => (/* binding */ ActionValidationError),\n/* harmony export */   DEFAULT_SERVER_ERROR_MESSAGE: () => (/* binding */ DEFAULT_SERVER_ERROR_MESSAGE),\n/* harmony export */   createMiddleware: () => (/* binding */ createMiddleware),\n/* harmony export */   createSafeActionClient: () => (/* binding */ createSafeActionClient),\n/* harmony export */   flattenBindArgsValidationErrors: () => (/* binding */ flattenBindArgsValidationErrors),\n/* harmony export */   flattenValidationErrors: () => (/* binding */ flattenValidationErrors),\n/* harmony export */   formatBindArgsValidationErrors: () => (/* binding */ formatBindArgsValidationErrors),\n/* harmony export */   formatValidationErrors: () => (/* binding */ formatValidationErrors),\n/* harmony export */   returnValidationErrors: () => (/* binding */ returnValidationErrors)\n/* harmony export */ });\n// src/adapters/zod.ts\nvar ZodAdapter = class {\n\tasync validate(schema, data) {\n\t\tconst result = await schema.safeParseAsync(data);\n\t\tif (result.success) {\n\t\t\treturn {\n\t\t\t\tsuccess: true,\n\t\t\t\tdata: result.data,\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tsuccess: false,\n\t\t\tissues: result.error.issues.map(({ message, path }) => ({ message, path })),\n\t\t};\n\t}\n};\nfunction zodAdapter() {\n\treturn new ZodAdapter();\n}\n\n// ../../node_modules/.pnpm/deepmerge-ts@7.1.3/node_modules/deepmerge-ts/dist/index.mjs\nvar actions = {\n\tdefaultMerge: Symbol(\"deepmerge-ts: default merge\"),\n\tskip: Symbol(\"deepmerge-ts: skip\"),\n};\nvar actionsInto = {\n\tdefaultMerge: actions.defaultMerge,\n};\nfunction defaultMetaDataUpdater(previousMeta, metaMeta) {\n\treturn metaMeta;\n}\nfunction defaultFilterValues(values, meta) {\n\treturn values.filter((value) => value !== void 0);\n}\nvar ObjectType;\n(function (ObjectType2) {\n\tObjectType2[(ObjectType2[\"NOT\"] = 0)] = \"NOT\";\n\tObjectType2[(ObjectType2[\"RECORD\"] = 1)] = \"RECORD\";\n\tObjectType2[(ObjectType2[\"ARRAY\"] = 2)] = \"ARRAY\";\n\tObjectType2[(ObjectType2[\"SET\"] = 3)] = \"SET\";\n\tObjectType2[(ObjectType2[\"MAP\"] = 4)] = \"MAP\";\n\tObjectType2[(ObjectType2[\"OTHER\"] = 5)] = \"OTHER\";\n})(ObjectType || (ObjectType = {}));\nfunction getObjectType(object) {\n\tif (typeof object !== \"object\" || object === null) {\n\t\treturn 0;\n\t}\n\tif (Array.isArray(object)) {\n\t\treturn 2;\n\t}\n\tif (isRecord(object)) {\n\t\treturn 1;\n\t}\n\tif (object instanceof Set) {\n\t\treturn 3;\n\t}\n\tif (object instanceof Map) {\n\t\treturn 4;\n\t}\n\treturn 5;\n}\nfunction getKeys(objects) {\n\tconst keys = /* @__PURE__ */ new Set();\n\tfor (const object of objects) {\n\t\tfor (const key of [...Object.keys(object), ...Object.getOwnPropertySymbols(object)]) {\n\t\t\tkeys.add(key);\n\t\t}\n\t}\n\treturn keys;\n}\nfunction objectHasProperty(object, property) {\n\treturn typeof object === \"object\" && Object.prototype.propertyIsEnumerable.call(object, property);\n}\nfunction getIterableOfIterables(iterables) {\n\tlet m_iterablesIndex = 0;\n\tlet m_iterator = iterables[0]?.[Symbol.iterator]();\n\treturn {\n\t\t[Symbol.iterator]() {\n\t\t\treturn {\n\t\t\t\tnext() {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (m_iterator === void 0) {\n\t\t\t\t\t\t\treturn { done: true, value: void 0 };\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst result = m_iterator.next();\n\t\t\t\t\t\tif (result.done === true) {\n\t\t\t\t\t\t\tm_iterablesIndex += 1;\n\t\t\t\t\t\t\tm_iterator = iterables[m_iterablesIndex]?.[Symbol.iterator]();\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\t\tvalue: result.value,\n\t\t\t\t\t\t};\n\t\t\t\t\t} while (true);\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t};\n}\nvar validRecordToStringValues = [\"[object Object]\", \"[object Module]\"];\nfunction isRecord(value) {\n\tif (!validRecordToStringValues.includes(Object.prototype.toString.call(value))) {\n\t\treturn false;\n\t}\n\tconst { constructor } = value;\n\tif (constructor === void 0) {\n\t\treturn true;\n\t}\n\tconst prototype = constructor.prototype;\n\tif (\n\t\tprototype === null ||\n\t\ttypeof prototype !== \"object\" ||\n\t\t!validRecordToStringValues.includes(Object.prototype.toString.call(prototype))\n\t) {\n\t\treturn false;\n\t}\n\tif (!prototype.hasOwnProperty(\"isPrototypeOf\")) {\n\t\treturn false;\n\t}\n\treturn true;\n}\nfunction mergeRecords$1(values, utils, meta) {\n\tconst result = {};\n\tfor (const key of getKeys(values)) {\n\t\tconst propValues = [];\n\t\tfor (const value of values) {\n\t\t\tif (objectHasProperty(value, key)) {\n\t\t\t\tpropValues.push(value[key]);\n\t\t\t}\n\t\t}\n\t\tif (propValues.length === 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst updatedMeta = utils.metaDataUpdater(meta, {\n\t\t\tkey,\n\t\t\tparents: values,\n\t\t});\n\t\tconst propertyResult = mergeUnknowns(propValues, utils, updatedMeta);\n\t\tif (propertyResult === actions.skip) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (key === \"__proto__\") {\n\t\t\tObject.defineProperty(result, key, {\n\t\t\t\tvalue: propertyResult,\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\twritable: true,\n\t\t\t});\n\t\t} else {\n\t\t\tresult[key] = propertyResult;\n\t\t}\n\t}\n\treturn result;\n}\nfunction mergeArrays$1(values) {\n\treturn values.flat();\n}\nfunction mergeSets$1(values) {\n\treturn new Set(getIterableOfIterables(values));\n}\nfunction mergeMaps$1(values) {\n\treturn new Map(getIterableOfIterables(values));\n}\nfunction mergeOthers$1(values) {\n\treturn values.at(-1);\n}\nvar mergeFunctions = {\n\tmergeRecords: mergeRecords$1,\n\tmergeArrays: mergeArrays$1,\n\tmergeSets: mergeSets$1,\n\tmergeMaps: mergeMaps$1,\n\tmergeOthers: mergeOthers$1,\n};\nfunction deepmerge(...objects) {\n\treturn deepmergeCustom({})(...objects);\n}\nfunction deepmergeCustom(options, rootMetaData) {\n\tconst utils = getUtils(options, customizedDeepmerge);\n\tfunction customizedDeepmerge(...objects) {\n\t\treturn mergeUnknowns(objects, utils, rootMetaData);\n\t}\n\treturn customizedDeepmerge;\n}\nfunction getUtils(options, customizedDeepmerge) {\n\treturn {\n\t\tdefaultMergeFunctions: mergeFunctions,\n\t\tmergeFunctions: {\n\t\t\t...mergeFunctions,\n\t\t\t...Object.fromEntries(\n\t\t\t\tObject.entries(options)\n\t\t\t\t\t.filter(([key, option]) => Object.hasOwn(mergeFunctions, key))\n\t\t\t\t\t.map(([key, option]) => (option === false ? [key, mergeFunctions.mergeOthers] : [key, option]))\n\t\t\t),\n\t\t},\n\t\tmetaDataUpdater: options.metaDataUpdater ?? defaultMetaDataUpdater,\n\t\tdeepmerge: customizedDeepmerge,\n\t\tuseImplicitDefaultMerging: options.enableImplicitDefaultMerging ?? false,\n\t\tfilterValues: options.filterValues === false ? void 0 : (options.filterValues ?? defaultFilterValues),\n\t\tactions,\n\t};\n}\nfunction mergeUnknowns(values, utils, meta) {\n\tconst filteredValues = utils.filterValues?.(values, meta) ?? values;\n\tif (filteredValues.length === 0) {\n\t\treturn void 0;\n\t}\n\tif (filteredValues.length === 1) {\n\t\treturn mergeOthers(filteredValues, utils, meta);\n\t}\n\tconst type = getObjectType(filteredValues[0]);\n\tif (type !== 0 && type !== 5) {\n\t\tfor (let m_index = 1; m_index < filteredValues.length; m_index++) {\n\t\t\tif (getObjectType(filteredValues[m_index]) === type) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn mergeOthers(filteredValues, utils, meta);\n\t\t}\n\t}\n\tswitch (type) {\n\t\tcase 1: {\n\t\t\treturn mergeRecords(filteredValues, utils, meta);\n\t\t}\n\t\tcase 2: {\n\t\t\treturn mergeArrays(filteredValues, utils, meta);\n\t\t}\n\t\tcase 3: {\n\t\t\treturn mergeSets(filteredValues, utils, meta);\n\t\t}\n\t\tcase 4: {\n\t\t\treturn mergeMaps(filteredValues, utils, meta);\n\t\t}\n\t\tdefault: {\n\t\t\treturn mergeOthers(filteredValues, utils, meta);\n\t\t}\n\t}\n}\nfunction mergeRecords(values, utils, meta) {\n\tconst result = utils.mergeFunctions.mergeRecords(values, utils, meta);\n\tif (\n\t\tresult === actions.defaultMerge ||\n\t\t(utils.useImplicitDefaultMerging &&\n\t\t\tresult === void 0 &&\n\t\t\tutils.mergeFunctions.mergeRecords !== utils.defaultMergeFunctions.mergeRecords)\n\t) {\n\t\treturn utils.defaultMergeFunctions.mergeRecords(values, utils, meta);\n\t}\n\treturn result;\n}\nfunction mergeArrays(values, utils, meta) {\n\tconst result = utils.mergeFunctions.mergeArrays(values, utils, meta);\n\tif (\n\t\tresult === actions.defaultMerge ||\n\t\t(utils.useImplicitDefaultMerging &&\n\t\t\tresult === void 0 &&\n\t\t\tutils.mergeFunctions.mergeArrays !== utils.defaultMergeFunctions.mergeArrays)\n\t) {\n\t\treturn utils.defaultMergeFunctions.mergeArrays(values);\n\t}\n\treturn result;\n}\nfunction mergeSets(values, utils, meta) {\n\tconst result = utils.mergeFunctions.mergeSets(values, utils, meta);\n\tif (\n\t\tresult === actions.defaultMerge ||\n\t\t(utils.useImplicitDefaultMerging &&\n\t\t\tresult === void 0 &&\n\t\t\tutils.mergeFunctions.mergeSets !== utils.defaultMergeFunctions.mergeSets)\n\t) {\n\t\treturn utils.defaultMergeFunctions.mergeSets(values);\n\t}\n\treturn result;\n}\nfunction mergeMaps(values, utils, meta) {\n\tconst result = utils.mergeFunctions.mergeMaps(values, utils, meta);\n\tif (\n\t\tresult === actions.defaultMerge ||\n\t\t(utils.useImplicitDefaultMerging &&\n\t\t\tresult === void 0 &&\n\t\t\tutils.mergeFunctions.mergeMaps !== utils.defaultMergeFunctions.mergeMaps)\n\t) {\n\t\treturn utils.defaultMergeFunctions.mergeMaps(values);\n\t}\n\treturn result;\n}\nfunction mergeOthers(values, utils, meta) {\n\tconst result = utils.mergeFunctions.mergeOthers(values, utils, meta);\n\tif (\n\t\tresult === actions.defaultMerge ||\n\t\t(utils.useImplicitDefaultMerging &&\n\t\t\tresult === void 0 &&\n\t\t\tutils.mergeFunctions.mergeOthers !== utils.defaultMergeFunctions.mergeOthers)\n\t) {\n\t\treturn utils.defaultMergeFunctions.mergeOthers(values);\n\t}\n\treturn result;\n}\n\n// src/next/errors/bailout-to-csr.ts\nvar BAILOUT_TO_CSR = \"BAILOUT_TO_CLIENT_SIDE_RENDERING\";\nfunction isBailoutToCSRError(err) {\n\tif (typeof err !== \"object\" || err === null || !(\"digest\" in err)) {\n\t\treturn false;\n\t}\n\treturn err.digest === BAILOUT_TO_CSR;\n}\n\n// src/next/errors/http-access-fallback.ts\nvar HTTPAccessErrorStatus = {\n\tNOT_FOUND: 404,\n\tFORBIDDEN: 403,\n\tUNAUTHORIZED: 401,\n};\nvar ALLOWED_CODES = new Set(Object.values(HTTPAccessErrorStatus));\nvar HTTP_ERROR_FALLBACK_ERROR_CODE = \"NEXT_HTTP_ERROR_FALLBACK\";\nfunction isHTTPAccessFallbackError(error) {\n\tif (typeof error !== \"object\" || error === null || !(\"digest\" in error) || typeof error.digest !== \"string\") {\n\t\treturn false;\n\t}\n\tconst [prefix, httpStatus] = error.digest.split(\";\");\n\treturn prefix === HTTP_ERROR_FALLBACK_ERROR_CODE && ALLOWED_CODES.has(Number(httpStatus));\n}\nfunction getAccessFallbackHTTPStatus(error) {\n\tconst httpStatus = error.digest.split(\";\")[1];\n\treturn Number(httpStatus);\n}\n\n// src/next/errors/redirect.ts\nvar RedirectStatusCode = /* @__PURE__ */ ((RedirectStatusCode2) => {\n\tRedirectStatusCode2[(RedirectStatusCode2[\"SeeOther\"] = 303)] = \"SeeOther\";\n\tRedirectStatusCode2[(RedirectStatusCode2[\"TemporaryRedirect\"] = 307)] = \"TemporaryRedirect\";\n\tRedirectStatusCode2[(RedirectStatusCode2[\"PermanentRedirect\"] = 308)] = \"PermanentRedirect\";\n\treturn RedirectStatusCode2;\n})(RedirectStatusCode || {});\nvar REDIRECT_ERROR_CODE = \"NEXT_REDIRECT\";\nfunction isRedirectError(error) {\n\tif (typeof error !== \"object\" || error === null || !(\"digest\" in error) || typeof error.digest !== \"string\") {\n\t\treturn false;\n\t}\n\tconst digest = error.digest.split(\";\");\n\tconst [errorCode, type] = digest;\n\tconst destination = digest.slice(2, -2).join(\";\");\n\tconst status = digest.at(-2);\n\tconst statusCode = Number(status);\n\treturn (\n\t\terrorCode === REDIRECT_ERROR_CODE &&\n\t\t(type === \"replace\" || type === \"push\") &&\n\t\ttypeof destination === \"string\" &&\n\t\t!isNaN(statusCode) &&\n\t\tstatusCode in RedirectStatusCode\n\t);\n}\n\n// src/next/errors/router.ts\nfunction isNextRouterError(error) {\n\treturn isRedirectError(error) || isHTTPAccessFallbackError(error);\n}\n\n// src/next/errors/dynamic-usage.ts\nvar DYNAMIC_ERROR_CODE = \"DYNAMIC_SERVER_USAGE\";\nfunction isDynamicServerError(err) {\n\tif (typeof err !== \"object\" || err === null || !(\"digest\" in err) || typeof err.digest !== \"string\") {\n\t\treturn false;\n\t}\n\treturn err.digest === DYNAMIC_ERROR_CODE;\n}\nfunction isDynamicPostponeReason(reason) {\n\treturn (\n\t\treason.includes(\"needs to bail out of prerendering at this point because it used\") &&\n\t\treason.includes(\"Learn more: https://nextjs.org/docs/messages/ppr-caught-error\")\n\t);\n}\nfunction isDynamicPostpone(err) {\n\tif (\n\t\ttypeof err === \"object\" &&\n\t\terr !== null && // eslint-disable-next-line\n\t\ttypeof err.message === \"string\"\n\t) {\n\t\treturn isDynamicPostponeReason(err.message);\n\t}\n\treturn false;\n}\nvar isDynamicUsageError = (err) =>\n\tisDynamicServerError(err) || isBailoutToCSRError(err) || isNextRouterError(err) || isDynamicPostpone(err);\n\n// src/next/errors/postpone.ts\nvar REACT_POSTPONE_TYPE = Symbol.for(\"react.postpone\");\nfunction isPostpone(error) {\n\treturn (\n\t\ttypeof error === \"object\" &&\n\t\terror !== null && // eslint-disable-next-line\n\t\terror.$$typeof === REACT_POSTPONE_TYPE\n\t);\n}\n\n// src/next/errors/index.ts\nfunction isNotFoundError(error) {\n\treturn isHTTPAccessFallbackError(error) && getAccessFallbackHTTPStatus(error) === 404;\n}\nfunction isForbiddenError(error) {\n\treturn isHTTPAccessFallbackError(error) && getAccessFallbackHTTPStatus(error) === 403;\n}\nfunction isUnauthorizedError(error) {\n\treturn isHTTPAccessFallbackError(error) && getAccessFallbackHTTPStatus(error) === 401;\n}\nfunction isFrameworkError(error) {\n\treturn isNextRouterError(error) || isBailoutToCSRError(error) || isDynamicUsageError(error) || isPostpone(error);\n}\n\n// src/utils.ts\nvar DEFAULT_SERVER_ERROR_MESSAGE = \"Something went wrong while executing the operation.\";\nvar isError = (error) => error instanceof Error;\nvar winningBoolean = (...args) => {\n\treturn args.reduce((acc, v) => (typeof v === \"boolean\" ? v : acc), false);\n};\n\n// src/validation-errors.ts\nvar buildValidationErrors = (issues) => {\n\tconst ve = {};\n\tfor (const issue of issues) {\n\t\tconst { path, message } = issue;\n\t\tif (!path || path.length === 0) {\n\t\t\tve._errors = ve._errors ? [...ve._errors, message] : [message];\n\t\t\tcontinue;\n\t\t}\n\t\tlet ref = ve;\n\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\tconst k = path[i];\n\t\t\tif (!ref[k]) {\n\t\t\t\tref[k] = {};\n\t\t\t}\n\t\t\tref = ref[k];\n\t\t}\n\t\tconst key = path[path.length - 1];\n\t\tref[key] = ref[key]?._errors\n\t\t\t? {\n\t\t\t\t\t...structuredClone(ref[key]),\n\t\t\t\t\t_errors: [...ref[key]._errors, message],\n\t\t\t\t}\n\t\t\t: { ...structuredClone(ref[key]), _errors: [message] };\n\t}\n\treturn ve;\n};\nvar ActionServerValidationError = class extends Error {\n\tvalidationErrors;\n\tconstructor(validationErrors) {\n\t\tsuper(\"Server Action server validation error(s) occurred\");\n\t\tthis.validationErrors = validationErrors;\n\t}\n};\nvar ActionValidationError = class extends Error {\n\tvalidationErrors;\n\tconstructor(validationErrors) {\n\t\tsuper(\"Server Action validation error(s) occurred\");\n\t\tthis.validationErrors = validationErrors;\n\t}\n};\nfunction returnValidationErrors(schema, validationErrors) {\n\tthrow new ActionServerValidationError(validationErrors);\n}\nfunction formatValidationErrors(validationErrors) {\n\treturn validationErrors;\n}\nfunction formatBindArgsValidationErrors(bindArgsValidationErrors) {\n\treturn bindArgsValidationErrors;\n}\nfunction flattenValidationErrors(validationErrors) {\n\tconst flattened = {\n\t\tformErrors: [],\n\t\tfieldErrors: {},\n\t};\n\tfor (const [key, value] of Object.entries(validationErrors ?? {})) {\n\t\tif (key === \"_errors\" && Array.isArray(value)) {\n\t\t\tflattened.formErrors = [...value];\n\t\t} else {\n\t\t\tif (\"_errors\" in value) {\n\t\t\t\tflattened.fieldErrors[key] = [...value._errors];\n\t\t\t}\n\t\t}\n\t}\n\treturn flattened;\n}\nfunction flattenBindArgsValidationErrors(bindArgsValidationErrors) {\n\treturn bindArgsValidationErrors.map((ve) => flattenValidationErrors(ve));\n}\nvar ActionMetadataValidationError = class extends Error {\n\tvalidationErrors;\n\tconstructor(validationErrors) {\n\t\tsuper(\"Invalid metadata input. Please be sure to pass metadata via `metadata` method before defining the action.\");\n\t\tthis.name = \"ActionMetadataError\";\n\t\tthis.validationErrors = validationErrors;\n\t}\n};\nvar ActionOutputDataValidationError = class extends Error {\n\tvalidationErrors;\n\tconstructor(validationErrors) {\n\t\tsuper(\n\t\t\t\"Invalid action data (output). Please be sure to return data following the shape of the schema passed to `dataSchema` method.\"\n\t\t);\n\t\tthis.name = \"ActionOutputDataError\";\n\t\tthis.validationErrors = validationErrors;\n\t}\n};\n\n// src/action-builder.ts\nfunction actionBuilder(args) {\n\tconst bindArgsSchemas = args.bindArgsSchemas ?? [];\n\tfunction buildAction({ withState }) {\n\t\treturn {\n\t\t\taction: (serverCodeFn, utils) => {\n\t\t\t\treturn async (...clientInputs) => {\n\t\t\t\t\tlet currentCtx = {};\n\t\t\t\t\tconst middlewareResult = { success: false };\n\t\t\t\t\tlet prevResult = void 0;\n\t\t\t\t\tconst parsedInputDatas = [];\n\t\t\t\t\tlet frameworkError = null;\n\t\t\t\t\tif (withState) {\n\t\t\t\t\t\tprevResult = clientInputs.splice(bindArgsSchemas.length, 1)[0];\n\t\t\t\t\t}\n\t\t\t\t\tif (bindArgsSchemas.length + 1 > clientInputs.length) {\n\t\t\t\t\t\tclientInputs.push(void 0);\n\t\t\t\t\t}\n\t\t\t\t\tconst executeMiddlewareStack = async (idx = 0) => {\n\t\t\t\t\t\tif (frameworkError) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst middlewareFn = args.middlewareFns[idx];\n\t\t\t\t\t\tmiddlewareResult.ctx = currentCtx;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (idx === 0) {\n\t\t\t\t\t\t\t\tif (args.metadataSchema) {\n\t\t\t\t\t\t\t\t\tconst parsedMd = await args.validationAdapter.validate(args.metadataSchema, args.metadata);\n\t\t\t\t\t\t\t\t\tif (!parsedMd.success) {\n\t\t\t\t\t\t\t\t\t\tthrow new ActionMetadataValidationError(buildValidationErrors(parsedMd.issues));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (middlewareFn) {\n\t\t\t\t\t\t\t\tawait middlewareFn({\n\t\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\t\t// pass raw client input\n\t\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\t\tnext: async (nextOpts) => {\n\t\t\t\t\t\t\t\t\t\tcurrentCtx = deepmerge(currentCtx, nextOpts?.ctx ?? {});\n\t\t\t\t\t\t\t\t\t\tawait executeMiddlewareStack(idx + 1);\n\t\t\t\t\t\t\t\t\t\treturn middlewareResult;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst parsedInputs = await Promise.all(\n\t\t\t\t\t\t\t\t\tclientInputs.map(async (input, i) => {\n\t\t\t\t\t\t\t\t\t\tif (i === clientInputs.length - 1) {\n\t\t\t\t\t\t\t\t\t\t\tif (typeof args.inputSchemaFn === \"undefined\") {\n\t\t\t\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdata: void 0,\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\treturn args.validationAdapter.validate(await args.inputSchemaFn(), input);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\treturn args.validationAdapter.validate(bindArgsSchemas[i], input);\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tlet hasBindValidationErrors = false;\n\t\t\t\t\t\t\t\tconst bindArgsValidationErrors = Array(parsedInputs.length - 1).fill({});\n\t\t\t\t\t\t\t\tfor (let i = 0; i < parsedInputs.length; i++) {\n\t\t\t\t\t\t\t\t\tconst parsedInput = parsedInputs[i];\n\t\t\t\t\t\t\t\t\tif (parsedInput.success) {\n\t\t\t\t\t\t\t\t\t\tparsedInputDatas.push(parsedInput.data);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tif (i < parsedInputs.length - 1) {\n\t\t\t\t\t\t\t\t\t\t\tbindArgsValidationErrors[i] = buildValidationErrors(parsedInput.issues);\n\t\t\t\t\t\t\t\t\t\t\thasBindValidationErrors = true;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tconst validationErrors = buildValidationErrors(parsedInput.issues);\n\t\t\t\t\t\t\t\t\t\t\tmiddlewareResult.validationErrors = await Promise.resolve(\n\t\t\t\t\t\t\t\t\t\t\t\targs.handleValidationErrorsShape(validationErrors, {\n\t\t\t\t\t\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (hasBindValidationErrors) {\n\t\t\t\t\t\t\t\t\tmiddlewareResult.bindArgsValidationErrors = await Promise.resolve(\n\t\t\t\t\t\t\t\t\t\targs.handleBindArgsValidationErrorsShape(bindArgsValidationErrors, {\n\t\t\t\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (middlewareResult.validationErrors || middlewareResult.bindArgsValidationErrors) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst scfArgs = [];\n\t\t\t\t\t\t\t\tscfArgs[0] = {\n\t\t\t\t\t\t\t\t\tparsedInput: parsedInputDatas.at(-1),\n\t\t\t\t\t\t\t\t\tbindArgsParsedInputs: parsedInputDatas.slice(0, -1),\n\t\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tif (withState) {\n\t\t\t\t\t\t\t\t\tscfArgs[1] = { prevResult: structuredClone(prevResult) };\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst data = await serverCodeFn(...scfArgs);\n\t\t\t\t\t\t\t\tif (typeof args.outputSchema !== \"undefined\") {\n\t\t\t\t\t\t\t\t\tconst parsedData = await args.validationAdapter.validate(args.outputSchema, data);\n\t\t\t\t\t\t\t\t\tif (!parsedData.success) {\n\t\t\t\t\t\t\t\t\t\tthrow new ActionOutputDataValidationError(buildValidationErrors(parsedData.issues));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmiddlewareResult.success = true;\n\t\t\t\t\t\t\t\tmiddlewareResult.data = data;\n\t\t\t\t\t\t\t\tmiddlewareResult.parsedInput = parsedInputDatas.at(-1);\n\t\t\t\t\t\t\t\tmiddlewareResult.bindArgsParsedInputs = parsedInputDatas.slice(0, -1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tif (isFrameworkError(e)) {\n\t\t\t\t\t\t\t\tmiddlewareResult.success = true;\n\t\t\t\t\t\t\t\tframeworkError = e;\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (e instanceof ActionServerValidationError) {\n\t\t\t\t\t\t\t\tconst ve = e.validationErrors;\n\t\t\t\t\t\t\t\tmiddlewareResult.validationErrors = await Promise.resolve(\n\t\t\t\t\t\t\t\t\targs.handleValidationErrorsShape(ve, {\n\t\t\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst error = isError(e) ? e : new Error(DEFAULT_SERVER_ERROR_MESSAGE);\n\t\t\t\t\t\t\t\tconst returnedError = await Promise.resolve(\n\t\t\t\t\t\t\t\t\targs.handleServerError(error, {\n\t\t\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\t\t\t// pass raw client input\n\t\t\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tmiddlewareResult.serverError = returnedError;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tawait executeMiddlewareStack();\n\t\t\t\t\tconst callbackPromises = [];\n\t\t\t\t\tif (frameworkError) {\n\t\t\t\t\t\tcallbackPromises.push(\n\t\t\t\t\t\t\tutils?.onSuccess?.({\n\t\t\t\t\t\t\t\tdata: void 0,\n\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\tparsedInput: parsedInputDatas.at(-1),\n\t\t\t\t\t\t\t\tbindArgsParsedInputs: parsedInputDatas.slice(0, -1),\n\t\t\t\t\t\t\t\thasRedirected: isRedirectError(frameworkError),\n\t\t\t\t\t\t\t\thasNotFound: isNotFoundError(frameworkError),\n\t\t\t\t\t\t\t\thasForbidden: isForbiddenError(frameworkError),\n\t\t\t\t\t\t\t\thasUnauthorized: isUnauthorizedError(frameworkError),\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcallbackPromises.push(\n\t\t\t\t\t\t\tutils?.onSettled?.({\n\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\tresult: {},\n\t\t\t\t\t\t\t\thasRedirected: isRedirectError(frameworkError),\n\t\t\t\t\t\t\t\thasNotFound: isNotFoundError(frameworkError),\n\t\t\t\t\t\t\t\thasForbidden: isForbiddenError(frameworkError),\n\t\t\t\t\t\t\t\thasUnauthorized: isUnauthorizedError(frameworkError),\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t\tawait Promise.all(callbackPromises);\n\t\t\t\t\t\tthrow frameworkError;\n\t\t\t\t\t}\n\t\t\t\t\tconst actionResult = {};\n\t\t\t\t\tif (typeof middlewareResult.validationErrors !== \"undefined\") {\n\t\t\t\t\t\tif (winningBoolean(args.throwValidationErrors, utils?.throwValidationErrors)) {\n\t\t\t\t\t\t\tthrow new ActionValidationError(middlewareResult.validationErrors);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tactionResult.validationErrors = middlewareResult.validationErrors;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof middlewareResult.bindArgsValidationErrors !== \"undefined\") {\n\t\t\t\t\t\tactionResult.bindArgsValidationErrors = middlewareResult.bindArgsValidationErrors;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof middlewareResult.serverError !== \"undefined\") {\n\t\t\t\t\t\tif (utils?.throwServerError) {\n\t\t\t\t\t\t\tthrow middlewareResult.serverError;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tactionResult.serverError = middlewareResult.serverError;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (middlewareResult.success) {\n\t\t\t\t\t\tif (typeof middlewareResult.data !== \"undefined\") {\n\t\t\t\t\t\t\tactionResult.data = middlewareResult.data;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcallbackPromises.push(\n\t\t\t\t\t\t\tutils?.onSuccess?.({\n\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\tdata: actionResult.data,\n\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\tparsedInput: parsedInputDatas.at(-1),\n\t\t\t\t\t\t\t\tbindArgsParsedInputs: parsedInputDatas.slice(0, -1),\n\t\t\t\t\t\t\t\thasRedirected: false,\n\t\t\t\t\t\t\t\thasNotFound: false,\n\t\t\t\t\t\t\t\thasForbidden: false,\n\t\t\t\t\t\t\t\thasUnauthorized: false,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcallbackPromises.push(\n\t\t\t\t\t\t\tutils?.onError?.({\n\t\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\t\terror: actionResult,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tcallbackPromises.push(\n\t\t\t\t\t\tutils?.onSettled?.({\n\t\t\t\t\t\t\tmetadata: args.metadata,\n\t\t\t\t\t\t\tctx: currentCtx,\n\t\t\t\t\t\t\tclientInput: clientInputs.at(-1),\n\t\t\t\t\t\t\tbindArgsClientInputs: bindArgsSchemas.length ? clientInputs.slice(0, -1) : [],\n\t\t\t\t\t\t\tresult: actionResult,\n\t\t\t\t\t\t\thasRedirected: false,\n\t\t\t\t\t\t\thasNotFound: false,\n\t\t\t\t\t\t\thasForbidden: false,\n\t\t\t\t\t\t\thasUnauthorized: false,\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\tawait Promise.all(callbackPromises);\n\t\t\t\t\treturn actionResult;\n\t\t\t\t};\n\t\t\t},\n\t\t};\n\t}\n\treturn {\n\t\t/**\n\t\t * Define the action.\n\t\t * @param serverCodeFn Code that will be executed on the **server side**\n\t\t *\n\t\t * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#action--stateaction See docs for more information}\n\t\t */\n\t\taction: buildAction({ withState: false }).action,\n\t\t/**\n\t\t * Define the stateful action. To be used with the [`useStateAction`](https://next-safe-action.dev/docs/execute-actions/hooks/usestateaction) hook.\n\t\t * @param serverCodeFn Code that will be executed on the **server side**\n\t\t *\n\t\t * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#action--stateaction See docs for more information}\n\t\t */\n\t\tstateAction: buildAction({ withState: true }).action,\n\t};\n}\n\n// src/safe-action-client.ts\nvar SafeActionClient = class _SafeActionClient {\n\t#handleServerError;\n\t#middlewareFns;\n\t#metadataSchema;\n\t#metadata;\n\t#inputSchemaFn;\n\t#outputSchema;\n\t#ctxType;\n\t#bindArgsSchemas;\n\t#validationAdapter;\n\t#handleValidationErrorsShape;\n\t#handleBindArgsValidationErrorsShape;\n\t#defaultValidationErrorsShape;\n\t#throwValidationErrors;\n\tconstructor(opts) {\n\t\tthis.#middlewareFns = opts.middlewareFns;\n\t\tthis.#handleServerError = opts.handleServerError;\n\t\tthis.#metadataSchema = opts.metadataSchema;\n\t\tthis.#metadata = opts.metadata;\n\t\tthis.#inputSchemaFn = opts.inputSchemaFn ?? void 0;\n\t\tthis.#outputSchema = opts.outputSchema;\n\t\tthis.#bindArgsSchemas = opts.bindArgsSchemas ?? [];\n\t\tthis.#validationAdapter = opts.validationAdapter;\n\t\tthis.#ctxType = opts.ctxType;\n\t\tthis.#handleValidationErrorsShape = opts.handleValidationErrorsShape;\n\t\tthis.#handleBindArgsValidationErrorsShape = opts.handleBindArgsValidationErrorsShape;\n\t\tthis.#defaultValidationErrorsShape = opts.defaultValidationErrorsShape;\n\t\tthis.#throwValidationErrors = opts.throwValidationErrors;\n\t}\n\t/**\n\t * Use a middleware function.\n\t * @param middlewareFn Middleware function\n\t *\n\t * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#use See docs for more information}\n\t */\n\tuse(middlewareFn) {\n\t\treturn new _SafeActionClient({\n\t\t\tmiddlewareFns: [...this.#middlewareFns, middlewareFn],\n\t\t\thandleServerError: this.#handleServerError,\n\t\t\tmetadataSchema: this.#metadataSchema,\n\t\t\tmetadata: this.#metadata,\n\t\t\tinputSchemaFn: this.#inputSchemaFn,\n\t\t\toutputSchema: this.#outputSchema,\n\t\t\tbindArgsSchemas: this.#bindArgsSchemas,\n\t\t\tvalidationAdapter: this.#validationAdapter,\n\t\t\thandleValidationErrorsShape: this.#handleValidationErrorsShape,\n\t\t\thandleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,\n\t\t\tctxType: {},\n\t\t\tdefaultValidationErrorsShape: this.#defaultValidationErrorsShape,\n\t\t\tthrowValidationErrors: this.#throwValidationErrors,\n\t\t});\n\t}\n\t/**\n\t * Define metadata for the action.\n\t * @param data Metadata with the same type as the return value of the [`defineMetadataSchema`](https://next-safe-action.dev/docs/define-actions/create-the-client#definemetadataschema) optional initialization function\n\t *\n\t * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#metadata See docs for more information}\n\t */\n\tmetadata(data) {\n\t\treturn new _SafeActionClient({\n\t\t\tmiddlewareFns: this.#middlewareFns,\n\t\t\thandleServerError: this.#handleServerError,\n\t\t\tmetadataSchema: this.#metadataSchema,\n\t\t\tmetadata: data,\n\t\t\tinputSchemaFn: this.#inputSchemaFn,\n\t\t\tbindArgsSchemas: this.#bindArgsSchemas,\n\t\t\toutputSchema: this.#outputSchema,\n\t\t\tvalidationAdapter: this.#validationAdapter,\n\t\t\thandleValidationErrorsShape: this.#handleValidationErrorsShape,\n\t\t\thandleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,\n\t\t\tctxType: {},\n\t\t\tdefaultValidationErrorsShape: this.#defaultValidationErrorsShape,\n\t\t\tthrowValidationErrors: this.#throwValidationErrors,\n\t\t});\n\t}\n\t/**\n\t * Define the input validation schema for the action.\n\t * @param inputSchema Input validation schema\n\t * @param utils Optional utils object\n\t *\n\t * {@link https://next-safe-action.dev/docs/define-actions/create-the-client#inputschema See docs for more information}\n\t */\n\tschema(inputSchema, utils) {\n\t\treturn new _SafeActionClient({\n\t\t\tmiddlewareFns: this.#middlewareFns,\n\t\t\thandleServerError: this.#handleServerError,\n\t\t\tmetadataSchema: this.#metadataSchema,\n\t\t\tmetadata: this.#metadata,\n\t\t\t// @ts-expect-error\n\t\t\tinputSchemaFn:\n\t\t\t\tinputSchema[Symbol.toStringTag] === \"AsyncFunction\"\n\t\t\t\t\t? async () => {\n\t\t\t\t\t\t\tconst prevSchema = await this.#inputSchemaFn?.();\n\t\t\t\t\t\t\treturn inputSchema(prevSchema);\n\t\t\t\t\t\t}\n\t\t\t\t\t: async () => inputSchema,\n\t\t\tbindArgsSchemas: this.#bindArgsSchemas,\n\t\t\toutputSchema: this.#outputSchema,\n\t\t\tvalidationAdapter: this.#validationAdapter,\n\t\t\thandleValidationErrorsShape: utils?.handleValidationErrorsShape ?? this.#handleValidationErrorsShape,\n\t\t\thandleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,\n\t\t\tctxType: {},\n\t\t\tdefaultValidationErrorsShape: this.#defaultValidationErrorsShape,\n\t\t\tthrowValidationErrors: this.#throwValidationErrors,\n\t\t});\n\t}\n\t/**\n\t * Define the bind args input validation schema for the action.\n\t * @param bindArgsSchemas Bind args input validation schemas\n\t * @param utils Optional utils object\n\t *\n\t * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#bindargsschemas See docs for more information}\n\t */\n\tbindArgsSchemas(bindArgsSchemas, utils) {\n\t\treturn new _SafeActionClient({\n\t\t\tmiddlewareFns: this.#middlewareFns,\n\t\t\thandleServerError: this.#handleServerError,\n\t\t\tmetadataSchema: this.#metadataSchema,\n\t\t\tmetadata: this.#metadata,\n\t\t\tinputSchemaFn: this.#inputSchemaFn,\n\t\t\tbindArgsSchemas,\n\t\t\toutputSchema: this.#outputSchema,\n\t\t\tvalidationAdapter: this.#validationAdapter,\n\t\t\thandleValidationErrorsShape: this.#handleValidationErrorsShape,\n\t\t\thandleBindArgsValidationErrorsShape:\n\t\t\t\tutils?.handleBindArgsValidationErrorsShape ?? this.#handleBindArgsValidationErrorsShape,\n\t\t\tctxType: {},\n\t\t\tdefaultValidationErrorsShape: this.#defaultValidationErrorsShape,\n\t\t\tthrowValidationErrors: this.#throwValidationErrors,\n\t\t});\n\t}\n\t/**\n\t * Define the output data validation schema for the action.\n\t * @param schema Output data validation schema\n\t *\n\t * {@link https://next-safe-action.dev/docs/define-actions/create-the-client#outputschema See docs for more information}\n\t */\n\toutputSchema(dataSchema) {\n\t\treturn new _SafeActionClient({\n\t\t\tmiddlewareFns: this.#middlewareFns,\n\t\t\thandleServerError: this.#handleServerError,\n\t\t\tmetadataSchema: this.#metadataSchema,\n\t\t\tmetadata: this.#metadata,\n\t\t\tinputSchemaFn: this.#inputSchemaFn,\n\t\t\tbindArgsSchemas: this.#bindArgsSchemas,\n\t\t\toutputSchema: dataSchema,\n\t\t\tvalidationAdapter: this.#validationAdapter,\n\t\t\thandleValidationErrorsShape: this.#handleValidationErrorsShape,\n\t\t\thandleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,\n\t\t\tctxType: {},\n\t\t\tdefaultValidationErrorsShape: this.#defaultValidationErrorsShape,\n\t\t\tthrowValidationErrors: this.#throwValidationErrors,\n\t\t});\n\t}\n\t/**\n\t * Define the action.\n\t * @param serverCodeFn Code that will be executed on the **server side**\n\t * @param [cb] Optional callbacks that will be called after action execution, on the server.\n\t *\n\t * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#action--stateaction See docs for more information}\n\t */\n\taction(serverCodeFn, utils) {\n\t\treturn actionBuilder({\n\t\t\thandleServerError: this.#handleServerError,\n\t\t\tmiddlewareFns: this.#middlewareFns,\n\t\t\tctxType: this.#ctxType,\n\t\t\tmetadataSchema: this.#metadataSchema,\n\t\t\tmetadata: this.#metadata,\n\t\t\tinputSchemaFn: this.#inputSchemaFn,\n\t\t\tbindArgsSchemas: this.#bindArgsSchemas,\n\t\t\toutputSchema: this.#outputSchema,\n\t\t\tvalidationAdapter: this.#validationAdapter,\n\t\t\thandleValidationErrorsShape: this.#handleValidationErrorsShape,\n\t\t\thandleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,\n\t\t\tthrowValidationErrors: this.#throwValidationErrors,\n\t\t}).action(serverCodeFn, utils);\n\t}\n\t/**\n\t * Define the stateful action.\n\t * To be used with the [`useStateAction`](https://next-safe-action.dev/docs/execute-actions/hooks/usestateaction) hook.\n\t * @param serverCodeFn Code that will be executed on the **server side**\n\t * @param [cb] Optional callbacks that will be called after action execution, on the server.\n\t *\n\t * {@link https://next-safe-action.dev/docs/define-actions/instance-methods#action--stateaction See docs for more information}\n\t */\n\tstateAction(serverCodeFn, utils) {\n\t\treturn actionBuilder({\n\t\t\thandleServerError: this.#handleServerError,\n\t\t\tmiddlewareFns: this.#middlewareFns,\n\t\t\tctxType: this.#ctxType,\n\t\t\tmetadataSchema: this.#metadataSchema,\n\t\t\tmetadata: this.#metadata,\n\t\t\tinputSchemaFn: this.#inputSchemaFn,\n\t\t\tbindArgsSchemas: this.#bindArgsSchemas,\n\t\t\toutputSchema: this.#outputSchema,\n\t\t\tvalidationAdapter: this.#validationAdapter,\n\t\t\thandleValidationErrorsShape: this.#handleValidationErrorsShape,\n\t\t\thandleBindArgsValidationErrorsShape: this.#handleBindArgsValidationErrorsShape,\n\t\t\tthrowValidationErrors: this.#throwValidationErrors,\n\t\t}).stateAction(serverCodeFn, utils);\n\t}\n};\n\n// src/middleware.ts\nvar createMiddleware = () => {\n\treturn {\n\t\tdefine: (middlewareFn) => middlewareFn,\n\t};\n};\n\n// src/index.ts\nvar createSafeActionClient = (createOpts) => {\n\tconst handleServerError =\n\t\tcreateOpts?.handleServerError ||\n\t\t((e) => {\n\t\t\tconsole.error(\"Action error:\", e.message);\n\t\t\treturn DEFAULT_SERVER_ERROR_MESSAGE;\n\t\t});\n\treturn new SafeActionClient({\n\t\tmiddlewareFns: [async ({ next }) => next({ ctx: {} })],\n\t\thandleServerError,\n\t\tinputSchemaFn: void 0,\n\t\tbindArgsSchemas: [],\n\t\toutputSchema: void 0,\n\t\tvalidationAdapter: createOpts?.validationAdapter ?? zodAdapter(),\n\t\t// use zod adapter by default\n\t\tctxType: {},\n\t\tmetadataSchema: createOpts?.defineMetadataSchema?.() ?? void 0,\n\t\tmetadata: void 0,\n\t\tdefaultValidationErrorsShape: createOpts?.defaultValidationErrorsShape ?? \"formatted\",\n\t\tthrowValidationErrors: Boolean(createOpts?.throwValidationErrors),\n\t\thandleValidationErrorsShape: async (ve) =>\n\t\t\tcreateOpts?.defaultValidationErrorsShape === \"flattened\"\n\t\t\t\t? flattenValidationErrors(ve)\n\t\t\t\t: formatValidationErrors(ve),\n\t\thandleBindArgsValidationErrorsShape: async (ve) =>\n\t\t\tcreateOpts?.defaultValidationErrorsShape === \"flattened\"\n\t\t\t\t? flattenBindArgsValidationErrors(ve)\n\t\t\t\t: formatBindArgsValidationErrors(ve),\n\t});\n};\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../../node_modules/next-safe-action/dist/index.mjs\n");

/***/ })

};
;