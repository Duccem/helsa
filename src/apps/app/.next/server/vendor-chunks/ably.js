/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ably";
exports.ids = ["vendor-chunks/ably"];
exports.modules = {

/***/ "(ssr)/../../../node_modules/ably/build/ably-node.js":
/*!*****************************************************!*\
  !*** ../../../node_modules/ably/build/ably-node.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/*@license Copyright 2015-2022 Ably Real-time Ltd (ably.com)\n\nAbly JavaScript Library v2.6.0\nhttps://github.com/ably/ably-js\n\nReleased under the Apache Licence v2.0*/(function (g, f) {\n    if (true) {\n      module.exports = f(__webpack_require__(/*! ws */ \"(ssr)/../../../node_modules/ws/index.js\"), __webpack_require__(/*! got */ \"(ssr)/../../../node_modules/got/dist/source/index.js\"));\n    } else {}\n  }(this, (__da, __db) => {\nvar exports = {};\nvar module = { exports };\n\"use strict\";\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// node_modules/bops/from.js\nvar require_from = __commonJS({\n  \"node_modules/bops/from.js\"(exports2, module2) {\n    var Buffer2 = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\n    var version2 = ((process || {}).version || \"v0.0.0\").slice(1).split(\".\")[0];\n    module2.exports = Number(version2) < 6 ? function from(source, encoding) {\n      return new Buffer2(source, encoding);\n    } : function from(source, encoding) {\n      return Buffer2.from(source, encoding);\n    };\n  }\n});\n\n// node_modules/bops/to.js\nvar require_to = __commonJS({\n  \"node_modules/bops/to.js\"(exports2, module2) {\n    module2.exports = function(source, encoding) {\n      return source.toString(encoding);\n    };\n  }\n});\n\n// node_modules/bops/is.js\nvar require_is = __commonJS({\n  \"node_modules/bops/is.js\"(exports2, module2) {\n    var Buffer2 = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\n    module2.exports = function(buffer) {\n      return Buffer2.isBuffer(buffer);\n    };\n  }\n});\n\n// node_modules/bops/subarray.js\nvar require_subarray = __commonJS({\n  \"node_modules/bops/subarray.js\"(exports2, module2) {\n    module2.exports = function(source, from, to) {\n      return arguments.length === 2 ? source.slice(from) : source.slice(from, to);\n    };\n  }\n});\n\n// node_modules/bops/join.js\nvar require_join = __commonJS({\n  \"node_modules/bops/join.js\"(exports2, module2) {\n    var Buffer2 = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\n    module2.exports = function(targets, hint) {\n      return hint !== void 0 ? Buffer2.concat(targets, hint) : Buffer2.concat(targets);\n    };\n  }\n});\n\n// node_modules/bops/copy.js\nvar require_copy = __commonJS({\n  \"node_modules/bops/copy.js\"(exports2, module2) {\n    module2.exports = copy2;\n    function copy2(source, target, target_start, source_start, source_end) {\n      return source.copy(target, target_start, source_start, source_end);\n    }\n  }\n});\n\n// node_modules/bops/create.js\nvar require_create = __commonJS({\n  \"node_modules/bops/create.js\"(exports2, module2) {\n    var Buffer2 = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\n    var version2 = ((process || {}).version || \"v0.0.0\").slice(1).split(\".\")[0];\n    module2.exports = Number(version2) < 6 ? function create(size) {\n      return new Buffer2(size);\n    } : function create(size) {\n      return Buffer2.alloc(size);\n    };\n  }\n});\n\n// node_modules/bops/read.js\nvar require_read = __commonJS({\n  \"node_modules/bops/read.js\"(exports2, module2) {\n    var proto = {};\n    var rex = /read.+/;\n    var buildFn;\n    buildFn = function(key2) {\n      var code = \"return buf.\" + key2 + \"(\" + [\"a\", \"b\", \"c\"].join(\",\") + \")\";\n      return new Function([\"buf\", \"a\", \"b\", \"c\"], code);\n    };\n    module2.exports = proto;\n    for (key in Buffer.prototype) {\n      if (rex.test(key)) {\n        proto[key] = buildFn(key);\n      }\n    }\n    var key;\n  }\n});\n\n// node_modules/bops/write.js\nvar require_write = __commonJS({\n  \"node_modules/bops/write.js\"(exports2, module2) {\n    var Buffer2 = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\n    var proto = {};\n    var rex = /write.+/;\n    var buildFn;\n    buildFn = function(key2) {\n      var code = \"return buf.\" + key2 + \"(\" + [\"a\", \"b\", \"c\"].join(\",\") + \")\";\n      return new Function([\"buf\", \"a\", \"b\", \"c\"], code);\n    };\n    module2.exports = proto;\n    for (key in Buffer2.prototype) {\n      if (rex.test(key)) {\n        proto[key] = buildFn(key);\n      }\n    }\n    var key;\n  }\n});\n\n// node_modules/bops/index.js\nvar require_bops = __commonJS({\n  \"node_modules/bops/index.js\"(exports2, module2) {\n    var proto = {};\n    module2.exports = proto;\n    proto.from = require_from();\n    proto.to = require_to();\n    proto.is = require_is();\n    proto.subarray = require_subarray();\n    proto.join = require_join();\n    proto.copy = require_copy();\n    proto.create = require_create();\n    mix(require_read(), proto);\n    mix(require_write(), proto);\n    function mix(from, into) {\n      for (var key in from) {\n        into[key] = from[key];\n      }\n    }\n  }\n});\n\n// node_modules/@ably/msgpack-js/msgpack.js\nvar require_msgpack = __commonJS({\n  \"node_modules/@ably/msgpack-js/msgpack.js\"(exports2) {\n    \"use strict\";\n    var bops = require_bops();\n    exports2.encode = function(value, sparse) {\n      var size = sizeof(value, sparse);\n      if (size == 0)\n        return void 0;\n      var buffer = bops.create(size);\n      encode2(value, buffer, 0, sparse);\n      return buffer;\n    };\n    exports2.decode = decode3;\n    var SH_L_32 = (1 << 16) * (1 << 16);\n    var SH_R_32 = 1 / SH_L_32;\n    function readInt64BE(buf, offset) {\n      offset = offset || 0;\n      return buf.readInt32BE(offset + 0) * SH_L_32 + buf.readUInt32BE(offset + 4);\n    }\n    function readUInt64BE(buf, offset) {\n      offset = offset || 0;\n      return buf.readUInt32BE(offset + 0) * SH_L_32 + buf.readUInt32BE(offset + 4);\n    }\n    function writeInt64BE(buf, val, offset) {\n      if (val < 9223372036854776e3) {\n        buf.writeInt32BE(Math.floor(val * SH_R_32), offset);\n        buf.writeInt32BE(val & -1, offset + 4);\n      } else {\n        buf.writeUInt32BE(2147483647, offset);\n        buf.writeUInt32BE(4294967295, offset + 4);\n      }\n    }\n    function writeUInt64BE(buf, val, offset) {\n      if (val < 18446744073709552e3) {\n        buf.writeUInt32BE(Math.floor(val * SH_R_32), offset);\n        buf.writeInt32BE(val & -1, offset + 4);\n      } else {\n        buf.writeUInt32BE(4294967295, offset);\n        buf.writeUInt32BE(4294967295, offset + 4);\n      }\n    }\n    function Decoder(buffer, offset) {\n      this.offset = offset || 0;\n      this.buffer = buffer;\n      this.bufferLength = buffer.length;\n    }\n    Decoder.prototype.map = function(length) {\n      if (length * 2 > this.bufferLength) {\n        throw new Error(`malformed messagepack detected: buffer size was ${this.bufferLength}, but referenced a map of length ${length})`);\n      }\n      var value = {};\n      for (var i = 0; i < length; i++) {\n        var key = this.parse();\n        value[key] = this.parse();\n      }\n      return value;\n    };\n    Decoder.prototype.bin = Decoder.prototype.buf = function(length) {\n      if (length > this.bufferLength) {\n        throw new Error(`malformed messagepack detected: buffer size was ${this.bufferLength}, but referenced a binary of length ${length})`);\n      }\n      var value = bops.subarray(this.buffer, this.offset, this.offset + length);\n      this.offset += length;\n      return value;\n    };\n    Decoder.prototype.str = function(length) {\n      if (length > this.bufferLength) {\n        throw new Error(`malformed messagepack detected: buffer size was ${this.bufferLength}, but referenced a string of length ${length})`);\n      }\n      var value = bops.to(bops.subarray(this.buffer, this.offset, this.offset + length));\n      this.offset += length;\n      return value;\n    };\n    Decoder.prototype.array = function(length) {\n      if (length > this.bufferLength) {\n        throw new Error(`malformed messagepack detected: buffer size was ${this.bufferLength}, but referenced an array of length ${length})`);\n      }\n      var value = new Array(length);\n      for (var i = 0; i < length; i++) {\n        value[i] = this.parse();\n      }\n      return value;\n    };\n    Decoder.prototype.parse = function() {\n      var type = this.buffer[this.offset];\n      var value, length, extType;\n      if (type === void 0) {\n        throw new Error(\"malformed messagepack (referenced offset is outside buffer)\");\n      }\n      if ((type & 128) === 0) {\n        this.offset++;\n        return type;\n      }\n      if ((type & 240) === 128) {\n        length = type & 15;\n        this.offset++;\n        return this.map(length);\n      }\n      if ((type & 240) === 144) {\n        length = type & 15;\n        this.offset++;\n        return this.array(length);\n      }\n      if ((type & 224) === 160) {\n        length = type & 31;\n        this.offset++;\n        return this.str(length);\n      }\n      if ((type & 224) === 224) {\n        value = bops.readInt8(this.buffer, this.offset);\n        this.offset++;\n        return value;\n      }\n      switch (type) {\n        case 192:\n          this.offset++;\n          return null;\n        case 194:\n          this.offset++;\n          return false;\n        case 195:\n          this.offset++;\n          return true;\n        case 196:\n          length = bops.readUInt8(this.buffer, this.offset + 1);\n          this.offset += 2;\n          return this.bin(length);\n        case 197:\n          length = bops.readUInt16BE(this.buffer, this.offset + 1);\n          this.offset += 3;\n          return this.bin(length);\n        case 198:\n          length = bops.readUInt32BE(this.buffer, this.offset + 1);\n          this.offset += 5;\n          return this.bin(length);\n        case 199:\n          length = bops.readUInt8(this.buffer, this.offset + 1);\n          extType = bops.readUInt8(this.buffer, this.offset + 2);\n          this.offset += 3;\n          return [extType, this.bin(length)];\n        case 200:\n          length = bops.readUInt16BE(this.buffer, this.offset + 1);\n          extType = bops.readUInt8(this.buffer, this.offset + 3);\n          this.offset += 4;\n          return [extType, this.bin(length)];\n        case 201:\n          length = bops.readUInt32BE(this.buffer, this.offset + 1);\n          extType = bops.readUInt8(this.buffer, this.offset + 5);\n          this.offset += 6;\n          return [extType, this.bin(length)];\n        case 202:\n          value = bops.readFloatBE(this.buffer, this.offset + 1);\n          this.offset += 5;\n          return value;\n        case 203:\n          value = bops.readDoubleBE(this.buffer, this.offset + 1);\n          this.offset += 9;\n          return value;\n        case 204:\n          value = this.buffer[this.offset + 1];\n          this.offset += 2;\n          return value;\n        case 205:\n          value = bops.readUInt16BE(this.buffer, this.offset + 1);\n          this.offset += 3;\n          return value;\n        case 206:\n          value = bops.readUInt32BE(this.buffer, this.offset + 1);\n          this.offset += 5;\n          return value;\n        case 207:\n          value = readUInt64BE(this.buffer, this.offset + 1);\n          this.offset += 9;\n          return value;\n        case 208:\n          value = bops.readInt8(this.buffer, this.offset + 1);\n          this.offset += 2;\n          return value;\n        case 209:\n          value = bops.readInt16BE(this.buffer, this.offset + 1);\n          this.offset += 3;\n          return value;\n        case 210:\n          value = bops.readInt32BE(this.buffer, this.offset + 1);\n          this.offset += 5;\n          return value;\n        case 211:\n          value = readInt64BE(this.buffer, this.offset + 1);\n          this.offset += 9;\n          return value;\n        case 212:\n          extType = bops.readUInt8(this.buffer, this.offset + 1);\n          value = bops.readUInt8(this.buffer, this.offset + 2);\n          this.offset += 3;\n          return extType === 0 && value === 0 ? void 0 : [extType, value];\n        case 213:\n          extType = bops.readUInt8(this.buffer, this.offset + 1);\n          this.offset += 2;\n          return [extType, this.bin(2)];\n        case 214:\n          extType = bops.readUInt8(this.buffer, this.offset + 1);\n          this.offset += 2;\n          return [extType, this.bin(4)];\n        case 215:\n          extType = bops.readUInt8(this.buffer, this.offset + 1);\n          this.offset += 2;\n          return [extType, this.bin(8)];\n        case 216:\n          extType = bops.readUInt8(this.buffer, this.offset + 1);\n          this.offset += 2;\n          return [extType, this.bin(16)];\n        case 217:\n          length = bops.readUInt8(this.buffer, this.offset + 1);\n          this.offset += 2;\n          return this.str(length);\n        case 218:\n          length = bops.readUInt16BE(this.buffer, this.offset + 1);\n          this.offset += 3;\n          return this.str(length);\n        case 219:\n          length = bops.readUInt32BE(this.buffer, this.offset + 1);\n          this.offset += 5;\n          return this.str(length);\n        case 220:\n          length = bops.readUInt16BE(this.buffer, this.offset + 1);\n          this.offset += 3;\n          return this.array(length);\n        case 221:\n          length = bops.readUInt32BE(this.buffer, this.offset + 1);\n          this.offset += 5;\n          return this.array(length);\n        case 222:\n          length = bops.readUInt16BE(this.buffer, this.offset + 1);\n          this.offset += 3;\n          return this.map(length);\n        case 223:\n          length = bops.readUInt32BE(this.buffer, this.offset + 1);\n          this.offset += 5;\n          return this.map(length);\n      }\n      throw new Error(\"Unknown type 0x\" + type.toString(16));\n    };\n    function decode3(buffer) {\n      var decoder = new Decoder(buffer);\n      var value = decoder.parse();\n      if (decoder.offset !== buffer.length)\n        throw new Error(buffer.length - decoder.offset + \" trailing bytes\");\n      return value;\n    }\n    function encodeableKeys(value, sparse) {\n      return Object.keys(value).filter(function(e) {\n        var val = value[e], type = typeof val;\n        return (!sparse || val !== void 0 && val !== null) && (\"function\" !== type || !!val.toJSON);\n      });\n    }\n    function encode2(value, buffer, offset, sparse, isMapElement) {\n      var type = typeof value;\n      var length, size;\n      if (type === \"string\") {\n        value = bops.from(value);\n        length = value.length;\n        if (length < 32) {\n          buffer[offset] = length | 160;\n          bops.copy(value, buffer, offset + 1);\n          return 1 + length;\n        }\n        if (length < 256) {\n          buffer[offset] = 217;\n          bops.writeUInt8(buffer, length, offset + 1);\n          bops.copy(value, buffer, offset + 2);\n          return 2 + length;\n        }\n        if (length < 65536) {\n          buffer[offset] = 218;\n          bops.writeUInt16BE(buffer, length, offset + 1);\n          bops.copy(value, buffer, offset + 3);\n          return 3 + length;\n        }\n        if (length < 4294967296) {\n          buffer[offset] = 219;\n          bops.writeUInt32BE(buffer, length, offset + 1);\n          bops.copy(value, buffer, offset + 5);\n          return 5 + length;\n        }\n      }\n      if (bops.is(value)) {\n        length = value.length;\n        if (length < 256) {\n          buffer[offset] = 196;\n          bops.writeUInt8(buffer, length, offset + 1);\n          bops.copy(value, buffer, offset + 2);\n          return 2 + length;\n        }\n        if (length < 65536) {\n          buffer[offset] = 197;\n          bops.writeUInt16BE(buffer, length, offset + 1);\n          bops.copy(value, buffer, offset + 3);\n          return 3 + length;\n        }\n        if (length < 4294967296) {\n          buffer[offset] = 198;\n          bops.writeUInt32BE(buffer, length, offset + 1);\n          bops.copy(value, buffer, offset + 5);\n          return 5 + length;\n        }\n      }\n      if (type === \"number\") {\n        if (Math.floor(value) !== value) {\n          buffer[offset] = 203;\n          bops.writeDoubleBE(buffer, value, offset + 1);\n          return 9;\n        }\n        if (value >= 0) {\n          if (value < 128) {\n            buffer[offset] = value;\n            return 1;\n          }\n          if (value < 256) {\n            buffer[offset] = 204;\n            buffer[offset + 1] = value;\n            return 2;\n          }\n          if (value < 65536) {\n            buffer[offset] = 205;\n            bops.writeUInt16BE(buffer, value, offset + 1);\n            return 3;\n          }\n          if (value < 4294967296) {\n            buffer[offset] = 206;\n            bops.writeUInt32BE(buffer, value, offset + 1);\n            return 5;\n          }\n          if (value < 18446744073709552e3) {\n            buffer[offset] = 207;\n            writeUInt64BE(buffer, value, offset + 1);\n            return 9;\n          }\n          throw new Error(\"Number too big 0x\" + value.toString(16));\n        }\n        if (value >= -32) {\n          bops.writeInt8(buffer, value, offset);\n          return 1;\n        }\n        if (value >= -128) {\n          buffer[offset] = 208;\n          bops.writeInt8(buffer, value, offset + 1);\n          return 2;\n        }\n        if (value >= -32768) {\n          buffer[offset] = 209;\n          bops.writeInt16BE(buffer, value, offset + 1);\n          return 3;\n        }\n        if (value >= -2147483648) {\n          buffer[offset] = 210;\n          bops.writeInt32BE(buffer, value, offset + 1);\n          return 5;\n        }\n        if (value >= -9223372036854776e3) {\n          buffer[offset] = 211;\n          writeInt64BE(buffer, value, offset + 1);\n          return 9;\n        }\n        throw new Error(\"Number too small -0x\" + value.toString(16).substr(1));\n      }\n      if (type === \"undefined\") {\n        if (sparse && isMapElement)\n          return 0;\n        buffer[offset] = 212;\n        buffer[offset + 1] = 0;\n        buffer[offset + 2] = 0;\n        return 3;\n      }\n      if (value === null) {\n        if (sparse && isMapElement)\n          return 0;\n        buffer[offset] = 192;\n        return 1;\n      }\n      if (type === \"boolean\") {\n        buffer[offset] = value ? 195 : 194;\n        return 1;\n      }\n      if (\"function\" === typeof value.toJSON)\n        return encode2(value.toJSON(), buffer, offset, sparse);\n      if (type === \"object\") {\n        size = 0;\n        var isArray = Array.isArray(value);\n        if (isArray) {\n          length = value.length;\n        } else {\n          var keys = encodeableKeys(value, sparse);\n          length = keys.length;\n        }\n        if (length < 16) {\n          buffer[offset] = length | (isArray ? 144 : 128);\n          size = 1;\n        } else if (length < 65536) {\n          buffer[offset] = isArray ? 220 : 222;\n          bops.writeUInt16BE(buffer, length, offset + 1);\n          size = 3;\n        } else if (length < 4294967296) {\n          buffer[offset] = isArray ? 221 : 223;\n          bops.writeUInt32BE(buffer, length, offset + 1);\n          size = 5;\n        }\n        if (isArray) {\n          for (var i = 0; i < length; i++) {\n            size += encode2(value[i], buffer, offset + size, sparse);\n          }\n        } else {\n          for (var i = 0; i < length; i++) {\n            var key = keys[i];\n            size += encode2(key, buffer, offset + size);\n            size += encode2(value[key], buffer, offset + size, sparse, true);\n          }\n        }\n        return size;\n      }\n      if (type === \"function\")\n        return void 0;\n      throw new Error(\"Unknown type \" + type);\n    }\n    function sizeof(value, sparse, isMapElement) {\n      var type = typeof value;\n      var length, size;\n      if (type === \"string\") {\n        length = bops.from(value).length;\n        if (length < 32) {\n          return 1 + length;\n        }\n        if (length < 256) {\n          return 2 + length;\n        }\n        if (length < 65536) {\n          return 3 + length;\n        }\n        if (length < 4294967296) {\n          return 5 + length;\n        }\n      }\n      if (bops.is(value)) {\n        length = value.length;\n        if (length < 256) {\n          return 2 + length;\n        }\n        if (length < 65536) {\n          return 3 + length;\n        }\n        if (length < 4294967296) {\n          return 5 + length;\n        }\n      }\n      if (type === \"number\") {\n        if (Math.floor(value) !== value)\n          return 9;\n        if (value >= 0) {\n          if (value < 128)\n            return 1;\n          if (value < 256)\n            return 2;\n          if (value < 65536)\n            return 3;\n          if (value < 4294967296)\n            return 5;\n          if (value < 18446744073709552e3)\n            return 9;\n          throw new Error(\"Number too big 0x\" + value.toString(16));\n        }\n        if (value >= -32)\n          return 1;\n        if (value >= -128)\n          return 2;\n        if (value >= -32768)\n          return 3;\n        if (value >= -2147483648)\n          return 5;\n        if (value >= -9223372036854776e3)\n          return 9;\n        throw new Error(\"Number too small -0x\" + value.toString(16).substr(1));\n      }\n      if (type === \"boolean\")\n        return 1;\n      if (value === null)\n        return sparse && isMapElement ? 0 : 1;\n      if (value === void 0)\n        return sparse && isMapElement ? 0 : 3;\n      if (\"function\" === typeof value.toJSON)\n        return sizeof(value.toJSON(), sparse);\n      if (type === \"object\") {\n        size = 0;\n        if (Array.isArray(value)) {\n          length = value.length;\n          for (var i = 0; i < length; i++) {\n            size += sizeof(value[i], sparse);\n          }\n        } else {\n          var keys = encodeableKeys(value, sparse);\n          length = keys.length;\n          for (var i = 0; i < length; i++) {\n            var key = keys[i];\n            size += sizeof(key) + sizeof(value[key], sparse, true);\n          }\n        }\n        if (length < 16) {\n          return 1 + size;\n        }\n        if (length < 65536) {\n          return 3 + size;\n        }\n        if (length < 4294967296) {\n          return 5 + size;\n        }\n        throw new Error(\"Array or object too long 0x\" + length.toString(16));\n      }\n      if (type === \"function\")\n        return 0;\n      throw new Error(\"Unknown type \" + type);\n    }\n  }\n});\n\n// src/common/platform.ts\nvar Platform = class {\n};\n\n// src/common/lib/util/logger.ts\nvar globalObject = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : self;\nfunction pad(timeSegment, three) {\n  return `${timeSegment}`.padStart(three ? 3 : 2, \"0\");\n}\nfunction getHandler(logger) {\n  return Platform.Config.logTimestamps ? function(msg) {\n    const time = /* @__PURE__ */ new Date();\n    logger(\n      pad(time.getHours()) + \":\" + pad(time.getMinutes()) + \":\" + pad(time.getSeconds()) + \".\" + pad(time.getMilliseconds(), 1) + \" \" + msg\n    );\n  } : function(msg) {\n    logger(msg);\n  };\n}\nvar getDefaultLoggers = () => {\n  var _a2;\n  let consoleLogger;\n  let errorLogger;\n  if (typeof ((_a2 = globalObject == null ? void 0 : globalObject.console) == null ? void 0 : _a2.log) === \"function\") {\n    consoleLogger = function(...args) {\n      console.log.apply(console, args);\n    };\n    errorLogger = console.warn ? function(...args) {\n      console.warn.apply(console, args);\n    } : consoleLogger;\n  } else {\n    consoleLogger = errorLogger = function() {\n    };\n  }\n  return [consoleLogger, errorLogger].map(getHandler);\n};\nvar _Logger = class _Logger {\n  constructor() {\n    this.deprecated = (description, msg) => {\n      this.deprecationWarning(`${description} is deprecated and will be removed in a future version. ${msg}`);\n    };\n    /* Where a logging operation is expensive, such as serialisation of data, use shouldLog will prevent\n      the object being serialised if the log level will not output the message */\n    this.shouldLog = (level) => {\n      return level <= this.logLevel;\n    };\n    this.setLog = (level, handler) => {\n      if (level !== void 0)\n        this.logLevel = level;\n      if (handler !== void 0)\n        this.logHandler = this.logErrorHandler = handler;\n    };\n    this.logLevel = _Logger.defaultLogLevel;\n    this.logHandler = _Logger.defaultLogHandler;\n    this.logErrorHandler = _Logger.defaultLogErrorHandler;\n  }\n  static initLogHandlers() {\n    const [logHandler, logErrorHandler] = getDefaultLoggers();\n    this.defaultLogHandler = logHandler;\n    this.defaultLogErrorHandler = logErrorHandler;\n    this.defaultLogger = new _Logger();\n  }\n  /**\n   * Calls to this method are never stripped by the `stripLogs` esbuild plugin. Use it for log statements that you wish to always be included in the modular variant of the SDK.\n   */\n  static logActionNoStrip(logger, level, action, message) {\n    logger.logAction(level, action, message);\n  }\n  logAction(level, action, message) {\n    if (this.shouldLog(level)) {\n      (level === 1 /* Error */ ? this.logErrorHandler : this.logHandler)(\"Ably: \" + action + \": \" + message, level);\n    }\n  }\n  renamedClientOption(oldName, newName) {\n    this.deprecationWarning(\n      `The \\`${oldName}\\` client option has been renamed to \\`${newName}\\`. Please update your code to use \\`${newName}\\` instead. \\`${oldName}\\` will be removed in a future version.`\n    );\n  }\n  renamedMethod(className, oldName, newName) {\n    this.deprecationWarning(\n      `\\`${className}\\`\\u2019s \\`${oldName}\\` method has been renamed to \\`${newName}\\`. Please update your code to use \\`${newName}\\` instead. \\`${oldName}\\` will be removed in a future version.`\n    );\n  }\n  deprecationWarning(message) {\n    if (this.shouldLog(1 /* Error */)) {\n      this.logErrorHandler(`Ably: Deprecation warning - ${message}`, 1 /* Error */);\n    }\n  }\n};\n_Logger.defaultLogLevel = 1 /* Error */;\n// public constants\n_Logger.LOG_NONE = 0 /* None */;\n_Logger.LOG_ERROR = 1 /* Error */;\n_Logger.LOG_MAJOR = 2 /* Major */;\n_Logger.LOG_MINOR = 3 /* Minor */;\n_Logger.LOG_MICRO = 4 /* Micro */;\n/* public static functions */\n/**\n * In the modular variant of the SDK, the `stripLogs` esbuild plugin strips out all calls to this method (when invoked as `Logger.logAction(...)`) except when called with level `Logger.LOG_ERROR`. If you wish for a log statement to never be stripped, use the {@link logActionNoStrip} method instead.\n *\n * The aforementioned plugin expects `level` to be an expression of the form `Logger.LOG_*`; that is, you can’t dynamically specify the log level.\n */\n_Logger.logAction = (logger, level, action, message) => {\n  _Logger.logActionNoStrip(logger, level, action, message);\n};\nvar Logger = _Logger;\nvar logger_default = Logger;\n\n// src/common/lib/util/utils.ts\nvar utils_exports = {};\n__export(utils_exports, {\n  Format: () => Format,\n  allSame: () => allSame,\n  allToLowerCase: () => allToLowerCase,\n  allToUpperCase: () => allToUpperCase,\n  arrChooseN: () => arrChooseN,\n  arrDeleteValue: () => arrDeleteValue,\n  arrEquals: () => arrEquals,\n  arrIntersect: () => arrIntersect,\n  arrIntersectOb: () => arrIntersectOb,\n  arrPopRandomElement: () => arrPopRandomElement,\n  arrSubtract: () => arrSubtract,\n  arrWithoutValue: () => arrWithoutValue,\n  cheapRandStr: () => cheapRandStr,\n  containsValue: () => containsValue,\n  copy: () => copy,\n  createMissingPluginError: () => createMissingPluginError,\n  dataSizeBytes: () => dataSizeBytes,\n  decodeBody: () => decodeBody,\n  encodeBody: () => encodeBody,\n  ensureArray: () => ensureArray,\n  forInOwnNonNullProperties: () => forInOwnNonNullProperties,\n  getBackoffCoefficient: () => getBackoffCoefficient,\n  getGlobalObject: () => getGlobalObject,\n  getJitterCoefficient: () => getJitterCoefficient,\n  getRetryTime: () => getRetryTime,\n  inherits: () => inherits,\n  inspectBody: () => inspectBody,\n  inspectError: () => inspectError,\n  intersect: () => intersect,\n  isEmpty: () => isEmpty,\n  isErrorInfoOrPartialErrorInfo: () => isErrorInfoOrPartialErrorInfo,\n  isNil: () => isNil,\n  isObject: () => isObject,\n  keysArray: () => keysArray,\n  matchDerivedChannel: () => matchDerivedChannel,\n  mixin: () => mixin,\n  parseQueryString: () => parseQueryString,\n  prototypicalClone: () => prototypicalClone,\n  randomString: () => randomString,\n  shallowClone: () => shallowClone,\n  shallowEquals: () => shallowEquals,\n  throwMissingPluginError: () => throwMissingPluginError,\n  toBase64: () => toBase64,\n  toQueryString: () => toQueryString,\n  valuesArray: () => valuesArray,\n  whenPromiseSettles: () => whenPromiseSettles,\n  withTimeoutAsync: () => withTimeoutAsync\n});\n\n// src/common/lib/types/errorinfo.ts\nfunction toString(err) {\n  let result = \"[\" + err.constructor.name;\n  if (err.message)\n    result += \": \" + err.message;\n  if (err.statusCode)\n    result += \"; statusCode=\" + err.statusCode;\n  if (err.code)\n    result += \"; code=\" + err.code;\n  if (err.cause)\n    result += \"; cause=\" + inspectError(err.cause);\n  if (err.href && !(err.message && err.message.indexOf(\"help.ably.io\") > -1))\n    result += \"; see \" + err.href + \" \";\n  result += \"]\";\n  return result;\n}\nvar ErrorInfo = class _ErrorInfo extends Error {\n  constructor(message, code, statusCode, cause) {\n    super(message);\n    if (typeof Object.setPrototypeOf !== \"undefined\") {\n      Object.setPrototypeOf(this, _ErrorInfo.prototype);\n    }\n    this.code = code;\n    this.statusCode = statusCode;\n    this.cause = cause;\n  }\n  toString() {\n    return toString(this);\n  }\n  static fromValues(values) {\n    const { message, code, statusCode } = values;\n    if (typeof message !== \"string\" || typeof code !== \"number\" || typeof statusCode !== \"number\") {\n      throw new Error(\"ErrorInfo.fromValues(): invalid values: \" + Platform.Config.inspect(values));\n    }\n    const result = Object.assign(new _ErrorInfo(message, code, statusCode), values);\n    if (result.code && !result.href) {\n      result.href = \"https://help.ably.io/error/\" + result.code;\n    }\n    return result;\n  }\n};\nvar PartialErrorInfo = class _PartialErrorInfo extends Error {\n  constructor(message, code, statusCode, cause) {\n    super(message);\n    if (typeof Object.setPrototypeOf !== \"undefined\") {\n      Object.setPrototypeOf(this, _PartialErrorInfo.prototype);\n    }\n    this.code = code;\n    this.statusCode = statusCode;\n    this.cause = cause;\n  }\n  toString() {\n    return toString(this);\n  }\n  static fromValues(values) {\n    const { message, code, statusCode } = values;\n    if (typeof message !== \"string\" || !isNil(code) && typeof code !== \"number\" || !isNil(statusCode) && typeof statusCode !== \"number\") {\n      throw new Error(\"PartialErrorInfo.fromValues(): invalid values: \" + Platform.Config.inspect(values));\n    }\n    const result = Object.assign(new _PartialErrorInfo(message, code, statusCode), values);\n    if (result.code && !result.href) {\n      result.href = \"https://help.ably.io/error/\" + result.code;\n    }\n    return result;\n  }\n};\n\n// src/common/lib/util/utils.ts\nfunction randomPosn(arrOrStr) {\n  return Math.floor(Math.random() * arrOrStr.length);\n}\nfunction mixin(target, ...args) {\n  for (let i = 0; i < args.length; i++) {\n    const source = args[i];\n    if (!source) {\n      break;\n    }\n    for (const key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n}\nfunction copy(src) {\n  return mixin({}, src);\n}\nfunction ensureArray(obj) {\n  if (isNil(obj)) {\n    return [];\n  }\n  if (Array.isArray(obj)) {\n    return obj;\n  }\n  return [obj];\n}\nfunction isObject(ob) {\n  return Object.prototype.toString.call(ob) == \"[object Object]\";\n}\nfunction isEmpty(ob) {\n  for (const prop in ob)\n    return false;\n  return true;\n}\nfunction isNil(arg) {\n  return arg == null;\n}\nfunction shallowClone(ob) {\n  const result = new Object();\n  for (const prop in ob)\n    result[prop] = ob[prop];\n  return result;\n}\nfunction prototypicalClone(ob, ownProperties) {\n  class F {\n  }\n  F.prototype = ob;\n  const result = new F();\n  if (ownProperties)\n    mixin(result, ownProperties);\n  return result;\n}\nvar inherits = function(ctor, superCtor) {\n  if (Platform.Config.inherits) {\n    Platform.Config.inherits(ctor, superCtor);\n    return;\n  }\n  ctor.super_ = superCtor;\n  ctor.prototype = prototypicalClone(superCtor.prototype, { constructor: ctor });\n};\nfunction containsValue(ob, val) {\n  for (const i in ob) {\n    if (ob[i] == val)\n      return true;\n  }\n  return false;\n}\nfunction intersect(arr, ob) {\n  return Array.isArray(ob) ? arrIntersect(arr, ob) : arrIntersectOb(arr, ob);\n}\nfunction arrIntersect(arr1, arr2) {\n  const result = [];\n  for (let i = 0; i < arr1.length; i++) {\n    const member = arr1[i];\n    if (arr2.indexOf(member) != -1)\n      result.push(member);\n  }\n  return result;\n}\nfunction arrIntersectOb(arr, ob) {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const member = arr[i];\n    if (member in ob)\n      result.push(member);\n  }\n  return result;\n}\nfunction arrSubtract(arr1, arr2) {\n  const result = [];\n  for (let i = 0; i < arr1.length; i++) {\n    const element = arr1[i];\n    if (arr2.indexOf(element) == -1)\n      result.push(element);\n  }\n  return result;\n}\nfunction arrDeleteValue(arr, val) {\n  const idx = arr.indexOf(val);\n  const res = idx != -1;\n  if (res)\n    arr.splice(idx, 1);\n  return res;\n}\nfunction arrWithoutValue(arr, val) {\n  const newArr = arr.slice();\n  arrDeleteValue(newArr, val);\n  return newArr;\n}\nfunction keysArray(ob, ownOnly) {\n  const result = [];\n  for (const prop in ob) {\n    if (ownOnly && !Object.prototype.hasOwnProperty.call(ob, prop))\n      continue;\n    result.push(prop);\n  }\n  return result;\n}\nfunction valuesArray(ob, ownOnly) {\n  const result = [];\n  for (const prop in ob) {\n    if (ownOnly && !Object.prototype.hasOwnProperty.call(ob, prop))\n      continue;\n    result.push(ob[prop]);\n  }\n  return result;\n}\nfunction forInOwnNonNullProperties(ob, fn) {\n  for (const prop in ob) {\n    if (Object.prototype.hasOwnProperty.call(ob, prop) && ob[prop]) {\n      fn(prop);\n    }\n  }\n}\nfunction allSame(arr, prop) {\n  if (arr.length === 0) {\n    return true;\n  }\n  const first = arr[0][prop];\n  return arr.every(function(item) {\n    return item[prop] === first;\n  });\n}\nvar Format = /* @__PURE__ */ ((Format2) => {\n  Format2[\"msgpack\"] = \"msgpack\";\n  Format2[\"json\"] = \"json\";\n  return Format2;\n})(Format || {});\nfunction arrPopRandomElement(arr) {\n  return arr.splice(randomPosn(arr), 1)[0];\n}\nfunction toQueryString(params) {\n  const parts = [];\n  if (params) {\n    for (const key in params)\n      parts.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key]));\n  }\n  return parts.length ? \"?\" + parts.join(\"&\") : \"\";\n}\nfunction parseQueryString(query) {\n  let match;\n  const search = /([^?&=]+)=?([^&]*)/g;\n  const result = {};\n  while (match = search.exec(query))\n    result[decodeURIComponent(match[1])] = decodeURIComponent(match[2]);\n  return result;\n}\nfunction isErrorInfoOrPartialErrorInfo(err) {\n  return typeof err == \"object\" && err !== null && (err instanceof ErrorInfo || err instanceof PartialErrorInfo);\n}\nfunction inspectError(err) {\n  var _a2, _b;\n  if (err instanceof Error || ((_a2 = err == null ? void 0 : err.constructor) == null ? void 0 : _a2.name) === \"ErrorInfo\" || ((_b = err == null ? void 0 : err.constructor) == null ? void 0 : _b.name) === \"PartialErrorInfo\")\n    return err.toString();\n  return Platform.Config.inspect(err);\n}\nfunction inspectBody(body) {\n  if (Platform.BufferUtils.isBuffer(body)) {\n    return body.toString();\n  } else if (typeof body === \"string\") {\n    return body;\n  } else {\n    return Platform.Config.inspect(body);\n  }\n}\nfunction dataSizeBytes(data) {\n  if (Platform.BufferUtils.isBuffer(data)) {\n    return Platform.BufferUtils.byteLength(data);\n  }\n  if (typeof data === \"string\") {\n    return Platform.Config.stringByteSize(data);\n  }\n  throw new Error(\"Expected input of Utils.dataSizeBytes to be a buffer or string, but was: \" + typeof data);\n}\nfunction cheapRandStr() {\n  return String(Math.random()).substr(2);\n}\nvar randomString = async (numBytes) => {\n  const buffer = await Platform.Config.getRandomArrayBuffer(numBytes);\n  return Platform.BufferUtils.base64Encode(buffer);\n};\nfunction arrChooseN(arr, n) {\n  const numItems = Math.min(n, arr.length), mutableArr = arr.slice(), result = [];\n  for (let i = 0; i < numItems; i++) {\n    result.push(arrPopRandomElement(mutableArr));\n  }\n  return result;\n}\nfunction whenPromiseSettles(promise, callback) {\n  promise.then((result) => {\n    callback == null ? void 0 : callback(null, result);\n  }).catch((err) => {\n    callback == null ? void 0 : callback(err);\n  });\n}\nfunction decodeBody(body, MsgPack, format) {\n  if (format == \"msgpack\") {\n    if (!MsgPack) {\n      throwMissingPluginError(\"MsgPack\");\n    }\n    return MsgPack.decode(body);\n  }\n  return JSON.parse(String(body));\n}\nfunction encodeBody(body, MsgPack, format) {\n  if (format == \"msgpack\") {\n    if (!MsgPack) {\n      throwMissingPluginError(\"MsgPack\");\n    }\n    return MsgPack.encode(body, true);\n  }\n  return JSON.stringify(body);\n}\nfunction allToLowerCase(arr) {\n  return arr.map(function(element) {\n    return element && element.toLowerCase();\n  });\n}\nfunction allToUpperCase(arr) {\n  return arr.map(function(element) {\n    return element && element.toUpperCase();\n  });\n}\nfunction getBackoffCoefficient(count) {\n  return Math.min((count + 2) / 3, 2);\n}\nfunction getJitterCoefficient() {\n  return 1 - Math.random() * 0.2;\n}\nfunction getRetryTime(initialTimeout, retryAttempt) {\n  return initialTimeout * getBackoffCoefficient(retryAttempt) * getJitterCoefficient();\n}\nfunction getGlobalObject() {\n  if (typeof global !== \"undefined\") {\n    return global;\n  }\n  if (typeof window !== \"undefined\") {\n    return window;\n  }\n  return self;\n}\nfunction shallowEquals(source, target) {\n  return Object.keys(source).every((key) => source[key] === target[key]) && Object.keys(target).every((key) => target[key] === source[key]);\n}\nfunction matchDerivedChannel(name) {\n  const regex = /^(\\[([^?]*)(?:(.*))\\])?(.+)$/;\n  const match = name.match(regex);\n  if (!match || !match.length || match.length < 5) {\n    throw new ErrorInfo(\"regex match failed\", 400, 40010);\n  }\n  if (match[2]) {\n    throw new ErrorInfo(`cannot use a derived option with a ${match[2]} channel`, 400, 40010);\n  }\n  return {\n    qualifierParam: match[3] || \"\",\n    channelName: match[4]\n  };\n}\nfunction toBase64(str) {\n  const bufferUtils = Platform.BufferUtils;\n  const textBuffer = bufferUtils.utf8Encode(str);\n  return bufferUtils.base64Encode(textBuffer);\n}\nfunction arrEquals(a, b) {\n  return a.length === b.length && a.every(function(val, i) {\n    return val === b[i];\n  });\n}\nfunction createMissingPluginError(pluginName) {\n  return new ErrorInfo(`${pluginName} plugin not provided`, 40019, 400);\n}\nfunction throwMissingPluginError(pluginName) {\n  throw createMissingPluginError(pluginName);\n}\nasync function withTimeoutAsync(promise, timeout = 5e3, err = \"Timeout expired\") {\n  const e = new ErrorInfo(err, 5e4, 500);\n  return Promise.race([promise, new Promise((_resolve, reject) => setTimeout(() => reject(e), timeout))]);\n}\n\n// package.json\nvar version = \"2.6.0\";\n\n// src/common/lib/util/defaults.ts\nvar agent = \"ably-js/\" + version;\nvar Defaults = {\n  ENVIRONMENT: \"\",\n  REST_HOST: \"rest.ably.io\",\n  REALTIME_HOST: \"realtime.ably.io\",\n  FALLBACK_HOSTS: [\n    \"A.ably-realtime.com\",\n    \"B.ably-realtime.com\",\n    \"C.ably-realtime.com\",\n    \"D.ably-realtime.com\",\n    \"E.ably-realtime.com\"\n  ],\n  PORT: 80,\n  TLS_PORT: 443,\n  TIMEOUTS: {\n    /* Documented as options params: */\n    disconnectedRetryTimeout: 15e3,\n    suspendedRetryTimeout: 3e4,\n    /* Undocumented, but part of the api and can be used by customers: */\n    httpRequestTimeout: 1e4,\n    httpMaxRetryDuration: 15e3,\n    channelRetryTimeout: 15e3,\n    fallbackRetryTimeout: 6e5,\n    /* For internal / test use only: */\n    connectionStateTtl: 12e4,\n    realtimeRequestTimeout: 1e4,\n    recvTimeout: 9e4,\n    webSocketConnectTimeout: 1e4,\n    webSocketSlowTimeout: 4e3\n  },\n  httpMaxRetryCount: 3,\n  maxMessageSize: 65536,\n  version,\n  protocolVersion: 3,\n  agent,\n  getHost,\n  getPort,\n  getHttpScheme,\n  environmentFallbackHosts,\n  getFallbackHosts,\n  getHosts,\n  checkHost,\n  objectifyOptions,\n  normaliseOptions,\n  defaultGetHeaders,\n  defaultPostHeaders\n};\nfunction getHost(options, host, ws) {\n  if (ws)\n    host = host == options.restHost && options.realtimeHost || host || options.realtimeHost;\n  else\n    host = host || options.restHost;\n  return host;\n}\nfunction getPort(options, tls) {\n  return tls || options.tls ? options.tlsPort : options.port;\n}\nfunction getHttpScheme(options) {\n  return options.tls ? \"https://\" : \"http://\";\n}\nfunction environmentFallbackHosts(environment) {\n  return [\n    environment + \"-a-fallback.ably-realtime.com\",\n    environment + \"-b-fallback.ably-realtime.com\",\n    environment + \"-c-fallback.ably-realtime.com\",\n    environment + \"-d-fallback.ably-realtime.com\",\n    environment + \"-e-fallback.ably-realtime.com\"\n  ];\n}\nfunction getFallbackHosts(options) {\n  const fallbackHosts = options.fallbackHosts, httpMaxRetryCount = typeof options.httpMaxRetryCount !== \"undefined\" ? options.httpMaxRetryCount : Defaults.httpMaxRetryCount;\n  return fallbackHosts ? arrChooseN(fallbackHosts, httpMaxRetryCount) : [];\n}\nfunction getHosts(options, ws) {\n  const hosts = [options.restHost].concat(getFallbackHosts(options));\n  return ws ? hosts.map((host) => getHost(options, host, true)) : hosts;\n}\nfunction checkHost(host) {\n  if (typeof host !== \"string\") {\n    throw new ErrorInfo(\"host must be a string; was a \" + typeof host, 4e4, 400);\n  }\n  if (!host.length) {\n    throw new ErrorInfo(\"host must not be zero-length\", 4e4, 400);\n  }\n}\nfunction getRealtimeHost(options, production, environment, logger) {\n  if (options.realtimeHost)\n    return options.realtimeHost;\n  if (options.restHost) {\n    logger_default.logAction(\n      logger,\n      logger_default.LOG_MINOR,\n      \"Defaults.normaliseOptions\",\n      'restHost is set to \"' + options.restHost + '\" but realtimeHost is not set, so setting realtimeHost to \"' + options.restHost + '\" too. If this is not what you want, please set realtimeHost explicitly.'\n    );\n    return options.restHost;\n  }\n  return production ? Defaults.REALTIME_HOST : environment + \"-\" + Defaults.REALTIME_HOST;\n}\nfunction getTimeouts(options) {\n  const timeouts = {};\n  for (const prop in Defaults.TIMEOUTS) {\n    timeouts[prop] = options[prop] || Defaults.TIMEOUTS[prop];\n  }\n  return timeouts;\n}\nfunction getAgentString(options) {\n  let agentStr = Defaults.agent;\n  if (options.agents) {\n    for (var agent2 in options.agents) {\n      agentStr += \" \" + agent2 + \"/\" + options.agents[agent2];\n    }\n  }\n  return agentStr;\n}\nfunction objectifyOptions(options, allowKeyOrToken, sourceForErrorMessage, logger, modularPluginsToInclude) {\n  if (options === void 0) {\n    const msg = allowKeyOrToken ? `${sourceForErrorMessage} must be initialized with either a client options object, an Ably API key, or an Ably Token` : `${sourceForErrorMessage} must be initialized with a client options object`;\n    logger_default.logAction(logger, logger_default.LOG_ERROR, `${sourceForErrorMessage}()`, msg);\n    throw new Error(msg);\n  }\n  let optionsObj;\n  if (typeof options === \"string\") {\n    if (options.indexOf(\":\") == -1) {\n      if (!allowKeyOrToken) {\n        const msg = `${sourceForErrorMessage} cannot be initialized with just an Ably Token; you must provide a client options object with a \\`plugins\\` property. (Set this Ably Token as the object\\u2019s \\`token\\` property.)`;\n        logger_default.logAction(logger, logger_default.LOG_ERROR, `${sourceForErrorMessage}()`, msg);\n        throw new Error(msg);\n      }\n      optionsObj = { token: options };\n    } else {\n      if (!allowKeyOrToken) {\n        const msg = `${sourceForErrorMessage} cannot be initialized with just an Ably API key; you must provide a client options object with a \\`plugins\\` property. (Set this Ably API key as the object\\u2019s \\`key\\` property.)`;\n        logger_default.logAction(logger, logger_default.LOG_ERROR, `${sourceForErrorMessage}()`, msg);\n        throw new Error(msg);\n      }\n      optionsObj = { key: options };\n    }\n  } else {\n    optionsObj = options;\n  }\n  if (modularPluginsToInclude) {\n    optionsObj = __spreadProps(__spreadValues({}, optionsObj), { plugins: __spreadValues(__spreadValues({}, modularPluginsToInclude), optionsObj.plugins) });\n  }\n  return optionsObj;\n}\nfunction normaliseOptions(options, MsgPack, logger) {\n  const loggerToUse = logger != null ? logger : logger_default.defaultLogger;\n  if (typeof options.recover === \"function\" && options.closeOnUnload === true) {\n    logger_default.logAction(\n      loggerToUse,\n      logger_default.LOG_ERROR,\n      \"Defaults.normaliseOptions\",\n      \"closeOnUnload was true and a session recovery function was set - these are mutually exclusive, so unsetting the latter\"\n    );\n    options.recover = void 0;\n  }\n  if (!(\"closeOnUnload\" in options)) {\n    options.closeOnUnload = !options.recover;\n  }\n  if (!(\"queueMessages\" in options))\n    options.queueMessages = true;\n  const environment = options.environment && String(options.environment).toLowerCase() || Defaults.ENVIRONMENT;\n  const production = !environment || environment === \"production\";\n  if (!options.fallbackHosts && !options.restHost && !options.realtimeHost && !options.port && !options.tlsPort) {\n    options.fallbackHosts = production ? Defaults.FALLBACK_HOSTS : environmentFallbackHosts(environment);\n  }\n  const restHost = options.restHost || (production ? Defaults.REST_HOST : environment + \"-\" + Defaults.REST_HOST);\n  const realtimeHost = getRealtimeHost(options, production, environment, loggerToUse);\n  (options.fallbackHosts || []).concat(restHost, realtimeHost).forEach(checkHost);\n  options.port = options.port || Defaults.PORT;\n  options.tlsPort = options.tlsPort || Defaults.TLS_PORT;\n  if (!(\"tls\" in options))\n    options.tls = true;\n  const timeouts = getTimeouts(options);\n  if (MsgPack) {\n    if (\"useBinaryProtocol\" in options) {\n      options.useBinaryProtocol = Platform.Config.supportsBinary && options.useBinaryProtocol;\n    } else {\n      options.useBinaryProtocol = Platform.Config.preferBinary;\n    }\n  } else {\n    options.useBinaryProtocol = false;\n  }\n  const headers = {};\n  if (options.clientId) {\n    headers[\"X-Ably-ClientId\"] = Platform.BufferUtils.base64Encode(Platform.BufferUtils.utf8Encode(options.clientId));\n  }\n  if (!(\"idempotentRestPublishing\" in options)) {\n    options.idempotentRestPublishing = true;\n  }\n  let connectivityCheckParams = null;\n  let connectivityCheckUrl = options.connectivityCheckUrl;\n  if (options.connectivityCheckUrl) {\n    let [uri, qs] = options.connectivityCheckUrl.split(\"?\");\n    connectivityCheckParams = qs ? parseQueryString(qs) : {};\n    if (uri.indexOf(\"://\") === -1) {\n      uri = \"https://\" + uri;\n    }\n    connectivityCheckUrl = uri;\n  }\n  let wsConnectivityCheckUrl = options.wsConnectivityCheckUrl;\n  if (wsConnectivityCheckUrl && wsConnectivityCheckUrl.indexOf(\"://\") === -1) {\n    wsConnectivityCheckUrl = \"wss://\" + wsConnectivityCheckUrl;\n  }\n  return __spreadProps(__spreadValues({}, options), {\n    realtimeHost,\n    restHost,\n    maxMessageSize: options.maxMessageSize || Defaults.maxMessageSize,\n    timeouts,\n    connectivityCheckParams,\n    connectivityCheckUrl,\n    wsConnectivityCheckUrl,\n    headers\n  });\n}\nfunction normaliseChannelOptions(Crypto2, logger, options) {\n  const channelOptions = options || {};\n  if (channelOptions.cipher) {\n    if (!Crypto2)\n      throwMissingPluginError(\"Crypto\");\n    const cipher = Crypto2.getCipher(channelOptions.cipher, logger);\n    channelOptions.cipher = cipher.cipherParams;\n    channelOptions.channelCipher = cipher.cipher;\n  } else if (\"cipher\" in channelOptions) {\n    channelOptions.cipher = void 0;\n    channelOptions.channelCipher = null;\n  }\n  return channelOptions;\n}\nvar contentTypes = {\n  json: \"application/json\",\n  xml: \"application/xml\",\n  html: \"text/html\",\n  msgpack: \"application/x-msgpack\",\n  text: \"text/plain\"\n};\nvar defaultHeadersOptions = {\n  format: \"json\" /* json */,\n  protocolVersion: Defaults.protocolVersion\n};\nfunction defaultGetHeaders(options, {\n  format = defaultHeadersOptions.format,\n  protocolVersion = defaultHeadersOptions.protocolVersion\n} = {}) {\n  const accept = contentTypes[format];\n  return {\n    accept,\n    \"X-Ably-Version\": protocolVersion.toString(),\n    \"Ably-Agent\": getAgentString(options)\n  };\n}\nfunction defaultPostHeaders(options, {\n  format = defaultHeadersOptions.format,\n  protocolVersion = defaultHeadersOptions.protocolVersion\n} = {}) {\n  let contentType;\n  const accept = contentType = contentTypes[format];\n  return {\n    accept,\n    \"content-type\": contentType,\n    \"X-Ably-Version\": protocolVersion.toString(),\n    \"Ably-Agent\": getAgentString(options)\n  };\n}\nvar defaults_default = Defaults;\nfunction getDefaults(platformDefaults) {\n  return Object.assign(Defaults, platformDefaults);\n}\n\n// src/common/lib/util/multicaster.ts\nvar Multicaster = class _Multicaster {\n  // Private constructor; use static Multicaster.create instead\n  constructor(logger, members) {\n    this.logger = logger;\n    this.members = members || [];\n  }\n  call(err, result) {\n    for (const member of this.members) {\n      if (member) {\n        try {\n          member(err, result);\n        } catch (e) {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_ERROR,\n            \"Multicaster multiple callback handler\",\n            \"Unexpected exception: \" + e + \"; stack = \" + e.stack\n          );\n        }\n      }\n    }\n  }\n  push(...args) {\n    this.members.push(...args);\n  }\n  createPromise() {\n    return new Promise((resolve, reject) => {\n      this.push((err, result) => {\n        err ? reject(err) : resolve(result);\n      });\n    });\n  }\n  resolveAll(result) {\n    this.call(null, result);\n  }\n  rejectAll(err) {\n    this.call(err);\n  }\n  static create(logger, members) {\n    const instance = new _Multicaster(logger, members);\n    return Object.assign((err, result) => instance.call(err, result), {\n      push: (fn) => instance.push(fn),\n      createPromise: () => instance.createPromise(),\n      resolveAll: (result) => instance.resolveAll(result),\n      rejectAll: (err) => instance.rejectAll(err)\n    });\n  }\n};\nvar multicaster_default = Multicaster;\n\n// src/common/constants/HttpMethods.ts\nvar HttpMethods = /* @__PURE__ */ ((HttpMethods2) => {\n  HttpMethods2[\"Get\"] = \"get\";\n  HttpMethods2[\"Delete\"] = \"delete\";\n  HttpMethods2[\"Post\"] = \"post\";\n  HttpMethods2[\"Put\"] = \"put\";\n  HttpMethods2[\"Patch\"] = \"patch\";\n  return HttpMethods2;\n})(HttpMethods || {});\nvar HttpMethods_default = HttpMethods;\n\n// src/common/constants/HttpStatusCodes.ts\nvar HttpStatusCodes = /* @__PURE__ */ ((HttpStatusCodes2) => {\n  HttpStatusCodes2[HttpStatusCodes2[\"Success\"] = 200] = \"Success\";\n  HttpStatusCodes2[HttpStatusCodes2[\"NoContent\"] = 204] = \"NoContent\";\n  HttpStatusCodes2[HttpStatusCodes2[\"BadRequest\"] = 400] = \"BadRequest\";\n  HttpStatusCodes2[HttpStatusCodes2[\"Unauthorized\"] = 401] = \"Unauthorized\";\n  HttpStatusCodes2[HttpStatusCodes2[\"Forbidden\"] = 403] = \"Forbidden\";\n  HttpStatusCodes2[HttpStatusCodes2[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n  HttpStatusCodes2[HttpStatusCodes2[\"InternalServerError\"] = 500] = \"InternalServerError\";\n  return HttpStatusCodes2;\n})(HttpStatusCodes || {});\nfunction isSuccessCode(statusCode) {\n  return statusCode >= 200 /* Success */ && statusCode < 400 /* BadRequest */;\n}\nvar HttpStatusCodes_default = HttpStatusCodes;\n\n// src/common/lib/client/auth.ts\nvar MAX_TOKEN_LENGTH = Math.pow(2, 17);\nfunction random() {\n  return (\"000000\" + Math.floor(Math.random() * 1e16)).slice(-16);\n}\nfunction isRealtime(client) {\n  return !!client.connection;\n}\nfunction normaliseAuthcallbackError(err) {\n  if (!isErrorInfoOrPartialErrorInfo(err)) {\n    return new ErrorInfo(inspectError(err), err.code || 40170, err.statusCode || 401);\n  }\n  if (!err.code) {\n    if (err.statusCode === 403) {\n      err.code = 40300;\n    } else {\n      err.code = 40170;\n      err.statusCode = 401;\n    }\n  }\n  return err;\n}\nvar hmac = (text, key) => {\n  const bufferUtils = Platform.BufferUtils;\n  const textBuffer = bufferUtils.utf8Encode(text);\n  const keyBuffer = bufferUtils.utf8Encode(key);\n  const digest = bufferUtils.hmacSha256(textBuffer, keyBuffer);\n  return bufferUtils.base64Encode(digest);\n};\nfunction c14n(capability) {\n  if (!capability)\n    return \"\";\n  if (typeof capability == \"string\")\n    capability = JSON.parse(capability);\n  const c14nCapability = /* @__PURE__ */ Object.create(null);\n  const keys = keysArray(capability, true);\n  if (!keys)\n    return \"\";\n  keys.sort();\n  for (let i = 0; i < keys.length; i++) {\n    c14nCapability[keys[i]] = capability[keys[i]].sort();\n  }\n  return JSON.stringify(c14nCapability);\n}\nfunction logAndValidateTokenAuthMethod(authOptions, logger) {\n  if (authOptions.authCallback) {\n    logger_default.logAction(logger, logger_default.LOG_MINOR, \"Auth()\", \"using token auth with authCallback\");\n  } else if (authOptions.authUrl) {\n    logger_default.logAction(logger, logger_default.LOG_MINOR, \"Auth()\", \"using token auth with authUrl\");\n  } else if (authOptions.key) {\n    logger_default.logAction(logger, logger_default.LOG_MINOR, \"Auth()\", \"using token auth with client-side signing\");\n  } else if (authOptions.tokenDetails) {\n    logger_default.logAction(logger, logger_default.LOG_MINOR, \"Auth()\", \"using token auth with supplied token only\");\n  } else {\n    const msg = \"authOptions must include valid authentication parameters\";\n    logger_default.logAction(logger, logger_default.LOG_ERROR, \"Auth()\", msg);\n    throw new Error(msg);\n  }\n}\nfunction basicAuthForced(options) {\n  return \"useTokenAuth\" in options && !options.useTokenAuth;\n}\nfunction useTokenAuth(options) {\n  return options.useTokenAuth || !basicAuthForced(options) && (options.authCallback || options.authUrl || options.token || options.tokenDetails);\n}\nfunction noWayToRenew(options) {\n  return !options.key && !options.authCallback && !options.authUrl;\n}\nvar trId = 0;\nfunction getTokenRequestId() {\n  return trId++;\n}\nvar Auth = class {\n  constructor(client, options) {\n    // This initialization is always overwritten and only used to prevent a TypeScript compiler error\n    this.authOptions = {};\n    this.client = client;\n    this.tokenParams = options.defaultTokenParams || {};\n    this.currentTokenRequestId = null;\n    this.waitingForTokenRequest = null;\n    if (useTokenAuth(options)) {\n      if (noWayToRenew(options)) {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_ERROR,\n          \"Auth()\",\n          \"Warning: library initialized with a token literal without any way to renew the token when it expires (no authUrl, authCallback, or key). See https://help.ably.io/error/40171 for help\"\n        );\n      }\n      this._saveTokenOptions(options.defaultTokenParams, options);\n      logAndValidateTokenAuthMethod(this.authOptions, this.logger);\n    } else {\n      if (!options.key) {\n        const msg = \"No authentication options provided; need one of: key, authUrl, or authCallback (or for testing only, token or tokenDetails)\";\n        logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"Auth()\", msg);\n        throw new ErrorInfo(msg, 40160, 401);\n      }\n      logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Auth()\", \"anonymous, using basic auth\");\n      this._saveBasicOptions(options);\n    }\n  }\n  get logger() {\n    return this.client.logger;\n  }\n  async authorize(tokenParams, authOptions) {\n    if (authOptions && authOptions.key && this.authOptions.key !== authOptions.key) {\n      throw new ErrorInfo(\"Unable to update auth options with incompatible key\", 40102, 401);\n    }\n    try {\n      let tokenDetails = await this._forceNewToken(tokenParams != null ? tokenParams : null, authOptions != null ? authOptions : null);\n      if (isRealtime(this.client)) {\n        return new Promise((resolve, reject) => {\n          this.client.connection.connectionManager.onAuthUpdated(\n            tokenDetails,\n            (err, tokenDetails2) => err ? reject(err) : resolve(tokenDetails2)\n          );\n        });\n      } else {\n        return tokenDetails;\n      }\n    } catch (err) {\n      if (this.client.connection && err.statusCode === HttpStatusCodes_default.Forbidden) {\n        this.client.connection.connectionManager.actOnErrorFromAuthorize(err);\n      }\n      throw err;\n    }\n  }\n  /* For internal use, eg by connectionManager - useful when want to call back\n   * as soon as we have the new token, rather than waiting for it to take\n   * effect on the connection as #authorize does */\n  async _forceNewToken(tokenParams, authOptions) {\n    this.tokenDetails = null;\n    this._saveTokenOptions(tokenParams, authOptions);\n    logAndValidateTokenAuthMethod(this.authOptions, this.logger);\n    try {\n      return this._ensureValidAuthCredentials(true);\n    } finally {\n      delete this.tokenParams.timestamp;\n      delete this.authOptions.queryTime;\n    }\n  }\n  async requestToken(tokenParams, authOptions) {\n    const resolvedAuthOptions = authOptions || this.authOptions;\n    const resolvedTokenParams = tokenParams || copy(this.tokenParams);\n    let tokenRequestCallback, client = this.client;\n    if (resolvedAuthOptions.authCallback) {\n      logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Auth.requestToken()\", \"using token auth with authCallback\");\n      tokenRequestCallback = resolvedAuthOptions.authCallback;\n    } else if (resolvedAuthOptions.authUrl) {\n      logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Auth.requestToken()\", \"using token auth with authUrl\");\n      tokenRequestCallback = (params, cb) => {\n        const authHeaders = mixin(\n          { accept: \"application/json, text/plain\" },\n          resolvedAuthOptions.authHeaders\n        );\n        const usePost = resolvedAuthOptions.authMethod && resolvedAuthOptions.authMethod.toLowerCase() === \"post\";\n        let providedQsParams;\n        const queryIdx = resolvedAuthOptions.authUrl.indexOf(\"?\");\n        if (queryIdx > -1) {\n          providedQsParams = parseQueryString(resolvedAuthOptions.authUrl.slice(queryIdx));\n          resolvedAuthOptions.authUrl = resolvedAuthOptions.authUrl.slice(0, queryIdx);\n          if (!usePost) {\n            resolvedAuthOptions.authParams = mixin(\n              providedQsParams,\n              resolvedAuthOptions.authParams\n            );\n          }\n        }\n        const authParams = mixin({}, resolvedAuthOptions.authParams || {}, params);\n        const authUrlRequestCallback = (result) => {\n          var _a2, _b;\n          let body = (_a2 = result.body) != null ? _a2 : null;\n          let contentType = null;\n          if (result.error) {\n            logger_default.logAction(\n              this.logger,\n              logger_default.LOG_MICRO,\n              \"Auth.requestToken().tokenRequestCallback\",\n              \"Received Error: \" + inspectError(result.error)\n            );\n          } else {\n            const contentTypeHeaderOrHeaders = (_b = result.headers[\"content-type\"]) != null ? _b : null;\n            if (Array.isArray(contentTypeHeaderOrHeaders)) {\n              contentType = contentTypeHeaderOrHeaders.join(\", \");\n            } else {\n              contentType = contentTypeHeaderOrHeaders;\n            }\n            logger_default.logAction(\n              this.logger,\n              logger_default.LOG_MICRO,\n              \"Auth.requestToken().tokenRequestCallback\",\n              \"Received; content-type: \" + contentType + \"; body: \" + inspectBody(body)\n            );\n          }\n          if (result.error) {\n            cb(result.error, null);\n            return;\n          }\n          if (result.unpacked) {\n            cb(null, body);\n            return;\n          }\n          if (Platform.BufferUtils.isBuffer(body))\n            body = body.toString();\n          if (!contentType) {\n            cb(new ErrorInfo(\"authUrl response is missing a content-type header\", 40170, 401), null);\n            return;\n          }\n          const json = contentType.indexOf(\"application/json\") > -1, text = contentType.indexOf(\"text/plain\") > -1 || contentType.indexOf(\"application/jwt\") > -1;\n          if (!json && !text) {\n            cb(\n              new ErrorInfo(\n                \"authUrl responded with unacceptable content-type \" + contentType + \", should be either text/plain, application/jwt or application/json\",\n                40170,\n                401\n              ),\n              null\n            );\n            return;\n          }\n          if (json) {\n            if (body.length > MAX_TOKEN_LENGTH) {\n              cb(new ErrorInfo(\"authUrl response exceeded max permitted length\", 40170, 401), null);\n              return;\n            }\n            try {\n              body = JSON.parse(body);\n            } catch (e) {\n              cb(\n                new ErrorInfo(\n                  \"Unexpected error processing authURL response; err = \" + e.message,\n                  40170,\n                  401\n                ),\n                null\n              );\n              return;\n            }\n          }\n          cb(null, body, contentType);\n        };\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MICRO,\n          \"Auth.requestToken().tokenRequestCallback\",\n          \"Requesting token from \" + resolvedAuthOptions.authUrl + \"; Params: \" + JSON.stringify(authParams) + \"; method: \" + (usePost ? \"POST\" : \"GET\")\n        );\n        if (usePost) {\n          const headers = authHeaders || {};\n          headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n          const body = toQueryString(authParams).slice(1);\n          whenPromiseSettles(\n            this.client.http.doUri(\n              HttpMethods_default.Post,\n              resolvedAuthOptions.authUrl,\n              headers,\n              body,\n              providedQsParams\n            ),\n            (err, result) => err ? authUrlRequestCallback(err) : authUrlRequestCallback(result)\n          );\n        } else {\n          whenPromiseSettles(\n            this.client.http.doUri(HttpMethods_default.Get, resolvedAuthOptions.authUrl, authHeaders || {}, null, authParams),\n            (err, result) => err ? authUrlRequestCallback(err) : authUrlRequestCallback(result)\n          );\n        }\n      };\n    } else if (resolvedAuthOptions.key) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"Auth.requestToken()\",\n        \"using token auth with client-side signing\"\n      );\n      tokenRequestCallback = (params, cb) => {\n        whenPromiseSettles(\n          this.createTokenRequest(params, resolvedAuthOptions),\n          (err, result) => cb(err, result != null ? result : null)\n        );\n      };\n    } else {\n      const msg = \"Need a new token, but authOptions does not include any way to request one (no authUrl, authCallback, or key)\";\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_ERROR,\n        \"Auth()\",\n        \"library initialized with a token literal without any way to renew the token when it expires (no authUrl, authCallback, or key). See https://help.ably.io/error/40171 for help\"\n      );\n      throw new ErrorInfo(msg, 40171, 403);\n    }\n    if (\"capability\" in resolvedTokenParams)\n      resolvedTokenParams.capability = c14n(\n        resolvedTokenParams.capability\n      );\n    const tokenRequest = (signedTokenParams, tokenCb) => {\n      const keyName = signedTokenParams.keyName, path = \"/keys/\" + keyName + \"/requestToken\", tokenUri = function(host) {\n        return client.baseUri(host) + path;\n      };\n      const requestHeaders = defaults_default.defaultPostHeaders(this.client.options);\n      if (resolvedAuthOptions.requestHeaders)\n        mixin(requestHeaders, resolvedAuthOptions.requestHeaders);\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"Auth.requestToken().requestToken\",\n        \"Sending POST to \" + path + \"; Token params: \" + JSON.stringify(signedTokenParams)\n      );\n      whenPromiseSettles(\n        this.client.http.do(HttpMethods_default.Post, tokenUri, requestHeaders, JSON.stringify(signedTokenParams), null),\n        (err, result) => err ? tokenCb(err) : tokenCb(result.error, result.body, result.unpacked)\n      );\n    };\n    return new Promise((resolve, reject) => {\n      let tokenRequestCallbackTimeoutExpired = false, timeoutLength = this.client.options.timeouts.realtimeRequestTimeout, tokenRequestCallbackTimeout = setTimeout(() => {\n        tokenRequestCallbackTimeoutExpired = true;\n        const msg = \"Token request callback timed out after \" + timeoutLength / 1e3 + \" seconds\";\n        logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"Auth.requestToken()\", msg);\n        reject(new ErrorInfo(msg, 40170, 401));\n      }, timeoutLength);\n      tokenRequestCallback(resolvedTokenParams, (err, tokenRequestOrDetails, contentType) => {\n        if (tokenRequestCallbackTimeoutExpired)\n          return;\n        clearTimeout(tokenRequestCallbackTimeout);\n        if (err) {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_ERROR,\n            \"Auth.requestToken()\",\n            \"token request signing call returned error; err = \" + inspectError(err)\n          );\n          reject(normaliseAuthcallbackError(err));\n          return;\n        }\n        if (typeof tokenRequestOrDetails === \"string\") {\n          if (tokenRequestOrDetails.length === 0) {\n            reject(new ErrorInfo(\"Token string is empty\", 40170, 401));\n          } else if (tokenRequestOrDetails.length > MAX_TOKEN_LENGTH) {\n            reject(\n              new ErrorInfo(\n                \"Token string exceeded max permitted length (was \" + tokenRequestOrDetails.length + \" bytes)\",\n                40170,\n                401\n              )\n            );\n          } else if (tokenRequestOrDetails === \"undefined\" || tokenRequestOrDetails === \"null\") {\n            reject(new ErrorInfo(\"Token string was literal null/undefined\", 40170, 401));\n          } else if (tokenRequestOrDetails[0] === \"{\" && !(contentType && contentType.indexOf(\"application/jwt\") > -1)) {\n            reject(\n              new ErrorInfo(\n                \"Token was double-encoded; make sure you're not JSON-encoding an already encoded token request or details\",\n                40170,\n                401\n              )\n            );\n          } else {\n            resolve({ token: tokenRequestOrDetails });\n          }\n          return;\n        }\n        if (typeof tokenRequestOrDetails !== \"object\" || tokenRequestOrDetails === null) {\n          const msg = \"Expected token request callback to call back with a token string or token request/details object, but got a \" + typeof tokenRequestOrDetails;\n          logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"Auth.requestToken()\", msg);\n          reject(new ErrorInfo(msg, 40170, 401));\n          return;\n        }\n        const objectSize = JSON.stringify(tokenRequestOrDetails).length;\n        if (objectSize > MAX_TOKEN_LENGTH && !resolvedAuthOptions.suppressMaxLengthCheck) {\n          reject(\n            new ErrorInfo(\n              \"Token request/details object exceeded max permitted stringified size (was \" + objectSize + \" bytes)\",\n              40170,\n              401\n            )\n          );\n          return;\n        }\n        if (\"issued\" in tokenRequestOrDetails) {\n          resolve(tokenRequestOrDetails);\n          return;\n        }\n        if (!(\"keyName\" in tokenRequestOrDetails)) {\n          const msg = \"Expected token request callback to call back with a token string, token request object, or token details object\";\n          logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"Auth.requestToken()\", msg);\n          reject(new ErrorInfo(msg, 40170, 401));\n          return;\n        }\n        tokenRequest(tokenRequestOrDetails, (err2, tokenResponse, unpacked) => {\n          if (err2) {\n            logger_default.logAction(\n              this.logger,\n              logger_default.LOG_ERROR,\n              \"Auth.requestToken()\",\n              \"token request API call returned error; err = \" + inspectError(err2)\n            );\n            reject(normaliseAuthcallbackError(err2));\n            return;\n          }\n          if (!unpacked)\n            tokenResponse = JSON.parse(tokenResponse);\n          logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Auth.getToken()\", \"token received\");\n          resolve(tokenResponse);\n        });\n      });\n    });\n  }\n  /**\n   * Create and sign a token request based on the given options.\n   * NOTE this can only be used when the key value is available locally.\n   * Otherwise, signed token requests must be obtained from the key\n   * owner (either using the token request callback or url).\n   *\n   * @param authOptions\n   * an object containing the request options:\n   * - key:           the key to use. If not specified, a key passed in constructing\n   *                  the Rest interface will be used\n   *\n   * - queryTime      (optional) boolean indicating that the ably system should be\n   *                  queried for the current time when none is specified explicitly\n   *\n   * - requestHeaders (optional, unsupported, for testing only) extra headers to add to the\n   *                  requestToken request\n   *\n   * @param tokenParams\n   * an object containing the parameters for the requested token:\n   * - ttl:       (optional) the requested life of the token in ms. If none is specified\n   *                  a default of 1 hour is provided. The maximum lifetime is 24hours; any request\n   *                  exceeding that lifetime will be rejected with an error.\n   *\n   * - capability:    (optional) the capability to associate with the access token.\n   *                  If none is specified, a token will be requested with all of the\n   *                  capabilities of the specified key.\n   *\n   * - clientId:      (optional) a client ID to associate with the token; if not\n   *                  specified, a clientId passed in constructing the Rest interface will be used\n   *\n   * - timestamp:     (optional) the time in ms since the epoch. If none is specified,\n   *                  the system will be queried for a time value to use.\n   */\n  async createTokenRequest(tokenParams, authOptions) {\n    authOptions = authOptions || this.authOptions;\n    tokenParams = tokenParams || copy(this.tokenParams);\n    const key = authOptions.key;\n    if (!key) {\n      throw new ErrorInfo(\"No key specified\", 40101, 403);\n    }\n    const keyParts = key.split(\":\"), keyName = keyParts[0], keySecret = keyParts[1];\n    if (!keySecret) {\n      throw new ErrorInfo(\"Invalid key specified\", 40101, 403);\n    }\n    if (tokenParams.clientId === \"\") {\n      throw new ErrorInfo(\"clientId can\\u2019t be an empty string\", 40012, 400);\n    }\n    if (\"capability\" in tokenParams) {\n      tokenParams.capability = c14n(tokenParams.capability);\n    }\n    const request = mixin({ keyName }, tokenParams), clientId = tokenParams.clientId || \"\", ttl = tokenParams.ttl || \"\", capability = tokenParams.capability || \"\";\n    if (!request.timestamp) {\n      request.timestamp = await this.getTimestamp(authOptions && authOptions.queryTime);\n    }\n    const nonce = request.nonce || (request.nonce = random()), timestamp = request.timestamp;\n    const signText = request.keyName + \"\\n\" + ttl + \"\\n\" + capability + \"\\n\" + clientId + \"\\n\" + timestamp + \"\\n\" + nonce + \"\\n\";\n    request.mac = request.mac || hmac(signText, keySecret);\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Auth.getTokenRequest()\", \"generated signed request\");\n    return request;\n  }\n  /**\n   * Get the auth query params to use for a websocket connection,\n   * based on the current auth parameters\n   */\n  async getAuthParams() {\n    if (this.method == \"basic\")\n      return { key: this.key };\n    else {\n      let tokenDetails = await this._ensureValidAuthCredentials(false);\n      if (!tokenDetails) {\n        throw new Error(\"Auth.getAuthParams(): _ensureValidAuthCredentials returned no error or tokenDetails\");\n      }\n      return { access_token: tokenDetails.token };\n    }\n  }\n  /**\n   * Get the authorization header to use for a REST or comet request,\n   * based on the current auth parameters\n   */\n  async getAuthHeaders() {\n    if (this.method == \"basic\") {\n      return { authorization: \"Basic \" + this.basicKey };\n    } else {\n      const tokenDetails = await this._ensureValidAuthCredentials(false);\n      if (!tokenDetails) {\n        throw new Error(\"Auth.getAuthParams(): _ensureValidAuthCredentials returned no error or tokenDetails\");\n      }\n      return { authorization: \"Bearer \" + toBase64(tokenDetails.token) };\n    }\n  }\n  /**\n   * Get the current time based on the local clock,\n   * or if the option queryTime is true, return the server time.\n   * The server time offset from the local time is stored so that\n   * only one request to the server to get the time is ever needed\n   */\n  async getTimestamp(queryTime) {\n    if (!this.isTimeOffsetSet() && (queryTime || this.authOptions.queryTime)) {\n      return this.client.time();\n    } else {\n      return this.getTimestampUsingOffset();\n    }\n  }\n  getTimestampUsingOffset() {\n    return Date.now() + (this.client.serverTimeOffset || 0);\n  }\n  isTimeOffsetSet() {\n    return this.client.serverTimeOffset !== null;\n  }\n  _saveBasicOptions(authOptions) {\n    this.method = \"basic\";\n    this.key = authOptions.key;\n    this.basicKey = toBase64(authOptions.key);\n    this.authOptions = authOptions || {};\n    if (\"clientId\" in authOptions) {\n      this._userSetClientId(authOptions.clientId);\n    }\n  }\n  _saveTokenOptions(tokenParams, authOptions) {\n    this.method = \"token\";\n    if (tokenParams) {\n      this.tokenParams = tokenParams;\n    }\n    if (authOptions) {\n      if (authOptions.token) {\n        authOptions.tokenDetails = typeof authOptions.token === \"string\" ? { token: authOptions.token } : authOptions.token;\n      }\n      if (authOptions.tokenDetails) {\n        this.tokenDetails = authOptions.tokenDetails;\n      }\n      if (\"clientId\" in authOptions) {\n        this._userSetClientId(authOptions.clientId);\n      }\n      this.authOptions = authOptions;\n    }\n  }\n  /* @param forceSupersede: force a new token request even if there's one in\n   * progress, making all pending callbacks wait for the new one */\n  async _ensureValidAuthCredentials(forceSupersede) {\n    const token = this.tokenDetails;\n    if (token) {\n      if (this._tokenClientIdMismatch(token.clientId)) {\n        throw new ErrorInfo(\n          \"Mismatch between clientId in token (\" + token.clientId + \") and current clientId (\" + this.clientId + \")\",\n          40102,\n          403\n        );\n      }\n      if (!this.isTimeOffsetSet() || !token.expires || token.expires >= this.getTimestampUsingOffset()) {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MINOR,\n          \"Auth.getToken()\",\n          \"using cached token; expires = \" + token.expires\n        );\n        return token;\n      }\n      logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Auth.getToken()\", \"deleting expired token\");\n      this.tokenDetails = null;\n    }\n    const promise = (this.waitingForTokenRequest || (this.waitingForTokenRequest = multicaster_default.create(this.logger))).createPromise();\n    if (this.currentTokenRequestId !== null && !forceSupersede) {\n      return promise;\n    }\n    const tokenRequestId = this.currentTokenRequestId = getTokenRequestId();\n    let tokenResponse, caughtError = null;\n    try {\n      tokenResponse = await this.requestToken(this.tokenParams, this.authOptions);\n    } catch (err) {\n      caughtError = err;\n    }\n    if (this.currentTokenRequestId > tokenRequestId) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"Auth._ensureValidAuthCredentials()\",\n        \"Discarding token request response; overtaken by newer one\"\n      );\n      return promise;\n    }\n    this.currentTokenRequestId = null;\n    const multicaster = this.waitingForTokenRequest;\n    this.waitingForTokenRequest = null;\n    if (caughtError) {\n      multicaster == null ? void 0 : multicaster.rejectAll(caughtError);\n      return promise;\n    }\n    multicaster == null ? void 0 : multicaster.resolveAll(this.tokenDetails = tokenResponse);\n    return promise;\n  }\n  /* User-set: check types, '*' is disallowed, throw any errors */\n  _userSetClientId(clientId) {\n    if (!(typeof clientId === \"string\" || clientId === null)) {\n      throw new ErrorInfo(\"clientId must be either a string or null\", 40012, 400);\n    } else if (clientId === \"*\") {\n      throw new ErrorInfo(\n        'Can\\u2019t use \"*\" as a clientId as that string is reserved. (To change the default token request behaviour to use a wildcard clientId, instantiate the library with {defaultTokenParams: {clientId: \"*\"}}), or if calling authorize(), pass it in as a tokenParam: authorize({clientId: \"*\"}, authOptions)',\n        40012,\n        400\n      );\n    } else {\n      const err = this._uncheckedSetClientId(clientId);\n      if (err)\n        throw err;\n    }\n  }\n  /* Ably-set: no typechecking, '*' is allowed but not set on this.clientId), return errors to the caller */\n  _uncheckedSetClientId(clientId) {\n    if (this._tokenClientIdMismatch(clientId)) {\n      const msg = \"Unexpected clientId mismatch: client has \" + this.clientId + \", requested \" + clientId;\n      const err = new ErrorInfo(msg, 40102, 401);\n      logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"Auth._uncheckedSetClientId()\", msg);\n      return err;\n    } else {\n      this.clientId = this.tokenParams.clientId = clientId;\n      return null;\n    }\n  }\n  _tokenClientIdMismatch(tokenClientId) {\n    return !!(this.clientId && this.clientId !== \"*\" && tokenClientId && tokenClientId !== \"*\" && this.clientId !== tokenClientId);\n  }\n  static isTokenErr(error) {\n    return error.code && error.code >= 40140 && error.code < 40150;\n  }\n  revokeTokens(specifiers, options) {\n    return this.client.rest.revokeTokens(specifiers, options);\n  }\n};\nvar auth_default = Auth;\n\n// src/common/types/http.ts\nfunction paramString(params) {\n  const paramPairs = [];\n  if (params) {\n    for (const needle in params) {\n      paramPairs.push(needle + \"=\" + params[needle]);\n    }\n  }\n  return paramPairs.join(\"&\");\n}\nfunction appendingParams(uri, params) {\n  return uri + (params ? \"?\" : \"\") + paramString(params);\n}\nfunction logResult(result, method, uri, params, logger) {\n  if (result.error) {\n    logger_default.logActionNoStrip(\n      logger,\n      logger_default.LOG_MICRO,\n      \"Http.\" + method + \"()\",\n      \"Received Error; \" + appendingParams(uri, params) + \"; Error: \" + inspectError(result.error)\n    );\n  } else {\n    logger_default.logActionNoStrip(\n      logger,\n      logger_default.LOG_MICRO,\n      \"Http.\" + method + \"()\",\n      \"Received; \" + appendingParams(uri, params) + \"; Headers: \" + paramString(result.headers) + \"; StatusCode: \" + result.statusCode + \"; Body\" + (Platform.BufferUtils.isBuffer(result.body) ? \" (Base64): \" + Platform.BufferUtils.base64Encode(result.body) : \": \" + result.body)\n    );\n  }\n}\nfunction logRequest(method, uri, body, params, logger) {\n  if (logger.shouldLog(logger_default.LOG_MICRO)) {\n    logger_default.logActionNoStrip(\n      logger,\n      logger_default.LOG_MICRO,\n      \"Http.\" + method + \"()\",\n      \"Sending; \" + appendingParams(uri, params) + \"; Body\" + (Platform.BufferUtils.isBuffer(body) ? \" (Base64): \" + Platform.BufferUtils.base64Encode(body) : \": \" + body)\n    );\n  }\n}\nvar Http = class {\n  constructor(client) {\n    this.client = client;\n    this.platformHttp = new Platform.Http(client);\n    this.checkConnectivity = this.platformHttp.checkConnectivity ? () => this.platformHttp.checkConnectivity() : void 0;\n  }\n  get logger() {\n    var _a2, _b;\n    return (_b = (_a2 = this.client) == null ? void 0 : _a2.logger) != null ? _b : logger_default.defaultLogger;\n  }\n  get supportsAuthHeaders() {\n    return this.platformHttp.supportsAuthHeaders;\n  }\n  get supportsLinkHeaders() {\n    return this.platformHttp.supportsLinkHeaders;\n  }\n  _getHosts(client) {\n    const connection = client.connection, connectionHost = connection && connection.connectionManager.host;\n    if (connectionHost) {\n      return [connectionHost].concat(defaults_default.getFallbackHosts(client.options));\n    }\n    return defaults_default.getHosts(client.options);\n  }\n  /**\n   * This method will not throw any errors; rather, it will communicate any error by populating the {@link RequestResult.error} property of the returned {@link RequestResult}.\n   */\n  async do(method, path, headers, body, params) {\n    try {\n      const client = this.client;\n      if (!client) {\n        return { error: new ErrorInfo(\"http.do called without client\", 5e4, 500) };\n      }\n      const uriFromHost = typeof path === \"function\" ? path : function(host) {\n        return client.baseUri(host) + path;\n      };\n      const currentFallback = client._currentFallback;\n      if (currentFallback) {\n        if (currentFallback.validUntil > Date.now()) {\n          const result = await this.doUri(method, uriFromHost(currentFallback.host), headers, body, params);\n          if (result.error && this.platformHttp.shouldFallback(result.error)) {\n            client._currentFallback = null;\n            return this.do(method, path, headers, body, params);\n          }\n          return result;\n        } else {\n          client._currentFallback = null;\n        }\n      }\n      const hosts = this._getHosts(client);\n      if (hosts.length === 1) {\n        return this.doUri(method, uriFromHost(hosts[0]), headers, body, params);\n      }\n      let tryAHostStartedAt = null;\n      const tryAHost = async (candidateHosts, persistOnSuccess) => {\n        const host = candidateHosts.shift();\n        tryAHostStartedAt = tryAHostStartedAt != null ? tryAHostStartedAt : /* @__PURE__ */ new Date();\n        const result = await this.doUri(method, uriFromHost(host), headers, body, params);\n        if (result.error && this.platformHttp.shouldFallback(result.error) && candidateHosts.length) {\n          const elapsedTime = Date.now() - tryAHostStartedAt.getTime();\n          if (elapsedTime > client.options.timeouts.httpMaxRetryDuration) {\n            return {\n              error: new ErrorInfo(\n                `Timeout for trying fallback hosts retries. Total elapsed time exceeded the ${client.options.timeouts.httpMaxRetryDuration}ms limit`,\n                50003,\n                500\n              )\n            };\n          }\n          return tryAHost(candidateHosts, true);\n        }\n        if (persistOnSuccess) {\n          client._currentFallback = {\n            host,\n            validUntil: Date.now() + client.options.timeouts.fallbackRetryTimeout\n          };\n        }\n        return result;\n      };\n      return tryAHost(hosts);\n    } catch (err) {\n      return { error: new ErrorInfo(`Unexpected error in Http.do: ${inspectError(err)}`, 500, 5e4) };\n    }\n  }\n  /**\n   * This method will not throw any errors; rather, it will communicate any error by populating the {@link RequestResult.error} property of the returned {@link RequestResult}.\n   */\n  async doUri(method, uri, headers, body, params) {\n    try {\n      logRequest(method, uri, body, params, this.logger);\n      const result = await this.platformHttp.doUri(method, uri, headers, body, params);\n      if (this.logger.shouldLog(logger_default.LOG_MICRO)) {\n        logResult(result, method, uri, params, this.logger);\n      }\n      return result;\n    } catch (err) {\n      return { error: new ErrorInfo(`Unexpected error in Http.doUri: ${inspectError(err)}`, 500, 5e4) };\n    }\n  }\n};\n\n// src/common/lib/client/baseclient.ts\nvar BaseClient = class {\n  constructor(options) {\n    /**\n     * These exports are for use by UMD plugins; reason being so that constructors and static methods can be accessed by these plugins without needing to import the classes directly and result in the class existing in both the plugin and the core library.\n     */\n    this.Platform = Platform;\n    this.ErrorInfo = ErrorInfo;\n    this.Logger = logger_default;\n    this.Defaults = defaults_default;\n    this.Utils = utils_exports;\n    var _a2, _b, _c, _d, _e, _f, _g, _h;\n    this._additionalHTTPRequestImplementations = (_a2 = options.plugins) != null ? _a2 : null;\n    this.logger = new logger_default();\n    this.logger.setLog(options.logLevel, options.logHandler);\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"BaseClient()\",\n      \"initialized with clientOptions \" + Platform.Config.inspect(options)\n    );\n    this._MsgPack = (_c = (_b = options.plugins) == null ? void 0 : _b.MsgPack) != null ? _c : null;\n    const normalOptions = this.options = defaults_default.normaliseOptions(options, this._MsgPack, this.logger);\n    if (normalOptions.key) {\n      const keyMatch = normalOptions.key.match(/^([^:\\s]+):([^:.\\s]+)$/);\n      if (!keyMatch) {\n        const msg = \"invalid key parameter\";\n        logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"BaseClient()\", msg);\n        throw new ErrorInfo(msg, 40400, 404);\n      }\n      normalOptions.keyName = keyMatch[1];\n      normalOptions.keySecret = keyMatch[2];\n    }\n    if (\"clientId\" in normalOptions) {\n      if (!(typeof normalOptions.clientId === \"string\" || normalOptions.clientId === null))\n        throw new ErrorInfo(\"clientId must be either a string or null\", 40012, 400);\n      else if (normalOptions.clientId === \"*\")\n        throw new ErrorInfo(\n          'Can\\u2019t use \"*\" as a clientId as that string is reserved. (To change the default token request behaviour to use a wildcard clientId, use {defaultTokenParams: {clientId: \"*\"}})',\n          40012,\n          400\n        );\n    }\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"BaseClient()\", \"started; version = \" + defaults_default.version);\n    this._currentFallback = null;\n    this.serverTimeOffset = null;\n    this.http = new Http(this);\n    this.auth = new auth_default(this, normalOptions);\n    this._rest = ((_d = options.plugins) == null ? void 0 : _d.Rest) ? new options.plugins.Rest(this) : null;\n    this._Crypto = (_f = (_e = options.plugins) == null ? void 0 : _e.Crypto) != null ? _f : null;\n    this.__FilteredSubscriptions = (_h = (_g = options.plugins) == null ? void 0 : _g.MessageInteractions) != null ? _h : null;\n  }\n  get rest() {\n    if (!this._rest) {\n      throwMissingPluginError(\"Rest\");\n    }\n    return this._rest;\n  }\n  get _FilteredSubscriptions() {\n    if (!this.__FilteredSubscriptions) {\n      throwMissingPluginError(\"MessageInteractions\");\n    }\n    return this.__FilteredSubscriptions;\n  }\n  get channels() {\n    return this.rest.channels;\n  }\n  get push() {\n    return this.rest.push;\n  }\n  get device() {\n    var _a2;\n    if (!((_a2 = this.options.plugins) == null ? void 0 : _a2.Push) || !this.push.LocalDevice) {\n      throwMissingPluginError(\"Push\");\n    }\n    if (!this._device) {\n      this._device = this.push.LocalDevice.load(this);\n    }\n    return this._device;\n  }\n  baseUri(host) {\n    return defaults_default.getHttpScheme(this.options) + host + \":\" + defaults_default.getPort(this.options, false);\n  }\n  async stats(params) {\n    return this.rest.stats(params);\n  }\n  async time(params) {\n    return this.rest.time(params);\n  }\n  async request(method, path, version2, params, body, customHeaders) {\n    return this.rest.request(method, path, version2, params, body, customHeaders);\n  }\n  batchPublish(specOrSpecs) {\n    return this.rest.batchPublish(specOrSpecs);\n  }\n  batchPresence(channels) {\n    return this.rest.batchPresence(channels);\n  }\n  setLog(logOptions) {\n    this.logger.setLog(logOptions.level, logOptions.handler);\n  }\n};\nBaseClient.Platform = Platform;\nvar baseclient_default = BaseClient;\n\n// src/common/lib/types/devicedetails.ts\nvar DeviceDetails = class _DeviceDetails {\n  toJSON() {\n    var _a2, _b, _c;\n    return {\n      id: this.id,\n      deviceSecret: this.deviceSecret,\n      platform: this.platform,\n      formFactor: this.formFactor,\n      clientId: this.clientId,\n      metadata: this.metadata,\n      deviceIdentityToken: this.deviceIdentityToken,\n      push: {\n        recipient: (_a2 = this.push) == null ? void 0 : _a2.recipient,\n        state: (_b = this.push) == null ? void 0 : _b.state,\n        error: (_c = this.push) == null ? void 0 : _c.error\n      }\n    };\n  }\n  toString() {\n    var _a2, _b, _c, _d;\n    let result = \"[DeviceDetails\";\n    if (this.id)\n      result += \"; id=\" + this.id;\n    if (this.platform)\n      result += \"; platform=\" + this.platform;\n    if (this.formFactor)\n      result += \"; formFactor=\" + this.formFactor;\n    if (this.clientId)\n      result += \"; clientId=\" + this.clientId;\n    if (this.metadata)\n      result += \"; metadata=\" + this.metadata;\n    if (this.deviceIdentityToken)\n      result += \"; deviceIdentityToken=\" + JSON.stringify(this.deviceIdentityToken);\n    if ((_a2 = this.push) == null ? void 0 : _a2.recipient)\n      result += \"; push.recipient=\" + JSON.stringify(this.push.recipient);\n    if ((_b = this.push) == null ? void 0 : _b.state)\n      result += \"; push.state=\" + this.push.state;\n    if ((_c = this.push) == null ? void 0 : _c.error)\n      result += \"; push.error=\" + JSON.stringify(this.push.error);\n    if ((_d = this.push) == null ? void 0 : _d.metadata)\n      result += \"; push.metadata=\" + this.push.metadata;\n    result += \"]\";\n    return result;\n  }\n  static toRequestBody(body, MsgPack, format) {\n    return encodeBody(body, MsgPack, format);\n  }\n  static fromResponseBody(body, MsgPack, format) {\n    if (format) {\n      body = decodeBody(body, MsgPack, format);\n    }\n    if (Array.isArray(body)) {\n      return _DeviceDetails.fromValuesArray(body);\n    } else {\n      return _DeviceDetails.fromValues(body);\n    }\n  }\n  static fromValues(values) {\n    values.error = values.error && ErrorInfo.fromValues(values.error);\n    return Object.assign(new _DeviceDetails(), values);\n  }\n  static fromLocalDevice(device) {\n    return Object.assign(new _DeviceDetails(), device);\n  }\n  static fromValuesArray(values) {\n    const count = values.length, result = new Array(count);\n    for (let i = 0; i < count; i++)\n      result[i] = _DeviceDetails.fromValues(values[i]);\n    return result;\n  }\n};\nvar devicedetails_default = DeviceDetails;\n\n// src/common/lib/client/resource.ts\nasync function withAuthDetails(client, headers, params, opCallback) {\n  if (client.http.supportsAuthHeaders) {\n    const authHeaders = await client.auth.getAuthHeaders();\n    return opCallback(mixin(authHeaders, headers), params);\n  } else {\n    const authParams = await client.auth.getAuthParams();\n    return opCallback(headers, mixin(authParams, params));\n  }\n}\nfunction unenvelope(result, MsgPack, format) {\n  if (result.err && !result.body) {\n    return { err: result.err };\n  }\n  if (result.statusCode === HttpStatusCodes_default.NoContent) {\n    return __spreadProps(__spreadValues({}, result), { body: [], unpacked: true });\n  }\n  let body = result.body;\n  if (!result.unpacked) {\n    try {\n      body = decodeBody(body, MsgPack, format);\n    } catch (e) {\n      if (isErrorInfoOrPartialErrorInfo(e)) {\n        return { err: e };\n      } else {\n        return { err: new PartialErrorInfo(inspectError(e), null) };\n      }\n    }\n  }\n  if (!body) {\n    return { err: new PartialErrorInfo(\"unenvelope(): Response body is missing\", null) };\n  }\n  const { statusCode: wrappedStatusCode, response, headers: wrappedHeaders } = body;\n  if (wrappedStatusCode === void 0) {\n    return __spreadProps(__spreadValues({}, result), { body, unpacked: true });\n  }\n  if (wrappedStatusCode < 200 || wrappedStatusCode >= 300) {\n    let wrappedErr = response && response.error || result.err;\n    if (!wrappedErr) {\n      wrappedErr = new Error(\"Error in unenveloping \" + body);\n      wrappedErr.statusCode = wrappedStatusCode;\n    }\n    return { err: wrappedErr, body: response, headers: wrappedHeaders, unpacked: true, statusCode: wrappedStatusCode };\n  }\n  return { err: result.err, body: response, headers: wrappedHeaders, unpacked: true, statusCode: wrappedStatusCode };\n}\nfunction logResult2(result, method, path, params, logger) {\n  if (result.err) {\n    logger_default.logAction(\n      logger,\n      logger_default.LOG_MICRO,\n      \"Resource.\" + method + \"()\",\n      \"Received Error; \" + appendingParams(path, params) + \"; Error: \" + inspectError(result.err)\n    );\n  } else {\n    logger_default.logAction(\n      logger,\n      logger_default.LOG_MICRO,\n      \"Resource.\" + method + \"()\",\n      \"Received; \" + appendingParams(path, params) + \"; Headers: \" + paramString(result.headers) + \"; StatusCode: \" + result.statusCode + \"; Body: \" + (Platform.BufferUtils.isBuffer(result.body) ? \" (Base64): \" + Platform.BufferUtils.base64Encode(result.body) : \": \" + Platform.Config.inspect(result.body))\n    );\n  }\n}\nvar Resource = class _Resource {\n  static async get(client, path, headers, params, envelope, throwError) {\n    return _Resource.do(HttpMethods_default.Get, client, path, null, headers, params, envelope, throwError != null ? throwError : false);\n  }\n  static async delete(client, path, headers, params, envelope, throwError) {\n    return _Resource.do(HttpMethods_default.Delete, client, path, null, headers, params, envelope, throwError);\n  }\n  static async post(client, path, body, headers, params, envelope, throwError) {\n    return _Resource.do(HttpMethods_default.Post, client, path, body, headers, params, envelope, throwError);\n  }\n  static async patch(client, path, body, headers, params, envelope, throwError) {\n    return _Resource.do(HttpMethods_default.Patch, client, path, body, headers, params, envelope, throwError);\n  }\n  static async put(client, path, body, headers, params, envelope, throwError) {\n    return _Resource.do(HttpMethods_default.Put, client, path, body, headers, params, envelope, throwError);\n  }\n  static async do(method, client, path, body, headers, params, envelope, throwError) {\n    if (envelope) {\n      (params = params || {})[\"envelope\"] = envelope;\n    }\n    const logger = client.logger;\n    async function doRequest(headers2, params2) {\n      var _a2;\n      if (logger.shouldLog(logger_default.LOG_MICRO)) {\n        let decodedBody = body;\n        if (((_a2 = headers2[\"content-type\"]) == null ? void 0 : _a2.indexOf(\"msgpack\")) > 0) {\n          try {\n            if (!client._MsgPack) {\n              throwMissingPluginError(\"MsgPack\");\n            }\n            decodedBody = client._MsgPack.decode(body);\n          } catch (decodeErr) {\n            logger_default.logAction(\n              logger,\n              logger_default.LOG_MICRO,\n              \"Resource.\" + method + \"()\",\n              \"Sending MsgPack Decoding Error: \" + inspectError(decodeErr)\n            );\n          }\n        }\n        logger_default.logAction(\n          logger,\n          logger_default.LOG_MICRO,\n          \"Resource.\" + method + \"()\",\n          \"Sending; \" + appendingParams(path, params2) + \"; Body: \" + decodedBody\n        );\n      }\n      const httpResult = await client.http.do(method, path, headers2, body, params2);\n      if (httpResult.error && auth_default.isTokenErr(httpResult.error)) {\n        await client.auth.authorize(null, null);\n        return withAuthDetails(client, headers2, params2, doRequest);\n      }\n      return {\n        err: httpResult.error,\n        body: httpResult.body,\n        headers: httpResult.headers,\n        unpacked: httpResult.unpacked,\n        statusCode: httpResult.statusCode\n      };\n    }\n    let result = await withAuthDetails(client, headers, params, doRequest);\n    if (envelope) {\n      result = unenvelope(result, client._MsgPack, envelope);\n    }\n    if (logger.shouldLog(logger_default.LOG_MICRO)) {\n      logResult2(result, method, path, params, logger);\n    }\n    if (throwError) {\n      if (result.err) {\n        throw result.err;\n      } else {\n        const response = __spreadValues({}, result);\n        delete response.err;\n        return response;\n      }\n    }\n    return result;\n  }\n};\nvar resource_default = Resource;\n\n// src/common/lib/client/paginatedresource.ts\nfunction getRelParams(linkUrl) {\n  const urlMatch = linkUrl.match(/^\\.\\/(\\w+)\\?(.*)$/);\n  return urlMatch && urlMatch[2] && parseQueryString(urlMatch[2]);\n}\nfunction parseRelLinks(linkHeader) {\n  if (typeof linkHeader == \"string\")\n    linkHeader = linkHeader.split(\",\");\n  const relParams = {};\n  for (let i = 0; i < linkHeader.length; i++) {\n    const linkMatch = linkHeader[i].match(/^\\s*<(.+)>;\\s*rel=\"(\\w+)\"$/);\n    if (linkMatch) {\n      const params = getRelParams(linkMatch[1]);\n      if (params)\n        relParams[linkMatch[2]] = params;\n    }\n  }\n  return relParams;\n}\nfunction returnErrOnly(err, body, useHPR) {\n  return !(useHPR && (body || typeof err.code === \"number\"));\n}\nvar PaginatedResource = class {\n  constructor(client, path, headers, envelope, bodyHandler, useHttpPaginatedResponse) {\n    this.client = client;\n    this.path = path;\n    this.headers = headers;\n    this.envelope = envelope != null ? envelope : null;\n    this.bodyHandler = bodyHandler;\n    this.useHttpPaginatedResponse = useHttpPaginatedResponse || false;\n  }\n  get logger() {\n    return this.client.logger;\n  }\n  async get(params) {\n    const result = await resource_default.get(this.client, this.path, this.headers, params, this.envelope, false);\n    return this.handlePage(result);\n  }\n  async delete(params) {\n    const result = await resource_default.delete(this.client, this.path, this.headers, params, this.envelope, false);\n    return this.handlePage(result);\n  }\n  async post(params, body) {\n    const result = await resource_default.post(this.client, this.path, body, this.headers, params, this.envelope, false);\n    return this.handlePage(result);\n  }\n  async put(params, body) {\n    const result = await resource_default.put(this.client, this.path, body, this.headers, params, this.envelope, false);\n    return this.handlePage(result);\n  }\n  async patch(params, body) {\n    const result = await resource_default.patch(this.client, this.path, body, this.headers, params, this.envelope, false);\n    return this.handlePage(result);\n  }\n  async handlePage(result) {\n    if (result.err && returnErrOnly(result.err, result.body, this.useHttpPaginatedResponse)) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_ERROR,\n        \"PaginatedResource.handlePage()\",\n        \"Unexpected error getting resource: err = \" + inspectError(result.err)\n      );\n      throw result.err;\n    }\n    let items, linkHeader, relParams;\n    try {\n      items = result.statusCode == HttpStatusCodes_default.NoContent ? [] : await this.bodyHandler(result.body, result.headers || {}, result.unpacked);\n    } catch (e) {\n      throw result.err || e;\n    }\n    if (result.headers && (linkHeader = result.headers[\"Link\"] || result.headers[\"link\"])) {\n      relParams = parseRelLinks(linkHeader);\n    }\n    if (this.useHttpPaginatedResponse) {\n      return new HttpPaginatedResponse(\n        this,\n        items,\n        result.headers || {},\n        result.statusCode,\n        relParams,\n        result.err\n      );\n    } else {\n      return new PaginatedResult(this, items, relParams);\n    }\n  }\n};\nvar PaginatedResult = class {\n  constructor(resource, items, relParams) {\n    this.resource = resource;\n    this.items = items;\n    const self2 = this;\n    if (relParams) {\n      if (\"first\" in relParams) {\n        this.first = async function() {\n          return self2.get(relParams.first);\n        };\n      }\n      if (\"current\" in relParams) {\n        this.current = async function() {\n          return self2.get(relParams.current);\n        };\n      }\n      this.next = async function() {\n        if (\"next\" in relParams) {\n          return self2.get(relParams.next);\n        } else {\n          return null;\n        }\n      };\n      this.hasNext = function() {\n        return \"next\" in relParams;\n      };\n      this.isLast = () => {\n        var _a2;\n        return !((_a2 = this.hasNext) == null ? void 0 : _a2.call(this));\n      };\n    }\n  }\n  /* We assume that only the initial request can be a POST, and that accessing\n   * the rest of a multipage set of results can always be done with GET */\n  async get(params) {\n    const res = this.resource;\n    const result = await resource_default.get(res.client, res.path, res.headers, params, res.envelope, false);\n    return res.handlePage(result);\n  }\n};\nvar HttpPaginatedResponse = class extends PaginatedResult {\n  constructor(resource, items, headers, statusCode, relParams, err) {\n    super(resource, items, relParams);\n    this.statusCode = statusCode;\n    this.success = statusCode < 300 && statusCode >= 200;\n    this.headers = headers;\n    this.errorCode = err && err.code;\n    this.errorMessage = err && err.message;\n  }\n  toJSON() {\n    return {\n      items: this.items,\n      statusCode: this.statusCode,\n      success: this.success,\n      headers: this.headers,\n      errorCode: this.errorCode,\n      errorMessage: this.errorMessage\n    };\n  }\n};\nvar paginatedresource_default = PaginatedResource;\n\n// src/common/lib/types/pushchannelsubscription.ts\nvar _PushChannelSubscription = class _PushChannelSubscription {\n  /**\n   * Overload toJSON() to intercept JSON.stringify()\n   * @return {*}\n   */\n  toJSON() {\n    return {\n      channel: this.channel,\n      deviceId: this.deviceId,\n      clientId: this.clientId\n    };\n  }\n  toString() {\n    let result = \"[PushChannelSubscription\";\n    if (this.channel)\n      result += \"; channel=\" + this.channel;\n    if (this.deviceId)\n      result += \"; deviceId=\" + this.deviceId;\n    if (this.clientId)\n      result += \"; clientId=\" + this.clientId;\n    result += \"]\";\n    return result;\n  }\n  static fromResponseBody(body, MsgPack, format) {\n    if (format) {\n      body = decodeBody(body, MsgPack, format);\n    }\n    if (Array.isArray(body)) {\n      return _PushChannelSubscription.fromValuesArray(body);\n    } else {\n      return _PushChannelSubscription.fromValues(body);\n    }\n  }\n  static fromValues(values) {\n    return Object.assign(new _PushChannelSubscription(), values);\n  }\n  static fromValuesArray(values) {\n    const count = values.length, result = new Array(count);\n    for (let i = 0; i < count; i++)\n      result[i] = _PushChannelSubscription.fromValues(values[i]);\n    return result;\n  }\n};\n_PushChannelSubscription.toRequestBody = encodeBody;\nvar PushChannelSubscription = _PushChannelSubscription;\nvar pushchannelsubscription_default = PushChannelSubscription;\n\n// src/common/lib/client/push.ts\nvar Push = class {\n  constructor(client) {\n    var _a2;\n    this.client = client;\n    this.admin = new Admin(client);\n    if (Platform.Config.push && ((_a2 = client.options.plugins) == null ? void 0 : _a2.Push)) {\n      this.stateMachine = new client.options.plugins.Push.ActivationStateMachine(client);\n      this.LocalDevice = client.options.plugins.Push.localDeviceFactory(devicedetails_default);\n    }\n  }\n  async activate(registerCallback, updateFailedCallback) {\n    await new Promise((resolve, reject) => {\n      var _a2;\n      if (!((_a2 = this.client.options.plugins) == null ? void 0 : _a2.Push)) {\n        reject(createMissingPluginError(\"Push\"));\n        return;\n      }\n      if (!this.stateMachine) {\n        reject(new ErrorInfo(\"This platform is not supported as a target of push notifications\", 4e4, 400));\n        return;\n      }\n      if (this.stateMachine.activatedCallback) {\n        reject(new ErrorInfo(\"Activation already in progress\", 4e4, 400));\n        return;\n      }\n      this.stateMachine.activatedCallback = (err) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve();\n      };\n      this.stateMachine.updateFailedCallback = updateFailedCallback;\n      this.stateMachine.handleEvent(\n        new this.client.options.plugins.Push.CalledActivate(this.stateMachine, registerCallback)\n      );\n    });\n  }\n  async deactivate(deregisterCallback) {\n    await new Promise((resolve, reject) => {\n      var _a2;\n      if (!((_a2 = this.client.options.plugins) == null ? void 0 : _a2.Push)) {\n        reject(createMissingPluginError(\"Push\"));\n        return;\n      }\n      if (!this.stateMachine) {\n        reject(new ErrorInfo(\"This platform is not supported as a target of push notifications\", 4e4, 400));\n        return;\n      }\n      if (this.stateMachine.deactivatedCallback) {\n        reject(new ErrorInfo(\"Deactivation already in progress\", 4e4, 400));\n        return;\n      }\n      this.stateMachine.deactivatedCallback = (err) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve();\n      };\n      this.stateMachine.handleEvent(\n        new this.client.options.plugins.Push.CalledDeactivate(this.stateMachine, deregisterCallback)\n      );\n    });\n  }\n};\nvar Admin = class {\n  constructor(client) {\n    this.client = client;\n    this.deviceRegistrations = new DeviceRegistrations(client);\n    this.channelSubscriptions = new ChannelSubscriptions(client);\n  }\n  async publish(recipient, payload) {\n    const client = this.client;\n    const format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, headers = defaults_default.defaultPostHeaders(client.options, { format }), params = {};\n    const body = mixin({ recipient }, payload);\n    mixin(headers, client.options.headers);\n    if (client.options.pushFullWait)\n      mixin(params, { fullWait: \"true\" });\n    const requestBody = encodeBody(body, client._MsgPack, format);\n    await resource_default.post(client, \"/push/publish\", requestBody, headers, params, null, true);\n  }\n};\nvar DeviceRegistrations = class {\n  constructor(client) {\n    this.client = client;\n  }\n  async save(device) {\n    const client = this.client;\n    const body = devicedetails_default.fromValues(device);\n    const format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, headers = defaults_default.defaultPostHeaders(client.options, { format }), params = {};\n    mixin(headers, client.options.headers);\n    if (client.options.pushFullWait)\n      mixin(params, { fullWait: \"true\" });\n    const requestBody = encodeBody(body, client._MsgPack, format);\n    const response = await resource_default.put(\n      client,\n      \"/push/deviceRegistrations/\" + encodeURIComponent(device.id),\n      requestBody,\n      headers,\n      params,\n      null,\n      true\n    );\n    return devicedetails_default.fromResponseBody(\n      response.body,\n      client._MsgPack,\n      response.unpacked ? void 0 : format\n    );\n  }\n  async get(deviceIdOrDetails) {\n    const client = this.client, format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, headers = defaults_default.defaultGetHeaders(client.options, { format }), deviceId = deviceIdOrDetails.id || deviceIdOrDetails;\n    if (typeof deviceId !== \"string\" || !deviceId.length) {\n      throw new ErrorInfo(\n        \"First argument to DeviceRegistrations#get must be a deviceId string or DeviceDetails\",\n        4e4,\n        400\n      );\n    }\n    mixin(headers, client.options.headers);\n    const response = await resource_default.get(\n      client,\n      \"/push/deviceRegistrations/\" + encodeURIComponent(deviceId),\n      headers,\n      {},\n      null,\n      true\n    );\n    return devicedetails_default.fromResponseBody(\n      response.body,\n      client._MsgPack,\n      response.unpacked ? void 0 : format\n    );\n  }\n  async list(params) {\n    const client = this.client, format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, envelope = this.client.http.supportsLinkHeaders ? void 0 : format, headers = defaults_default.defaultGetHeaders(client.options, { format });\n    mixin(headers, client.options.headers);\n    return new paginatedresource_default(client, \"/push/deviceRegistrations\", headers, envelope, async function(body, headers2, unpacked) {\n      return devicedetails_default.fromResponseBody(\n        body,\n        client._MsgPack,\n        unpacked ? void 0 : format\n      );\n    }).get(params);\n  }\n  async remove(deviceIdOrDetails) {\n    const client = this.client, format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, headers = defaults_default.defaultGetHeaders(client.options, { format }), params = {}, deviceId = deviceIdOrDetails.id || deviceIdOrDetails;\n    if (typeof deviceId !== \"string\" || !deviceId.length) {\n      throw new ErrorInfo(\n        \"First argument to DeviceRegistrations#remove must be a deviceId string or DeviceDetails\",\n        4e4,\n        400\n      );\n    }\n    mixin(headers, client.options.headers);\n    if (client.options.pushFullWait)\n      mixin(params, { fullWait: \"true\" });\n    await resource_default[\"delete\"](\n      client,\n      \"/push/deviceRegistrations/\" + encodeURIComponent(deviceId),\n      headers,\n      params,\n      null,\n      true\n    );\n  }\n  async removeWhere(params) {\n    const client = this.client, format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, headers = defaults_default.defaultGetHeaders(client.options, { format });\n    mixin(headers, client.options.headers);\n    if (client.options.pushFullWait)\n      mixin(params, { fullWait: \"true\" });\n    await resource_default[\"delete\"](client, \"/push/deviceRegistrations\", headers, params, null, true);\n  }\n};\nvar ChannelSubscriptions = class _ChannelSubscriptions {\n  constructor(client) {\n    /* ChannelSubscriptions have no unique id; removing one is equivalent to removeWhere by its properties */\n    this.remove = _ChannelSubscriptions.prototype.removeWhere;\n    this.client = client;\n  }\n  async save(subscription) {\n    const client = this.client;\n    const body = pushchannelsubscription_default.fromValues(subscription);\n    const format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, headers = defaults_default.defaultPostHeaders(client.options, { format }), params = {};\n    mixin(headers, client.options.headers);\n    if (client.options.pushFullWait)\n      mixin(params, { fullWait: \"true\" });\n    const requestBody = encodeBody(body, client._MsgPack, format);\n    const response = await resource_default.post(\n      client,\n      \"/push/channelSubscriptions\",\n      requestBody,\n      headers,\n      params,\n      null,\n      true\n    );\n    return pushchannelsubscription_default.fromResponseBody(\n      response.body,\n      client._MsgPack,\n      response.unpacked ? void 0 : format\n    );\n  }\n  async list(params) {\n    const client = this.client, format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, envelope = this.client.http.supportsLinkHeaders ? void 0 : format, headers = defaults_default.defaultGetHeaders(client.options, { format });\n    mixin(headers, client.options.headers);\n    return new paginatedresource_default(client, \"/push/channelSubscriptions\", headers, envelope, async function(body, headers2, unpacked) {\n      return pushchannelsubscription_default.fromResponseBody(\n        body,\n        client._MsgPack,\n        unpacked ? void 0 : format\n      );\n    }).get(params);\n  }\n  async removeWhere(params) {\n    const client = this.client, format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, headers = defaults_default.defaultGetHeaders(client.options, { format });\n    mixin(headers, client.options.headers);\n    if (client.options.pushFullWait)\n      mixin(params, { fullWait: \"true\" });\n    await resource_default[\"delete\"](client, \"/push/channelSubscriptions\", headers, params, null, true);\n  }\n  async listChannels(params) {\n    const client = this.client, format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, envelope = this.client.http.supportsLinkHeaders ? void 0 : format, headers = defaults_default.defaultGetHeaders(client.options, { format });\n    mixin(headers, client.options.headers);\n    if (client.options.pushFullWait)\n      mixin(params, { fullWait: \"true\" });\n    return new paginatedresource_default(client, \"/push/channels\", headers, envelope, async function(body, headers2, unpacked) {\n      const parsedBody = !unpacked && format ? decodeBody(body, client._MsgPack, format) : body;\n      for (let i = 0; i < parsedBody.length; i++) {\n        parsedBody[i] = String(parsedBody[i]);\n      }\n      return parsedBody;\n    }).get(params);\n  }\n};\nvar push_default = Push;\n\n// src/common/lib/types/message.ts\nvar MessageActionArray = [\n  \"message.unset\",\n  \"message.create\",\n  \"message.update\",\n  \"message.delete\",\n  \"annotation.create\",\n  \"annotation.delete\",\n  \"meta.occupancy\"\n];\nvar MessageActionMap = new Map(MessageActionArray.map((action, index) => [action, index]));\nvar ReverseMessageActionMap = new Map(\n  MessageActionArray.map((action, index) => [index, action])\n);\nfunction toMessageActionString(actionNumber) {\n  return ReverseMessageActionMap.get(actionNumber);\n}\nfunction toMessageActionNumber(messageAction) {\n  return messageAction ? MessageActionMap.get(messageAction) : void 0;\n}\nfunction normaliseContext(context) {\n  if (!context || !context.channelOptions) {\n    return {\n      channelOptions: context,\n      plugins: {},\n      baseEncodedPreviousPayload: void 0\n    };\n  }\n  return context;\n}\nfunction normalizeCipherOptions(Crypto2, logger, options) {\n  if (options && options.cipher) {\n    if (!Crypto2)\n      throwMissingPluginError(\"Crypto\");\n    const cipher = Crypto2.getCipher(options.cipher, logger);\n    return {\n      cipher: cipher.cipherParams,\n      channelCipher: cipher.cipher\n    };\n  }\n  return options != null ? options : {};\n}\nfunction getMessageSize(msg) {\n  let size = 0;\n  if (msg.name) {\n    size += msg.name.length;\n  }\n  if (msg.clientId) {\n    size += msg.clientId.length;\n  }\n  if (msg.extras) {\n    size += JSON.stringify(msg.extras).length;\n  }\n  if (msg.data) {\n    size += dataSizeBytes(msg.data);\n  }\n  return size;\n}\nasync function fromEncoded(logger, Crypto2, encoded, inputOptions) {\n  const msg = fromWireProtocol(encoded);\n  const options = normalizeCipherOptions(Crypto2, logger, inputOptions != null ? inputOptions : null);\n  try {\n    await decode(msg, options);\n  } catch (e) {\n    logger_default.logAction(logger, logger_default.LOG_ERROR, \"Message.fromEncoded()\", e.toString());\n  }\n  return msg;\n}\nasync function fromEncodedArray(logger, Crypto2, encodedArray, options) {\n  return Promise.all(\n    encodedArray.map(function(encoded) {\n      return fromEncoded(logger, Crypto2, encoded, options);\n    })\n  );\n}\nasync function _fromEncoded(encoded, channel) {\n  const msg = fromWireProtocol(encoded);\n  try {\n    await decode(msg, channel.channelOptions);\n  } catch (e) {\n    logger_default.logAction(channel.logger, logger_default.LOG_ERROR, \"Message._fromEncoded()\", e.toString());\n  }\n  return msg;\n}\nasync function _fromEncodedArray(encodedArray, channel) {\n  return Promise.all(\n    encodedArray.map(function(encoded) {\n      return _fromEncoded(encoded, channel);\n    })\n  );\n}\nasync function encrypt(msg, options) {\n  let data = msg.data, encoding = msg.encoding, cipher = options.channelCipher;\n  encoding = encoding ? encoding + \"/\" : \"\";\n  if (!Platform.BufferUtils.isBuffer(data)) {\n    data = Platform.BufferUtils.utf8Encode(String(data));\n    encoding = encoding + \"utf-8/\";\n  }\n  const ciphertext = await cipher.encrypt(data);\n  msg.data = ciphertext;\n  msg.encoding = encoding + \"cipher+\" + cipher.algorithm;\n  return msg;\n}\nasync function encode(msg, options) {\n  const data = msg.data;\n  const nativeDataType = typeof data == \"string\" || Platform.BufferUtils.isBuffer(data) || data === null || data === void 0;\n  if (!nativeDataType) {\n    if (isObject(data) || Array.isArray(data)) {\n      msg.data = JSON.stringify(data);\n      msg.encoding = msg.encoding ? msg.encoding + \"/json\" : \"json\";\n    } else {\n      throw new ErrorInfo(\"Data type is unsupported\", 40013, 400);\n    }\n  }\n  if (options != null && options.cipher) {\n    return encrypt(msg, options);\n  } else {\n    return msg;\n  }\n}\nasync function encodeArray(messages, options) {\n  return Promise.all(messages.map((message) => encode(message, options)));\n}\nvar serialize = encodeBody;\nasync function decode(message, inputContext) {\n  const context = normaliseContext(inputContext);\n  let lastPayload = message.data;\n  const encoding = message.encoding;\n  if (encoding) {\n    const xforms = encoding.split(\"/\");\n    let lastProcessedEncodingIndex, encodingsToProcess = xforms.length, data = message.data;\n    let xform = \"\";\n    try {\n      while ((lastProcessedEncodingIndex = encodingsToProcess) > 0) {\n        const match = xforms[--encodingsToProcess].match(/([-\\w]+)(\\+([\\w-]+))?/);\n        if (!match)\n          break;\n        xform = match[1];\n        switch (xform) {\n          case \"base64\":\n            data = Platform.BufferUtils.base64Decode(String(data));\n            if (lastProcessedEncodingIndex == xforms.length) {\n              lastPayload = data;\n            }\n            continue;\n          case \"utf-8\":\n            data = Platform.BufferUtils.utf8Decode(data);\n            continue;\n          case \"json\":\n            data = JSON.parse(data);\n            continue;\n          case \"cipher\":\n            if (context.channelOptions != null && context.channelOptions.cipher && context.channelOptions.channelCipher) {\n              const xformAlgorithm = match[3], cipher = context.channelOptions.channelCipher;\n              if (xformAlgorithm != cipher.algorithm) {\n                throw new Error(\"Unable to decrypt message with given cipher; incompatible cipher params\");\n              }\n              data = await cipher.decrypt(data);\n              continue;\n            } else {\n              throw new Error(\"Unable to decrypt message; not an encrypted channel\");\n            }\n          case \"vcdiff\":\n            if (!context.plugins || !context.plugins.vcdiff) {\n              throw new ErrorInfo(\"Missing Vcdiff decoder (https://github.com/ably-forks/vcdiff-decoder)\", 40019, 400);\n            }\n            if (typeof Uint8Array === \"undefined\") {\n              throw new ErrorInfo(\n                \"Delta decoding not supported on this browser (need ArrayBuffer & Uint8Array)\",\n                40020,\n                400\n              );\n            }\n            try {\n              let deltaBase = context.baseEncodedPreviousPayload;\n              if (typeof deltaBase === \"string\") {\n                deltaBase = Platform.BufferUtils.utf8Encode(deltaBase);\n              }\n              const deltaBaseBuffer = Platform.BufferUtils.toBuffer(deltaBase);\n              data = Platform.BufferUtils.toBuffer(data);\n              data = Platform.BufferUtils.arrayBufferViewToBuffer(context.plugins.vcdiff.decode(data, deltaBaseBuffer));\n              lastPayload = data;\n            } catch (e) {\n              throw new ErrorInfo(\"Vcdiff delta decode failed with \" + e, 40018, 400);\n            }\n            continue;\n          default:\n            throw new Error(\"Unknown encoding\");\n        }\n      }\n    } catch (e) {\n      const err = e;\n      throw new ErrorInfo(\n        \"Error processing the \" + xform + \" encoding, decoder returned \\u2018\" + err.message + \"\\u2019\",\n        err.code || 40013,\n        400\n      );\n    } finally {\n      message.encoding = lastProcessedEncodingIndex <= 0 ? null : xforms.slice(0, lastProcessedEncodingIndex).join(\"/\");\n      message.data = data;\n    }\n  }\n  context.baseEncodedPreviousPayload = lastPayload;\n}\nfunction fromValues(values) {\n  return Object.assign(new Message(), values);\n}\nfunction fromWireProtocol(values) {\n  const action = toMessageActionString(values.action) || values.action;\n  const res = Object.assign(new Message(), __spreadProps(__spreadValues({}, values), { action }));\n  res.expandFields();\n  return res;\n}\nfunction fromValuesArray(values) {\n  return values.map(fromValues);\n}\nfunction getMessagesSize(messages) {\n  let msg, total = 0;\n  for (let i = 0; i < messages.length; i++) {\n    msg = messages[i];\n    total += msg.size || (msg.size = getMessageSize(msg));\n  }\n  return total;\n}\nvar Message = class {\n  /**\n   * Overload toJSON() to intercept JSON.stringify()\n   * @return {*}\n   */\n  toJSON() {\n    let encoding = this.encoding;\n    let data = this.data;\n    if (data && Platform.BufferUtils.isBuffer(data)) {\n      if (arguments.length > 0) {\n        encoding = encoding ? encoding + \"/base64\" : \"base64\";\n        data = Platform.BufferUtils.base64Encode(data);\n      } else {\n        data = Platform.BufferUtils.toBuffer(data);\n      }\n    }\n    return {\n      name: this.name,\n      id: this.id,\n      clientId: this.clientId,\n      connectionId: this.connectionId,\n      connectionKey: this.connectionKey,\n      extras: this.extras,\n      serial: this.serial,\n      action: toMessageActionNumber(this.action) || this.action,\n      refSerial: this.refSerial,\n      refType: this.refType,\n      createdAt: this.createdAt,\n      version: this.version,\n      operation: this.operation,\n      encoding,\n      data\n    };\n  }\n  expandFields() {\n    if (this.action === \"message.create\") {\n      if (this.version && !this.serial) {\n        this.serial = this.version;\n      }\n      if (this.timestamp && !this.createdAt) {\n        this.createdAt = this.timestamp;\n      }\n    }\n  }\n  toString() {\n    let result = \"[Message\";\n    if (this.name)\n      result += \"; name=\" + this.name;\n    if (this.id)\n      result += \"; id=\" + this.id;\n    if (this.timestamp)\n      result += \"; timestamp=\" + this.timestamp;\n    if (this.clientId)\n      result += \"; clientId=\" + this.clientId;\n    if (this.connectionId)\n      result += \"; connectionId=\" + this.connectionId;\n    if (this.encoding)\n      result += \"; encoding=\" + this.encoding;\n    if (this.extras)\n      result += \"; extras =\" + JSON.stringify(this.extras);\n    if (this.data) {\n      if (typeof this.data == \"string\")\n        result += \"; data=\" + this.data;\n      else if (Platform.BufferUtils.isBuffer(this.data))\n        result += \"; data (buffer)=\" + Platform.BufferUtils.base64Encode(this.data);\n      else\n        result += \"; data (json)=\" + JSON.stringify(this.data);\n    }\n    if (this.extras)\n      result += \"; extras=\" + JSON.stringify(this.extras);\n    if (this.action)\n      result += \"; action=\" + this.action;\n    if (this.serial)\n      result += \"; serial=\" + this.serial;\n    if (this.version)\n      result += \"; version=\" + this.version;\n    if (this.refSerial)\n      result += \"; refSerial=\" + this.refSerial;\n    if (this.refType)\n      result += \"; refType=\" + this.refType;\n    if (this.createdAt)\n      result += \"; createdAt=\" + this.createdAt;\n    if (this.operation)\n      result += \"; operation=\" + JSON.stringify(this.operation);\n    result += \"]\";\n    return result;\n  }\n};\nvar message_default = Message;\n\n// src/common/lib/types/presencemessage.ts\nvar actions = [\"absent\", \"present\", \"enter\", \"leave\", \"update\"];\nfunction toActionValue(actionString) {\n  return actions.indexOf(actionString);\n}\nasync function fromEncoded2(logger, Crypto2, encoded, inputOptions) {\n  const msg = fromWireProtocol2(encoded);\n  const options = normalizeCipherOptions(Crypto2, logger, inputOptions != null ? inputOptions : null);\n  try {\n    await decode2(msg, options != null ? options : {});\n  } catch (e) {\n    logger_default.logAction(logger, logger_default.LOG_ERROR, \"PresenceMessage.fromEncoded()\", e.toString());\n  }\n  return msg;\n}\nasync function fromEncodedArray2(logger, Crypto2, encodedArray, options) {\n  return Promise.all(\n    encodedArray.map(function(encoded) {\n      return fromEncoded2(logger, Crypto2, encoded, options);\n    })\n  );\n}\nasync function _fromEncoded2(encoded, channel) {\n  const msg = fromWireProtocol2(encoded);\n  try {\n    await decode2(msg, channel.channelOptions);\n  } catch (e) {\n    logger_default.logAction(channel.logger, logger_default.LOG_ERROR, \"PresenceMessage._fromEncoded()\", e.toString());\n  }\n  return msg;\n}\nasync function _fromEncodedArray2(encodedArray, channel) {\n  return Promise.all(\n    encodedArray.map(function(encoded) {\n      return _fromEncoded2(encoded, channel);\n    })\n  );\n}\nfunction fromValues2(values) {\n  return Object.assign(new PresenceMessage(), values);\n}\nfunction fromWireProtocol2(values) {\n  const action = actions[values.action];\n  return Object.assign(new PresenceMessage(), __spreadProps(__spreadValues({}, values), { action }));\n}\nvar decode2 = decode;\nfunction fromValuesArray2(values) {\n  return values.map(fromValues2);\n}\nfunction fromData(data) {\n  if (data instanceof PresenceMessage) {\n    return data;\n  }\n  return fromValues2({\n    data\n  });\n}\nvar PresenceMessage = class {\n  /* Returns whether this presenceMessage is synthesized, i.e. was not actually\n   * sent by the connection (usually means a leave event sent 15s after a\n   * disconnection). This is useful because synthesized messages cannot be\n   * compared for newness by id lexicographically - RTP2b1\n   */\n  isSynthesized() {\n    if (!this.id || !this.connectionId) {\n      return true;\n    }\n    return this.id.substring(this.connectionId.length, 0) !== this.connectionId;\n  }\n  /* RTP2b2 */\n  parseId() {\n    if (!this.id)\n      throw new Error(\"parseId(): Presence message does not contain an id\");\n    const parts = this.id.split(\":\");\n    return {\n      connectionId: parts[0],\n      msgSerial: parseInt(parts[1], 10),\n      index: parseInt(parts[2], 10)\n    };\n  }\n  /**\n   * Overload toJSON() to intercept JSON.stringify()\n   * @return {*}\n   */\n  toJSON() {\n    let data = this.data;\n    let encoding = this.encoding;\n    if (data && Platform.BufferUtils.isBuffer(data)) {\n      if (arguments.length > 0) {\n        encoding = encoding ? encoding + \"/base64\" : \"base64\";\n        data = Platform.BufferUtils.base64Encode(data);\n      } else {\n        data = Platform.BufferUtils.toBuffer(data);\n      }\n    }\n    return {\n      id: this.id,\n      clientId: this.clientId,\n      /* Convert presence action back to an int for sending to Ably */\n      action: toActionValue(this.action),\n      data,\n      encoding,\n      extras: this.extras\n    };\n  }\n  toString() {\n    let result = \"[PresenceMessage\";\n    result += \"; action=\" + this.action;\n    if (this.id)\n      result += \"; id=\" + this.id;\n    if (this.timestamp)\n      result += \"; timestamp=\" + this.timestamp;\n    if (this.clientId)\n      result += \"; clientId=\" + this.clientId;\n    if (this.connectionId)\n      result += \"; connectionId=\" + this.connectionId;\n    if (this.encoding)\n      result += \"; encoding=\" + this.encoding;\n    if (this.data) {\n      if (typeof this.data == \"string\")\n        result += \"; data=\" + this.data;\n      else if (Platform.BufferUtils.isBuffer(this.data))\n        result += \"; data (buffer)=\" + Platform.BufferUtils.base64Encode(this.data);\n      else\n        result += \"; data (json)=\" + JSON.stringify(this.data);\n    }\n    if (this.extras) {\n      result += \"; extras=\" + JSON.stringify(this.extras);\n    }\n    result += \"]\";\n    return result;\n  }\n};\nvar presencemessage_default = PresenceMessage;\n\n// src/common/lib/client/restpresence.ts\nvar RestPresence = class {\n  constructor(channel) {\n    this.channel = channel;\n  }\n  get logger() {\n    return this.channel.logger;\n  }\n  async get(params) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"RestPresence.get()\", \"channel = \" + this.channel.name);\n    const client = this.channel.client, format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, envelope = this.channel.client.http.supportsLinkHeaders ? void 0 : format, headers = defaults_default.defaultGetHeaders(client.options, { format });\n    mixin(headers, client.options.headers);\n    return new paginatedresource_default(\n      client,\n      this.channel.client.rest.presenceMixin.basePath(this),\n      headers,\n      envelope,\n      async (body, headers2, unpacked) => {\n        const decoded = unpacked ? body : decodeBody(body, client._MsgPack, format);\n        return _fromEncodedArray2(decoded, this.channel);\n      }\n    ).get(params);\n  }\n  async history(params) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"RestPresence.history()\", \"channel = \" + this.channel.name);\n    return this.channel.client.rest.presenceMixin.history(this, params);\n  }\n};\nvar restpresence_default = RestPresence;\n\n// src/common/lib/client/restchannel.ts\nvar MSG_ID_ENTROPY_BYTES = 9;\nfunction allEmptyIds(messages) {\n  return messages.every(function(message) {\n    return !message.id;\n  });\n}\nvar RestChannel = class {\n  constructor(client, name, channelOptions) {\n    var _a2, _b;\n    logger_default.logAction(client.logger, logger_default.LOG_MINOR, \"RestChannel()\", \"started; name = \" + name);\n    this.name = name;\n    this.client = client;\n    this.presence = new restpresence_default(this);\n    this.channelOptions = normaliseChannelOptions((_a2 = client._Crypto) != null ? _a2 : null, this.logger, channelOptions);\n    if ((_b = client.options.plugins) == null ? void 0 : _b.Push) {\n      this._push = new client.options.plugins.Push.PushChannel(this);\n    }\n  }\n  get push() {\n    if (!this._push) {\n      throwMissingPluginError(\"Push\");\n    }\n    return this._push;\n  }\n  get logger() {\n    return this.client.logger;\n  }\n  setOptions(options) {\n    var _a2;\n    this.channelOptions = normaliseChannelOptions((_a2 = this.client._Crypto) != null ? _a2 : null, this.logger, options);\n  }\n  async history(params) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"RestChannel.history()\", \"channel = \" + this.name);\n    return this.client.rest.channelMixin.history(this, params);\n  }\n  async publish(...args) {\n    const first = args[0], second = args[1];\n    let messages;\n    let params;\n    if (typeof first === \"string\" || first === null) {\n      messages = [fromValues({ name: first, data: second })];\n      params = args[2];\n    } else if (isObject(first)) {\n      messages = [fromValues(first)];\n      params = args[1];\n    } else if (Array.isArray(first)) {\n      messages = fromValuesArray(first);\n      params = args[1];\n    } else {\n      throw new ErrorInfo(\n        \"The single-argument form of publish() expects a message object or an array of message objects\",\n        40013,\n        400\n      );\n    }\n    if (!params) {\n      params = {};\n    }\n    const client = this.client, options = client.options, format = options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, idempotentRestPublishing = client.options.idempotentRestPublishing, headers = defaults_default.defaultPostHeaders(client.options, { format });\n    mixin(headers, options.headers);\n    if (idempotentRestPublishing && allEmptyIds(messages)) {\n      const msgIdBase = await randomString(MSG_ID_ENTROPY_BYTES);\n      messages.forEach(function(message, index) {\n        message.id = msgIdBase + \":\" + index.toString();\n      });\n    }\n    await encodeArray(messages, this.channelOptions);\n    const size = getMessagesSize(messages), maxMessageSize = options.maxMessageSize;\n    if (size > maxMessageSize) {\n      throw new ErrorInfo(\n        \"Maximum size of messages that can be published at once exceeded ( was \" + size + \" bytes; limit is \" + maxMessageSize + \" bytes)\",\n        40009,\n        400\n      );\n    }\n    await this._publish(serialize(messages, client._MsgPack, format), headers, params);\n  }\n  async _publish(requestBody, headers, params) {\n    await resource_default.post(\n      this.client,\n      this.client.rest.channelMixin.basePath(this) + \"/messages\",\n      requestBody,\n      headers,\n      params,\n      null,\n      true\n    );\n  }\n  async status() {\n    return this.client.rest.channelMixin.status(this);\n  }\n};\nvar restchannel_default = RestChannel;\n\n// src/common/lib/types/stats.ts\nvar Stats = class _Stats {\n  constructor(values) {\n    this.entries = values && values.entries || void 0;\n    this.schema = values && values.schema || void 0;\n    this.appId = values && values.appId || void 0;\n    this.inProgress = values && values.inProgress || void 0;\n    this.unit = values && values.unit || void 0;\n    this.intervalId = values && values.intervalId || void 0;\n  }\n  static fromValues(values) {\n    return new _Stats(values);\n  }\n};\nvar stats_default = Stats;\n\n// src/common/lib/client/restchannelmixin.ts\nvar RestChannelMixin = class {\n  static basePath(channel) {\n    return \"/channels/\" + encodeURIComponent(channel.name);\n  }\n  static history(channel, params) {\n    const client = channel.client, format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, envelope = channel.client.http.supportsLinkHeaders ? void 0 : format, headers = defaults_default.defaultGetHeaders(client.options, { format });\n    mixin(headers, client.options.headers);\n    return new paginatedresource_default(client, this.basePath(channel) + \"/messages\", headers, envelope, async function(body, headers2, unpacked) {\n      const decoded = unpacked ? body : decodeBody(body, client._MsgPack, format);\n      return _fromEncodedArray(decoded, channel);\n    }).get(params);\n  }\n  static async status(channel) {\n    const format = channel.client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */;\n    const headers = defaults_default.defaultPostHeaders(channel.client.options, { format });\n    const response = await resource_default.get(\n      channel.client,\n      this.basePath(channel),\n      headers,\n      {},\n      format,\n      true\n    );\n    return response.body;\n  }\n};\n\n// src/common/lib/client/restpresencemixin.ts\nvar RestPresenceMixin = class {\n  static basePath(presence) {\n    return RestChannelMixin.basePath(presence.channel) + \"/presence\";\n  }\n  static async history(presence, params) {\n    const client = presence.channel.client, format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, envelope = presence.channel.client.http.supportsLinkHeaders ? void 0 : format, headers = defaults_default.defaultGetHeaders(client.options, { format });\n    mixin(headers, client.options.headers);\n    return new paginatedresource_default(\n      client,\n      this.basePath(presence) + \"/history\",\n      headers,\n      envelope,\n      async (body, headers2, unpacked) => {\n        const decoded = unpacked ? body : decodeBody(body, client._MsgPack, format);\n        return _fromEncodedArray2(decoded, presence.channel);\n      }\n    ).get(params);\n  }\n};\n\n// src/common/lib/client/rest.ts\nvar Rest = class {\n  constructor(client) {\n    this.channelMixin = RestChannelMixin;\n    this.presenceMixin = RestPresenceMixin;\n    // exposed for plugins but shouldn't be bundled with minimal realtime\n    this.Resource = resource_default;\n    this.DeviceDetails = devicedetails_default;\n    this.client = client;\n    this.channels = new Channels(this.client);\n    this.push = new push_default(this.client);\n  }\n  async stats(params) {\n    const headers = defaults_default.defaultGetHeaders(this.client.options), format = this.client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, envelope = this.client.http.supportsLinkHeaders ? void 0 : format;\n    mixin(headers, this.client.options.headers);\n    return new paginatedresource_default(this.client, \"/stats\", headers, envelope, function(body, headers2, unpacked) {\n      const statsValues = unpacked ? body : JSON.parse(body);\n      for (let i = 0; i < statsValues.length; i++)\n        statsValues[i] = stats_default.fromValues(statsValues[i]);\n      return statsValues;\n    }).get(params);\n  }\n  async time(params) {\n    const headers = defaults_default.defaultGetHeaders(this.client.options);\n    if (this.client.options.headers)\n      mixin(headers, this.client.options.headers);\n    const timeUri = (host) => {\n      return this.client.baseUri(host) + \"/time\";\n    };\n    let { error, body, unpacked } = await this.client.http.do(\n      HttpMethods_default.Get,\n      timeUri,\n      headers,\n      null,\n      params\n    );\n    if (error) {\n      throw error;\n    }\n    if (!unpacked)\n      body = JSON.parse(body);\n    const time = body[0];\n    if (!time) {\n      throw new ErrorInfo(\"Internal error (unexpected result type from GET /time)\", 5e4, 500);\n    }\n    this.client.serverTimeOffset = time - Date.now();\n    return time;\n  }\n  async request(method, path, version2, params, body, customHeaders) {\n    var _a2;\n    const [encoder, decoder, format] = (() => {\n      if (this.client.options.useBinaryProtocol) {\n        if (!this.client._MsgPack) {\n          throwMissingPluginError(\"MsgPack\");\n        }\n        return [this.client._MsgPack.encode, this.client._MsgPack.decode, \"msgpack\" /* msgpack */];\n      } else {\n        return [JSON.stringify, JSON.parse, \"json\" /* json */];\n      }\n    })();\n    const envelope = this.client.http.supportsLinkHeaders ? void 0 : format;\n    params = params || {};\n    const _method = method.toLowerCase();\n    const headers = _method == \"get\" ? defaults_default.defaultGetHeaders(this.client.options, { format, protocolVersion: version2 }) : defaults_default.defaultPostHeaders(this.client.options, { format, protocolVersion: version2 });\n    if (typeof body !== \"string\") {\n      body = (_a2 = encoder(body)) != null ? _a2 : null;\n    }\n    mixin(headers, this.client.options.headers);\n    if (customHeaders) {\n      mixin(headers, customHeaders);\n    }\n    const paginatedResource = new paginatedresource_default(\n      this.client,\n      path,\n      headers,\n      envelope,\n      async function(resbody, headers2, unpacked) {\n        return ensureArray(unpacked ? resbody : decoder(resbody));\n      },\n      /* useHttpPaginatedResponse: */\n      true\n    );\n    if (!Platform.Http.methods.includes(_method)) {\n      throw new ErrorInfo(\"Unsupported method \" + _method, 40500, 405);\n    }\n    if (Platform.Http.methodsWithBody.includes(_method)) {\n      return paginatedResource[_method](params, body);\n    } else {\n      return paginatedResource[_method](params);\n    }\n  }\n  async batchPublish(specOrSpecs) {\n    let requestBodyDTO;\n    let singleSpecMode;\n    if (Array.isArray(specOrSpecs)) {\n      requestBodyDTO = specOrSpecs;\n      singleSpecMode = false;\n    } else {\n      requestBodyDTO = [specOrSpecs];\n      singleSpecMode = true;\n    }\n    const format = this.client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, headers = defaults_default.defaultPostHeaders(this.client.options, { format });\n    if (this.client.options.headers)\n      mixin(headers, this.client.options.headers);\n    const requestBody = encodeBody(requestBodyDTO, this.client._MsgPack, format);\n    const response = await resource_default.post(this.client, \"/messages\", requestBody, headers, {}, null, true);\n    const batchResults = response.unpacked ? response.body : decodeBody(response.body, this.client._MsgPack, format);\n    if (singleSpecMode) {\n      return batchResults[0];\n    } else {\n      return batchResults;\n    }\n  }\n  async batchPresence(channels) {\n    const format = this.client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, headers = defaults_default.defaultPostHeaders(this.client.options, { format });\n    if (this.client.options.headers)\n      mixin(headers, this.client.options.headers);\n    const channelsParam = channels.join(\",\");\n    const response = await resource_default.get(this.client, \"/presence\", headers, { channels: channelsParam }, null, true);\n    return response.unpacked ? response.body : decodeBody(response.body, this.client._MsgPack, format);\n  }\n  async revokeTokens(specifiers, options) {\n    if (useTokenAuth(this.client.options)) {\n      throw new ErrorInfo(\"Cannot revoke tokens when using token auth\", 40162, 401);\n    }\n    const keyName = this.client.options.keyName;\n    let resolvedOptions = options != null ? options : {};\n    const requestBodyDTO = __spreadValues({\n      targets: specifiers.map((specifier) => `${specifier.type}:${specifier.value}`)\n    }, resolvedOptions);\n    const format = this.client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, headers = defaults_default.defaultPostHeaders(this.client.options, { format });\n    if (this.client.options.headers)\n      mixin(headers, this.client.options.headers);\n    const requestBody = encodeBody(requestBodyDTO, this.client._MsgPack, format);\n    const response = await resource_default.post(\n      this.client,\n      `/keys/${keyName}/revokeTokens`,\n      requestBody,\n      headers,\n      {},\n      null,\n      true\n    );\n    return response.unpacked ? response.body : decodeBody(response.body, this.client._MsgPack, format);\n  }\n};\nvar Channels = class {\n  constructor(client) {\n    this.client = client;\n    this.all = /* @__PURE__ */ Object.create(null);\n  }\n  get(name, channelOptions) {\n    name = String(name);\n    let channel = this.all[name];\n    if (!channel) {\n      this.all[name] = channel = new restchannel_default(this.client, name, channelOptions);\n    } else if (channelOptions) {\n      channel.setOptions(channelOptions);\n    }\n    return channel;\n  }\n  /* Included to support certain niche use-cases; most users should ignore this.\n   * Please do not use this unless you know what you're doing */\n  release(name) {\n    delete this.all[String(name)];\n  }\n};\n\n// src/common/lib/client/baserest.ts\nvar BaseRest = class extends baseclient_default {\n  /*\n   * The public typings declare that this only accepts an object, but since we want to emit a good error message in the case where a non-TypeScript user does one of these things:\n   *\n   * 1. passes a string (which is quite likely if they’re e.g. migrating from the default variant to the modular variant)\n   * 2. passes no argument at all\n   *\n   * tell the compiler that these cases are possible so that it forces us to handle them.\n   */\n  constructor(options) {\n    super(defaults_default.objectifyOptions(options, false, \"BaseRest\", logger_default.defaultLogger, { Rest }));\n  }\n};\n\n// src/common/lib/client/modularplugins.ts\nvar allCommonModularPlugins = { Rest };\n\n// src/common/lib/types/defaultmessage.ts\nvar DefaultMessage = class extends message_default {\n  static async fromEncoded(encoded, inputOptions) {\n    return fromEncoded(logger_default.defaultLogger, Platform.Crypto, encoded, inputOptions);\n  }\n  static async fromEncodedArray(encodedArray, options) {\n    return fromEncodedArray(logger_default.defaultLogger, Platform.Crypto, encodedArray, options);\n  }\n  // Used by tests\n  static fromValues(values) {\n    return fromValues(values);\n  }\n  // Used by tests\n  static fromWireProtocol(values) {\n    return fromWireProtocol(values);\n  }\n  // Used by tests\n  static async encode(msg, options) {\n    return encode(msg, options);\n  }\n  // Used by tests\n  static async decode(message, inputContext) {\n    return decode(message, inputContext);\n  }\n};\n\n// src/common/lib/types/defaultpresencemessage.ts\nvar DefaultPresenceMessage = class extends presencemessage_default {\n  static async fromEncoded(encoded, inputOptions) {\n    return fromEncoded2(logger_default.defaultLogger, Platform.Crypto, encoded, inputOptions);\n  }\n  static async fromEncodedArray(encodedArray, options) {\n    return fromEncodedArray2(\n      logger_default.defaultLogger,\n      Platform.Crypto,\n      encodedArray,\n      options\n    );\n  }\n  static fromValues(values) {\n    return fromValues2(values);\n  }\n};\n\n// src/common/lib/client/defaultrest.ts\nvar _DefaultRest = class _DefaultRest extends BaseRest {\n  // The public typings declare that this requires an argument to be passed, but since we want to emit a good error message in the case where a non-TypeScript user does not pass an argument, tell the compiler that this is possible so that it forces us to handle it.\n  constructor(options) {\n    var _a2, _b;\n    const MsgPack = _DefaultRest._MsgPack;\n    if (!MsgPack) {\n      throw new Error(\"Expected DefaultRest._MsgPack to have been set\");\n    }\n    super(\n      defaults_default.objectifyOptions(options, true, \"Rest\", logger_default.defaultLogger, __spreadProps(__spreadValues({}, allCommonModularPlugins), {\n        Crypto: (_a2 = _DefaultRest.Crypto) != null ? _a2 : void 0,\n        MsgPack: (_b = _DefaultRest._MsgPack) != null ? _b : void 0\n      }))\n    );\n  }\n  static get Crypto() {\n    if (this._Crypto === null) {\n      throw new Error(\"Encryption not enabled; use ably.encryption.js instead\");\n    }\n    return this._Crypto;\n  }\n  static set Crypto(newValue) {\n    this._Crypto = newValue;\n  }\n};\n_DefaultRest._Crypto = null;\n_DefaultRest.Message = DefaultMessage;\n_DefaultRest.PresenceMessage = DefaultPresenceMessage;\n_DefaultRest._MsgPack = null;\n// Used by tests\n_DefaultRest._Http = Http;\nvar DefaultRest = _DefaultRest;\n\n// src/common/lib/util/eventemitter.ts\nfunction callListener(logger, eventThis, listener, args) {\n  try {\n    listener.apply(eventThis, args);\n  } catch (e) {\n    logger_default.logAction(\n      logger,\n      logger_default.LOG_ERROR,\n      \"EventEmitter.emit()\",\n      \"Unexpected listener exception: \" + e + \"; stack = \" + (e && e.stack)\n    );\n  }\n}\nfunction removeListener(targetListeners, listener, eventFilter) {\n  let listeners;\n  let index;\n  let eventName;\n  for (let targetListenersIndex = 0; targetListenersIndex < targetListeners.length; targetListenersIndex++) {\n    listeners = targetListeners[targetListenersIndex];\n    if (eventFilter) {\n      listeners = listeners[eventFilter];\n    }\n    if (Array.isArray(listeners)) {\n      while ((index = listeners.indexOf(listener)) !== -1) {\n        listeners.splice(index, 1);\n      }\n      if (eventFilter && listeners.length === 0) {\n        delete targetListeners[targetListenersIndex][eventFilter];\n      }\n    } else if (isObject(listeners)) {\n      for (eventName in listeners) {\n        if (Object.prototype.hasOwnProperty.call(listeners, eventName) && Array.isArray(listeners[eventName])) {\n          removeListener([listeners], listener, eventName);\n        }\n      }\n    }\n  }\n}\nvar EventEmitter = class {\n  constructor(logger) {\n    this.logger = logger;\n    this.any = [];\n    this.events = /* @__PURE__ */ Object.create(null);\n    this.anyOnce = [];\n    this.eventsOnce = /* @__PURE__ */ Object.create(null);\n  }\n  on(...args) {\n    if (args.length === 1) {\n      const listener = args[0];\n      if (typeof listener === \"function\") {\n        this.any.push(listener);\n      } else {\n        throw new Error(\"EventListener.on(): Invalid arguments: \" + Platform.Config.inspect(args));\n      }\n    }\n    if (args.length === 2) {\n      const [event, listener] = args;\n      if (typeof listener !== \"function\") {\n        throw new Error(\"EventListener.on(): Invalid arguments: \" + Platform.Config.inspect(args));\n      }\n      if (isNil(event)) {\n        this.any.push(listener);\n      } else if (Array.isArray(event)) {\n        event.forEach((eventName) => {\n          this.on(eventName, listener);\n        });\n      } else {\n        if (typeof event !== \"string\") {\n          throw new Error(\"EventListener.on(): Invalid arguments: \" + Platform.Config.inspect(args));\n        }\n        const listeners = this.events[event] || (this.events[event] = []);\n        listeners.push(listener);\n      }\n    }\n  }\n  off(...args) {\n    if (args.length == 0 || isNil(args[0]) && isNil(args[1])) {\n      this.any = [];\n      this.events = /* @__PURE__ */ Object.create(null);\n      this.anyOnce = [];\n      this.eventsOnce = /* @__PURE__ */ Object.create(null);\n      return;\n    }\n    const [firstArg, secondArg] = args;\n    let listener = null;\n    let event = null;\n    if (args.length === 1 || !secondArg) {\n      if (typeof firstArg === \"function\") {\n        listener = firstArg;\n      } else {\n        event = firstArg;\n      }\n    } else {\n      if (typeof secondArg !== \"function\") {\n        throw new Error(\"EventEmitter.off(): invalid arguments:\" + Platform.Config.inspect(args));\n      }\n      [event, listener] = [firstArg, secondArg];\n    }\n    if (listener && isNil(event)) {\n      removeListener([this.any, this.events, this.anyOnce, this.eventsOnce], listener);\n      return;\n    }\n    if (Array.isArray(event)) {\n      event.forEach((eventName) => {\n        this.off(eventName, listener);\n      });\n      return;\n    }\n    if (typeof event !== \"string\") {\n      throw new Error(\"EventEmitter.off(): invalid arguments:\" + Platform.Config.inspect(args));\n    }\n    if (listener) {\n      removeListener([this.events, this.eventsOnce], listener, event);\n    } else {\n      delete this.events[event];\n      delete this.eventsOnce[event];\n    }\n  }\n  /**\n   * Get the array of listeners for a given event; excludes once events\n   * @param event (optional) the name of the event, or none for 'any'\n   * @return array of events, or null if none\n   */\n  listeners(event) {\n    if (event) {\n      const listeners = this.events[event] || [];\n      if (this.eventsOnce[event])\n        Array.prototype.push.apply(listeners, this.eventsOnce[event]);\n      return listeners.length ? listeners : null;\n    }\n    return this.any.length ? this.any : null;\n  }\n  /**\n   * Emit an event\n   * @param event the event name\n   * @param args the arguments to pass to the listener\n   */\n  emit(event, ...args) {\n    const eventThis = { event };\n    const listeners = [];\n    if (this.anyOnce.length) {\n      Array.prototype.push.apply(listeners, this.anyOnce);\n      this.anyOnce = [];\n    }\n    if (this.any.length) {\n      Array.prototype.push.apply(listeners, this.any);\n    }\n    const eventsOnceListeners = this.eventsOnce[event];\n    if (eventsOnceListeners) {\n      Array.prototype.push.apply(listeners, eventsOnceListeners);\n      delete this.eventsOnce[event];\n    }\n    const eventsListeners = this.events[event];\n    if (eventsListeners) {\n      Array.prototype.push.apply(listeners, eventsListeners);\n    }\n    listeners.forEach((listener) => {\n      callListener(this.logger, eventThis, listener, args);\n    });\n  }\n  once(...args) {\n    const argCount = args.length;\n    if (argCount === 0 || argCount === 1 && typeof args[0] !== \"function\") {\n      const event = args[0];\n      return new Promise((resolve) => {\n        this.once(event, resolve);\n      });\n    }\n    const [firstArg, secondArg] = args;\n    if (args.length === 1 && typeof firstArg === \"function\") {\n      this.anyOnce.push(firstArg);\n    } else if (isNil(firstArg)) {\n      if (typeof secondArg !== \"function\") {\n        throw new Error(\"EventEmitter.once(): Invalid arguments:\" + Platform.Config.inspect(args));\n      }\n      this.anyOnce.push(secondArg);\n    } else if (Array.isArray(firstArg)) {\n      const self2 = this;\n      const listenerWrapper = function() {\n        const innerArgs = Array.prototype.slice.call(arguments);\n        firstArg.forEach(function(eventName) {\n          self2.off(eventName, listenerWrapper);\n        });\n        if (typeof secondArg !== \"function\") {\n          throw new Error(\"EventEmitter.once(): Invalid arguments:\" + Platform.Config.inspect(args));\n        }\n        secondArg.apply(this, innerArgs);\n      };\n      firstArg.forEach(function(eventName) {\n        self2.on(eventName, listenerWrapper);\n      });\n    } else {\n      if (typeof firstArg !== \"string\") {\n        throw new Error(\"EventEmitter.once(): Invalid arguments:\" + Platform.Config.inspect(args));\n      }\n      const listeners = this.eventsOnce[firstArg] || (this.eventsOnce[firstArg] = []);\n      if (secondArg) {\n        if (typeof secondArg !== \"function\") {\n          throw new Error(\"EventEmitter.once(): Invalid arguments:\" + Platform.Config.inspect(args));\n        }\n        listeners.push(secondArg);\n      }\n    }\n  }\n  /**\n   * Listen for a single occurrence of a state event and fire immediately if currentState matches targetState\n   * @param targetState the name of the state event to listen to\n   * @param currentState the name of the current state of this object\n   */\n  async whenState(targetState, currentState) {\n    if (typeof targetState !== \"string\" || typeof currentState !== \"string\") {\n      throw new Error(\"whenState requires a valid state String argument\");\n    }\n    if (targetState === currentState) {\n      return null;\n    } else {\n      return this.once(targetState);\n    }\n  }\n};\nvar eventemitter_default = EventEmitter;\n\n// src/common/lib/types/protocolmessage.ts\nvar actions2 = {\n  HEARTBEAT: 0,\n  ACK: 1,\n  NACK: 2,\n  CONNECT: 3,\n  CONNECTED: 4,\n  DISCONNECT: 5,\n  DISCONNECTED: 6,\n  CLOSE: 7,\n  CLOSED: 8,\n  ERROR: 9,\n  ATTACH: 10,\n  ATTACHED: 11,\n  DETACH: 12,\n  DETACHED: 13,\n  PRESENCE: 14,\n  MESSAGE: 15,\n  SYNC: 16,\n  AUTH: 17,\n  ACTIVATE: 18\n};\nvar ActionName = [];\nObject.keys(actions2).forEach(function(name) {\n  ActionName[actions2[name]] = name;\n});\nvar flags = {\n  /* Channel attach state flags */\n  HAS_PRESENCE: 1 << 0,\n  HAS_BACKLOG: 1 << 1,\n  RESUMED: 1 << 2,\n  TRANSIENT: 1 << 4,\n  ATTACH_RESUME: 1 << 5,\n  /* Channel mode flags */\n  PRESENCE: 1 << 16,\n  PUBLISH: 1 << 17,\n  SUBSCRIBE: 1 << 18,\n  PRESENCE_SUBSCRIBE: 1 << 19\n};\nvar flagNames = Object.keys(flags);\nflags.MODE_ALL = flags.PRESENCE | flags.PUBLISH | flags.SUBSCRIBE | flags.PRESENCE_SUBSCRIBE;\nfunction toStringArray(array) {\n  const result = [];\n  if (array) {\n    for (let i = 0; i < array.length; i++) {\n      result.push(array[i].toString());\n    }\n  }\n  return \"[ \" + result.join(\", \") + \" ]\";\n}\nvar channelModes = [\"PRESENCE\", \"PUBLISH\", \"SUBSCRIBE\", \"PRESENCE_SUBSCRIBE\"];\nvar serialize2 = encodeBody;\nfunction deserialize(serialized, MsgPack, presenceMessagePlugin, format) {\n  const deserialized = decodeBody(serialized, MsgPack, format);\n  return fromDeserialized(deserialized, presenceMessagePlugin);\n}\nfunction fromDeserialized(deserialized, presenceMessagePlugin) {\n  const error = deserialized.error;\n  if (error) {\n    deserialized.error = ErrorInfo.fromValues(error);\n  }\n  let messages;\n  if (deserialized.messages) {\n    const dm = deserialized.messages;\n    messages = dm.map((m) => fromWireProtocol(m));\n  }\n  let presence;\n  if (presenceMessagePlugin && deserialized.presence) {\n    const dp = deserialized.presence;\n    presence = dp.map((pm) => presenceMessagePlugin.presenceMessageFromWireProtocol(pm));\n  }\n  return Object.assign(new ProtocolMessage(), __spreadProps(__spreadValues({}, deserialized), { presence, messages }));\n}\nfunction fromDeserializedIncludingDependencies(deserialized) {\n  return fromDeserialized(deserialized, {\n    presenceMessageFromValues: fromValues2,\n    presenceMessagesFromValuesArray: fromValuesArray2,\n    presenceMessageFromWireProtocol: fromWireProtocol2\n  });\n}\nfunction fromValues3(values) {\n  return Object.assign(new ProtocolMessage(), values);\n}\nfunction stringify(msg, presenceMessagePlugin) {\n  let result = \"[ProtocolMessage\";\n  if (msg.action !== void 0)\n    result += \"; action=\" + ActionName[msg.action] || 0;\n  const simpleAttributes = [\"id\", \"channel\", \"channelSerial\", \"connectionId\", \"count\", \"msgSerial\", \"timestamp\"];\n  let attribute;\n  for (let attribIndex = 0; attribIndex < simpleAttributes.length; attribIndex++) {\n    attribute = simpleAttributes[attribIndex];\n    if (msg[attribute] !== void 0)\n      result += \"; \" + attribute + \"=\" + msg[attribute];\n  }\n  if (msg.messages)\n    result += \"; messages=\" + toStringArray(fromValuesArray(msg.messages));\n  if (msg.presence && presenceMessagePlugin)\n    result += \"; presence=\" + toStringArray(presenceMessagePlugin.presenceMessagesFromValuesArray(msg.presence));\n  if (msg.error)\n    result += \"; error=\" + ErrorInfo.fromValues(msg.error).toString();\n  if (msg.auth && msg.auth.accessToken)\n    result += \"; token=\" + msg.auth.accessToken;\n  if (msg.flags)\n    result += \"; flags=\" + flagNames.filter(msg.hasFlag).join(\",\");\n  if (msg.params) {\n    let stringifiedParams = \"\";\n    forInOwnNonNullProperties(msg.params, function(prop) {\n      if (stringifiedParams.length > 0) {\n        stringifiedParams += \"; \";\n      }\n      stringifiedParams += prop + \"=\" + msg.params[prop];\n    });\n    if (stringifiedParams.length > 0) {\n      result += \"; params=[\" + stringifiedParams + \"]\";\n    }\n  }\n  result += \"]\";\n  return result;\n}\nvar ProtocolMessage = class {\n  constructor() {\n    this.hasFlag = (flag) => {\n      return (this.flags & flags[flag]) > 0;\n    };\n  }\n  setFlag(flag) {\n    return this.flags = this.flags | flags[flag];\n  }\n  getMode() {\n    return this.flags && this.flags & flags.MODE_ALL;\n  }\n  encodeModesToFlags(modes) {\n    modes.forEach((mode) => this.setFlag(mode));\n  }\n  decodeModesFromFlags() {\n    const modes = [];\n    channelModes.forEach((mode) => {\n      if (this.hasFlag(mode)) {\n        modes.push(mode);\n      }\n    });\n    return modes.length > 0 ? modes : void 0;\n  }\n};\nvar protocolmessage_default = ProtocolMessage;\n\n// src/common/lib/transport/messagequeue.ts\nvar MessageQueue = class extends eventemitter_default {\n  constructor(logger) {\n    super(logger);\n    this.messages = [];\n  }\n  count() {\n    return this.messages.length;\n  }\n  push(message) {\n    this.messages.push(message);\n  }\n  shift() {\n    return this.messages.shift();\n  }\n  last() {\n    return this.messages[this.messages.length - 1];\n  }\n  copyAll() {\n    return this.messages.slice();\n  }\n  append(messages) {\n    this.messages.push.apply(this.messages, messages);\n  }\n  prepend(messages) {\n    this.messages.unshift.apply(this.messages, messages);\n  }\n  completeMessages(serial, count, err) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"MessageQueue.completeMessages()\",\n      \"serial = \" + serial + \"; count = \" + count\n    );\n    err = err || null;\n    const messages = this.messages;\n    if (messages.length === 0) {\n      throw new Error(\"MessageQueue.completeMessages(): completeMessages called on any empty MessageQueue\");\n    }\n    const first = messages[0];\n    if (first) {\n      const startSerial = first.message.msgSerial;\n      const endSerial = serial + count;\n      if (endSerial > startSerial) {\n        const completeMessages = messages.splice(0, endSerial - startSerial);\n        for (const message of completeMessages) {\n          message.callback(err);\n        }\n      }\n      if (messages.length == 0)\n        this.emit(\"idle\");\n    }\n  }\n  completeAllMessages(err) {\n    this.completeMessages(0, Number.MAX_SAFE_INTEGER || Number.MAX_VALUE, err);\n  }\n  resetSendAttempted() {\n    for (let msg of this.messages) {\n      msg.sendAttempted = false;\n    }\n  }\n  clear() {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"MessageQueue.clear()\",\n      \"clearing \" + this.messages.length + \" messages\"\n    );\n    this.messages = [];\n    this.emit(\"idle\");\n  }\n};\nvar messagequeue_default = MessageQueue;\n\n// src/common/lib/transport/protocol.ts\nvar PendingMessage = class {\n  constructor(message, callback) {\n    this.message = message;\n    this.callback = callback;\n    this.merged = false;\n    const action = message.action;\n    this.sendAttempted = false;\n    this.ackRequired = action == actions2.MESSAGE || action == actions2.PRESENCE;\n  }\n};\nvar Protocol = class extends eventemitter_default {\n  constructor(transport) {\n    super(transport.logger);\n    this.transport = transport;\n    this.messageQueue = new messagequeue_default(this.logger);\n    transport.on(\"ack\", (serial, count) => {\n      this.onAck(serial, count);\n    });\n    transport.on(\"nack\", (serial, count, err) => {\n      this.onNack(serial, count, err);\n    });\n  }\n  onAck(serial, count) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"Protocol.onAck()\", \"serial = \" + serial + \"; count = \" + count);\n    this.messageQueue.completeMessages(serial, count);\n  }\n  onNack(serial, count, err) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_ERROR,\n      \"Protocol.onNack()\",\n      \"serial = \" + serial + \"; count = \" + count + \"; err = \" + inspectError(err)\n    );\n    if (!err) {\n      err = new ErrorInfo(\"Unable to send message; channel not responding\", 50001, 500);\n    }\n    this.messageQueue.completeMessages(serial, count, err);\n  }\n  onceIdle(listener) {\n    const messageQueue = this.messageQueue;\n    if (messageQueue.count() === 0) {\n      listener();\n      return;\n    }\n    messageQueue.once(\"idle\", listener);\n  }\n  send(pendingMessage) {\n    if (pendingMessage.ackRequired) {\n      this.messageQueue.push(pendingMessage);\n    }\n    if (this.logger.shouldLog(logger_default.LOG_MICRO)) {\n      logger_default.logActionNoStrip(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"Protocol.send()\",\n        \"sending msg; \" + stringify(pendingMessage.message, this.transport.connectionManager.realtime._RealtimePresence)\n      );\n    }\n    pendingMessage.sendAttempted = true;\n    this.transport.send(pendingMessage.message);\n  }\n  getTransport() {\n    return this.transport;\n  }\n  getPendingMessages() {\n    return this.messageQueue.copyAll();\n  }\n  clearPendingMessages() {\n    return this.messageQueue.clear();\n  }\n  finish() {\n    const transport = this.transport;\n    this.onceIdle(function() {\n      transport.disconnect();\n    });\n  }\n};\nvar protocol_default = Protocol;\n\n// src/common/lib/client/connectionstatechange.ts\nvar ConnectionStateChange = class {\n  constructor(previous, current, retryIn, reason) {\n    this.previous = previous;\n    this.current = current;\n    if (retryIn)\n      this.retryIn = retryIn;\n    if (reason)\n      this.reason = reason;\n  }\n};\nvar connectionstatechange_default = ConnectionStateChange;\n\n// src/common/lib/transport/connectionerrors.ts\nvar ConnectionErrorCodes = {\n  DISCONNECTED: 80003,\n  SUSPENDED: 80002,\n  FAILED: 8e4,\n  CLOSING: 80017,\n  CLOSED: 80017,\n  UNKNOWN_CONNECTION_ERR: 50002,\n  UNKNOWN_CHANNEL_ERR: 50001\n};\nvar ConnectionErrors = {\n  disconnected: () => ErrorInfo.fromValues({\n    statusCode: 400,\n    code: ConnectionErrorCodes.DISCONNECTED,\n    message: \"Connection to server temporarily unavailable\"\n  }),\n  suspended: () => ErrorInfo.fromValues({\n    statusCode: 400,\n    code: ConnectionErrorCodes.SUSPENDED,\n    message: \"Connection to server unavailable\"\n  }),\n  failed: () => ErrorInfo.fromValues({\n    statusCode: 400,\n    code: ConnectionErrorCodes.FAILED,\n    message: \"Connection failed or disconnected by server\"\n  }),\n  closing: () => ErrorInfo.fromValues({\n    statusCode: 400,\n    code: ConnectionErrorCodes.CLOSING,\n    message: \"Connection closing\"\n  }),\n  closed: () => ErrorInfo.fromValues({\n    statusCode: 400,\n    code: ConnectionErrorCodes.CLOSED,\n    message: \"Connection closed\"\n  }),\n  unknownConnectionErr: () => ErrorInfo.fromValues({\n    statusCode: 500,\n    code: ConnectionErrorCodes.UNKNOWN_CONNECTION_ERR,\n    message: \"Internal connection error\"\n  }),\n  unknownChannelErr: () => ErrorInfo.fromValues({\n    statusCode: 500,\n    code: ConnectionErrorCodes.UNKNOWN_CONNECTION_ERR,\n    message: \"Internal channel error\"\n  })\n};\nfunction isRetriable(err) {\n  if (!err.statusCode || !err.code || err.statusCode >= 500) {\n    return true;\n  }\n  return Object.values(ConnectionErrorCodes).includes(err.code);\n}\nvar connectionerrors_default = ConnectionErrors;\n\n// src/common/lib/transport/transport.ts\nvar closeMessage = fromValues3({ action: actions2.CLOSE });\nvar disconnectMessage = fromValues3({ action: actions2.DISCONNECT });\nvar Transport = class extends eventemitter_default {\n  constructor(connectionManager, auth, params, forceJsonProtocol) {\n    super(connectionManager.logger);\n    if (forceJsonProtocol) {\n      params.format = void 0;\n      params.heartbeats = true;\n    }\n    this.connectionManager = connectionManager;\n    this.auth = auth;\n    this.params = params;\n    this.timeouts = params.options.timeouts;\n    this.format = params.format;\n    this.isConnected = false;\n    this.isFinished = false;\n    this.isDisposed = false;\n    this.maxIdleInterval = null;\n    this.idleTimer = null;\n    this.lastActivity = null;\n  }\n  connect() {\n  }\n  close() {\n    if (this.isConnected) {\n      this.requestClose();\n    }\n    this.finish(\"closed\", connectionerrors_default.closed());\n  }\n  disconnect(err) {\n    if (this.isConnected) {\n      this.requestDisconnect();\n    }\n    this.finish(\"disconnected\", err || connectionerrors_default.disconnected());\n  }\n  fail(err) {\n    if (this.isConnected) {\n      this.requestDisconnect();\n    }\n    this.finish(\"failed\", err || connectionerrors_default.failed());\n  }\n  finish(event, err) {\n    var _a2;\n    if (this.isFinished) {\n      return;\n    }\n    this.isFinished = true;\n    this.isConnected = false;\n    this.maxIdleInterval = null;\n    clearTimeout((_a2 = this.idleTimer) != null ? _a2 : void 0);\n    this.idleTimer = null;\n    this.emit(event, err);\n    this.dispose();\n  }\n  onProtocolMessage(message) {\n    if (this.logger.shouldLog(logger_default.LOG_MICRO)) {\n      logger_default.logActionNoStrip(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"Transport.onProtocolMessage()\",\n        \"received on \" + this.shortName + \": \" + stringify(message, this.connectionManager.realtime._RealtimePresence) + \"; connectionId = \" + this.connectionManager.connectionId\n      );\n    }\n    this.onActivity();\n    switch (message.action) {\n      case actions2.HEARTBEAT:\n        logger_default.logActionNoStrip(\n          this.logger,\n          logger_default.LOG_MICRO,\n          \"Transport.onProtocolMessage()\",\n          this.shortName + \" heartbeat; connectionId = \" + this.connectionManager.connectionId\n        );\n        this.emit(\"heartbeat\", message.id);\n        break;\n      case actions2.CONNECTED:\n        this.onConnect(message);\n        this.emit(\"connected\", message.error, message.connectionId, message.connectionDetails, message);\n        break;\n      case actions2.CLOSED:\n        this.onClose(message);\n        break;\n      case actions2.DISCONNECTED:\n        this.onDisconnect(message);\n        break;\n      case actions2.ACK:\n        this.emit(\"ack\", message.msgSerial, message.count);\n        break;\n      case actions2.NACK:\n        this.emit(\"nack\", message.msgSerial, message.count, message.error);\n        break;\n      case actions2.SYNC:\n        this.connectionManager.onChannelMessage(message, this);\n        break;\n      case actions2.ACTIVATE:\n        break;\n      case actions2.AUTH:\n        whenPromiseSettles(this.auth.authorize(), (err) => {\n          if (err) {\n            logger_default.logAction(\n              this.logger,\n              logger_default.LOG_ERROR,\n              \"Transport.onProtocolMessage()\",\n              \"Ably requested re-authentication, but unable to obtain a new token: \" + inspectError(err)\n            );\n          }\n        });\n        break;\n      case actions2.ERROR:\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MINOR,\n          \"Transport.onProtocolMessage()\",\n          \"received error action; connectionId = \" + this.connectionManager.connectionId + \"; err = \" + Platform.Config.inspect(message.error) + (message.channel ? \", channel: \" + message.channel : \"\")\n        );\n        if (message.channel === void 0) {\n          this.onFatalError(message);\n          break;\n        }\n        this.connectionManager.onChannelMessage(message, this);\n        break;\n      default:\n        this.connectionManager.onChannelMessage(message, this);\n    }\n  }\n  onConnect(message) {\n    this.isConnected = true;\n    if (!message.connectionDetails) {\n      throw new Error(\"Transport.onConnect(): Connect message recieved without connectionDetails\");\n    }\n    const maxPromisedIdle = message.connectionDetails.maxIdleInterval;\n    if (maxPromisedIdle) {\n      this.maxIdleInterval = maxPromisedIdle + this.timeouts.realtimeRequestTimeout;\n      this.onActivity();\n    }\n  }\n  onDisconnect(message) {\n    const err = message && message.error;\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Transport.onDisconnect()\", \"err = \" + inspectError(err));\n    this.finish(\"disconnected\", err);\n  }\n  onFatalError(message) {\n    const err = message && message.error;\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Transport.onFatalError()\", \"err = \" + inspectError(err));\n    this.finish(\"failed\", err);\n  }\n  onClose(message) {\n    const err = message && message.error;\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Transport.onClose()\", \"err = \" + inspectError(err));\n    this.finish(\"closed\", err);\n  }\n  requestClose() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Transport.requestClose()\", \"\");\n    this.send(closeMessage);\n  }\n  requestDisconnect() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Transport.requestDisconnect()\", \"\");\n    this.send(disconnectMessage);\n  }\n  ping(id) {\n    const msg = { action: actions2.HEARTBEAT };\n    if (id)\n      msg.id = id;\n    this.send(fromValues3(msg));\n  }\n  dispose() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Transport.dispose()\", \"\");\n    this.isDisposed = true;\n    this.off();\n  }\n  onActivity() {\n    if (!this.maxIdleInterval) {\n      return;\n    }\n    this.lastActivity = this.connectionManager.lastActivity = Date.now();\n    this.setIdleTimer(this.maxIdleInterval + 100);\n  }\n  setIdleTimer(timeout) {\n    if (!this.idleTimer) {\n      this.idleTimer = setTimeout(() => {\n        this.onIdleTimerExpire();\n      }, timeout);\n    }\n  }\n  onIdleTimerExpire() {\n    if (!this.lastActivity || !this.maxIdleInterval) {\n      throw new Error(\"Transport.onIdleTimerExpire(): lastActivity/maxIdleInterval not set\");\n    }\n    this.idleTimer = null;\n    const sinceLast = Date.now() - this.lastActivity;\n    const timeRemaining = this.maxIdleInterval - sinceLast;\n    if (timeRemaining <= 0) {\n      const msg = \"No activity seen from realtime in \" + sinceLast + \"ms; assuming connection has dropped\";\n      logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"Transport.onIdleTimerExpire()\", msg);\n      this.disconnect(new ErrorInfo(msg, 80003, 408));\n    } else {\n      this.setIdleTimer(timeRemaining + 100);\n    }\n  }\n  static tryConnect(transportCtor, connectionManager, auth, transportParams, callback) {\n    const transport = new transportCtor(connectionManager, auth, transportParams);\n    let transportAttemptTimer;\n    const errorCb = function(err) {\n      clearTimeout(transportAttemptTimer);\n      callback({ event: this.event, error: err });\n    };\n    const realtimeRequestTimeout = connectionManager.options.timeouts.realtimeRequestTimeout;\n    transportAttemptTimer = setTimeout(() => {\n      transport.off([\"preconnect\", \"disconnected\", \"failed\"]);\n      transport.dispose();\n      errorCb.call(\n        { event: \"disconnected\" },\n        new ErrorInfo(\"Timeout waiting for transport to indicate itself viable\", 5e4, 500)\n      );\n    }, realtimeRequestTimeout);\n    transport.on([\"failed\", \"disconnected\"], errorCb);\n    transport.on(\"preconnect\", function() {\n      logger_default.logAction(\n        connectionManager.logger,\n        logger_default.LOG_MINOR,\n        \"Transport.tryConnect()\",\n        \"viable transport \" + transport\n      );\n      clearTimeout(transportAttemptTimer);\n      transport.off([\"failed\", \"disconnected\"], errorCb);\n      callback(null, transport);\n    });\n    transport.connect();\n    return transport;\n  }\n  static isAvailable() {\n    throw new ErrorInfo(\"isAvailable not implemented for transport\", 5e4, 500);\n  }\n};\nvar transport_default = Transport;\n\n// src/common/constants/TransportName.ts\nvar TransportNames;\n((TransportNames2) => {\n  TransportNames2.WebSocket = \"web_socket\";\n  TransportNames2.Comet = \"comet\";\n  TransportNames2.XhrPolling = \"xhr_polling\";\n})(TransportNames || (TransportNames = {}));\n\n// src/common/lib/transport/connectionmanager.ts\nvar globalObject2 = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : self;\nvar haveWebStorage = () => {\n  var _a2;\n  return typeof Platform.WebStorage !== \"undefined\" && ((_a2 = Platform.WebStorage) == null ? void 0 : _a2.localSupported);\n};\nvar haveSessionStorage = () => {\n  var _a2;\n  return typeof Platform.WebStorage !== \"undefined\" && ((_a2 = Platform.WebStorage) == null ? void 0 : _a2.sessionSupported);\n};\nvar noop = function() {\n};\nvar transportPreferenceName = \"ably-transport-preference\";\nfunction bundleWith(dest, src, maxSize) {\n  let action;\n  if (dest.channel !== src.channel) {\n    return false;\n  }\n  if ((action = dest.action) !== actions2.PRESENCE && action !== actions2.MESSAGE) {\n    return false;\n  }\n  if (action !== src.action) {\n    return false;\n  }\n  const kind = action === actions2.PRESENCE ? \"presence\" : \"messages\", proposed = dest[kind].concat(src[kind]), size = getMessagesSize(proposed);\n  if (size > maxSize) {\n    return false;\n  }\n  if (!allSame(proposed, \"clientId\")) {\n    return false;\n  }\n  if (!proposed.every(function(msg) {\n    return !msg.id;\n  })) {\n    return false;\n  }\n  dest[kind] = proposed;\n  return true;\n}\nfunction decodeRecoveryKey(recoveryKey) {\n  try {\n    return JSON.parse(recoveryKey);\n  } catch (e) {\n    return null;\n  }\n}\nvar TransportParams = class {\n  constructor(options, host, mode, connectionKey) {\n    this.options = options;\n    this.host = host;\n    this.mode = mode;\n    this.connectionKey = connectionKey;\n    this.format = options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */;\n  }\n  getConnectParams(authParams) {\n    const params = authParams ? copy(authParams) : {};\n    const options = this.options;\n    switch (this.mode) {\n      case \"resume\":\n        params.resume = this.connectionKey;\n        break;\n      case \"recover\": {\n        const recoveryContext = decodeRecoveryKey(options.recover);\n        if (recoveryContext) {\n          params.recover = recoveryContext.connectionKey;\n        }\n        break;\n      }\n      default:\n    }\n    if (options.clientId !== void 0) {\n      params.clientId = options.clientId;\n    }\n    if (options.echoMessages === false) {\n      params.echo = \"false\";\n    }\n    if (this.format !== void 0) {\n      params.format = this.format;\n    }\n    if (this.stream !== void 0) {\n      params.stream = this.stream;\n    }\n    if (this.heartbeats !== void 0) {\n      params.heartbeats = this.heartbeats;\n    }\n    params.v = defaults_default.protocolVersion;\n    params.agent = getAgentString(this.options);\n    if (options.transportParams !== void 0) {\n      mixin(params, options.transportParams);\n    }\n    return params;\n  }\n  toString() {\n    let result = \"[mode=\" + this.mode;\n    if (this.host) {\n      result += \",host=\" + this.host;\n    }\n    if (this.connectionKey) {\n      result += \",connectionKey=\" + this.connectionKey;\n    }\n    if (this.format) {\n      result += \",format=\" + this.format;\n    }\n    result += \"]\";\n    return result;\n  }\n};\nvar ConnectionManager = class _ConnectionManager extends eventemitter_default {\n  constructor(realtime, options) {\n    super(realtime.logger);\n    this.supportedTransports = {};\n    this.disconnectedRetryCount = 0;\n    this.pendingChannelMessagesState = { isProcessing: false, queue: [] };\n    this.realtime = realtime;\n    this.initTransports();\n    this.options = options;\n    const timeouts = options.timeouts;\n    const connectingTimeout = timeouts.webSocketConnectTimeout + timeouts.realtimeRequestTimeout;\n    this.states = {\n      initialized: {\n        state: \"initialized\",\n        terminal: false,\n        queueEvents: true,\n        sendEvents: false,\n        failState: \"disconnected\"\n      },\n      connecting: {\n        state: \"connecting\",\n        terminal: false,\n        queueEvents: true,\n        sendEvents: false,\n        retryDelay: connectingTimeout,\n        failState: \"disconnected\"\n      },\n      connected: {\n        state: \"connected\",\n        terminal: false,\n        queueEvents: false,\n        sendEvents: true,\n        failState: \"disconnected\"\n      },\n      disconnected: {\n        state: \"disconnected\",\n        terminal: false,\n        queueEvents: true,\n        sendEvents: false,\n        retryDelay: timeouts.disconnectedRetryTimeout,\n        failState: \"disconnected\"\n      },\n      suspended: {\n        state: \"suspended\",\n        terminal: false,\n        queueEvents: false,\n        sendEvents: false,\n        retryDelay: timeouts.suspendedRetryTimeout,\n        failState: \"suspended\"\n      },\n      closing: {\n        state: \"closing\",\n        terminal: false,\n        queueEvents: false,\n        sendEvents: false,\n        retryDelay: timeouts.realtimeRequestTimeout,\n        failState: \"closed\"\n      },\n      closed: { state: \"closed\", terminal: true, queueEvents: false, sendEvents: false, failState: \"closed\" },\n      failed: { state: \"failed\", terminal: true, queueEvents: false, sendEvents: false, failState: \"failed\" }\n    };\n    this.state = this.states.initialized;\n    this.errorReason = null;\n    this.queuedMessages = new messagequeue_default(this.logger);\n    this.msgSerial = 0;\n    this.connectionDetails = void 0;\n    this.connectionId = void 0;\n    this.connectionKey = void 0;\n    this.connectionStateTtl = timeouts.connectionStateTtl;\n    this.maxIdleInterval = null;\n    this.transports = intersect(options.transports || defaults_default.defaultTransports, this.supportedTransports);\n    this.transportPreference = null;\n    if (this.transports.includes(TransportNames.WebSocket)) {\n      this.webSocketTransportAvailable = true;\n    }\n    if (this.transports.includes(TransportNames.XhrPolling)) {\n      this.baseTransport = TransportNames.XhrPolling;\n    } else if (this.transports.includes(TransportNames.Comet)) {\n      this.baseTransport = TransportNames.Comet;\n    }\n    this.httpHosts = defaults_default.getHosts(options);\n    this.wsHosts = defaults_default.getHosts(options, true);\n    this.activeProtocol = null;\n    this.host = null;\n    this.lastAutoReconnectAttempt = null;\n    this.lastActivity = null;\n    this.forceFallbackHost = false;\n    this.connectCounter = 0;\n    this.wsCheckResult = null;\n    this.webSocketSlowTimer = null;\n    this.webSocketGiveUpTimer = null;\n    this.abandonedWebSocket = false;\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Realtime.ConnectionManager()\", \"started\");\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"Realtime.ConnectionManager()\",\n      \"requested transports = [\" + (options.transports || defaults_default.defaultTransports) + \"]\"\n    );\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"Realtime.ConnectionManager()\",\n      \"available transports = [\" + this.transports + \"]\"\n    );\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"Realtime.ConnectionManager()\",\n      \"http hosts = [\" + this.httpHosts + \"]\"\n    );\n    if (!this.transports.length) {\n      const msg = \"no requested transports available\";\n      logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"realtime.ConnectionManager()\", msg);\n      throw new Error(msg);\n    }\n    const addEventListener = Platform.Config.addEventListener;\n    if (addEventListener) {\n      if (haveSessionStorage() && typeof options.recover === \"function\") {\n        addEventListener(\"beforeunload\", this.persistConnection.bind(this));\n      }\n      if (options.closeOnUnload === true) {\n        addEventListener(\"beforeunload\", () => {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_MAJOR,\n            \"Realtime.ConnectionManager()\",\n            \"beforeunload event has triggered the connection to close as closeOnUnload is true\"\n          );\n          this.requestState({ state: \"closing\" });\n        });\n      }\n      addEventListener(\"online\", () => {\n        var _a2;\n        if (this.state == this.states.disconnected || this.state == this.states.suspended) {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_MINOR,\n            \"ConnectionManager caught browser \\u2018online\\u2019 event\",\n            \"reattempting connection\"\n          );\n          this.requestState({ state: \"connecting\" });\n        } else if (this.state == this.states.connecting) {\n          (_a2 = this.pendingTransport) == null ? void 0 : _a2.off();\n          this.disconnectAllTransports();\n          this.startConnect();\n        }\n      });\n      addEventListener(\"offline\", () => {\n        if (this.state == this.states.connected) {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_MINOR,\n            \"ConnectionManager caught browser \\u2018offline\\u2019 event\",\n            \"disconnecting active transport\"\n          );\n          this.disconnectAllTransports();\n        }\n      });\n    }\n  }\n  /*********************\n   * transport management\n   *********************/\n  // Used by tests\n  static supportedTransports(additionalImplementations) {\n    const storage = { supportedTransports: {} };\n    this.initTransports(additionalImplementations, storage);\n    return storage.supportedTransports;\n  }\n  static initTransports(additionalImplementations, storage) {\n    const implementations = __spreadValues(__spreadValues({}, Platform.Transports.bundledImplementations), additionalImplementations);\n    [TransportNames.WebSocket, ...Platform.Transports.order].forEach((transportName) => {\n      const transport = implementations[transportName];\n      if (transport && transport.isAvailable()) {\n        storage.supportedTransports[transportName] = transport;\n      }\n    });\n  }\n  initTransports() {\n    _ConnectionManager.initTransports(this.realtime._additionalTransportImplementations, this);\n  }\n  createTransportParams(host, mode) {\n    return new TransportParams(this.options, host, mode, this.connectionKey);\n  }\n  getTransportParams(callback) {\n    const decideMode = (modeCb) => {\n      if (this.connectionKey) {\n        modeCb(\"resume\");\n        return;\n      }\n      if (typeof this.options.recover === \"string\") {\n        modeCb(\"recover\");\n        return;\n      }\n      const recoverFn = this.options.recover, lastSessionData = this.getSessionRecoverData(), sessionRecoveryName = this.sessionRecoveryName();\n      if (lastSessionData && typeof recoverFn === \"function\") {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MINOR,\n          \"ConnectionManager.getTransportParams()\",\n          \"Calling clientOptions-provided recover function with last session data (recovery scope: \" + sessionRecoveryName + \")\"\n        );\n        recoverFn(lastSessionData, (shouldRecover) => {\n          if (shouldRecover) {\n            this.options.recover = lastSessionData.recoveryKey;\n            modeCb(\"recover\");\n          } else {\n            modeCb(\"clean\");\n          }\n        });\n        return;\n      }\n      modeCb(\"clean\");\n    };\n    decideMode((mode) => {\n      const transportParams = this.createTransportParams(null, mode);\n      if (mode === \"recover\") {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MINOR,\n          \"ConnectionManager.getTransportParams()\",\n          \"Transport recovery mode = recover; recoveryKey = \" + this.options.recover\n        );\n        const recoveryContext = decodeRecoveryKey(this.options.recover);\n        if (recoveryContext) {\n          this.msgSerial = recoveryContext.msgSerial;\n        }\n      } else {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MINOR,\n          \"ConnectionManager.getTransportParams()\",\n          \"Transport params = \" + transportParams.toString()\n        );\n      }\n      callback(transportParams);\n    });\n  }\n  /**\n   * Attempt to connect using a given transport\n   * @param transportParams\n   * @param candidate, the transport to try\n   * @param callback\n   */\n  tryATransport(transportParams, candidate, callback) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"ConnectionManager.tryATransport()\", \"trying \" + candidate);\n    this.proposedTransport = transport_default.tryConnect(\n      this.supportedTransports[candidate],\n      this,\n      this.realtime.auth,\n      transportParams,\n      (wrappedErr, transport) => {\n        const state = this.state;\n        if (state == this.states.closing || state == this.states.closed || state == this.states.failed) {\n          if (transport) {\n            logger_default.logAction(\n              this.logger,\n              logger_default.LOG_MINOR,\n              \"ConnectionManager.tryATransport()\",\n              \"connection \" + state.state + \" while we were attempting the transport; closing \" + transport\n            );\n            transport.close();\n          }\n          callback(true);\n          return;\n        }\n        if (wrappedErr) {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_MINOR,\n            \"ConnectionManager.tryATransport()\",\n            \"transport \" + candidate + \" \" + wrappedErr.event + \", err: \" + wrappedErr.error.toString()\n          );\n          if (auth_default.isTokenErr(wrappedErr.error) && !(this.errorReason && auth_default.isTokenErr(this.errorReason))) {\n            this.errorReason = wrappedErr.error;\n            whenPromiseSettles(this.realtime.auth._forceNewToken(null, null), (err) => {\n              if (err) {\n                this.actOnErrorFromAuthorize(err);\n                return;\n              }\n              this.tryATransport(transportParams, candidate, callback);\n            });\n          } else if (wrappedErr.event === \"failed\") {\n            this.notifyState({ state: \"failed\", error: wrappedErr.error });\n            callback(true);\n          } else if (wrappedErr.event === \"disconnected\") {\n            if (!isRetriable(wrappedErr.error)) {\n              this.notifyState({ state: this.states.connecting.failState, error: wrappedErr.error });\n              callback(true);\n            } else {\n              callback(false);\n            }\n          }\n          return;\n        }\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MICRO,\n          \"ConnectionManager.tryATransport()\",\n          \"viable transport \" + candidate + \"; setting pending\"\n        );\n        this.setTransportPending(transport, transportParams);\n        callback(null, transport);\n      }\n    );\n  }\n  /**\n   * Called when a transport is indicated to be viable, and the ConnectionManager\n   * expects to activate this transport as soon as it is connected.\n   * @param transport\n   * @param transportParams\n   */\n  setTransportPending(transport, transportParams) {\n    const mode = transportParams.mode;\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"ConnectionManager.setTransportPending()\",\n      \"transport = \" + transport + \"; mode = \" + mode\n    );\n    this.pendingTransport = transport;\n    this.cancelWebSocketSlowTimer();\n    this.cancelWebSocketGiveUpTimer();\n    transport.once(\"connected\", (error, connectionId, connectionDetails) => {\n      this.activateTransport(error, transport, connectionId, connectionDetails);\n      if (mode === \"recover\" && this.options.recover) {\n        delete this.options.recover;\n        this.unpersistConnection();\n      }\n    });\n    const self2 = this;\n    transport.on([\"disconnected\", \"closed\", \"failed\"], function(error) {\n      self2.deactivateTransport(transport, this.event, error);\n    });\n    this.emit(\"transport.pending\", transport);\n  }\n  /**\n   * Called when a transport is connected, and the connectionmanager decides that\n   * it will now be the active transport. Returns whether or not it activated\n   * the transport (if the connection is closing/closed it will choose not to).\n   * @param transport the transport instance\n   * @param connectionId the id of the new active connection\n   * @param connectionDetails the details of the new active connection\n   */\n  activateTransport(error, transport, connectionId, connectionDetails) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"ConnectionManager.activateTransport()\",\n      \"transport = \" + transport\n    );\n    if (error) {\n      logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"ConnectionManager.activateTransport()\", \"error = \" + error);\n    }\n    if (connectionId) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.activateTransport()\",\n        \"connectionId =  \" + connectionId\n      );\n    }\n    if (connectionDetails) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.activateTransport()\",\n        \"connectionDetails =  \" + JSON.stringify(connectionDetails)\n      );\n    }\n    this.persistTransportPreference(transport);\n    const existingState = this.state, connectedState = this.states.connected.state;\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"ConnectionManager.activateTransport()\",\n      \"current state = \" + existingState.state\n    );\n    if (existingState.state == this.states.closing.state || existingState.state == this.states.closed.state || existingState.state == this.states.failed.state) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"ConnectionManager.activateTransport()\",\n        \"Disconnecting transport and abandoning\"\n      );\n      transport.disconnect();\n      return false;\n    }\n    delete this.pendingTransport;\n    if (!transport.isConnected) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"ConnectionManager.activateTransport()\",\n        \"Declining to activate transport \" + transport + \" since it appears to no longer be connected\"\n      );\n      return false;\n    }\n    const existingActiveProtocol = this.activeProtocol;\n    this.activeProtocol = new protocol_default(transport);\n    this.host = transport.params.host;\n    const connectionKey = connectionDetails.connectionKey;\n    if (connectionKey && this.connectionKey != connectionKey) {\n      this.setConnection(connectionId, connectionDetails, !!error);\n    }\n    this.onConnectionDetailsUpdate(connectionDetails, transport);\n    Platform.Config.nextTick(() => {\n      transport.on(\n        \"connected\",\n        (connectedErr, _connectionId, connectionDetails2) => {\n          this.onConnectionDetailsUpdate(connectionDetails2, transport);\n          this.emit(\"update\", new connectionstatechange_default(connectedState, connectedState, null, connectedErr));\n        }\n      );\n    });\n    if (existingState.state === this.states.connected.state) {\n      if (error) {\n        this.errorReason = this.realtime.connection.errorReason = error;\n        this.emit(\"update\", new connectionstatechange_default(connectedState, connectedState, null, error));\n      }\n    } else {\n      this.notifyState({ state: \"connected\", error });\n      this.errorReason = this.realtime.connection.errorReason = error || null;\n    }\n    this.emit(\"transport.active\", transport);\n    if (existingActiveProtocol) {\n      if (existingActiveProtocol.messageQueue.count() > 0) {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_ERROR,\n          \"ConnectionManager.activateTransport()\",\n          \"Previous active protocol (for transport \" + existingActiveProtocol.transport.shortName + \", new one is \" + transport.shortName + \") finishing with \" + existingActiveProtocol.messageQueue.count() + \" messages still pending\"\n        );\n      }\n      if (existingActiveProtocol.transport === transport) {\n        const msg = \"Assumption violated: activating a transport that was also the transport for the previous active protocol; transport = \" + transport.shortName + \"; stack = \" + new Error().stack;\n        logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"ConnectionManager.activateTransport()\", msg);\n      } else {\n        existingActiveProtocol.finish();\n      }\n    }\n    return true;\n  }\n  /**\n   * Called when a transport is no longer the active transport. This can occur\n   * in any transport connection state.\n   * @param transport\n   */\n  deactivateTransport(transport, state, error) {\n    const currentProtocol = this.activeProtocol, wasActive = currentProtocol && currentProtocol.getTransport() === transport, wasPending = transport === this.pendingTransport, noTransportsScheduledForActivation = this.noTransportsScheduledForActivation();\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"ConnectionManager.deactivateTransport()\",\n      \"transport = \" + transport\n    );\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"ConnectionManager.deactivateTransport()\",\n      \"state = \" + state + (wasActive ? \"; was active\" : wasPending ? \"; was pending\" : \"\") + (noTransportsScheduledForActivation ? \"\" : \"; another transport is scheduled for activation\")\n    );\n    if (error && error.message)\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.deactivateTransport()\",\n        \"reason =  \" + error.message\n      );\n    if (wasActive) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.deactivateTransport()\",\n        \"Getting, clearing, and requeuing \" + this.activeProtocol.messageQueue.count() + \" pending messages\"\n      );\n      this.queuePendingMessages(currentProtocol.getPendingMessages());\n      currentProtocol.clearPendingMessages();\n      this.activeProtocol = this.host = null;\n    }\n    this.emit(\"transport.inactive\", transport);\n    if (wasActive && noTransportsScheduledForActivation || wasActive && state === \"failed\" || state === \"closed\" || currentProtocol === null && wasPending) {\n      if (state === \"disconnected\" && error && error.statusCode > 500 && this.httpHosts.length > 1) {\n        this.unpersistTransportPreference();\n        this.forceFallbackHost = true;\n        this.notifyState({ state, error, retryImmediately: true });\n        return;\n      }\n      const newConnectionState = state === \"failed\" && auth_default.isTokenErr(error) ? \"disconnected\" : state;\n      this.notifyState({ state: newConnectionState, error });\n      return;\n    }\n  }\n  /* Helper that returns true if there are no transports which are pending,\n   * have been connected, and are just waiting for onceNoPending to fire before\n   * being activated */\n  noTransportsScheduledForActivation() {\n    return !this.pendingTransport || !this.pendingTransport.isConnected;\n  }\n  setConnection(connectionId, connectionDetails, hasConnectionError) {\n    const prevConnId = this.connectionId, connIdChanged = prevConnId && prevConnId !== connectionId, recoverFailure = !prevConnId && hasConnectionError;\n    if (connIdChanged || recoverFailure) {\n      logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"ConnectionManager.setConnection()\", \"Resetting msgSerial\");\n      this.msgSerial = 0;\n      this.queuedMessages.resetSendAttempted();\n    }\n    if (this.connectionId !== connectionId) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"ConnectionManager.setConnection()\",\n        \"New connectionId; reattaching any attached channels\"\n      );\n    }\n    this.realtime.connection.id = this.connectionId = connectionId;\n    this.realtime.connection.key = this.connectionKey = connectionDetails.connectionKey;\n  }\n  clearConnection() {\n    this.realtime.connection.id = this.connectionId = void 0;\n    this.realtime.connection.key = this.connectionKey = void 0;\n    this.msgSerial = 0;\n    this.unpersistConnection();\n  }\n  createRecoveryKey() {\n    if (!this.connectionKey) {\n      return null;\n    }\n    return JSON.stringify({\n      connectionKey: this.connectionKey,\n      msgSerial: this.msgSerial,\n      channelSerials: this.realtime.channels.channelSerials()\n    });\n  }\n  checkConnectionStateFreshness() {\n    if (!this.lastActivity || !this.connectionId) {\n      return;\n    }\n    const sinceLast = Date.now() - this.lastActivity;\n    if (sinceLast > this.connectionStateTtl + this.maxIdleInterval) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"ConnectionManager.checkConnectionStateFreshness()\",\n        \"Last known activity from realtime was \" + sinceLast + \"ms ago; discarding connection state\"\n      );\n      this.clearConnection();\n      this.states.connecting.failState = \"suspended\";\n    }\n  }\n  /**\n   * Called when the connectionmanager wants to persist transport\n   * state for later recovery. Only applicable in the browser context.\n   */\n  persistConnection() {\n    if (haveSessionStorage()) {\n      const recoveryKey = this.createRecoveryKey();\n      if (recoveryKey) {\n        this.setSessionRecoverData({\n          recoveryKey,\n          disconnectedAt: Date.now(),\n          location: globalObject2.location,\n          clientId: this.realtime.auth.clientId\n        });\n      }\n    }\n  }\n  /**\n   * Called when the connectionmanager wants to persist transport\n   * state for later recovery. Only applicable in the browser context.\n   */\n  unpersistConnection() {\n    this.clearSessionRecoverData();\n  }\n  /*********************\n   * state management\n   *********************/\n  getError() {\n    if (this.errorReason) {\n      const newError = PartialErrorInfo.fromValues(this.errorReason);\n      newError.cause = this.errorReason;\n      return newError;\n    }\n    return this.getStateError();\n  }\n  getStateError() {\n    var _a2, _b;\n    return (_b = (_a2 = connectionerrors_default)[this.state.state]) == null ? void 0 : _b.call(_a2);\n  }\n  activeState() {\n    return this.state.queueEvents || this.state.sendEvents;\n  }\n  enactStateChange(stateChange) {\n    const action = \"Connection state\";\n    const message = stateChange.current + (stateChange.reason ? \"; reason: \" + stateChange.reason : \"\");\n    if (stateChange.current === \"failed\") {\n      logger_default.logAction(this.logger, logger_default.LOG_ERROR, action, message);\n    } else {\n      logger_default.logAction(this.logger, logger_default.LOG_MAJOR, action, message);\n    }\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"ConnectionManager.enactStateChange\",\n      \"setting new state: \" + stateChange.current + \"; reason = \" + (stateChange.reason && stateChange.reason.message)\n    );\n    const newState = this.state = this.states[stateChange.current];\n    if (stateChange.reason) {\n      this.errorReason = stateChange.reason;\n      this.realtime.connection.errorReason = stateChange.reason;\n    }\n    if (newState.terminal || newState.state === \"suspended\") {\n      this.clearConnection();\n    }\n    this.emit(\"connectionstate\", stateChange);\n  }\n  /****************************************\n   * ConnectionManager connection lifecycle\n   ****************************************/\n  startTransitionTimer(transitionState) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"ConnectionManager.startTransitionTimer()\",\n      \"transitionState: \" + transitionState.state\n    );\n    if (this.transitionTimer) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"ConnectionManager.startTransitionTimer()\",\n        \"clearing already-running timer\"\n      );\n      clearTimeout(this.transitionTimer);\n    }\n    this.transitionTimer = setTimeout(() => {\n      if (this.transitionTimer) {\n        this.transitionTimer = null;\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MINOR,\n          \"ConnectionManager \" + transitionState.state + \" timer expired\",\n          \"requesting new state: \" + transitionState.failState\n        );\n        this.notifyState({ state: transitionState.failState });\n      }\n    }, transitionState.retryDelay);\n  }\n  cancelTransitionTimer() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"ConnectionManager.cancelTransitionTimer()\", \"\");\n    if (this.transitionTimer) {\n      clearTimeout(this.transitionTimer);\n      this.transitionTimer = null;\n    }\n  }\n  startSuspendTimer() {\n    if (this.suspendTimer)\n      return;\n    this.suspendTimer = setTimeout(() => {\n      if (this.suspendTimer) {\n        this.suspendTimer = null;\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MINOR,\n          \"ConnectionManager suspend timer expired\",\n          \"requesting new state: suspended\"\n        );\n        this.states.connecting.failState = \"suspended\";\n        this.notifyState({ state: \"suspended\" });\n      }\n    }, this.connectionStateTtl);\n  }\n  checkSuspendTimer(state) {\n    if (state !== \"disconnected\" && state !== \"suspended\" && state !== \"connecting\")\n      this.cancelSuspendTimer();\n  }\n  cancelSuspendTimer() {\n    this.states.connecting.failState = \"disconnected\";\n    if (this.suspendTimer) {\n      clearTimeout(this.suspendTimer);\n      this.suspendTimer = null;\n    }\n  }\n  startRetryTimer(interval) {\n    this.retryTimer = setTimeout(() => {\n      logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"ConnectionManager retry timer expired\", \"retrying\");\n      this.retryTimer = null;\n      this.requestState({ state: \"connecting\" });\n    }, interval);\n  }\n  cancelRetryTimer() {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n      this.retryTimer = null;\n    }\n  }\n  startWebSocketSlowTimer() {\n    this.webSocketSlowTimer = setTimeout(() => {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"ConnectionManager WebSocket slow timer\",\n        \"checking connectivity\"\n      );\n      this.checkWsConnectivity().then(() => {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MINOR,\n          \"ConnectionManager WebSocket slow timer\",\n          \"ws connectivity check succeeded\"\n        );\n        this.wsCheckResult = true;\n      }).catch(() => {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MAJOR,\n          \"ConnectionManager WebSocket slow timer\",\n          \"ws connectivity check failed\"\n        );\n        this.wsCheckResult = false;\n      });\n      if (this.realtime.http.checkConnectivity) {\n        whenPromiseSettles(this.realtime.http.checkConnectivity(), (err, connectivity) => {\n          if (err || !connectivity) {\n            logger_default.logAction(\n              this.logger,\n              logger_default.LOG_MAJOR,\n              \"ConnectionManager WebSocket slow timer\",\n              \"http connectivity check failed\"\n            );\n            this.cancelWebSocketGiveUpTimer();\n            this.notifyState({\n              state: \"disconnected\",\n              error: new ErrorInfo(\"Unable to connect (network unreachable)\", 80003, 404)\n            });\n          } else {\n            logger_default.logAction(\n              this.logger,\n              logger_default.LOG_MINOR,\n              \"ConnectionManager WebSocket slow timer\",\n              \"http connectivity check succeeded\"\n            );\n          }\n        });\n      }\n    }, this.options.timeouts.webSocketSlowTimeout);\n  }\n  cancelWebSocketSlowTimer() {\n    if (this.webSocketSlowTimer) {\n      clearTimeout(this.webSocketSlowTimer);\n      this.webSocketSlowTimer = null;\n    }\n  }\n  startWebSocketGiveUpTimer(transportParams) {\n    this.webSocketGiveUpTimer = setTimeout(() => {\n      var _a2, _b;\n      if (!this.wsCheckResult) {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MINOR,\n          \"ConnectionManager WebSocket give up timer\",\n          \"websocket connection took more than 10s; \" + (this.baseTransport ? \"trying base transport\" : \"\")\n        );\n        if (this.baseTransport) {\n          this.abandonedWebSocket = true;\n          (_a2 = this.proposedTransport) == null ? void 0 : _a2.dispose();\n          (_b = this.pendingTransport) == null ? void 0 : _b.dispose();\n          this.connectBase(transportParams, ++this.connectCounter);\n        } else {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_MAJOR,\n            \"ConnectionManager WebSocket give up timer\",\n            \"websocket connectivity appears to be unavailable but no other transports to try\"\n          );\n        }\n      }\n    }, this.options.timeouts.webSocketConnectTimeout);\n  }\n  cancelWebSocketGiveUpTimer() {\n    if (this.webSocketGiveUpTimer) {\n      clearTimeout(this.webSocketGiveUpTimer);\n      this.webSocketGiveUpTimer = null;\n    }\n  }\n  notifyState(indicated) {\n    var _a2, _b;\n    const state = indicated.state;\n    const retryImmediately = state === \"disconnected\" && (this.state === this.states.connected || indicated.retryImmediately || this.state === this.states.connecting && indicated.error && auth_default.isTokenErr(indicated.error) && !(this.errorReason && auth_default.isTokenErr(this.errorReason)));\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"ConnectionManager.notifyState()\",\n      \"new state: \" + state + (retryImmediately ? \"; will retry connection immediately\" : \"\")\n    );\n    if (state == this.state.state)\n      return;\n    this.cancelTransitionTimer();\n    this.cancelRetryTimer();\n    this.cancelWebSocketSlowTimer();\n    this.cancelWebSocketGiveUpTimer();\n    this.checkSuspendTimer(indicated.state);\n    if (state === \"suspended\" || state === \"connected\") {\n      this.disconnectedRetryCount = 0;\n    }\n    if (this.state.terminal)\n      return;\n    const newState = this.states[indicated.state];\n    let retryDelay = newState.retryDelay;\n    if (newState.state === \"disconnected\") {\n      this.disconnectedRetryCount++;\n      retryDelay = getRetryTime(newState.retryDelay, this.disconnectedRetryCount);\n    }\n    const change = new connectionstatechange_default(\n      this.state.state,\n      newState.state,\n      retryDelay,\n      indicated.error || ((_b = (_a2 = connectionerrors_default)[newState.state]) == null ? void 0 : _b.call(_a2))\n    );\n    if (retryImmediately) {\n      const autoReconnect = () => {\n        if (this.state === this.states.disconnected) {\n          this.lastAutoReconnectAttempt = Date.now();\n          this.requestState({ state: \"connecting\" });\n        }\n      };\n      const sinceLast = this.lastAutoReconnectAttempt && Date.now() - this.lastAutoReconnectAttempt + 1;\n      if (sinceLast && sinceLast < 1e3) {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MICRO,\n          \"ConnectionManager.notifyState()\",\n          \"Last reconnect attempt was only \" + sinceLast + \"ms ago, waiting another \" + (1e3 - sinceLast) + \"ms before trying again\"\n        );\n        setTimeout(autoReconnect, 1e3 - sinceLast);\n      } else {\n        Platform.Config.nextTick(autoReconnect);\n      }\n    } else if (state === \"disconnected\" || state === \"suspended\") {\n      this.startRetryTimer(retryDelay);\n    }\n    if (state === \"disconnected\" && !retryImmediately || state === \"suspended\" || newState.terminal) {\n      Platform.Config.nextTick(() => {\n        this.disconnectAllTransports();\n      });\n    }\n    if (state == \"connected\" && !this.activeProtocol) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_ERROR,\n        \"ConnectionManager.notifyState()\",\n        \"Broken invariant: attempted to go into connected state, but there is no active protocol\"\n      );\n    }\n    this.enactStateChange(change);\n    if (this.state.sendEvents) {\n      this.sendQueuedMessages();\n    } else if (!this.state.queueEvents) {\n      this.realtime.channels.propogateConnectionInterruption(state, change.reason);\n      this.failQueuedMessages(change.reason);\n    }\n  }\n  requestState(request) {\n    var _a2, _b;\n    const state = request.state;\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"ConnectionManager.requestState()\",\n      \"requested state: \" + state + \"; current state: \" + this.state.state\n    );\n    if (state == this.state.state)\n      return;\n    this.cancelWebSocketSlowTimer();\n    this.cancelWebSocketGiveUpTimer();\n    this.cancelTransitionTimer();\n    this.cancelRetryTimer();\n    this.checkSuspendTimer(state);\n    if (state == \"connecting\" && this.state.state == \"connected\")\n      return;\n    if (state == \"closing\" && this.state.state == \"closed\")\n      return;\n    const newState = this.states[state], change = new connectionstatechange_default(\n      this.state.state,\n      newState.state,\n      null,\n      request.error || ((_b = (_a2 = connectionerrors_default)[newState.state]) == null ? void 0 : _b.call(_a2))\n    );\n    this.enactStateChange(change);\n    if (state == \"connecting\") {\n      Platform.Config.nextTick(() => {\n        this.startConnect();\n      });\n    }\n    if (state == \"closing\") {\n      this.closeImpl();\n    }\n  }\n  startConnect() {\n    if (this.state !== this.states.connecting) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"ConnectionManager.startConnect()\",\n        \"Must be in connecting state to connect, but was \" + this.state.state\n      );\n      return;\n    }\n    const auth = this.realtime.auth;\n    const connectCount = ++this.connectCounter;\n    const connect = () => {\n      this.checkConnectionStateFreshness();\n      this.getTransportParams((transportParams) => {\n        if (transportParams.mode === \"recover\" && transportParams.options.recover) {\n          const recoveryContext = decodeRecoveryKey(transportParams.options.recover);\n          if (recoveryContext) {\n            this.realtime.channels.recoverChannels(recoveryContext.channelSerials);\n          }\n        }\n        if (connectCount !== this.connectCounter) {\n          return;\n        }\n        this.connectImpl(transportParams, connectCount);\n      });\n    };\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"ConnectionManager.startConnect()\", \"starting connection\");\n    this.startSuspendTimer();\n    this.startTransitionTimer(this.states.connecting);\n    if (auth.method === \"basic\") {\n      connect();\n    } else {\n      const authCb = (err) => {\n        if (connectCount !== this.connectCounter) {\n          return;\n        }\n        if (err) {\n          this.actOnErrorFromAuthorize(err);\n        } else {\n          connect();\n        }\n      };\n      if (this.errorReason && auth_default.isTokenErr(this.errorReason)) {\n        whenPromiseSettles(auth._forceNewToken(null, null), authCb);\n      } else {\n        whenPromiseSettles(auth._ensureValidAuthCredentials(false), authCb);\n      }\n    }\n  }\n  /*\n   * there are, at most, two transports available with which a connection may\n   * be attempted: web_socket and/or a base transport (xhr_polling in browsers,\n   * comet in nodejs). web_socket is always preferred, and the base transport is\n   * only used in case web_socket connectivity appears to be unavailable.\n   *\n   * connectImpl begins the transport selection process by checking which transports\n   * are available, and if there is a cached preference. It then defers to the\n   * transport-specific connect methods: connectWs and connectBase.\n   *\n   * It is also responsible for invalidating the cache in the case that a base\n   * transport preference is stored but web socket connectivity is now available.\n   *\n   * handling of the case where we need to failover from web_socket to the base\n   * transport is implemented in the connectWs method.\n   */\n  connectImpl(transportParams, connectCount) {\n    const state = this.state.state;\n    if (state !== this.states.connecting.state) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"ConnectionManager.connectImpl()\",\n        \"Must be in connecting state to connect, but was \" + state\n      );\n      return;\n    }\n    const transportPreference = this.getTransportPreference();\n    if (transportPreference && transportPreference === this.baseTransport && this.webSocketTransportAvailable) {\n      this.checkWsConnectivity().then(() => {\n        this.unpersistTransportPreference();\n        if (this.state === this.states.connecting) {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_MINOR,\n            \"ConnectionManager.connectImpl():\",\n            \"web socket connectivity available, cancelling connection attempt with \" + this.baseTransport\n          );\n          this.disconnectAllTransports();\n          this.connectWs(transportParams, ++this.connectCounter);\n        }\n      }).catch(noop);\n    }\n    if (transportPreference && transportPreference === this.baseTransport || this.baseTransport && !this.webSocketTransportAvailable) {\n      this.connectBase(transportParams, connectCount);\n    } else {\n      this.connectWs(transportParams, connectCount);\n    }\n  }\n  /*\n   * connectWs starts two timers to monitor the success of a web_socket connection attempt:\n   * - webSocketSlowTimer: if this timer fires before the connection succeeds,\n   *   cm will simultaneously check websocket and http/xhr connectivity. if the http\n   *   connectivity check fails, we give up the connection sequence entirely and\n   *   transition to disconnected. if the websocket connectivity check fails then\n   *   we assume no ws connectivity and failover to base transport. in the case that\n   *   the checks succeed, we continue with websocket and wait for it to try fallback hosts\n   *   and, if unsuccessful, ultimately transition to disconnected.\n   * - webSocketGiveUpTimer: if this timer fires, and the preceding websocket\n   *   connectivity check is still pending then we assume that there is an issue\n   *   with the transport and fallback to base transport.\n   */\n  connectWs(transportParams, connectCount) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"ConnectionManager.connectWs()\");\n    this.wsCheckResult = null;\n    this.abandonedWebSocket = false;\n    this.startWebSocketSlowTimer();\n    this.startWebSocketGiveUpTimer(transportParams);\n    this.tryTransportWithFallbacks(\"web_socket\", transportParams, true, connectCount, () => {\n      return this.wsCheckResult !== false && !this.abandonedWebSocket;\n    });\n  }\n  connectBase(transportParams, connectCount) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"ConnectionManager.connectBase()\");\n    if (this.baseTransport) {\n      this.tryTransportWithFallbacks(this.baseTransport, transportParams, false, connectCount, () => true);\n    } else {\n      this.notifyState({\n        state: \"disconnected\",\n        error: new ErrorInfo(\"No transports left to try\", 8e4, 404)\n      });\n    }\n  }\n  tryTransportWithFallbacks(transportName, transportParams, ws, connectCount, shouldContinue) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"ConnectionManager.tryTransportWithFallbacks()\",\n      transportName\n    );\n    const giveUp = (err) => {\n      this.notifyState({ state: this.states.connecting.failState, error: err });\n    };\n    const candidateHosts = ws ? this.wsHosts.slice() : this.httpHosts.slice();\n    const hostAttemptCb = (fatal, transport) => {\n      if (connectCount !== this.connectCounter) {\n        return;\n      }\n      if (!shouldContinue()) {\n        if (transport) {\n          transport.dispose();\n        }\n        return;\n      }\n      if (!transport && !fatal) {\n        tryFallbackHosts();\n      }\n    };\n    const host = candidateHosts.shift();\n    if (!host) {\n      giveUp(new ErrorInfo(\"Unable to connect (no available host)\", 80003, 404));\n      return;\n    }\n    transportParams.host = host;\n    const tryFallbackHosts = () => {\n      if (!candidateHosts.length) {\n        giveUp(new ErrorInfo(\"Unable to connect (and no more fallback hosts to try)\", 80003, 404));\n        return;\n      }\n      if (!this.realtime.http.checkConnectivity) {\n        giveUp(new PartialErrorInfo(\"Internal error: Http.checkConnectivity not set\", null, 500));\n        return;\n      }\n      whenPromiseSettles(\n        this.realtime.http.checkConnectivity(),\n        (err, connectivity) => {\n          if (connectCount !== this.connectCounter) {\n            return;\n          }\n          if (!shouldContinue()) {\n            return;\n          }\n          if (err) {\n            giveUp(err);\n            return;\n          }\n          if (!connectivity) {\n            giveUp(new ErrorInfo(\"Unable to connect (network unreachable)\", 80003, 404));\n            return;\n          }\n          transportParams.host = arrPopRandomElement(candidateHosts);\n          this.tryATransport(transportParams, transportName, hostAttemptCb);\n        }\n      );\n    };\n    if (this.forceFallbackHost && candidateHosts.length) {\n      this.forceFallbackHost = false;\n      tryFallbackHosts();\n      return;\n    }\n    this.tryATransport(transportParams, transportName, hostAttemptCb);\n  }\n  closeImpl() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"ConnectionManager.closeImpl()\", \"closing connection\");\n    this.cancelSuspendTimer();\n    this.startTransitionTimer(this.states.closing);\n    if (this.pendingTransport) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.closeImpl()\",\n        \"Closing pending transport: \" + this.pendingTransport\n      );\n      this.pendingTransport.close();\n    }\n    if (this.activeProtocol) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.closeImpl()\",\n        \"Closing active transport: \" + this.activeProtocol.getTransport()\n      );\n      this.activeProtocol.getTransport().close();\n    }\n    this.notifyState({ state: \"closed\" });\n  }\n  onAuthUpdated(tokenDetails, callback) {\n    var _a2;\n    switch (this.state.state) {\n      case \"connected\": {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MICRO,\n          \"ConnectionManager.onAuthUpdated()\",\n          \"Sending AUTH message on active transport\"\n        );\n        const activeTransport = (_a2 = this.activeProtocol) == null ? void 0 : _a2.getTransport();\n        if (activeTransport && activeTransport.onAuthUpdated) {\n          activeTransport.onAuthUpdated(tokenDetails);\n        }\n        const authMsg = fromValues3({\n          action: actions2.AUTH,\n          auth: {\n            accessToken: tokenDetails.token\n          }\n        });\n        this.send(authMsg);\n        const successListener = () => {\n          this.off(failureListener);\n          callback(null, tokenDetails);\n        };\n        const failureListener = (stateChange) => {\n          if (stateChange.current === \"failed\") {\n            this.off(successListener);\n            this.off(failureListener);\n            callback(stateChange.reason || this.getStateError());\n          }\n        };\n        this.once(\"connectiondetails\", successListener);\n        this.on(\"connectionstate\", failureListener);\n        break;\n      }\n      case \"connecting\":\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MICRO,\n          \"ConnectionManager.onAuthUpdated()\",\n          \"Aborting current connection attempts in order to start again with the new auth details\"\n        );\n        this.disconnectAllTransports();\n      default: {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MICRO,\n          \"ConnectionManager.onAuthUpdated()\",\n          \"Connection state is \" + this.state.state + \"; waiting until either connected or failed\"\n        );\n        const listener = (stateChange) => {\n          switch (stateChange.current) {\n            case \"connected\":\n              this.off(listener);\n              callback(null, tokenDetails);\n              break;\n            case \"failed\":\n            case \"closed\":\n            case \"suspended\":\n              this.off(listener);\n              callback(stateChange.reason || this.getStateError());\n              break;\n            default:\n              break;\n          }\n        };\n        this.on(\"connectionstate\", listener);\n        if (this.state.state === \"connecting\") {\n          this.startConnect();\n        } else {\n          this.requestState({ state: \"connecting\" });\n        }\n      }\n    }\n  }\n  disconnectAllTransports() {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"ConnectionManager.disconnectAllTransports()\",\n      \"Disconnecting all transports\"\n    );\n    this.connectCounter++;\n    if (this.pendingTransport) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.disconnectAllTransports()\",\n        \"Disconnecting pending transport: \" + this.pendingTransport\n      );\n      this.pendingTransport.disconnect();\n    }\n    delete this.pendingTransport;\n    if (this.proposedTransport) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.disconnectAllTransports()\",\n        \"Disconnecting proposed transport: \" + this.pendingTransport\n      );\n      this.proposedTransport.disconnect();\n    }\n    delete this.pendingTransport;\n    if (this.activeProtocol) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.disconnectAllTransports()\",\n        \"Disconnecting active transport: \" + this.activeProtocol.getTransport()\n      );\n      this.activeProtocol.getTransport().disconnect();\n    }\n  }\n  /******************\n   * event queueing\n   ******************/\n  send(msg, queueEvent, callback) {\n    callback = callback || noop;\n    const state = this.state;\n    if (state.sendEvents) {\n      logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"ConnectionManager.send()\", \"sending event\");\n      this.sendImpl(new PendingMessage(msg, callback));\n      return;\n    }\n    const shouldQueue = queueEvent && state.queueEvents;\n    if (!shouldQueue) {\n      const err = \"rejecting event, queueEvent was \" + queueEvent + \", state was \" + state.state;\n      logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"ConnectionManager.send()\", err);\n      callback(this.errorReason || new ErrorInfo(err, 9e4, 400));\n      return;\n    }\n    if (this.logger.shouldLog(logger_default.LOG_MICRO)) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.send()\",\n        \"queueing msg; \" + stringify(msg, this.realtime._RealtimePresence)\n      );\n    }\n    this.queue(msg, callback);\n  }\n  sendImpl(pendingMessage) {\n    const msg = pendingMessage.message;\n    if (pendingMessage.ackRequired && !pendingMessage.sendAttempted) {\n      msg.msgSerial = this.msgSerial++;\n    }\n    try {\n      this.activeProtocol.send(pendingMessage);\n    } catch (e) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_ERROR,\n        \"ConnectionManager.sendImpl()\",\n        \"Unexpected exception in transport.send(): \" + e.stack\n      );\n    }\n  }\n  queue(msg, callback) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"ConnectionManager.queue()\", \"queueing event\");\n    const lastQueued = this.queuedMessages.last();\n    const maxSize = this.options.maxMessageSize;\n    if (lastQueued && !lastQueued.sendAttempted && bundleWith(lastQueued.message, msg, maxSize)) {\n      if (!lastQueued.merged) {\n        lastQueued.callback = multicaster_default.create(this.logger, [lastQueued.callback]);\n        lastQueued.merged = true;\n      }\n      lastQueued.callback.push(callback);\n    } else {\n      this.queuedMessages.push(new PendingMessage(msg, callback));\n    }\n  }\n  sendQueuedMessages() {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"ConnectionManager.sendQueuedMessages()\",\n      \"sending \" + this.queuedMessages.count() + \" queued messages\"\n    );\n    let pendingMessage;\n    while (pendingMessage = this.queuedMessages.shift())\n      this.sendImpl(pendingMessage);\n  }\n  queuePendingMessages(pendingMessages) {\n    if (pendingMessages && pendingMessages.length) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.queuePendingMessages()\",\n        \"queueing \" + pendingMessages.length + \" pending messages\"\n      );\n      this.queuedMessages.prepend(pendingMessages);\n    }\n  }\n  failQueuedMessages(err) {\n    const numQueued = this.queuedMessages.count();\n    if (numQueued > 0) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_ERROR,\n        \"ConnectionManager.failQueuedMessages()\",\n        \"failing \" + numQueued + \" queued messages, err = \" + inspectError(err)\n      );\n      this.queuedMessages.completeAllMessages(err);\n    }\n  }\n  onChannelMessage(message, transport) {\n    this.pendingChannelMessagesState.queue.push({ message, transport });\n    if (!this.pendingChannelMessagesState.isProcessing) {\n      this.processNextPendingChannelMessage();\n    }\n  }\n  processNextPendingChannelMessage() {\n    if (this.pendingChannelMessagesState.queue.length > 0) {\n      this.pendingChannelMessagesState.isProcessing = true;\n      const pendingChannelMessage = this.pendingChannelMessagesState.queue.shift();\n      this.processChannelMessage(pendingChannelMessage.message).catch((err) => {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_ERROR,\n          \"ConnectionManager.processNextPendingChannelMessage() received error \",\n          err\n        );\n      }).finally(() => {\n        this.pendingChannelMessagesState.isProcessing = false;\n        this.processNextPendingChannelMessage();\n      });\n    }\n  }\n  async processChannelMessage(message) {\n    await this.realtime.channels.processChannelMessage(message);\n  }\n  async ping() {\n    var _a2;\n    if (this.state.state !== \"connected\") {\n      throw new ErrorInfo(\"Unable to ping service; not connected\", 4e4, 400);\n    }\n    const transport = (_a2 = this.activeProtocol) == null ? void 0 : _a2.getTransport();\n    if (!transport) {\n      throw this.getStateError();\n    }\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"ConnectionManager.ping()\", \"transport = \" + transport);\n    const pingStart = Date.now();\n    const id = cheapRandStr();\n    return withTimeoutAsync(\n      new Promise((resolve) => {\n        const onHeartbeat = (responseId) => {\n          if (responseId === id) {\n            transport.off(\"heartbeat\", onHeartbeat);\n            resolve(Date.now() - pingStart);\n          }\n        };\n        transport.on(\"heartbeat\", onHeartbeat);\n        transport.ping(id);\n      }),\n      this.options.timeouts.realtimeRequestTimeout,\n      \"Timeout waiting for heartbeat response\"\n    );\n  }\n  abort(error) {\n    this.activeProtocol.getTransport().fail(error);\n  }\n  getTransportPreference() {\n    var _a2, _b;\n    return this.transportPreference || haveWebStorage() && ((_b = (_a2 = Platform.WebStorage) == null ? void 0 : _a2.get) == null ? void 0 : _b.call(_a2, transportPreferenceName));\n  }\n  persistTransportPreference(transport) {\n    var _a2, _b;\n    this.transportPreference = transport.shortName;\n    if (haveWebStorage()) {\n      (_b = (_a2 = Platform.WebStorage) == null ? void 0 : _a2.set) == null ? void 0 : _b.call(_a2, transportPreferenceName, transport.shortName);\n    }\n  }\n  unpersistTransportPreference() {\n    var _a2, _b;\n    this.transportPreference = null;\n    if (haveWebStorage()) {\n      (_b = (_a2 = Platform.WebStorage) == null ? void 0 : _a2.remove) == null ? void 0 : _b.call(_a2, transportPreferenceName);\n    }\n  }\n  /* This method is only used during connection attempts, so implements RSA4c1, RSA4c2,\n   * and RSA4d. It is generally not invoked for serverside-triggered reauths or manual\n   * reauths, so RSA4c3 does not apply, except (per per RSA4d1) in the case that the auth\n   * server returns 403. */\n  actOnErrorFromAuthorize(err) {\n    if (err.code === 40171) {\n      this.notifyState({ state: \"failed\", error: err });\n    } else if (err.code === 40102) {\n      this.notifyState({ state: \"failed\", error: err });\n    } else if (err.statusCode === HttpStatusCodes_default.Forbidden) {\n      const msg = \"Client configured authentication provider returned 403; failing the connection\";\n      logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"ConnectionManager.actOnErrorFromAuthorize()\", msg);\n      this.notifyState({ state: \"failed\", error: new ErrorInfo(msg, 80019, 403, err) });\n    } else {\n      const msg = \"Client configured authentication provider request failed\";\n      logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"ConnectionManager.actOnErrorFromAuthorize\", msg);\n      this.notifyState({ state: this.state.failState, error: new ErrorInfo(msg, 80019, 401, err) });\n    }\n  }\n  onConnectionDetailsUpdate(connectionDetails, transport) {\n    if (!connectionDetails) {\n      return;\n    }\n    this.connectionDetails = connectionDetails;\n    if (connectionDetails.maxMessageSize) {\n      this.options.maxMessageSize = connectionDetails.maxMessageSize;\n    }\n    const clientId = connectionDetails.clientId;\n    if (clientId) {\n      const err = this.realtime.auth._uncheckedSetClientId(clientId);\n      if (err) {\n        logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"ConnectionManager.onConnectionDetailsUpdate()\", err.message);\n        transport.fail(err);\n        return;\n      }\n    }\n    const connectionStateTtl = connectionDetails.connectionStateTtl;\n    if (connectionStateTtl) {\n      this.connectionStateTtl = connectionStateTtl;\n    }\n    this.maxIdleInterval = connectionDetails.maxIdleInterval;\n    this.emit(\"connectiondetails\", connectionDetails);\n  }\n  checkWsConnectivity() {\n    const wsConnectivityCheckUrl = this.options.wsConnectivityCheckUrl || defaults_default.wsConnectivityCheckUrl;\n    const ws = new Platform.Config.WebSocket(wsConnectivityCheckUrl);\n    return new Promise((resolve, reject) => {\n      let finished = false;\n      ws.onopen = () => {\n        if (!finished) {\n          finished = true;\n          resolve();\n          ws.close();\n        }\n      };\n      ws.onclose = ws.onerror = () => {\n        if (!finished) {\n          finished = true;\n          reject();\n        }\n      };\n    });\n  }\n  sessionRecoveryName() {\n    return this.options.recoveryKeyStorageName || \"ably-connection-recovery\";\n  }\n  getSessionRecoverData() {\n    var _a2, _b;\n    return haveSessionStorage() && ((_b = (_a2 = Platform.WebStorage) == null ? void 0 : _a2.getSession) == null ? void 0 : _b.call(_a2, this.sessionRecoveryName()));\n  }\n  setSessionRecoverData(value) {\n    var _a2, _b;\n    return haveSessionStorage() && ((_b = (_a2 = Platform.WebStorage) == null ? void 0 : _a2.setSession) == null ? void 0 : _b.call(_a2, this.sessionRecoveryName(), value));\n  }\n  clearSessionRecoverData() {\n    var _a2, _b;\n    return haveSessionStorage() && ((_b = (_a2 = Platform.WebStorage) == null ? void 0 : _a2.removeSession) == null ? void 0 : _b.call(_a2, this.sessionRecoveryName()));\n  }\n};\nvar connectionmanager_default = ConnectionManager;\n\n// src/common/lib/client/connection.ts\nvar Connection = class extends eventemitter_default {\n  constructor(ably, options) {\n    super(ably.logger);\n    this.whenState = (state) => {\n      return eventemitter_default.prototype.whenState.call(this, state, this.state);\n    };\n    this.ably = ably;\n    this.connectionManager = new connectionmanager_default(ably, options);\n    this.state = this.connectionManager.state.state;\n    this.key = void 0;\n    this.id = void 0;\n    this.errorReason = null;\n    this.connectionManager.on(\"connectionstate\", (stateChange) => {\n      const state = this.state = stateChange.current;\n      Platform.Config.nextTick(() => {\n        this.emit(state, stateChange);\n      });\n    });\n    this.connectionManager.on(\"update\", (stateChange) => {\n      Platform.Config.nextTick(() => {\n        this.emit(\"update\", stateChange);\n      });\n    });\n  }\n  connect() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Connection.connect()\", \"\");\n    this.connectionManager.requestState({ state: \"connecting\" });\n  }\n  async ping() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Connection.ping()\", \"\");\n    return this.connectionManager.ping();\n  }\n  close() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Connection.close()\", \"connectionKey = \" + this.key);\n    this.connectionManager.requestState({ state: \"closing\" });\n  }\n  get recoveryKey() {\n    this.logger.deprecationWarning(\n      \"The `Connection.recoveryKey` attribute has been replaced by the `Connection.createRecoveryKey()` method. Replace your usage of `recoveryKey` with the return value of `createRecoveryKey()`. `recoveryKey` will be removed in a future version.\"\n    );\n    return this.createRecoveryKey();\n  }\n  createRecoveryKey() {\n    return this.connectionManager.createRecoveryKey();\n  }\n};\nvar connection_default = Connection;\n\n// src/common/lib/client/channelstatechange.ts\nvar ChannelStateChange = class {\n  constructor(previous, current, resumed, hasBacklog, reason) {\n    this.previous = previous;\n    this.current = current;\n    if (current === \"attached\") {\n      this.resumed = resumed;\n      this.hasBacklog = hasBacklog;\n    }\n    if (reason)\n      this.reason = reason;\n  }\n};\nvar channelstatechange_default = ChannelStateChange;\n\n// src/common/lib/client/realtimechannel.ts\nvar noop2 = function() {\n};\nfunction validateChannelOptions(options) {\n  if (options && \"params\" in options && !isObject(options.params)) {\n    return new ErrorInfo(\"options.params must be an object\", 4e4, 400);\n  }\n  if (options && \"modes\" in options) {\n    if (!Array.isArray(options.modes)) {\n      return new ErrorInfo(\"options.modes must be an array\", 4e4, 400);\n    }\n    for (let i = 0; i < options.modes.length; i++) {\n      const currentMode = options.modes[i];\n      if (!currentMode || typeof currentMode !== \"string\" || !channelModes.includes(String.prototype.toUpperCase.call(currentMode))) {\n        return new ErrorInfo(\"Invalid channel mode: \" + currentMode, 4e4, 400);\n      }\n    }\n  }\n}\nvar RealtimeChannel = class _RealtimeChannel extends eventemitter_default {\n  constructor(client, name, options) {\n    var _a2, _b;\n    super(client.logger);\n    this.retryCount = 0;\n    this.history = async function(params) {\n      logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"RealtimeChannel.history()\", \"channel = \" + this.name);\n      const restMixin = this.client.rest.channelMixin;\n      if (params && params.untilAttach) {\n        if (this.state !== \"attached\") {\n          throw new ErrorInfo(\"option untilAttach requires the channel to be attached\", 4e4, 400);\n        }\n        if (!this.properties.attachSerial) {\n          throw new ErrorInfo(\n            \"untilAttach was specified and channel is attached, but attachSerial is not defined\",\n            4e4,\n            400\n          );\n        }\n        delete params.untilAttach;\n        params.from_serial = this.properties.attachSerial;\n      }\n      return restMixin.history(this, params);\n    };\n    this.whenState = (state) => {\n      return eventemitter_default.prototype.whenState.call(this, state, this.state);\n    };\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"RealtimeChannel()\", \"started; name = \" + name);\n    this.name = name;\n    this.channelOptions = normaliseChannelOptions((_a2 = client._Crypto) != null ? _a2 : null, this.logger, options);\n    this.client = client;\n    this._presence = client._RealtimePresence ? new client._RealtimePresence.RealtimePresence(this) : null;\n    this.connectionManager = client.connection.connectionManager;\n    this.state = \"initialized\";\n    this.subscriptions = new eventemitter_default(this.logger);\n    this.syncChannelSerial = void 0;\n    this.properties = {\n      attachSerial: void 0,\n      channelSerial: void 0\n    };\n    this.setOptions(options);\n    this.errorReason = null;\n    this._requestedFlags = null;\n    this._mode = null;\n    this._attachResume = false;\n    this._decodingContext = {\n      channelOptions: this.channelOptions,\n      plugins: client.options.plugins || {},\n      baseEncodedPreviousPayload: void 0\n    };\n    this._lastPayload = {\n      messageId: null,\n      protocolMessageChannelSerial: null,\n      decodeFailureRecoveryInProgress: null\n    };\n    this._allChannelChanges = new eventemitter_default(this.logger);\n    if ((_b = client.options.plugins) == null ? void 0 : _b.Push) {\n      this._push = new client.options.plugins.Push.PushChannel(this);\n    }\n  }\n  get presence() {\n    if (!this._presence) {\n      throwMissingPluginError(\"RealtimePresence\");\n    }\n    return this._presence;\n  }\n  get push() {\n    if (!this._push) {\n      throwMissingPluginError(\"Push\");\n    }\n    return this._push;\n  }\n  invalidStateError() {\n    return new ErrorInfo(\n      \"Channel operation failed as channel state is \" + this.state,\n      90001,\n      400,\n      this.errorReason || void 0\n    );\n  }\n  static processListenerArgs(args) {\n    args = Array.prototype.slice.call(args);\n    if (typeof args[0] === \"function\") {\n      args.unshift(null);\n    }\n    return args;\n  }\n  async setOptions(options) {\n    var _a2;\n    const previousChannelOptions = this.channelOptions;\n    const err = validateChannelOptions(options);\n    if (err) {\n      throw err;\n    }\n    this.channelOptions = normaliseChannelOptions((_a2 = this.client._Crypto) != null ? _a2 : null, this.logger, options);\n    if (this._decodingContext)\n      this._decodingContext.channelOptions = this.channelOptions;\n    if (this._shouldReattachToSetOptions(options, previousChannelOptions)) {\n      this.attachImpl();\n      return new Promise((resolve, reject) => {\n        this._allChannelChanges.once(\n          [\"attached\", \"update\", \"detached\", \"failed\"],\n          function(stateChange) {\n            switch (this.event) {\n              case \"update\":\n              case \"attached\":\n                resolve();\n                break;\n              default:\n                reject(stateChange.reason);\n            }\n          }\n        );\n      });\n    }\n  }\n  _shouldReattachToSetOptions(options, prevOptions) {\n    if (!(this.state === \"attached\" || this.state === \"attaching\")) {\n      return false;\n    }\n    if (options == null ? void 0 : options.params) {\n      const requestedParams = omitAgent(options.params);\n      const existingParams = omitAgent(prevOptions.params);\n      if (Object.keys(requestedParams).length !== Object.keys(existingParams).length) {\n        return true;\n      }\n      if (!shallowEquals(existingParams, requestedParams)) {\n        return true;\n      }\n    }\n    if (options == null ? void 0 : options.modes) {\n      if (!prevOptions.modes || !arrEquals(options.modes, prevOptions.modes)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  async publish(...args) {\n    let messages = args[0];\n    let argCount = args.length;\n    if (!this.connectionManager.activeState()) {\n      throw this.connectionManager.getError();\n    }\n    if (argCount == 1) {\n      if (isObject(messages))\n        messages = [fromValues(messages)];\n      else if (Array.isArray(messages))\n        messages = fromValuesArray(messages);\n      else\n        throw new ErrorInfo(\n          \"The single-argument form of publish() expects a message object or an array of message objects\",\n          40013,\n          400\n        );\n    } else {\n      messages = [fromValues({ name: args[0], data: args[1] })];\n    }\n    const maxMessageSize = this.client.options.maxMessageSize;\n    await encodeArray(messages, this.channelOptions);\n    const size = getMessagesSize(messages);\n    if (size > maxMessageSize) {\n      throw new ErrorInfo(\n        \"Maximum size of messages that can be published at once exceeded ( was \" + size + \" bytes; limit is \" + maxMessageSize + \" bytes)\",\n        40009,\n        400\n      );\n    }\n    return new Promise((resolve, reject) => {\n      this._publish(messages, (err) => err ? reject(err) : resolve());\n    });\n  }\n  _publish(messages, callback) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"RealtimeChannel.publish()\", \"message count = \" + messages.length);\n    const state = this.state;\n    switch (state) {\n      case \"failed\":\n      case \"suspended\":\n        callback(ErrorInfo.fromValues(this.invalidStateError()));\n        break;\n      default: {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MICRO,\n          \"RealtimeChannel.publish()\",\n          \"sending message; channel state is \" + state\n        );\n        const msg = new protocolmessage_default();\n        msg.action = actions2.MESSAGE;\n        msg.channel = this.name;\n        msg.messages = messages;\n        this.sendMessage(msg, callback);\n        break;\n      }\n    }\n  }\n  onEvent(messages) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"RealtimeChannel.onEvent()\", \"received message\");\n    const subscriptions = this.subscriptions;\n    for (let i = 0; i < messages.length; i++) {\n      const message = messages[i];\n      subscriptions.emit(message.name, message);\n    }\n  }\n  async attach() {\n    if (this.state === \"attached\") {\n      return null;\n    }\n    return new Promise((resolve, reject) => {\n      this._attach(false, null, (err, result) => err ? reject(err) : resolve(result));\n    });\n  }\n  _attach(forceReattach, attachReason, callback) {\n    if (!callback) {\n      callback = (err) => {\n        if (err) {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_ERROR,\n            \"RealtimeChannel._attach()\",\n            \"Channel attach failed: \" + err.toString()\n          );\n        }\n      };\n    }\n    const connectionManager = this.connectionManager;\n    if (!connectionManager.activeState()) {\n      callback(connectionManager.getError());\n      return;\n    }\n    if (this.state !== \"attaching\" || forceReattach) {\n      this.requestState(\"attaching\", attachReason);\n    }\n    this.once(function(stateChange) {\n      switch (this.event) {\n        case \"attached\":\n          callback == null ? void 0 : callback(null, stateChange);\n          break;\n        case \"detached\":\n        case \"suspended\":\n        case \"failed\":\n          callback == null ? void 0 : callback(\n            stateChange.reason || connectionManager.getError() || new ErrorInfo(\"Unable to attach; reason unknown; state = \" + this.event, 9e4, 500)\n          );\n          break;\n        case \"detaching\":\n          callback == null ? void 0 : callback(new ErrorInfo(\"Attach request superseded by a subsequent detach request\", 9e4, 409));\n          break;\n      }\n    });\n  }\n  attachImpl() {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"RealtimeChannel.attachImpl()\", \"sending ATTACH message\");\n    const attachMsg = fromValues3({\n      action: actions2.ATTACH,\n      channel: this.name,\n      params: this.channelOptions.params,\n      // RTL4c1: Includes the channel serial to resume from a previous message\n      // or attachment.\n      channelSerial: this.properties.channelSerial\n    });\n    if (this._requestedFlags) {\n      attachMsg.encodeModesToFlags(this._requestedFlags);\n    } else if (this.channelOptions.modes) {\n      attachMsg.encodeModesToFlags(allToUpperCase(this.channelOptions.modes));\n    }\n    if (this._attachResume) {\n      attachMsg.setFlag(\"ATTACH_RESUME\");\n    }\n    if (this._lastPayload.decodeFailureRecoveryInProgress) {\n      attachMsg.channelSerial = this._lastPayload.protocolMessageChannelSerial;\n    }\n    this.sendMessage(attachMsg, noop2);\n  }\n  async detach() {\n    const connectionManager = this.connectionManager;\n    if (!connectionManager.activeState()) {\n      throw connectionManager.getError();\n    }\n    switch (this.state) {\n      case \"suspended\":\n        this.notifyState(\"detached\");\n        return;\n      case \"detached\":\n        return;\n      case \"failed\":\n        throw new ErrorInfo(\"Unable to detach; channel state = failed\", 90001, 400);\n      default:\n        this.requestState(\"detaching\");\n      case \"detaching\":\n        return new Promise((resolve, reject) => {\n          this.once(function(stateChange) {\n            switch (this.event) {\n              case \"detached\":\n                resolve();\n                break;\n              case \"attached\":\n              case \"suspended\":\n              case \"failed\":\n                reject(\n                  stateChange.reason || connectionManager.getError() || new ErrorInfo(\"Unable to detach; reason unknown; state = \" + this.event, 9e4, 500)\n                );\n                break;\n              case \"attaching\":\n                reject(new ErrorInfo(\"Detach request superseded by a subsequent attach request\", 9e4, 409));\n                break;\n            }\n          });\n        });\n    }\n  }\n  detachImpl(callback) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"RealtimeChannel.detach()\", \"sending DETACH message\");\n    const msg = fromValues3({ action: actions2.DETACH, channel: this.name });\n    this.sendMessage(msg, callback || noop2);\n  }\n  async subscribe(...args) {\n    const [event, listener] = _RealtimeChannel.processListenerArgs(args);\n    if (this.state === \"failed\") {\n      throw ErrorInfo.fromValues(this.invalidStateError());\n    }\n    if (event && typeof event === \"object\" && !Array.isArray(event)) {\n      this.client._FilteredSubscriptions.subscribeFilter(this, event, listener);\n    } else {\n      this.subscriptions.on(event, listener);\n    }\n    return this.attach();\n  }\n  unsubscribe(...args) {\n    var _a2;\n    const [event, listener] = _RealtimeChannel.processListenerArgs(args);\n    if (typeof event === \"object\" && !listener || ((_a2 = this.filteredSubscriptions) == null ? void 0 : _a2.has(listener))) {\n      this.client._FilteredSubscriptions.getAndDeleteFilteredSubscriptions(this, event, listener).forEach((l) => this.subscriptions.off(l));\n      return;\n    }\n    this.subscriptions.off(event, listener);\n  }\n  sync() {\n    switch (this.state) {\n      case \"initialized\":\n      case \"detaching\":\n      case \"detached\":\n        throw new PartialErrorInfo(\"Unable to sync to channel; not attached\", 4e4);\n      default:\n    }\n    const connectionManager = this.connectionManager;\n    if (!connectionManager.activeState()) {\n      throw connectionManager.getError();\n    }\n    const syncMessage = fromValues3({ action: actions2.SYNC, channel: this.name });\n    if (this.syncChannelSerial) {\n      syncMessage.channelSerial = this.syncChannelSerial;\n    }\n    connectionManager.send(syncMessage);\n  }\n  sendMessage(msg, callback) {\n    this.connectionManager.send(msg, this.client.options.queueMessages, callback);\n  }\n  sendPresence(presence, callback) {\n    const msg = fromValues3({\n      action: actions2.PRESENCE,\n      channel: this.name,\n      presence: Array.isArray(presence) ? this.client._RealtimePresence.presenceMessagesFromValuesArray(presence) : [this.client._RealtimePresence.presenceMessageFromValues(presence)]\n    });\n    this.sendMessage(msg, callback);\n  }\n  // Access to this method is synchronised by ConnectionManager#processChannelMessage, in order to synchronise access to the state stored in _decodingContext.\n  async processMessage(message) {\n    if (message.action === actions2.ATTACHED || message.action === actions2.MESSAGE || message.action === actions2.PRESENCE) {\n      this.setChannelSerial(message.channelSerial);\n    }\n    let syncChannelSerial, isSync = false;\n    switch (message.action) {\n      case actions2.ATTACHED: {\n        this.properties.attachSerial = message.channelSerial;\n        this._mode = message.getMode();\n        this.params = message.params || {};\n        const modesFromFlags = message.decodeModesFromFlags();\n        this.modes = modesFromFlags && allToLowerCase(modesFromFlags) || void 0;\n        const resumed = message.hasFlag(\"RESUMED\");\n        const hasPresence = message.hasFlag(\"HAS_PRESENCE\");\n        const hasBacklog = message.hasFlag(\"HAS_BACKLOG\");\n        if (this.state === \"attached\") {\n          if (!resumed) {\n            if (this._presence) {\n              this._presence.onAttached(hasPresence);\n            }\n          }\n          const change = new channelstatechange_default(this.state, this.state, resumed, hasBacklog, message.error);\n          this._allChannelChanges.emit(\"update\", change);\n          if (!resumed || this.channelOptions.updateOnAttached) {\n            this.emit(\"update\", change);\n          }\n        } else if (this.state === \"detaching\") {\n          this.checkPendingState();\n        } else {\n          this.notifyState(\"attached\", message.error, resumed, hasPresence, hasBacklog);\n        }\n        break;\n      }\n      case actions2.DETACHED: {\n        const detachErr = message.error ? ErrorInfo.fromValues(message.error) : new ErrorInfo(\"Channel detached\", 90001, 404);\n        if (this.state === \"detaching\") {\n          this.notifyState(\"detached\", detachErr);\n        } else if (this.state === \"attaching\") {\n          this.notifyState(\"suspended\", detachErr);\n        } else if (this.state === \"attached\" || this.state === \"suspended\") {\n          this.requestState(\"attaching\", detachErr);\n        }\n        break;\n      }\n      case actions2.SYNC:\n        isSync = true;\n        syncChannelSerial = this.syncChannelSerial = message.channelSerial;\n        if (!message.presence)\n          break;\n      case actions2.PRESENCE: {\n        const presenceMessages = message.presence;\n        if (!presenceMessages) {\n          break;\n        }\n        const options = this.channelOptions;\n        await this._decodeAndPrepareMessages(message, presenceMessages, (msg) => decode2(msg, options));\n        if (this._presence) {\n          this._presence.setPresence(presenceMessages, isSync, syncChannelSerial);\n        }\n        break;\n      }\n      case actions2.MESSAGE: {\n        if (this.state !== \"attached\") {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_MAJOR,\n            \"RealtimeChannel.processMessage()\",\n            'Message \"' + message.id + '\" skipped as this channel \"' + this.name + '\" state is not \"attached\" (state is \"' + this.state + '\").'\n          );\n          return;\n        }\n        const messages = message.messages, firstMessage = messages[0], lastMessage = messages[messages.length - 1], channelSerial = message.channelSerial;\n        if (firstMessage.extras && firstMessage.extras.delta && firstMessage.extras.delta.from !== this._lastPayload.messageId) {\n          const msg = 'Delta message decode failure - previous message not available for message \"' + message.id + '\" on this channel \"' + this.name + '\".';\n          logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"RealtimeChannel.processMessage()\", msg);\n          this._startDecodeFailureRecovery(new ErrorInfo(msg, 40018, 400));\n          break;\n        }\n        const { unrecoverableError } = await this._decodeAndPrepareMessages(\n          message,\n          messages,\n          (msg) => decode(msg, this._decodingContext),\n          (e) => {\n            const errorInfo = e;\n            switch (errorInfo.code) {\n              case 40018:\n                this._startDecodeFailureRecovery(errorInfo);\n                return { unrecoverableError: true };\n              case 40019:\n              case 40021:\n                this.notifyState(\"failed\", errorInfo);\n                return { unrecoverableError: true };\n              default:\n                return { unrecoverableError: false };\n            }\n          }\n        );\n        if (unrecoverableError) {\n          return;\n        }\n        for (let i = 0; i < messages.length; i++) {\n          const msg = messages[i];\n          if (channelSerial && !msg.version) {\n            msg.version = channelSerial + \":\" + i.toString().padStart(3, \"0\");\n            msg.expandFields();\n          }\n        }\n        this._lastPayload.messageId = lastMessage.id;\n        this._lastPayload.protocolMessageChannelSerial = message.channelSerial;\n        this.onEvent(messages);\n        break;\n      }\n      case actions2.ERROR: {\n        const err = message.error;\n        if (err && err.code == 80016) {\n          this.checkPendingState();\n        } else {\n          this.notifyState(\"failed\", ErrorInfo.fromValues(err));\n        }\n        break;\n      }\n      default:\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_ERROR,\n          \"RealtimeChannel.processMessage()\",\n          \"Fatal protocol error: unrecognised action (\" + message.action + \")\"\n        );\n        this.connectionManager.abort(connectionerrors_default.unknownChannelErr());\n    }\n  }\n  /**\n   * Mutates provided messages by adding `connectionId`, `timestamp` and `id` fields, and decoding message data.\n   *\n   * @returns `unrecoverableError` flag. If `true` indicates that unrecoverable error was encountered during message decoding\n   * and any further message processing should be stopped. Always equals to `false` if `decodeErrorRecoveryHandler` was not provided\n   */\n  async _decodeAndPrepareMessages(protocolMessage, messages, decodeFn, decodeErrorRecoveryHandler) {\n    const { id, connectionId, timestamp } = protocolMessage;\n    for (let i = 0; i < messages.length; i++) {\n      const msg = messages[i];\n      try {\n        await decodeFn(msg);\n      } catch (e) {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_ERROR,\n          \"RealtimeChannel.decodeAndPrepareMessages()\",\n          e.toString()\n        );\n        if (decodeErrorRecoveryHandler) {\n          const { unrecoverableError } = decodeErrorRecoveryHandler(e);\n          if (unrecoverableError) {\n            return { unrecoverableError: true };\n          }\n        }\n      }\n      if (!msg.connectionId)\n        msg.connectionId = connectionId;\n      if (!msg.timestamp)\n        msg.timestamp = timestamp;\n      if (id && !msg.id)\n        msg.id = id + \":\" + i;\n    }\n    return { unrecoverableError: false };\n  }\n  _startDecodeFailureRecovery(reason) {\n    if (!this._lastPayload.decodeFailureRecoveryInProgress) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MAJOR,\n        \"RealtimeChannel.processMessage()\",\n        \"Starting decode failure recovery process.\"\n      );\n      this._lastPayload.decodeFailureRecoveryInProgress = true;\n      this._attach(true, reason, () => {\n        this._lastPayload.decodeFailureRecoveryInProgress = false;\n      });\n    }\n  }\n  onAttached() {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"RealtimeChannel.onAttached\",\n      \"activating channel; name = \" + this.name\n    );\n  }\n  notifyState(state, reason, resumed, hasPresence, hasBacklog) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"RealtimeChannel.notifyState\",\n      \"name = \" + this.name + \", current state = \" + this.state + \", notifying state \" + state\n    );\n    this.clearStateTimer();\n    if ([\"detached\", \"suspended\", \"failed\"].includes(state)) {\n      this.properties.channelSerial = null;\n    }\n    if (state === this.state) {\n      return;\n    }\n    if (this._presence) {\n      this._presence.actOnChannelState(state, hasPresence, reason);\n    }\n    if (state === \"suspended\" && this.connectionManager.state.sendEvents) {\n      this.startRetryTimer();\n    } else {\n      this.cancelRetryTimer();\n    }\n    if (reason) {\n      this.errorReason = reason;\n    }\n    const change = new channelstatechange_default(this.state, state, resumed, hasBacklog, reason);\n    const action = 'Channel state for channel \"' + this.name + '\"';\n    const message = state + (reason ? \"; reason: \" + reason : \"\");\n    if (state === \"failed\") {\n      logger_default.logAction(this.logger, logger_default.LOG_ERROR, action, message);\n    } else {\n      logger_default.logAction(this.logger, logger_default.LOG_MAJOR, action, message);\n    }\n    if (state !== \"attaching\" && state !== \"suspended\") {\n      this.retryCount = 0;\n    }\n    if (state === \"attached\") {\n      this.onAttached();\n    }\n    if (state === \"attached\") {\n      this._attachResume = true;\n    } else if (state === \"detaching\" || state === \"failed\") {\n      this._attachResume = false;\n    }\n    this.state = state;\n    this._allChannelChanges.emit(state, change);\n    this.emit(state, change);\n  }\n  requestState(state, reason) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"RealtimeChannel.requestState\",\n      \"name = \" + this.name + \", state = \" + state\n    );\n    this.notifyState(state, reason);\n    this.checkPendingState();\n  }\n  checkPendingState() {\n    const cmState = this.connectionManager.state;\n    if (!cmState.sendEvents) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"RealtimeChannel.checkPendingState\",\n        \"sendEvents is false; state is \" + this.connectionManager.state.state\n      );\n      return;\n    }\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"RealtimeChannel.checkPendingState\",\n      \"name = \" + this.name + \", state = \" + this.state\n    );\n    switch (this.state) {\n      case \"attaching\":\n        this.startStateTimerIfNotRunning();\n        this.attachImpl();\n        break;\n      case \"detaching\":\n        this.startStateTimerIfNotRunning();\n        this.detachImpl();\n        break;\n      case \"attached\":\n        this.sync();\n        break;\n      default:\n        break;\n    }\n  }\n  timeoutPendingState() {\n    switch (this.state) {\n      case \"attaching\": {\n        const err = new ErrorInfo(\"Channel attach timed out\", 90007, 408);\n        this.notifyState(\"suspended\", err);\n        break;\n      }\n      case \"detaching\": {\n        const err = new ErrorInfo(\"Channel detach timed out\", 90007, 408);\n        this.notifyState(\"attached\", err);\n        break;\n      }\n      default:\n        this.checkPendingState();\n        break;\n    }\n  }\n  startStateTimerIfNotRunning() {\n    if (!this.stateTimer) {\n      this.stateTimer = setTimeout(() => {\n        logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"RealtimeChannel.startStateTimerIfNotRunning\", \"timer expired\");\n        this.stateTimer = null;\n        this.timeoutPendingState();\n      }, this.client.options.timeouts.realtimeRequestTimeout);\n    }\n  }\n  clearStateTimer() {\n    const stateTimer = this.stateTimer;\n    if (stateTimer) {\n      clearTimeout(stateTimer);\n      this.stateTimer = null;\n    }\n  }\n  startRetryTimer() {\n    if (this.retryTimer)\n      return;\n    this.retryCount++;\n    const retryDelay = getRetryTime(this.client.options.timeouts.channelRetryTimeout, this.retryCount);\n    this.retryTimer = setTimeout(() => {\n      if (this.state === \"suspended\" && this.connectionManager.state.sendEvents) {\n        this.retryTimer = null;\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MINOR,\n          \"RealtimeChannel retry timer expired\",\n          \"attempting a new attach\"\n        );\n        this.requestState(\"attaching\");\n      }\n    }, retryDelay);\n  }\n  cancelRetryTimer() {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n      this.retryTimer = null;\n    }\n  }\n  /* @returns null (if can safely be released) | ErrorInfo (if cannot) */\n  getReleaseErr() {\n    const s = this.state;\n    if (s === \"initialized\" || s === \"detached\" || s === \"failed\") {\n      return null;\n    }\n    return new ErrorInfo(\n      \"Can only release a channel in a state where there is no possibility of further updates from the server being received (initialized, detached, or failed); was \" + s,\n      90001,\n      400\n    );\n  }\n  setChannelSerial(channelSerial) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"RealtimeChannel.setChannelSerial()\",\n      \"Updating channel serial; serial = \" + channelSerial + \"; previous = \" + this.properties.channelSerial\n    );\n    if (channelSerial) {\n      this.properties.channelSerial = channelSerial;\n    }\n  }\n  async status() {\n    return this.client.rest.channelMixin.status(this);\n  }\n};\nfunction omitAgent(channelParams) {\n  const _a2 = channelParams || {}, { agent: _ } = _a2, paramsWithoutAgent = __objRest(_a2, [\"agent\"]);\n  return paramsWithoutAgent;\n}\nvar realtimechannel_default = RealtimeChannel;\n\n// src/common/lib/client/baserealtime.ts\nvar _BaseRealtime = class _BaseRealtime extends baseclient_default {\n  /*\n   * The public typings declare that this only accepts an object, but since we want to emit a good error message in the case where a non-TypeScript user does one of these things:\n   *\n   * 1. passes a string (which is quite likely if they’re e.g. migrating from the default variant to the modular variant)\n   * 2. passes no argument at all\n   *\n   * tell the compiler that these cases are possible so that it forces us to handle them.\n   */\n  constructor(options) {\n    var _a2, _b;\n    super(defaults_default.objectifyOptions(options, false, \"BaseRealtime\", logger_default.defaultLogger));\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Realtime()\", \"\");\n    if (typeof EdgeRuntime === \"string\") {\n      throw new ErrorInfo(\n        `Ably.Realtime instance cannot be used in Vercel Edge runtime. If you are running Vercel Edge functions, please replace your \"new Ably.Realtime()\" with \"new Ably.Rest()\" and use Ably Rest API instead of the Realtime API. If you are server-rendering your application in the Vercel Edge runtime, please use the condition \"if (typeof EdgeRuntime === 'string')\" to prevent instantiating Ably.Realtime instance during SSR in the Vercel Edge runtime.`,\n        4e4,\n        400\n      );\n    }\n    this._additionalTransportImplementations = _BaseRealtime.transportImplementationsFromPlugins(this.options.plugins);\n    this._RealtimePresence = (_b = (_a2 = this.options.plugins) == null ? void 0 : _a2.RealtimePresence) != null ? _b : null;\n    this.connection = new connection_default(this, this.options);\n    this._channels = new Channels2(this);\n    if (this.options.autoConnect !== false)\n      this.connect();\n  }\n  static transportImplementationsFromPlugins(plugins) {\n    const transports = {};\n    if (plugins == null ? void 0 : plugins.WebSocketTransport) {\n      transports[TransportNames.WebSocket] = plugins.WebSocketTransport;\n    }\n    if (plugins == null ? void 0 : plugins.XHRPolling) {\n      transports[TransportNames.XhrPolling] = plugins.XHRPolling;\n    }\n    return transports;\n  }\n  get channels() {\n    return this._channels;\n  }\n  connect() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Realtime.connect()\", \"\");\n    this.connection.connect();\n  }\n  close() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Realtime.close()\", \"\");\n    this.connection.close();\n  }\n};\n// internal API to make EventEmitter usable in other SDKs\n_BaseRealtime.EventEmitter = eventemitter_default;\nvar BaseRealtime = _BaseRealtime;\nvar Channels2 = class extends eventemitter_default {\n  constructor(realtime) {\n    super(realtime.logger);\n    this.realtime = realtime;\n    this.all = /* @__PURE__ */ Object.create(null);\n    realtime.connection.connectionManager.on(\"transport.active\", () => {\n      this.onTransportActive();\n    });\n  }\n  channelSerials() {\n    let serials = {};\n    for (const name of keysArray(this.all, true)) {\n      const channel = this.all[name];\n      if (channel.properties.channelSerial) {\n        serials[name] = channel.properties.channelSerial;\n      }\n    }\n    return serials;\n  }\n  // recoverChannels gets the given channels and sets their channel serials.\n  recoverChannels(channelSerials) {\n    for (const name of keysArray(channelSerials, true)) {\n      const channel = this.get(name);\n      channel.properties.channelSerial = channelSerials[name];\n    }\n  }\n  // Access to this method is synchronised by ConnectionManager#processChannelMessage.\n  async processChannelMessage(msg) {\n    const channelName = msg.channel;\n    if (channelName === void 0) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_ERROR,\n        \"Channels.processChannelMessage()\",\n        \"received event unspecified channel, action = \" + msg.action\n      );\n      return;\n    }\n    const channel = this.all[channelName];\n    if (!channel) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_ERROR,\n        \"Channels.processChannelMessage()\",\n        \"received event for non-existent channel: \" + channelName\n      );\n      return;\n    }\n    await channel.processMessage(msg);\n  }\n  /* called when a transport becomes connected; reattempt attach/detach\n   * for channels that are attaching or detaching. */\n  onTransportActive() {\n    for (const channelName in this.all) {\n      const channel = this.all[channelName];\n      if (channel.state === \"attaching\" || channel.state === \"detaching\") {\n        channel.checkPendingState();\n      } else if (channel.state === \"suspended\") {\n        channel._attach(false, null);\n      } else if (channel.state === \"attached\") {\n        channel.requestState(\"attaching\");\n      }\n    }\n  }\n  /* Connection interruptions (ie when the connection will no longer queue\n   * events) imply connection state changes for any channel which is either\n   * attached, pending, or will attempt to become attached in the future */\n  propogateConnectionInterruption(connectionState, reason) {\n    const connectionStateToChannelState = {\n      closing: \"detached\",\n      closed: \"detached\",\n      failed: \"failed\",\n      suspended: \"suspended\"\n    };\n    const fromChannelStates = [\"attaching\", \"attached\", \"detaching\", \"suspended\"];\n    const toChannelState = connectionStateToChannelState[connectionState];\n    for (const channelId in this.all) {\n      const channel = this.all[channelId];\n      if (fromChannelStates.includes(channel.state)) {\n        channel.notifyState(toChannelState, reason);\n      }\n    }\n  }\n  get(name, channelOptions) {\n    name = String(name);\n    let channel = this.all[name];\n    if (!channel) {\n      channel = this.all[name] = new realtimechannel_default(this.realtime, name, channelOptions);\n    } else if (channelOptions) {\n      if (channel._shouldReattachToSetOptions(channelOptions, channel.channelOptions)) {\n        throw new ErrorInfo(\n          \"Channels.get() cannot be used to set channel options that would cause the channel to reattach. Please, use RealtimeChannel.setOptions() instead.\",\n          4e4,\n          400\n        );\n      }\n      channel.setOptions(channelOptions);\n    }\n    return channel;\n  }\n  getDerived(name, deriveOptions, channelOptions) {\n    if (deriveOptions.filter) {\n      const filter = toBase64(deriveOptions.filter);\n      const match = matchDerivedChannel(name);\n      name = `[filter=${filter}${match.qualifierParam}]${match.channelName}`;\n    }\n    return this.get(name, channelOptions);\n  }\n  /* Included to support certain niche use-cases; most users should ignore this.\n   * Please do not use this unless you know what you're doing */\n  release(name) {\n    name = String(name);\n    const channel = this.all[name];\n    if (!channel) {\n      return;\n    }\n    const releaseErr = channel.getReleaseErr();\n    if (releaseErr) {\n      throw releaseErr;\n    }\n    delete this.all[name];\n  }\n};\nvar baserealtime_default = BaseRealtime;\n\n// src/common/lib/client/presencemap.ts\nfunction newerThan(item, existing) {\n  if (item.isSynthesized() || existing.isSynthesized()) {\n    return item.timestamp >= existing.timestamp;\n  }\n  const itemOrderings = item.parseId(), existingOrderings = existing.parseId();\n  if (itemOrderings.msgSerial === existingOrderings.msgSerial) {\n    return itemOrderings.index > existingOrderings.index;\n  } else {\n    return itemOrderings.msgSerial > existingOrderings.msgSerial;\n  }\n}\nvar PresenceMap = class extends eventemitter_default {\n  constructor(presence, memberKey, newer = newerThan) {\n    super(presence.logger);\n    this.presence = presence;\n    this.map = /* @__PURE__ */ Object.create(null);\n    this.syncInProgress = false;\n    this.residualMembers = null;\n    this.memberKey = memberKey;\n    this.newerThan = newer;\n  }\n  get(key) {\n    return this.map[key];\n  }\n  getClient(clientId) {\n    const map = this.map, result = [];\n    for (const key in map) {\n      const item = map[key];\n      if (item.clientId == clientId && item.action != \"absent\")\n        result.push(item);\n    }\n    return result;\n  }\n  list(params) {\n    const map = this.map, clientId = params && params.clientId, connectionId = params && params.connectionId, result = [];\n    for (const key in map) {\n      const item = map[key];\n      if (item.action === \"absent\")\n        continue;\n      if (clientId && clientId != item.clientId)\n        continue;\n      if (connectionId && connectionId != item.connectionId)\n        continue;\n      result.push(item);\n    }\n    return result;\n  }\n  put(item) {\n    if (item.action === \"enter\" || item.action === \"update\") {\n      item = fromValues2(item);\n      item.action = \"present\";\n    }\n    const map = this.map, key = this.memberKey(item);\n    if (this.residualMembers)\n      delete this.residualMembers[key];\n    const existingItem = map[key];\n    if (existingItem && !this.newerThan(item, existingItem)) {\n      return false;\n    }\n    map[key] = item;\n    return true;\n  }\n  values() {\n    const map = this.map, result = [];\n    for (const key in map) {\n      const item = map[key];\n      if (item.action != \"absent\")\n        result.push(item);\n    }\n    return result;\n  }\n  remove(item) {\n    const map = this.map, key = this.memberKey(item);\n    const existingItem = map[key];\n    if (existingItem && !this.newerThan(item, existingItem)) {\n      return false;\n    }\n    if (this.syncInProgress) {\n      item = fromValues2(item);\n      item.action = \"absent\";\n      map[key] = item;\n    } else {\n      delete map[key];\n    }\n    return !!existingItem;\n  }\n  startSync() {\n    const map = this.map, syncInProgress = this.syncInProgress;\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"PresenceMap.startSync()\",\n      \"channel = \" + this.presence.channel.name + \"; syncInProgress = \" + syncInProgress\n    );\n    if (!this.syncInProgress) {\n      this.residualMembers = copy(map);\n      this.setInProgress(true);\n    }\n  }\n  endSync() {\n    const map = this.map, syncInProgress = this.syncInProgress;\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"PresenceMap.endSync()\",\n      \"channel = \" + this.presence.channel.name + \"; syncInProgress = \" + syncInProgress\n    );\n    if (syncInProgress) {\n      for (const memberKey in map) {\n        const entry = map[memberKey];\n        if (entry.action === \"absent\") {\n          delete map[memberKey];\n        }\n      }\n      this.presence._synthesizeLeaves(valuesArray(this.residualMembers));\n      for (const memberKey in this.residualMembers) {\n        delete map[memberKey];\n      }\n      this.residualMembers = null;\n      this.setInProgress(false);\n    }\n    this.emit(\"sync\");\n  }\n  waitSync(callback) {\n    const syncInProgress = this.syncInProgress;\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"PresenceMap.waitSync()\",\n      \"channel = \" + this.presence.channel.name + \"; syncInProgress = \" + syncInProgress\n    );\n    if (!syncInProgress) {\n      callback();\n      return;\n    }\n    this.once(\"sync\", callback);\n  }\n  clear() {\n    this.map = {};\n    this.setInProgress(false);\n    this.residualMembers = null;\n  }\n  setInProgress(inProgress) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"PresenceMap.setInProgress()\", \"inProgress = \" + inProgress);\n    this.syncInProgress = inProgress;\n    this.presence.syncComplete = !inProgress;\n  }\n};\n\n// src/common/lib/client/realtimepresence.ts\nfunction getClientId(realtimePresence) {\n  return realtimePresence.channel.client.auth.clientId;\n}\nfunction isAnonymousOrWildcard(realtimePresence) {\n  const realtime = realtimePresence.channel.client;\n  const clientId = realtime.auth.clientId;\n  return (!clientId || clientId === \"*\") && realtime.connection.state === \"connected\";\n}\nfunction waitAttached(channel, callback, action) {\n  switch (channel.state) {\n    case \"attached\":\n    case \"suspended\":\n      action();\n      break;\n    case \"initialized\":\n    case \"detached\":\n    case \"detaching\":\n    case \"attaching\":\n      whenPromiseSettles(channel.attach(), function(err) {\n        if (err)\n          callback(err);\n        else\n          action();\n      });\n      break;\n    default:\n      callback(ErrorInfo.fromValues(channel.invalidStateError()));\n  }\n}\nvar RealtimePresence = class extends eventemitter_default {\n  constructor(channel) {\n    super(channel.logger);\n    this.channel = channel;\n    this.syncComplete = false;\n    this.members = new PresenceMap(this, (item) => item.clientId + \":\" + item.connectionId);\n    this._myMembers = new PresenceMap(this, (item) => item.clientId);\n    this.subscriptions = new eventemitter_default(this.logger);\n    this.pendingPresence = [];\n  }\n  async enter(data) {\n    if (isAnonymousOrWildcard(this)) {\n      throw new ErrorInfo(\"clientId must be specified to enter a presence channel\", 40012, 400);\n    }\n    return this._enterOrUpdateClient(void 0, void 0, data, \"enter\");\n  }\n  async update(data) {\n    if (isAnonymousOrWildcard(this)) {\n      throw new ErrorInfo(\"clientId must be specified to update presence data\", 40012, 400);\n    }\n    return this._enterOrUpdateClient(void 0, void 0, data, \"update\");\n  }\n  async enterClient(clientId, data) {\n    return this._enterOrUpdateClient(void 0, clientId, data, \"enter\");\n  }\n  async updateClient(clientId, data) {\n    return this._enterOrUpdateClient(void 0, clientId, data, \"update\");\n  }\n  async _enterOrUpdateClient(id, clientId, data, action) {\n    const channel = this.channel;\n    if (!channel.connectionManager.activeState()) {\n      throw channel.connectionManager.getError();\n    }\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"RealtimePresence.\" + action + \"Client()\",\n      \"channel = \" + channel.name + \", id = \" + id + \", client = \" + (clientId || \"(implicit) \" + getClientId(this))\n    );\n    const presence = fromData(data);\n    presence.action = action;\n    if (id) {\n      presence.id = id;\n    }\n    if (clientId) {\n      presence.clientId = clientId;\n    }\n    await encode(presence, channel.channelOptions);\n    switch (channel.state) {\n      case \"attached\":\n        return new Promise((resolve, reject) => {\n          channel.sendPresence(presence, (err) => err ? reject(err) : resolve());\n        });\n      case \"initialized\":\n      case \"detached\":\n        channel.attach();\n      case \"attaching\":\n        return new Promise((resolve, reject) => {\n          this.pendingPresence.push({\n            presence,\n            callback: (err) => err ? reject(err) : resolve()\n          });\n        });\n      default: {\n        const err = new PartialErrorInfo(\n          \"Unable to \" + action + \" presence channel while in \" + channel.state + \" state\",\n          90001\n        );\n        err.code = 90001;\n        throw err;\n      }\n    }\n  }\n  async leave(data) {\n    if (isAnonymousOrWildcard(this)) {\n      throw new ErrorInfo(\"clientId must have been specified to enter or leave a presence channel\", 40012, 400);\n    }\n    return this.leaveClient(void 0, data);\n  }\n  async leaveClient(clientId, data) {\n    const channel = this.channel;\n    if (!channel.connectionManager.activeState()) {\n      throw channel.connectionManager.getError();\n    }\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"RealtimePresence.leaveClient()\",\n      \"leaving; channel = \" + this.channel.name + \", client = \" + clientId\n    );\n    const presence = fromData(data);\n    presence.action = \"leave\";\n    if (clientId) {\n      presence.clientId = clientId;\n    }\n    return new Promise((resolve, reject) => {\n      switch (channel.state) {\n        case \"attached\":\n          channel.sendPresence(presence, (err) => err ? reject(err) : resolve());\n          break;\n        case \"attaching\":\n          this.pendingPresence.push({\n            presence,\n            callback: (err) => err ? reject(err) : resolve()\n          });\n          break;\n        case \"initialized\":\n        case \"failed\": {\n          const err = new PartialErrorInfo(\"Unable to leave presence channel (incompatible state)\", 90001);\n          reject(err);\n          break;\n        }\n        default:\n          reject(channel.invalidStateError());\n      }\n    });\n  }\n  async get(params) {\n    const waitForSync = !params || (\"waitForSync\" in params ? params.waitForSync : true);\n    return new Promise((resolve, reject) => {\n      function returnMembers(members) {\n        resolve(params ? members.list(params) : members.values());\n      }\n      if (this.channel.state === \"suspended\") {\n        if (waitForSync) {\n          reject(\n            ErrorInfo.fromValues({\n              statusCode: 400,\n              code: 91005,\n              message: \"Presence state is out of sync due to channel being in the SUSPENDED state\"\n            })\n          );\n        } else {\n          returnMembers(this.members);\n        }\n        return;\n      }\n      waitAttached(\n        this.channel,\n        (err) => reject(err),\n        () => {\n          const members = this.members;\n          if (waitForSync) {\n            members.waitSync(function() {\n              returnMembers(members);\n            });\n          } else {\n            returnMembers(members);\n          }\n        }\n      );\n    });\n  }\n  async history(params) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"RealtimePresence.history()\", \"channel = \" + this.name);\n    const restMixin = this.channel.client.rest.presenceMixin;\n    if (params && params.untilAttach) {\n      if (this.channel.state === \"attached\") {\n        delete params.untilAttach;\n        params.from_serial = this.channel.properties.attachSerial;\n      } else {\n        throw new ErrorInfo(\n          \"option untilAttach requires the channel to be attached, was: \" + this.channel.state,\n          4e4,\n          400\n        );\n      }\n    }\n    return restMixin.history(this, params);\n  }\n  setPresence(presenceSet, isSync, syncChannelSerial) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"RealtimePresence.setPresence()\",\n      \"received presence for \" + presenceSet.length + \" participants; syncChannelSerial = \" + syncChannelSerial\n    );\n    let syncCursor, match;\n    const members = this.members, myMembers = this._myMembers, broadcastMessages = [], connId = this.channel.connectionManager.connectionId;\n    if (isSync) {\n      this.members.startSync();\n      if (syncChannelSerial && (match = syncChannelSerial.match(/^[\\w-]+:(.*)$/))) {\n        syncCursor = match[1];\n      }\n    }\n    for (let i = 0; i < presenceSet.length; i++) {\n      const presence = fromValues2(presenceSet[i]);\n      switch (presence.action) {\n        case \"leave\":\n          if (members.remove(presence)) {\n            broadcastMessages.push(presence);\n          }\n          if (presence.connectionId === connId && !presence.isSynthesized()) {\n            myMembers.remove(presence);\n          }\n          break;\n        case \"enter\":\n        case \"present\":\n        case \"update\":\n          if (members.put(presence)) {\n            broadcastMessages.push(presence);\n          }\n          if (presence.connectionId === connId) {\n            myMembers.put(presence);\n          }\n          break;\n      }\n    }\n    if (isSync && !syncCursor) {\n      members.endSync();\n      this.channel.syncChannelSerial = null;\n    }\n    for (let i = 0; i < broadcastMessages.length; i++) {\n      const presence = broadcastMessages[i];\n      this.subscriptions.emit(presence.action, presence);\n    }\n  }\n  onAttached(hasPresence) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"RealtimePresence.onAttached()\",\n      \"channel = \" + this.channel.name + \", hasPresence = \" + hasPresence\n    );\n    if (hasPresence) {\n      this.members.startSync();\n    } else {\n      this._synthesizeLeaves(this.members.values());\n      this.members.clear();\n    }\n    this._ensureMyMembersPresent();\n    const pendingPresence = this.pendingPresence, pendingPresCount = pendingPresence.length;\n    if (pendingPresCount) {\n      this.pendingPresence = [];\n      const presenceArray = [];\n      const multicaster = multicaster_default.create(this.logger);\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"RealtimePresence.onAttached\",\n        \"sending \" + pendingPresCount + \" queued presence messages\"\n      );\n      for (let i = 0; i < pendingPresCount; i++) {\n        const event = pendingPresence[i];\n        presenceArray.push(event.presence);\n        multicaster.push(event.callback);\n      }\n      this.channel.sendPresence(presenceArray, multicaster);\n    }\n  }\n  actOnChannelState(state, hasPresence, err) {\n    switch (state) {\n      case \"attached\":\n        this.onAttached(hasPresence);\n        break;\n      case \"detached\":\n      case \"failed\":\n        this._clearMyMembers();\n        this.members.clear();\n      case \"suspended\":\n        this.failPendingPresence(err);\n        break;\n    }\n  }\n  failPendingPresence(err) {\n    if (this.pendingPresence.length) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"RealtimeChannel.failPendingPresence\",\n        \"channel; name = \" + this.channel.name + \", err = \" + inspectError(err)\n      );\n      for (let i = 0; i < this.pendingPresence.length; i++)\n        try {\n          this.pendingPresence[i].callback(err);\n        } catch (e) {\n        }\n      this.pendingPresence = [];\n    }\n  }\n  _clearMyMembers() {\n    this._myMembers.clear();\n  }\n  _ensureMyMembersPresent() {\n    const myMembers = this._myMembers;\n    const connId = this.channel.connectionManager.connectionId;\n    for (const memberKey in myMembers.map) {\n      const entry = myMembers.map[memberKey];\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"RealtimePresence._ensureMyMembersPresent()\",\n        'Auto-reentering clientId \"' + entry.clientId + '\" into the presence set'\n      );\n      const id = entry.connectionId === connId ? entry.id : void 0;\n      this._enterOrUpdateClient(id, entry.clientId, entry.data, \"enter\").catch((err) => {\n        const wrappedErr = new ErrorInfo(\"Presence auto re-enter failed\", 91004, 400, err);\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_ERROR,\n          \"RealtimePresence._ensureMyMembersPresent()\",\n          \"Presence auto re-enter failed; reason = \" + inspectError(err)\n        );\n        const change = new channelstatechange_default(this.channel.state, this.channel.state, true, false, wrappedErr);\n        this.channel.emit(\"update\", change);\n      });\n    }\n  }\n  _synthesizeLeaves(items) {\n    const subscriptions = this.subscriptions;\n    items.forEach(function(item) {\n      const presence = fromValues2({\n        action: \"leave\",\n        connectionId: item.connectionId,\n        clientId: item.clientId,\n        data: item.data,\n        encoding: item.encoding,\n        timestamp: Date.now()\n      });\n      subscriptions.emit(\"leave\", presence);\n    });\n  }\n  async subscribe(..._args) {\n    const args = realtimechannel_default.processListenerArgs(_args);\n    const event = args[0];\n    const listener = args[1];\n    const channel = this.channel;\n    if (channel.state === \"failed\") {\n      throw ErrorInfo.fromValues(channel.invalidStateError());\n    }\n    this.subscriptions.on(event, listener);\n    await channel.attach();\n  }\n  unsubscribe(..._args) {\n    const args = realtimechannel_default.processListenerArgs(_args);\n    const event = args[0];\n    const listener = args[1];\n    this.subscriptions.off(event, listener);\n  }\n};\nvar realtimepresence_default = RealtimePresence;\n\n// src/common/lib/transport/websockettransport.ts\nvar shortName = TransportNames.WebSocket;\nfunction isNodeWebSocket(ws) {\n  return !!ws.on;\n}\nvar WebSocketTransport = class extends transport_default {\n  constructor(connectionManager, auth, params) {\n    super(connectionManager, auth, params);\n    this.shortName = shortName;\n    params.heartbeats = Platform.Config.useProtocolHeartbeats;\n    this.wsHost = params.host;\n  }\n  static isAvailable() {\n    return !!Platform.Config.WebSocket;\n  }\n  createWebSocket(uri, connectParams) {\n    this.uri = uri + toQueryString(connectParams);\n    return new Platform.Config.WebSocket(this.uri);\n  }\n  toString() {\n    return \"WebSocketTransport; uri=\" + this.uri;\n  }\n  connect() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"WebSocketTransport.connect()\", \"starting\");\n    transport_default.prototype.connect.call(this);\n    const self2 = this, params = this.params, options = params.options;\n    const wsScheme = options.tls ? \"wss://\" : \"ws://\";\n    const wsUri = wsScheme + this.wsHost + \":\" + defaults_default.getPort(options) + \"/\";\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"WebSocketTransport.connect()\", \"uri: \" + wsUri);\n    whenPromiseSettles(\n      this.auth.getAuthParams(),\n      function(err, authParams) {\n        if (self2.isDisposed) {\n          return;\n        }\n        let paramStr = \"\";\n        for (const param in authParams)\n          paramStr += \" \" + param + \": \" + authParams[param] + \";\";\n        logger_default.logAction(\n          self2.logger,\n          logger_default.LOG_MINOR,\n          \"WebSocketTransport.connect()\",\n          \"authParams:\" + paramStr + \" err: \" + err\n        );\n        if (err) {\n          self2.disconnect(err);\n          return;\n        }\n        const connectParams = params.getConnectParams(authParams);\n        try {\n          const wsConnection = self2.wsConnection = self2.createWebSocket(wsUri, connectParams);\n          wsConnection.binaryType = Platform.Config.binaryType;\n          wsConnection.onopen = function() {\n            self2.onWsOpen();\n          };\n          wsConnection.onclose = function(ev) {\n            self2.onWsClose(ev);\n          };\n          wsConnection.onmessage = function(ev) {\n            self2.onWsData(ev.data);\n          };\n          wsConnection.onerror = function(ev) {\n            self2.onWsError(ev);\n          };\n          if (isNodeWebSocket(wsConnection)) {\n            wsConnection.on(\"ping\", function() {\n              self2.onActivity();\n            });\n          }\n        } catch (e) {\n          logger_default.logAction(\n            self2.logger,\n            logger_default.LOG_ERROR,\n            \"WebSocketTransport.connect()\",\n            \"Unexpected exception creating websocket: err = \" + (e.stack || e.message)\n          );\n          self2.disconnect(e);\n        }\n      }\n    );\n  }\n  send(message) {\n    const wsConnection = this.wsConnection;\n    if (!wsConnection) {\n      logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"WebSocketTransport.send()\", \"No socket connection\");\n      return;\n    }\n    try {\n      wsConnection.send(\n        serialize2(message, this.connectionManager.realtime._MsgPack, this.params.format)\n      );\n    } catch (e) {\n      const msg = \"Exception from ws connection when trying to send: \" + inspectError(e);\n      logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"WebSocketTransport.send()\", msg);\n      this.finish(\"disconnected\", new ErrorInfo(msg, 5e4, 500));\n    }\n  }\n  onWsData(data) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"WebSocketTransport.onWsData()\",\n      \"data received; length = \" + data.length + \"; type = \" + typeof data\n    );\n    try {\n      this.onProtocolMessage(\n        deserialize(\n          data,\n          this.connectionManager.realtime._MsgPack,\n          this.connectionManager.realtime._RealtimePresence,\n          this.format\n        )\n      );\n    } catch (e) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_ERROR,\n        \"WebSocketTransport.onWsData()\",\n        \"Unexpected exception handing channel message: \" + e.stack\n      );\n    }\n  }\n  onWsOpen() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"WebSocketTransport.onWsOpen()\", \"opened WebSocket\");\n    this.emit(\"preconnect\");\n  }\n  onWsClose(ev) {\n    let wasClean, code;\n    if (typeof ev == \"object\") {\n      code = ev.code;\n      wasClean = ev.wasClean || code === 1e3;\n    } else {\n      code = ev;\n      wasClean = code == 1e3;\n    }\n    delete this.wsConnection;\n    if (wasClean) {\n      logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"WebSocketTransport.onWsClose()\", \"Cleanly closed WebSocket\");\n      const err = new ErrorInfo(\"Websocket closed\", 80003, 400);\n      this.finish(\"disconnected\", err);\n    } else {\n      const msg = \"Unclean disconnection of WebSocket ; code = \" + code, err = new ErrorInfo(msg, 80003, 400);\n      logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"WebSocketTransport.onWsClose()\", msg);\n      this.finish(\"disconnected\", err);\n    }\n    this.emit(\"disposed\");\n  }\n  onWsError(err) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"WebSocketTransport.onError()\",\n      \"Error from WebSocket: \" + err.message\n    );\n    Platform.Config.nextTick(() => {\n      this.disconnect(Error(err.message));\n    });\n  }\n  dispose() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"WebSocketTransport.dispose()\", \"\");\n    this.isDisposed = true;\n    const wsConnection = this.wsConnection;\n    if (wsConnection) {\n      wsConnection.onmessage = function() {\n      };\n      delete this.wsConnection;\n      Platform.Config.nextTick(() => {\n        logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"WebSocketTransport.dispose()\", \"closing websocket\");\n        if (!wsConnection) {\n          throw new Error(\"WebSocketTransport.dispose(): wsConnection is not defined\");\n        }\n        wsConnection.close();\n      });\n    }\n  }\n};\nvar websockettransport_default = WebSocketTransport;\n\n// src/common/lib/client/filteredsubscriptions.ts\nvar FilteredSubscriptions = class {\n  static subscribeFilter(channel, filter, listener) {\n    const filteredListener = (m) => {\n      var _a2, _b, _c, _d, _e, _f;\n      const mapping = {\n        name: m.name,\n        refTimeserial: (_b = (_a2 = m.extras) == null ? void 0 : _a2.ref) == null ? void 0 : _b.timeserial,\n        refType: (_d = (_c = m.extras) == null ? void 0 : _c.ref) == null ? void 0 : _d.type,\n        isRef: !!((_f = (_e = m.extras) == null ? void 0 : _e.ref) == null ? void 0 : _f.timeserial),\n        clientId: m.clientId\n      };\n      if (Object.entries(filter).find(\n        ([key, value]) => value !== void 0 ? mapping[key] !== value : false\n      )) {\n        return;\n      }\n      listener(m);\n    };\n    this.addFilteredSubscription(channel, filter, listener, filteredListener);\n    channel.subscriptions.on(filteredListener);\n  }\n  // Adds a new filtered subscription\n  static addFilteredSubscription(channel, filter, realListener, filteredListener) {\n    var _a2;\n    if (!channel.filteredSubscriptions) {\n      channel.filteredSubscriptions = /* @__PURE__ */ new Map();\n    }\n    if (channel.filteredSubscriptions.has(realListener)) {\n      const realListenerMap = channel.filteredSubscriptions.get(realListener);\n      realListenerMap.set(filter, ((_a2 = realListenerMap == null ? void 0 : realListenerMap.get(filter)) == null ? void 0 : _a2.concat(filteredListener)) || [filteredListener]);\n    } else {\n      channel.filteredSubscriptions.set(\n        realListener,\n        /* @__PURE__ */ new Map([[filter, [filteredListener]]])\n      );\n    }\n  }\n  static getAndDeleteFilteredSubscriptions(channel, filter, realListener) {\n    if (!channel.filteredSubscriptions) {\n      return [];\n    }\n    if (!realListener && filter) {\n      return Array.from(channel.filteredSubscriptions.entries()).map(([key, filterMaps]) => {\n        var _a2;\n        let listenerMaps = filterMaps.get(filter);\n        filterMaps.delete(filter);\n        if (filterMaps.size === 0) {\n          (_a2 = channel.filteredSubscriptions) == null ? void 0 : _a2.delete(key);\n        }\n        return listenerMaps;\n      }).reduce(\n        (prev, cur) => cur ? prev.concat(...cur) : prev,\n        []\n      );\n    }\n    if (!realListener || !channel.filteredSubscriptions.has(realListener)) {\n      return [];\n    }\n    const realListenerMap = channel.filteredSubscriptions.get(realListener);\n    if (!filter) {\n      const listeners2 = Array.from(realListenerMap.values()).reduce((prev, cur) => prev.concat(...cur), []);\n      channel.filteredSubscriptions.delete(realListener);\n      return listeners2;\n    }\n    let listeners = realListenerMap.get(filter);\n    realListenerMap.delete(filter);\n    return listeners || [];\n  }\n};\n\n// src/common/lib/client/defaultrealtime.ts\nvar _DefaultRealtime = class _DefaultRealtime extends baserealtime_default {\n  // The public typings declare that this requires an argument to be passed, but since we want to emit a good error message in the case where a non-TypeScript user does not pass an argument, tell the compiler that this is possible so that it forces us to handle it.\n  constructor(options) {\n    var _a2;\n    const MsgPack = _DefaultRealtime._MsgPack;\n    if (!MsgPack) {\n      throw new Error(\"Expected DefaultRealtime._MsgPack to have been set\");\n    }\n    super(\n      defaults_default.objectifyOptions(options, true, \"Realtime\", logger_default.defaultLogger, __spreadProps(__spreadValues({}, allCommonModularPlugins), {\n        Crypto: (_a2 = _DefaultRealtime.Crypto) != null ? _a2 : void 0,\n        MsgPack,\n        RealtimePresence: {\n          RealtimePresence: realtimepresence_default,\n          presenceMessageFromValues: fromValues2,\n          presenceMessagesFromValuesArray: fromValuesArray2,\n          presenceMessageFromWireProtocol: fromWireProtocol2\n        },\n        WebSocketTransport: websockettransport_default,\n        MessageInteractions: FilteredSubscriptions\n      }))\n    );\n  }\n  static get Crypto() {\n    if (this._Crypto === null) {\n      throw new Error(\"Encryption not enabled; use ably.encryption.js instead\");\n    }\n    return this._Crypto;\n  }\n  static set Crypto(newValue) {\n    this._Crypto = newValue;\n  }\n};\n_DefaultRealtime.Utils = utils_exports;\n_DefaultRealtime.ConnectionManager = connectionmanager_default;\n_DefaultRealtime.ProtocolMessage = protocolmessage_default;\n_DefaultRealtime._Crypto = null;\n_DefaultRealtime.Message = DefaultMessage;\n_DefaultRealtime.PresenceMessage = DefaultPresenceMessage;\n_DefaultRealtime._MsgPack = null;\n// Used by tests\n_DefaultRealtime._Http = Http;\n_DefaultRealtime._PresenceMap = PresenceMap;\nvar DefaultRealtime = _DefaultRealtime;\n\n// src/platform/nodejs/lib/util/bufferutils.ts\nvar import_crypto = __toESM(__webpack_require__(/*! crypto */ \"crypto\"));\nvar BufferUtils = class {\n  constructor() {\n    this.base64CharSet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    this.hexCharSet = \"0123456789abcdef\";\n  }\n  base64Decode(string) {\n    return Buffer.from(string, \"base64\");\n  }\n  base64Encode(buffer) {\n    return this.toBuffer(buffer).toString(\"base64\");\n  }\n  areBuffersEqual(buffer1, buffer2) {\n    if (!buffer1 || !buffer2)\n      return false;\n    return this.toBuffer(buffer1).compare(this.toBuffer(buffer2)) == 0;\n  }\n  byteLength(buffer) {\n    return buffer.byteLength;\n  }\n  hexDecode(string) {\n    return Buffer.from(string, \"hex\");\n  }\n  hexEncode(buffer) {\n    return this.toBuffer(buffer).toString(\"hex\");\n  }\n  /* In node, BufferUtils methods that return binary objects return a Buffer\n   * for historical reasons; the browser equivalents return ArrayBuffers */\n  isBuffer(buffer) {\n    return Buffer.isBuffer(buffer) || buffer instanceof ArrayBuffer || ArrayBuffer.isView(buffer);\n  }\n  toArrayBuffer(buffer) {\n    const nodeBuffer = this.toBuffer(buffer);\n    return nodeBuffer.buffer.slice(nodeBuffer.byteOffset, nodeBuffer.byteOffset + nodeBuffer.byteLength);\n  }\n  toBuffer(buffer) {\n    if (Buffer.isBuffer(buffer)) {\n      return buffer;\n    }\n    if (buffer instanceof ArrayBuffer) {\n      return Buffer.from(buffer);\n    }\n    return Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n  }\n  arrayBufferViewToBuffer(arrayBufferView) {\n    return this.toBuffer(arrayBufferView);\n  }\n  utf8Decode(buffer) {\n    if (!this.isBuffer(buffer)) {\n      throw new Error(\"Expected input of utf8Decode to be a buffer, arraybuffer, or view\");\n    }\n    return this.toBuffer(buffer).toString(\"utf8\");\n  }\n  utf8Encode(string) {\n    return Buffer.from(string, \"utf8\");\n  }\n  hmacSha256(message, key) {\n    const messageBuffer = this.toBuffer(message);\n    const keyBuffer = this.toBuffer(key);\n    const hmac2 = import_crypto.default.createHmac(\"SHA256\", keyBuffer);\n    hmac2.update(messageBuffer);\n    return hmac2.digest();\n  }\n};\nvar bufferutils_default = new BufferUtils();\n\n// src/platform/nodejs/lib/util/crypto.ts\nvar import_crypto2 = __toESM(__webpack_require__(/*! crypto */ \"crypto\"));\nvar import_util = __toESM(__webpack_require__(/*! util */ \"util\"));\nvar createCryptoClass = function(bufferUtils) {\n  var DEFAULT_ALGORITHM = \"aes\";\n  var DEFAULT_KEYLENGTH = 256;\n  var DEFAULT_MODE = \"cbc\";\n  var DEFAULT_BLOCKLENGTH = 16;\n  async function generateRandom(bytes) {\n    return import_util.default.promisify(import_crypto2.default.randomBytes)(bytes);\n  }\n  function getPaddedLength(plaintextLength) {\n    return plaintextLength + DEFAULT_BLOCKLENGTH & -DEFAULT_BLOCKLENGTH;\n  }\n  function validateCipherParams(params) {\n    if (params.algorithm === \"aes\" && params.mode === \"cbc\") {\n      if (params.keyLength === 128 || params.keyLength === 256) {\n        return;\n      }\n      throw new Error(\n        \"Unsupported key length \" + params.keyLength + \" for aes-cbc encryption. Encryption key must be 128 or 256 bits (16 or 32 ASCII characters)\"\n      );\n    }\n  }\n  function normaliseBase64(string) {\n    return string.replace(\"_\", \"/\").replace(\"-\", \"+\");\n  }\n  function filledBuffer(length, value) {\n    var result = Buffer.alloc(length);\n    result.fill(value);\n    return result;\n  }\n  var pkcs5Padding = [filledBuffer(16, 16)];\n  for (var i = 1; i <= 16; i++)\n    pkcs5Padding.push(filledBuffer(i, i));\n  class CipherParams {\n    constructor(algorithm, keyLength, mode, key) {\n      this.algorithm = algorithm;\n      this.keyLength = keyLength;\n      this.mode = mode;\n      this.key = key;\n      this.iv = null;\n    }\n  }\n  function isInstCipherParams(params) {\n    return !!(params.algorithm && params.key && params.keyLength && params.mode);\n  }\n  class Crypto2 {\n    /**\n     * Obtain a complete CipherParams instance from the provided params, filling\n     * in any not provided with default values, calculating a keyLength from\n     * the supplied key, and validating the result.\n     * @param params an object containing at a minimum a `key` key with value the\n     * key, as either a binary or a base64-encoded string.\n     * May optionally also contain: algorithm (defaults to AES),\n     * mode (defaults to 'cbc')\n     */\n    static getDefaultParams(params) {\n      var key;\n      if (!params.key) {\n        throw new Error(\"Crypto.getDefaultParams: a key is required\");\n      }\n      if (typeof params.key === \"string\") {\n        key = bufferUtils.base64Decode(normaliseBase64(params.key));\n      } else if (params.key instanceof ArrayBuffer) {\n        key = Buffer.from(params.key);\n      } else {\n        key = params.key;\n      }\n      var algorithm = params.algorithm || DEFAULT_ALGORITHM;\n      var keyLength = key.length * 8;\n      var mode = params.mode || DEFAULT_MODE;\n      var cipherParams = new CipherParams(algorithm, keyLength, mode, key);\n      if (params.keyLength && params.keyLength !== cipherParams.keyLength) {\n        throw new Error(\n          \"Crypto.getDefaultParams: a keyLength of \" + params.keyLength + \" was specified, but the key actually has length \" + cipherParams.keyLength\n        );\n      }\n      validateCipherParams(cipherParams);\n      return cipherParams;\n    }\n    /**\n     * Generate a random encryption key from the supplied keylength (or the\n     * default keyLength if none supplied) as a Buffer\n     * @param keyLength (optional) the required keyLength in bits\n     */\n    static async generateRandomKey(keyLength) {\n      try {\n        return generateRandom((keyLength || DEFAULT_KEYLENGTH) / 8);\n      } catch (err) {\n        throw new ErrorInfo(\"Failed to generate random key: \" + err.message, 500, 5e4, err);\n      }\n    }\n    /**\n     * Internal; get a ChannelCipher instance based on the given cipherParams\n     * @param params either a CipherParams instance or some subset of its\n     * fields that includes a key\n     */\n    static getCipher(params, logger) {\n      var _a2;\n      var cipherParams = isInstCipherParams(params) ? params : this.getDefaultParams(params);\n      return {\n        cipherParams,\n        cipher: new CBCCipher(cipherParams, (_a2 = params.iv) != null ? _a2 : null, logger)\n      };\n    }\n  }\n  Crypto2.CipherParams = CipherParams;\n  Crypto2;\n  class CBCCipher {\n    constructor(params, iv, logger) {\n      this.logger = logger;\n      this.encryptCipher = null;\n      this.algorithm = params.algorithm + \"-\" + String(params.keyLength) + \"-\" + params.mode;\n      this.key = params.key;\n      this.iv = iv;\n    }\n    async encrypt(plaintext) {\n      logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"CBCCipher.encrypt()\", \"\");\n      const iv = await this.getIv();\n      if (!this.encryptCipher) {\n        this.encryptCipher = import_crypto2.default.createCipheriv(this.algorithm, this.key, iv);\n      }\n      var plaintextBuffer = bufferUtils.toBuffer(plaintext);\n      var plaintextLength = plaintextBuffer.length, paddedLength = getPaddedLength(plaintextLength);\n      var cipherOut = this.encryptCipher.update(\n        Buffer.concat([plaintextBuffer, pkcs5Padding[paddedLength - plaintextLength]])\n      );\n      var ciphertext = Buffer.concat([iv, cipherOut]);\n      return ciphertext;\n    }\n    async decrypt(ciphertext) {\n      var decryptCipher = import_crypto2.default.createDecipheriv(this.algorithm, this.key, ciphertext.slice(0, DEFAULT_BLOCKLENGTH)), plaintext = decryptCipher.update(ciphertext.slice(DEFAULT_BLOCKLENGTH)), final = decryptCipher.final();\n      if (final && final.length)\n        plaintext = Buffer.concat([plaintext, final]);\n      return plaintext;\n    }\n    async getIv() {\n      if (this.iv) {\n        var iv = this.iv;\n        this.iv = null;\n        return iv;\n      }\n      var randomBlock = await generateRandom(DEFAULT_BLOCKLENGTH);\n      if (!this.encryptCipher) {\n        return randomBlock;\n      } else {\n        return this.encryptCipher.update(randomBlock);\n      }\n    }\n  }\n  return Crypto2;\n};\n\n// src/platform/nodejs/lib/util/http.ts\nvar import_got = __toESM(__webpack_require__(/*! got */ \"(ssr)/../../../node_modules/got/dist/source/index.js\"));\nvar import_http5 = __toESM(__webpack_require__(/*! http */ \"http\"));\nvar import_https = __toESM(__webpack_require__(/*! https */ \"https\"));\nvar globalAgentPool = [];\nvar _a;\nvar Http2 = (_a = class {\n  constructor(client) {\n    this.agent = null;\n    this.supportsAuthHeaders = true;\n    this.supportsLinkHeaders = true;\n    this.checkConnectivity = async () => {\n      var _a2, _b, _c, _d, _e;\n      if ((_a2 = this.client) == null ? void 0 : _a2.options.disableConnectivityCheck) {\n        return true;\n      }\n      const connectivityCheckUrl = ((_b = this.client) == null ? void 0 : _b.options.connectivityCheckUrl) || defaults_default.connectivityCheckUrl;\n      const connectivityCheckParams = (_d = (_c = this.client) == null ? void 0 : _c.options.connectivityCheckParams) != null ? _d : null;\n      const connectivityUrlIsDefault = !((_e = this.client) == null ? void 0 : _e.options.connectivityCheckUrl);\n      const { error, statusCode, body } = await this.doUri(\n        HttpMethods_default.Get,\n        connectivityCheckUrl,\n        null,\n        null,\n        connectivityCheckParams\n      );\n      if (!error && !connectivityUrlIsDefault) {\n        return isSuccessCode(statusCode);\n      }\n      return !error && (body == null ? void 0 : body.toString().trim()) === \"yes\";\n    };\n    this.client = client != null ? client : null;\n  }\n  async doUri(method, uri, headers, body, params) {\n    var _a2;\n    const agentOptions = this.client && this.client.options.restAgentOptions || defaults_default.restAgentOptions;\n    const doOptions = { headers: headers || void 0, responseType: \"buffer\" };\n    if (!this.agent) {\n      const persistedAgent = (_a2 = globalAgentPool.find((x) => shallowEquals(agentOptions, x.options))) == null ? void 0 : _a2.agents;\n      if (persistedAgent) {\n        this.agent = persistedAgent;\n      } else {\n        this.agent = {\n          http: new import_http5.default.Agent(agentOptions),\n          https: new import_https.default.Agent(agentOptions)\n        };\n        globalAgentPool.push({\n          options: agentOptions,\n          agents: this.agent\n        });\n      }\n    }\n    if (body) {\n      doOptions.body = body;\n    }\n    if (params)\n      doOptions.searchParams = params;\n    doOptions.agent = this.agent;\n    doOptions.url = uri;\n    doOptions.timeout = {\n      request: (this.client && this.client.options.timeouts || defaults_default.TIMEOUTS).httpRequestTimeout\n    };\n    doOptions.retry = { limit: 0 };\n    try {\n      const res = await import_got.default[method](doOptions);\n      return this._handler(null, res, res.body);\n    } catch (err) {\n      if (err instanceof import_got.default.HTTPError) {\n        return this._handler(null, err.response, err.response.body);\n      }\n      return this._handler(err);\n    }\n  }\n  shouldFallback(err) {\n    const { code, statusCode } = err;\n    return code === \"ENETUNREACH\" || code === \"EHOSTUNREACH\" || code === \"EHOSTDOWN\" || code === \"ETIMEDOUT\" || code === \"ESOCKETTIMEDOUT\" || code === \"ENOTFOUND\" || code === \"ECONNRESET\" || code === \"ECONNREFUSED\" || statusCode >= 500 && statusCode <= 504;\n  }\n  _handler(err, response, body) {\n    var _a2;\n    if (err) {\n      return { error: err };\n    }\n    const statusCode = response.statusCode, headers = response.headers;\n    if (statusCode >= 300) {\n      switch (headers[\"content-type\"]) {\n        case \"application/json\":\n          body = JSON.parse(body);\n          break;\n        case \"application/x-msgpack\":\n          if (!((_a2 = this.client) == null ? void 0 : _a2._MsgPack)) {\n            return { error: createMissingPluginError(\"MsgPack\") };\n          }\n          body = this.client._MsgPack.decode(body);\n          break;\n      }\n      const error = body.error ? ErrorInfo.fromValues(body.error) : new ErrorInfo(\n        headers[\"x-ably-errormessage\"] || \"Error response received from server: \" + statusCode + \" body was: \" + Platform.Config.inspect(body),\n        Number(headers[\"x-ably-errorcode\"]),\n        statusCode\n      );\n      return { error, body, headers, unpacked: true, statusCode };\n    }\n    return { error: null, body, headers, unpacked: false, statusCode };\n  }\n}, _a.methods = [HttpMethods_default.Get, HttpMethods_default.Delete, HttpMethods_default.Post, HttpMethods_default.Put, HttpMethods_default.Patch], _a.methodsWithoutBody = [HttpMethods_default.Get, HttpMethods_default.Delete], _a.methodsWithBody = [HttpMethods_default.Post, HttpMethods_default.Put, HttpMethods_default.Patch], _a);\nvar http_default = Http2;\n\n// src/platform/nodejs/config.ts\nvar import_crypto3 = __toESM(__webpack_require__(/*! crypto */ \"crypto\"));\nvar import_ws = __toESM(__webpack_require__(/*! ws */ \"(ssr)/../../../node_modules/ws/index.js\"));\nvar import_util2 = __toESM(__webpack_require__(/*! util */ \"util\"));\nvar Config = {\n  agent: \"nodejs/\" + process.versions.node,\n  logTimestamps: true,\n  userAgent: null,\n  binaryType: \"nodebuffer\",\n  WebSocket: import_ws.default,\n  useProtocolHeartbeats: false,\n  supportsBinary: true,\n  preferBinary: true,\n  nextTick: process.nextTick,\n  inspect: import_util2.default.inspect,\n  stringByteSize: Buffer.byteLength,\n  inherits: import_util2.default.inherits,\n  addEventListener: null,\n  getRandomArrayBuffer: async function(byteLength) {\n    return import_util2.default.promisify(import_crypto3.default.randomBytes)(byteLength);\n  }\n};\nvar config_default = Config;\n\n// src/common/constants/XHRStates.ts\nvar XHRStates = /* @__PURE__ */ ((XHRStates2) => {\n  XHRStates2[XHRStates2[\"REQ_SEND\"] = 0] = \"REQ_SEND\";\n  XHRStates2[XHRStates2[\"REQ_RECV\"] = 1] = \"REQ_RECV\";\n  XHRStates2[XHRStates2[\"REQ_RECV_POLL\"] = 2] = \"REQ_RECV_POLL\";\n  XHRStates2[XHRStates2[\"REQ_RECV_STREAM\"] = 3] = \"REQ_RECV_STREAM\";\n  return XHRStates2;\n})(XHRStates || {});\nvar XHRStates_default = XHRStates;\n\n// src/common/lib/transport/comettransport.ts\nfunction shouldBeErrorAction(err) {\n  const UNRESOLVABLE_ERROR_CODES = [80015, 80017, 80030];\n  if (err.code) {\n    if (auth_default.isTokenErr(err))\n      return false;\n    if (UNRESOLVABLE_ERROR_CODES.includes(err.code))\n      return true;\n    return err.code >= 4e4 && err.code < 5e4;\n  } else {\n    return false;\n  }\n}\nfunction protocolMessageFromRawError(err) {\n  if (shouldBeErrorAction(err)) {\n    return [fromValues3({ action: actions2.ERROR, error: err })];\n  } else {\n    return [fromValues3({ action: actions2.DISCONNECTED, error: err })];\n  }\n}\nvar CometTransport = class extends transport_default {\n  constructor(connectionManager, auth, params) {\n    super(\n      connectionManager,\n      auth,\n      params,\n      /* binary not supported for comet so force JSON protocol */\n      true\n    );\n    /* Historical comment, back from when we supported JSONP:\n     *\n     * > For comet, we could do the auth update by aborting the current recv and\n     * > starting a new one with the new token, that'd be sufficient for realtime.\n     * > Problem is JSONP - you can't cancel truly abort a recv once started. So\n     * > we need to send an AUTH for jsonp. In which case it's simpler to keep all\n     * > comet transports the same and do it for all of them. So we send the AUTH\n     * > instead, and don't need to abort the recv\n     *\n     * Now that we’ve dropped JSONP support, we may be able to revisit the above;\n     * see https://github.com/ably/ably-js/issues/1214.\n     */\n    this.onAuthUpdated = (tokenDetails) => {\n      this.authParams = { access_token: tokenDetails.token };\n    };\n    this.stream = \"stream\" in params ? params.stream : true;\n    this.sendRequest = null;\n    this.recvRequest = null;\n    this.pendingCallback = null;\n    this.pendingItems = null;\n  }\n  connect() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"CometTransport.connect()\", \"starting\");\n    transport_default.prototype.connect.call(this);\n    const params = this.params;\n    const options = params.options;\n    const host = defaults_default.getHost(options, params.host);\n    const port = defaults_default.getPort(options);\n    const cometScheme = options.tls ? \"https://\" : \"http://\";\n    this.baseUri = cometScheme + host + \":\" + port + \"/comet/\";\n    const connectUri = this.baseUri + \"connect\";\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"CometTransport.connect()\", \"uri: \" + connectUri);\n    whenPromiseSettles(this.auth.getAuthParams(), (err, authParams) => {\n      if (err) {\n        this.disconnect(err);\n        return;\n      }\n      if (this.isDisposed) {\n        return;\n      }\n      this.authParams = authParams;\n      const connectParams = this.params.getConnectParams(authParams);\n      if (\"stream\" in connectParams)\n        this.stream = connectParams.stream;\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"CometTransport.connect()\",\n        \"connectParams:\" + toQueryString(connectParams)\n      );\n      let preconnected = false;\n      const connectRequest = this.recvRequest = this.createRequest(\n        connectUri,\n        null,\n        connectParams,\n        null,\n        this.stream ? XHRStates_default.REQ_RECV_STREAM : XHRStates_default.REQ_RECV\n      );\n      connectRequest.on(\"data\", (data) => {\n        if (!this.recvRequest) {\n          return;\n        }\n        if (!preconnected) {\n          preconnected = true;\n          this.emit(\"preconnect\");\n        }\n        this.onData(data);\n      });\n      connectRequest.on(\"complete\", (err2) => {\n        if (!this.recvRequest) {\n          err2 = err2 || new ErrorInfo(\"Request cancelled\", 80003, 400);\n        }\n        this.recvRequest = null;\n        if (!preconnected && !err2) {\n          preconnected = true;\n          this.emit(\"preconnect\");\n        }\n        this.onActivity();\n        if (err2) {\n          if (err2.code) {\n            this.onData(protocolMessageFromRawError(err2));\n          } else {\n            this.disconnect(err2);\n          }\n          return;\n        }\n        Platform.Config.nextTick(() => {\n          this.recv();\n        });\n      });\n      connectRequest.exec();\n    });\n  }\n  requestClose() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"CometTransport.requestClose()\");\n    this._requestCloseOrDisconnect(true);\n  }\n  requestDisconnect() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"CometTransport.requestDisconnect()\");\n    this._requestCloseOrDisconnect(false);\n  }\n  _requestCloseOrDisconnect(closing) {\n    const closeOrDisconnectUri = closing ? this.closeUri : this.disconnectUri;\n    if (closeOrDisconnectUri) {\n      const request = this.createRequest(closeOrDisconnectUri, null, this.authParams, null, XHRStates_default.REQ_SEND);\n      request.on(\"complete\", (err) => {\n        if (err) {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_ERROR,\n            \"CometTransport.request\" + (closing ? \"Close()\" : \"Disconnect()\"),\n            \"request returned err = \" + inspectError(err)\n          );\n          this.finish(\"disconnected\", err);\n        }\n      });\n      request.exec();\n    }\n  }\n  dispose() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"CometTransport.dispose()\", \"\");\n    if (!this.isDisposed) {\n      this.isDisposed = true;\n      if (this.recvRequest) {\n        logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"CometTransport.dispose()\", \"aborting recv request\");\n        this.recvRequest.abort();\n        this.recvRequest = null;\n      }\n      this.finish(\"disconnected\", connectionerrors_default.disconnected());\n      Platform.Config.nextTick(() => {\n        this.emit(\"disposed\");\n      });\n    }\n  }\n  onConnect(message) {\n    var _a2;\n    if (this.isDisposed) {\n      return;\n    }\n    const connectionStr = (_a2 = message.connectionDetails) == null ? void 0 : _a2.connectionKey;\n    transport_default.prototype.onConnect.call(this, message);\n    const baseConnectionUri = this.baseUri + connectionStr;\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"CometTransport.onConnect()\", \"baseUri = \" + baseConnectionUri);\n    this.sendUri = baseConnectionUri + \"/send\";\n    this.recvUri = baseConnectionUri + \"/recv\";\n    this.closeUri = baseConnectionUri + \"/close\";\n    this.disconnectUri = baseConnectionUri + \"/disconnect\";\n  }\n  send(message) {\n    if (this.sendRequest) {\n      this.pendingItems = this.pendingItems || [];\n      this.pendingItems.push(message);\n      return;\n    }\n    const pendingItems = this.pendingItems || [];\n    pendingItems.push(message);\n    this.pendingItems = null;\n    this.sendItems(pendingItems);\n  }\n  sendAnyPending() {\n    const pendingItems = this.pendingItems;\n    if (!pendingItems) {\n      return;\n    }\n    this.pendingItems = null;\n    this.sendItems(pendingItems);\n  }\n  sendItems(items) {\n    const sendRequest = this.sendRequest = this.createRequest(\n      this.sendUri,\n      null,\n      this.authParams,\n      this.encodeRequest(items),\n      XHRStates_default.REQ_SEND\n    );\n    sendRequest.on(\"complete\", (err, data) => {\n      if (err)\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_ERROR,\n          \"CometTransport.sendItems()\",\n          \"on complete: err = \" + inspectError(err)\n        );\n      this.sendRequest = null;\n      if (err) {\n        if (err.code) {\n          this.onData(protocolMessageFromRawError(err));\n        } else {\n          this.disconnect(err);\n        }\n        return;\n      }\n      if (data) {\n        this.onData(data);\n      }\n      if (this.pendingItems) {\n        Platform.Config.nextTick(() => {\n          if (!this.sendRequest) {\n            this.sendAnyPending();\n          }\n        });\n      }\n    });\n    sendRequest.exec();\n  }\n  recv() {\n    if (this.recvRequest)\n      return;\n    if (!this.isConnected)\n      return;\n    const recvRequest = this.recvRequest = this.createRequest(\n      this.recvUri,\n      null,\n      this.authParams,\n      null,\n      this.stream ? XHRStates_default.REQ_RECV_STREAM : XHRStates_default.REQ_RECV_POLL\n    );\n    recvRequest.on(\"data\", (data) => {\n      this.onData(data);\n    });\n    recvRequest.on(\"complete\", (err) => {\n      this.recvRequest = null;\n      this.onActivity();\n      if (err) {\n        if (err.code) {\n          this.onData(protocolMessageFromRawError(err));\n        } else {\n          this.disconnect(err);\n        }\n        return;\n      }\n      Platform.Config.nextTick(() => {\n        this.recv();\n      });\n    });\n    recvRequest.exec();\n  }\n  onData(responseData) {\n    try {\n      const items = this.decodeResponse(responseData);\n      if (items && items.length)\n        for (let i = 0; i < items.length; i++)\n          this.onProtocolMessage(\n            fromDeserialized(items[i], this.connectionManager.realtime._RealtimePresence)\n          );\n    } catch (e) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_ERROR,\n        \"CometTransport.onData()\",\n        \"Unexpected exception handing channel event: \" + e.stack\n      );\n    }\n  }\n  encodeRequest(requestItems) {\n    return JSON.stringify(requestItems);\n  }\n  decodeResponse(responseData) {\n    if (typeof responseData == \"string\")\n      return JSON.parse(responseData);\n    return responseData;\n  }\n};\nvar comettransport_default = CometTransport;\n\n// src/platform/nodejs/lib/transport/nodecomettransport.js\nvar import_http6 = __toESM(__webpack_require__(/*! http */ \"http\"));\nvar import_https2 = __toESM(__webpack_require__(/*! https */ \"https\"));\nvar import_url = __toESM(__webpack_require__(/*! url */ \"url\"));\nvar import_util3 = __toESM(__webpack_require__(/*! util */ \"util\"));\nvar noop3 = function() {\n};\nvar shortName2 = TransportNames.Comet;\nvar NodeCometTransport = class extends comettransport_default {\n  constructor(connectionManager, auth, params) {\n    super(connectionManager, auth, params);\n    this.httpAgent = null;\n    this.httpsAgent = null;\n    this.pendingRequests = 0;\n    this.shortName = shortName2;\n  }\n  static isAvailable() {\n    return true;\n  }\n  toString() {\n    return \"NodeCometTransport; uri=\" + this.baseUri + \"; isConnected=\" + this.isConnected + \"; format=\" + this.format + \"; stream=\" + this.stream;\n  }\n  getAgent(tls) {\n    var prop = tls ? \"httpsAgent\" : \"httpAgent\", agent2 = this[prop];\n    if (!agent2)\n      agent2 = this[prop] = new (tls ? import_https2.default : import_http6.default).Agent({ keepAlive: true });\n    return agent2;\n  }\n  dispose() {\n    var self2 = this;\n    this.onceNoPending(function() {\n      if (self2.httpAgent)\n        self2.httpAgent.destroy();\n      if (self2.httpsAgent)\n        self2.httpsAgent.destroy();\n    });\n    comettransport_default.prototype.dispose.call(this);\n  }\n  /* valid in non-streaming mode only, or data only contains last update */\n  request(uri, params, body, requestMode, callback) {\n    var req = this.createRequest(uri, params, body, requestMode);\n    req.once(\"complete\", callback);\n    req.exec();\n    return req;\n  }\n  createRequest(uri, headers, params, body, requestMode) {\n    return new Request(uri, headers, params, body, requestMode, this.format, this.timeouts, this);\n  }\n  addPending() {\n    ++this.pendingRequests;\n  }\n  removePending() {\n    if (--this.pendingRequests <= 0) {\n      this.emit(\"nopending\");\n    }\n  }\n  onceNoPending(listener) {\n    if (this.pendingRequests == 0) {\n      listener();\n      return;\n    }\n    this.once(\"nopending\", listener);\n  }\n};\nvar Request = class extends eventemitter_default {\n  constructor(uri, headers, params, body, requestMode, format, timeouts, transport) {\n    super(transport.logger);\n    if (typeof uri == \"string\")\n      uri = import_url.default.parse(uri);\n    var tls = uri.protocol == \"https:\";\n    this.client = tls ? import_https2.default : import_http6.default;\n    this.requestMode = requestMode;\n    this.timeouts = timeouts;\n    this.transport = transport;\n    this.requestComplete = false;\n    this.req = this.res = null;\n    var method = \"GET\", contentType = format == \"msgpack\" ? \"application/x-msgpack\" : \"application/json\";\n    headers = headers ? mixin({}, headers) : {};\n    headers[\"accept\"] = contentType;\n    if (body) {\n      method = \"POST\";\n      if (!Buffer.isBuffer(body)) {\n        if (typeof body == \"object\")\n          body = JSON.stringify(body);\n        body = Buffer.from(body);\n      }\n      this.body = body;\n      headers[\"Content-Length\"] = body.length;\n      headers[\"Content-Type\"] = contentType;\n    }\n    var requestOptions = this.requestOptions = {\n      hostname: uri.hostname,\n      port: uri.port,\n      path: uri.path + toQueryString(params),\n      method,\n      headers\n    };\n    if (transport)\n      requestOptions.agent = transport.getAgent(tls);\n  }\n  exec() {\n    var timeout = this.requestMode == XHRStates_default.REQ_SEND ? this.timeouts.httpRequestTimeout : this.timeouts.recvTimeout, self2 = this;\n    var timer = this.timer = setTimeout(function() {\n      self2.abort();\n    }, timeout), req = this.req = this.client.request(this.requestOptions);\n    req.on(\n      \"error\",\n      this.onReqError = function(err) {\n        err = new PartialErrorInfo(\"Request error: \" + err.message, null, 400);\n        clearTimeout(timer);\n        self2.timer = null;\n        self2.complete(err);\n      }\n    );\n    req.on(\"response\", function(res) {\n      clearTimeout(timer);\n      self2.timer = null;\n      var statusCode = res.statusCode;\n      if (statusCode == HttpStatusCodes_default.NoContent) {\n        res.resume();\n        self2.complete();\n        return;\n      }\n      res.on(\n        \"error\",\n        self2.onResError = function(err) {\n          err = new PartialErrorInfo(\"Response error: \" + err.message, null, 400);\n          self2.complete(err);\n        }\n      );\n      self2.res = res;\n      if (self2.requestMode == XHRStates_default.REQ_RECV_STREAM && statusCode < 400) {\n        self2.readStream();\n      } else {\n        self2.readFully();\n      }\n    });\n    if (this.transport)\n      this.transport.addPending();\n    req.end(this.body);\n  }\n  readStream() {\n    var res = this.res, self2 = this;\n    this.chunks = [];\n    this.streamComplete = false;\n    function onChunk(chunk) {\n      try {\n        chunk = JSON.parse(chunk);\n      } catch (e) {\n        var msg = \"Malformed response body from server: \" + e.message;\n        logger_default.logAction(self2.logger, logger_default.LOG_ERROR, \"NodeCometTransport.Request.readStream()\", msg);\n        self2.complete(new PartialErrorInfo(msg, null, 400));\n        return;\n      }\n      self2.emit(\"data\", chunk);\n    }\n    res.on(\n      \"data\",\n      this.ondata = function(data) {\n        var newChunks = String(data).split(\"\\n\"), chunks = self2.chunks;\n        if (newChunks.length > 1 && chunks.length > 0) {\n          chunks.push(newChunks.shift());\n          self2.chunks = [];\n          onChunk(chunks.join(\"\"));\n        }\n        var trailingNewChunk = newChunks.pop();\n        if (trailingNewChunk.length) {\n          self2.chunks.push(trailingNewChunk);\n        }\n        newChunks.map(onChunk);\n      }\n    );\n    res.on(\"end\", function() {\n      self2.streamComplete = true;\n      process.nextTick(function() {\n        self2.complete();\n      });\n    });\n  }\n  readFully() {\n    var res = this.res, chunks = [], self2 = this;\n    res.on(\"data\", function(chunk) {\n      chunks.push(chunk);\n    });\n    res.on(\"end\", function() {\n      process.nextTick(function() {\n        var body = Buffer.concat(chunks), statusCode = res.statusCode;\n        try {\n          body = JSON.parse(String(body));\n        } catch (e) {\n          var msg = \"Malformed response body from server: \" + e.message;\n          logger_default.logAction(self2.logger, logger_default.LOG_ERROR, \"NodeCometTransport.Request.readFully()\", msg);\n          self2.complete(new PartialErrorInfo(msg, null, 400));\n          return;\n        }\n        if (statusCode < 400 || Array.isArray(body)) {\n          self2.complete(null, body);\n          return;\n        }\n        var err = body.error && ErrorInfo.fromValues(body.error);\n        if (!err) {\n          err = new PartialErrorInfo(\n            \"Error response received from server: \" + statusCode + \", body was: \" + import_util3.default.inspect(body),\n            null,\n            statusCode\n          );\n        }\n        self2.complete(err);\n      });\n    });\n  }\n  complete(err, body) {\n    if (!this.requestComplete) {\n      this.requestComplete = true;\n      if (body)\n        this.emit(\"data\", body);\n      this.emit(\"complete\", err, body);\n      if (err) {\n        if (this.ondata && !this.streamComplete) {\n          if (this.ondata && this.res)\n            this.res.removeListener(\"data\", this.ondata);\n        }\n      }\n      if (this.transport) {\n        this.transport.removePending();\n      }\n    }\n  }\n  abort() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"NodeCometTransport.Request.abort()\", \"\");\n    var timer = this.timer;\n    if (timer) {\n      clearTimeout(timer);\n      this.timer = null;\n    }\n    var req = this.req;\n    if (req) {\n      logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"NodeCometTransport.Request.abort()\", \"aborting request\");\n      req.removeListener(\"error\", this.onReqError);\n      req.on(\"error\", noop3);\n      req.abort();\n      this.req = null;\n    }\n    this.complete({ statusCode: 400, code: 80003, message: \"Cancelled\" });\n  }\n};\nvar nodecomettransport_default = NodeCometTransport;\n\n// src/platform/nodejs/lib/transport/index.ts\nvar transport_default2 = {\n  order: [TransportNames.Comet],\n  bundledImplementations: {\n    [TransportNames.WebSocket]: websockettransport_default,\n    [TransportNames.Comet]: nodecomettransport_default\n  }\n};\n\n// src/platform/nodejs/lib/util/defaults.ts\nvar Defaults2 = {\n  connectivityCheckUrl: \"https://internet-up.ably-realtime.com/is-the-internet-up.txt\",\n  wsConnectivityCheckUrl: \"wss://ws-up.ably-realtime.com\",\n  /* Note: order matters here: the base transport is the leftmost one in the\n   * intersection of baseTransportOrder and the transports clientOption that's supported. */\n  defaultTransports: [TransportNames.WebSocket],\n  restAgentOptions: { maxSockets: 40, keepAlive: true }\n};\nvar defaults_default2 = Defaults2;\n\n// src/platform/nodejs/index.ts\nvar msgpack = require_msgpack();\nvar Crypto = createCryptoClass(bufferutils_default);\nPlatform.Crypto = Crypto;\nPlatform.BufferUtils = bufferutils_default;\nPlatform.Http = http_default;\nPlatform.Config = config_default;\nPlatform.Transports = transport_default2;\nPlatform.WebStorage = null;\nfor (const clientClass of [DefaultRest, DefaultRealtime]) {\n  clientClass.Crypto = Crypto;\n  clientClass._MsgPack = msgpack;\n}\nlogger_default.initLogHandlers();\nPlatform.Defaults = getDefaults(defaults_default2);\nif (Platform.Config.agent) {\n  Platform.Defaults.agent += \" \" + Platform.Config.agent;\n}\nmodule.exports = {\n  ErrorInfo,\n  Rest: DefaultRest,\n  Realtime: DefaultRealtime,\n  msgpack: null,\n  protocolMessageFromDeserialized: fromDeserializedIncludingDependencies\n};\nif (typeof module.exports == \"object\" && typeof exports == \"object\") {\n  var __cp = (to, from, except, desc) => {\n    if ((from && typeof from === \"object\") || typeof from === \"function\") {\n      for (let key of Object.getOwnPropertyNames(from)) {\n        if (!Object.prototype.hasOwnProperty.call(to, key) && key !== except)\n        Object.defineProperty(to, key, {\n          get: () => from[key],\n          enumerable: !(desc = Object.getOwnPropertyDescriptor(from, key)) || desc.enumerable,\n        });\n      }\n    }\n    return to;\n  };\n  module.exports = __cp(module.exports, exports);\n}\nreturn module.exports;\n}))\n//# sourceMappingURL=ably-node.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2FibHkvYnVpbGQvYWJseS1ub2RlLmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLElBQXVEO0FBQy9ELHlCQUF5QixtQkFBTyxDQUFDLG1EQUFJLEdBQUcsbUJBQU8sQ0FBQyxpRUFBSztBQUNyRCxNQUFNLEtBQUssRUFNTjtBQUNMLEdBQUc7QUFDSDtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFLDZEQUE2RDtBQUMzSTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELGFBQWE7QUFDeEU7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxtR0FBbUc7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsOEJBQThCO0FBQ3ZHO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9EQUF3QjtBQUMxQyxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isb0RBQXdCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9EQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9EQUF3QjtBQUMxQyxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9EQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRSxrQkFBa0IsbUNBQW1DLE9BQU87QUFDdkk7QUFDQTtBQUNBLHNCQUFzQixZQUFZO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkVBQTJFLGtCQUFrQixzQ0FBc0MsT0FBTztBQUMxSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRSxrQkFBa0Isc0NBQXNDLE9BQU87QUFDMUk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRUFBMkUsa0JBQWtCLHNDQUFzQyxPQUFPO0FBQzFJO0FBQ0E7QUFDQSxzQkFBc0IsWUFBWTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLFlBQVk7QUFDdEM7QUFDQTtBQUNBLFVBQVU7QUFDViwwQkFBMEIsWUFBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsWUFBWTtBQUN0QztBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSwwQkFBMEIsWUFBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSxZQUFZO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGFBQWEseURBQXlELElBQUk7QUFDM0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUSx5Q0FBeUMsUUFBUSx1Q0FBdUMsUUFBUSxnQkFBZ0IsUUFBUTtBQUMvSTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVSxjQUFjLFFBQVEsa0NBQWtDLFFBQVEsdUNBQXVDLFFBQVEsZ0JBQWdCLFFBQVE7QUFDNUo7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQsUUFBUTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvUUFBb1Esd0JBQXdCO0FBQzVSO0FBQ0EsNkZBQTZGO0FBQzdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksNEJBQTRCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksNEJBQTRCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxtQkFBbUI7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsY0FBYztBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixjQUFjO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsVUFBVTtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSwwQkFBMEIsWUFBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLHVCQUF1QixpR0FBaUcsdUJBQXVCO0FBQ3BMLGtFQUFrRSxzQkFBc0I7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHVCQUF1QiwrQ0FBK0M7QUFDN0Ysc0VBQXNFLHNCQUFzQjtBQUM1RjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLE1BQU07QUFDTjtBQUNBLHVCQUF1Qix1QkFBdUIsaURBQWlEO0FBQy9GLHNFQUFzRSxzQkFBc0I7QUFDNUY7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsaUJBQWlCLHlDQUF5QyxpREFBaUQ7QUFDM0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLElBQUk7QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsSUFBSTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsbUJBQW1CO0FBQ3BCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx1QkFBdUI7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLFlBQVksd0NBQXdDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxzQ0FBc0M7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG1DQUFtQztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxpRUFBaUU7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRSw0Q0FBNEM7QUFDbEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsMEdBQTBHO0FBQzFHO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RDtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVksd0NBQXdDO0FBQ3BEO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1osc0JBQXNCLDhCQUE4QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdGQUF3RjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEU7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsU0FBUztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLDJCQUEyQjtBQUN4RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsK0tBQStLLHFCQUFxQixlQUFlLHFFQUFxRSxjQUFjO0FBQ3RTO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHNDQUFzQztBQUM3RDtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixzQ0FBc0MsOENBQThDLHVDQUF1QztBQUM1STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isc0NBQXNDO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0Qyx5REFBeUQsMkJBQTJCLDBCQUEwQixvQkFBb0I7QUFDOUs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEZBQThGLDZDQUE2QztBQUMzSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixlQUFlLHFEQUFxRCxrQkFBa0I7QUFDdEY7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLHlEQUF5RCwyQkFBMkIsMEJBQTBCLG9CQUFvQjtBQUM5SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sZUFBZSx3REFBd0Qsa0JBQWtCO0FBQ3pGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3SkFBd0oscUJBQXFCLGVBQWU7QUFDNUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RkFBOEY7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixXQUFXO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLDBDQUEwQyxhQUFhLDBCQUEwQjtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsaUJBQWlCO0FBQ2pCLFFBQVE7QUFDUixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxVQUFVLG1FQUFtRTtBQUM3RTtBQUNBLDBDQUEwQyxhQUFhLHNCQUFzQjtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix1Q0FBdUM7QUFDOUQ7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsdUNBQXVDLDhDQUE4Qyx1Q0FBdUM7QUFDN0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isd0NBQXdDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix1QkFBdUI7QUFDekMsc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0lBQW9JO0FBQ3BJLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsV0FBVztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUtBQW1LLFFBQVE7QUFDM0sseUJBQXlCLFdBQVc7QUFDcEM7QUFDQTtBQUNBLHNCQUFzQixrQkFBa0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1LQUFtSyxRQUFRO0FBQzNLO0FBQ0E7QUFDQSxzQkFBc0Isa0JBQWtCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3TEFBd0wsUUFBUTtBQUNoTTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyUEFBMlAsUUFBUTtBQUNuUTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esd0xBQXdMLFFBQVEsY0FBYztBQUM5TTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isa0JBQWtCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0xBQXdMLFFBQVE7QUFDaE07QUFDQTtBQUNBLHNCQUFzQixrQkFBa0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtS0FBbUssUUFBUTtBQUMzSztBQUNBO0FBQ0Esc0JBQXNCLGtCQUFrQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMlBBQTJQLFFBQVE7QUFDblE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHdMQUF3TCxRQUFRO0FBQ2hNO0FBQ0E7QUFDQSxzQkFBc0Isa0JBQWtCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLDJQQUEyUCxRQUFRO0FBQ25RO0FBQ0E7QUFDQSxzQkFBc0Isa0JBQWtCO0FBQ3hDO0FBQ0E7QUFDQSxzQkFBc0IsdUJBQXVCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFO0FBQzlFO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCwwREFBMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFLGFBQWEsUUFBUTtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHFCQUFxQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JELElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLGFBQWEsUUFBUTtBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJRQUEyUSxRQUFRO0FBQ25SO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUdBQWlHO0FBQ2pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiwyQkFBMkI7QUFDMUQ7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdSQUFnUixRQUFRO0FBQ3hSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1HQUFtRztBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaVFBQWlRLFFBQVE7QUFDelE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0Esa0ZBQWtGLFFBQVE7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1SQUFtUixRQUFRO0FBQzNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isd0JBQXdCO0FBQzlDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsd0JBQXdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxpR0FBaUcsbUNBQW1DLCtEQUErRCxtQ0FBbUM7QUFDdE87QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSw2S0FBNkssUUFBUTtBQUNyTDtBQUNBO0FBQ0E7QUFDQSxtR0FBbUc7QUFDbkc7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNktBQTZLLFFBQVE7QUFDckw7QUFDQTtBQUNBO0FBQ0EscUZBQXFGLHlCQUF5QjtBQUM5RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsZUFBZSxHQUFHLGdCQUFnQjtBQUNsRixLQUFLO0FBQ0wsNktBQTZLLFFBQVE7QUFDckw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdHQUF3RyxNQUFNO0FBQzlHO0FBQ0E7O0FBRUE7QUFDQSxnQ0FBZ0M7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0SEFBNEg7QUFDNUg7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLCtDQUErQztBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLG1CQUFtQixvQkFBb0I7QUFDcEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHFDQUFxQyxDQUFVO0FBQ2hFO0FBQ0E7QUFDQSw0QkFBNEIsdUNBQXVDO0FBQ25FO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esa0hBQWtIO0FBQ2xIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHVCQUF1QjtBQUN2RDtBQUNBO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQ0FBaUMsd0JBQXdCO0FBQ3pELHNDQUFzQyw2QkFBNkI7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0SEFBNEg7QUFDNUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyw0REFBNEQ7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBFQUEwRTtBQUMxRTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsK0JBQStCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsdUJBQXVCO0FBQ2pDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0NBQXdDOztBQUV6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxnQkFBZ0IsNkZBQTZGO0FBQzdHLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQkFBa0I7QUFDaEQsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHFCQUFxQjtBQUNuRCxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQ7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRkFBc0Y7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFlBQVk7QUFDWiwrQkFBK0IsMENBQTBDO0FBQ3pFO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsaUNBQWlDLGtFQUFrRTtBQUNuRztBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04seUJBQXlCLDJCQUEyQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtIQUErSCx5Q0FBeUM7QUFDeEs7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsOEJBQThCLG1FQUFtRTtBQUM1STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsc0NBQXNDO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixrQ0FBa0M7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0U7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRTtBQUNuRTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsa0NBQWtDO0FBQzdEO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixvQkFBb0I7QUFDL0M7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIscUJBQXFCO0FBQy9DLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIscUJBQXFCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIscURBQXFEO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGlCQUFpQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDViw4QkFBOEIscUJBQXFCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxvQkFBb0I7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsNkJBQTZCO0FBQ3RELE1BQU07QUFDTix5QkFBeUIsNkJBQTZCO0FBQ3RELE1BQU07QUFDTiwyRUFBMkU7QUFDM0U7QUFDQSx5QkFBeUIsNkRBQTZEO0FBQ3RGLE1BQU07QUFDTjtBQUNBO0FBQ0EseUJBQXlCLHlFQUF5RTtBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxxQkFBcUI7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsa0JBQWtCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMEJBQTBCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sK0JBQStCLDhCQUE4QjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtR0FBbUc7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IscUJBQXFCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HLGdCQUFnQjtBQUNuSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlHQUF5RyxnQkFBZ0I7QUFDekg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qiw2Q0FBNkM7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRDtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsMkNBQTJDO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHFCQUFxQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IscUJBQXFCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDhCQUE4QjtBQUMxQyxvQkFBb0IscUJBQXFCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixxQkFBcUI7QUFDdkM7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpS0FBaUs7QUFDaks7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGdDQUFnQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxJQUFJLFdBQVc7QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixPQUFPLEVBQUUscUJBQXFCLEdBQUcsa0JBQWtCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRTtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isd0JBQXdCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsOEJBQThCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQkFBc0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0Esc0JBQXNCLGlDQUFpQztBQUN2RDtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDhCQUE4QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sd0RBQXdEO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdJQUFnSTtBQUNoSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRCQUE0QixtQkFBTyxDQUFDLHNCQUFRO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw2QkFBNkIsbUJBQU8sQ0FBQyxzQkFBUTtBQUM3QywwQkFBMEIsbUJBQU8sQ0FBQyxrQkFBTTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsU0FBUztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QixtQkFBTyxDQUFDLGlFQUFLO0FBQ3RDLDJCQUEyQixtQkFBTyxDQUFDLGtCQUFNO0FBQ3pDLDJCQUEyQixtQkFBTyxDQUFDLG9CQUFPO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsMEJBQTBCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG1CQUFtQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQSxhQUFhO0FBQ2I7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQSw2QkFBNkIsbUJBQU8sQ0FBQyxzQkFBUTtBQUM3Qyx3QkFBd0IsbUJBQU8sQ0FBQyxtREFBSTtBQUNwQywyQkFBMkIsbUJBQU8sQ0FBQyxrQkFBTTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsaUJBQWlCO0FBQ2xCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLG9DQUFvQztBQUM5RCxJQUFJO0FBQ0osMEJBQTBCLDJDQUEyQztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQkFBMkIsbUJBQU8sQ0FBQyxrQkFBTTtBQUN6Qyw0QkFBNEIsbUJBQU8sQ0FBQyxvQkFBTztBQUMzQyx5QkFBeUIsbUJBQU8sQ0FBQyxnQkFBSztBQUN0QywyQkFBMkIsbUJBQU8sQ0FBQyxrQkFBTTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsMEJBQTBCLHNDQUFzQyw0QkFBNEI7QUFDNUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RkFBNkYsaUJBQWlCO0FBQzlHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG9EQUFvRDtBQUN4RTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL0BoZWxzYS9hcHAvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2FibHkvYnVpbGQvYWJseS1ub2RlLmpzP2M2ZDUiXSwic291cmNlc0NvbnRlbnQiOlsiLypAbGljZW5zZSBDb3B5cmlnaHQgMjAxNS0yMDIyIEFibHkgUmVhbC10aW1lIEx0ZCAoYWJseS5jb20pXG5cbkFibHkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYyLjYuMFxuaHR0cHM6Ly9naXRodWIuY29tL2FibHkvYWJseS1qc1xuXG5SZWxlYXNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2VuY2UgdjIuMCovKGZ1bmN0aW9uIChnLCBmKSB7XG4gICAgaWYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIGV4cG9ydHMgJiYgXCJvYmplY3RcIiA9PSB0eXBlb2YgbW9kdWxlKSB7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGYocmVxdWlyZSgnd3MnKSwgcmVxdWlyZSgnZ290JykpO1xuICAgIH0gZWxzZSBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgZGVmaW5lKFsnd3MnLCAnZ290J10sIGYpO1xuICAgIH0gZWxzZSBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgZXhwb3J0cykge1xuICAgICAgZXhwb3J0c1tcIkFibHlcIl0gPSBmKHJlcXVpcmUoJ3dzJyksIHJlcXVpcmUoJ2dvdCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ1tcIkFibHlcIl0gPSBmKGdbXCJ3c1wiXSwgZ1tcImdvdFwiXSk7XG4gICAgfVxuICB9KHRoaXMsIChfX2RhLCBfX2RiKSA9PiB7XG52YXIgZXhwb3J0cyA9IHt9O1xudmFyIG1vZHVsZSA9IHsgZXhwb3J0cyB9O1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZlByb3BzID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXM7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wRGVzY3MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycztcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0T3duUHJvcFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fcHJvcElzRW51bSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19zcHJlYWRWYWx1ZXMgPSAoYSwgYikgPT4ge1xuICBmb3IgKHZhciBwcm9wIGluIGIgfHwgKGIgPSB7fSkpXG4gICAgaWYgKF9faGFzT3duUHJvcC5jYWxsKGIsIHByb3ApKVxuICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xuICBpZiAoX19nZXRPd25Qcm9wU3ltYm9scylcbiAgICBmb3IgKHZhciBwcm9wIG9mIF9fZ2V0T3duUHJvcFN5bWJvbHMoYikpIHtcbiAgICAgIGlmIChfX3Byb3BJc0VudW0uY2FsbChiLCBwcm9wKSlcbiAgICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xuICAgIH1cbiAgcmV0dXJuIGE7XG59O1xudmFyIF9fc3ByZWFkUHJvcHMgPSAoYSwgYikgPT4gX19kZWZQcm9wcyhhLCBfX2dldE93blByb3BEZXNjcyhiKSk7XG52YXIgX19vYmpSZXN0ID0gKHNvdXJjZSwgZXhjbHVkZSkgPT4ge1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIGZvciAodmFyIHByb3AgaW4gc291cmNlKVxuICAgIGlmIChfX2hhc093blByb3AuY2FsbChzb3VyY2UsIHByb3ApICYmIGV4Y2x1ZGUuaW5kZXhPZihwcm9wKSA8IDApXG4gICAgICB0YXJnZXRbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gIGlmIChzb3VyY2UgIT0gbnVsbCAmJiBfX2dldE93blByb3BTeW1ib2xzKVxuICAgIGZvciAodmFyIHByb3Agb2YgX19nZXRPd25Qcm9wU3ltYm9scyhzb3VyY2UpKSB7XG4gICAgICBpZiAoZXhjbHVkZS5pbmRleE9mKHByb3ApIDwgMCAmJiBfX3Byb3BJc0VudW0uY2FsbChzb3VyY2UsIHByb3ApKVxuICAgICAgICB0YXJnZXRbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgfVxuICByZXR1cm4gdGFyZ2V0O1xufTtcbnZhciBfX2NvbW1vbkpTID0gKGNiLCBtb2QpID0+IGZ1bmN0aW9uIF9fcmVxdWlyZSgpIHtcbiAgcmV0dXJuIG1vZCB8fCAoMCwgY2JbX19nZXRPd25Qcm9wTmFtZXMoY2IpWzBdXSkoKG1vZCA9IHsgZXhwb3J0czoge30gfSkuZXhwb3J0cywgbW9kKSwgbW9kLmV4cG9ydHM7XG59O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcblxuLy8gbm9kZV9tb2R1bGVzL2JvcHMvZnJvbS5qc1xudmFyIHJlcXVpcmVfZnJvbSA9IF9fY29tbW9uSlMoe1xuICBcIm5vZGVfbW9kdWxlcy9ib3BzL2Zyb20uanNcIihleHBvcnRzMiwgbW9kdWxlMikge1xuICAgIHZhciBCdWZmZXIyID0gcmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXI7XG4gICAgdmFyIHZlcnNpb24yID0gKChwcm9jZXNzIHx8IHt9KS52ZXJzaW9uIHx8IFwidjAuMC4wXCIpLnNsaWNlKDEpLnNwbGl0KFwiLlwiKVswXTtcbiAgICBtb2R1bGUyLmV4cG9ydHMgPSBOdW1iZXIodmVyc2lvbjIpIDwgNiA/IGZ1bmN0aW9uIGZyb20oc291cmNlLCBlbmNvZGluZykge1xuICAgICAgcmV0dXJuIG5ldyBCdWZmZXIyKHNvdXJjZSwgZW5jb2RpbmcpO1xuICAgIH0gOiBmdW5jdGlvbiBmcm9tKHNvdXJjZSwgZW5jb2RpbmcpIHtcbiAgICAgIHJldHVybiBCdWZmZXIyLmZyb20oc291cmNlLCBlbmNvZGluZyk7XG4gICAgfTtcbiAgfVxufSk7XG5cbi8vIG5vZGVfbW9kdWxlcy9ib3BzL3RvLmpzXG52YXIgcmVxdWlyZV90byA9IF9fY29tbW9uSlMoe1xuICBcIm5vZGVfbW9kdWxlcy9ib3BzL3RvLmpzXCIoZXhwb3J0czIsIG1vZHVsZTIpIHtcbiAgICBtb2R1bGUyLmV4cG9ydHMgPSBmdW5jdGlvbihzb3VyY2UsIGVuY29kaW5nKSB7XG4gICAgICByZXR1cm4gc291cmNlLnRvU3RyaW5nKGVuY29kaW5nKTtcbiAgICB9O1xuICB9XG59KTtcblxuLy8gbm9kZV9tb2R1bGVzL2JvcHMvaXMuanNcbnZhciByZXF1aXJlX2lzID0gX19jb21tb25KUyh7XG4gIFwibm9kZV9tb2R1bGVzL2JvcHMvaXMuanNcIihleHBvcnRzMiwgbW9kdWxlMikge1xuICAgIHZhciBCdWZmZXIyID0gcmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXI7XG4gICAgbW9kdWxlMi5leHBvcnRzID0gZnVuY3Rpb24oYnVmZmVyKSB7XG4gICAgICByZXR1cm4gQnVmZmVyMi5pc0J1ZmZlcihidWZmZXIpO1xuICAgIH07XG4gIH1cbn0pO1xuXG4vLyBub2RlX21vZHVsZXMvYm9wcy9zdWJhcnJheS5qc1xudmFyIHJlcXVpcmVfc3ViYXJyYXkgPSBfX2NvbW1vbkpTKHtcbiAgXCJub2RlX21vZHVsZXMvYm9wcy9zdWJhcnJheS5qc1wiKGV4cG9ydHMyLCBtb2R1bGUyKSB7XG4gICAgbW9kdWxlMi5leHBvcnRzID0gZnVuY3Rpb24oc291cmNlLCBmcm9tLCB0bykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDIgPyBzb3VyY2Uuc2xpY2UoZnJvbSkgOiBzb3VyY2Uuc2xpY2UoZnJvbSwgdG8pO1xuICAgIH07XG4gIH1cbn0pO1xuXG4vLyBub2RlX21vZHVsZXMvYm9wcy9qb2luLmpzXG52YXIgcmVxdWlyZV9qb2luID0gX19jb21tb25KUyh7XG4gIFwibm9kZV9tb2R1bGVzL2JvcHMvam9pbi5qc1wiKGV4cG9ydHMyLCBtb2R1bGUyKSB7XG4gICAgdmFyIEJ1ZmZlcjIgPSByZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcjtcbiAgICBtb2R1bGUyLmV4cG9ydHMgPSBmdW5jdGlvbih0YXJnZXRzLCBoaW50KSB7XG4gICAgICByZXR1cm4gaGludCAhPT0gdm9pZCAwID8gQnVmZmVyMi5jb25jYXQodGFyZ2V0cywgaGludCkgOiBCdWZmZXIyLmNvbmNhdCh0YXJnZXRzKTtcbiAgICB9O1xuICB9XG59KTtcblxuLy8gbm9kZV9tb2R1bGVzL2JvcHMvY29weS5qc1xudmFyIHJlcXVpcmVfY29weSA9IF9fY29tbW9uSlMoe1xuICBcIm5vZGVfbW9kdWxlcy9ib3BzL2NvcHkuanNcIihleHBvcnRzMiwgbW9kdWxlMikge1xuICAgIG1vZHVsZTIuZXhwb3J0cyA9IGNvcHkyO1xuICAgIGZ1bmN0aW9uIGNvcHkyKHNvdXJjZSwgdGFyZ2V0LCB0YXJnZXRfc3RhcnQsIHNvdXJjZV9zdGFydCwgc291cmNlX2VuZCkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5jb3B5KHRhcmdldCwgdGFyZ2V0X3N0YXJ0LCBzb3VyY2Vfc3RhcnQsIHNvdXJjZV9lbmQpO1xuICAgIH1cbiAgfVxufSk7XG5cbi8vIG5vZGVfbW9kdWxlcy9ib3BzL2NyZWF0ZS5qc1xudmFyIHJlcXVpcmVfY3JlYXRlID0gX19jb21tb25KUyh7XG4gIFwibm9kZV9tb2R1bGVzL2JvcHMvY3JlYXRlLmpzXCIoZXhwb3J0czIsIG1vZHVsZTIpIHtcbiAgICB2YXIgQnVmZmVyMiA9IHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyO1xuICAgIHZhciB2ZXJzaW9uMiA9ICgocHJvY2VzcyB8fCB7fSkudmVyc2lvbiB8fCBcInYwLjAuMFwiKS5zbGljZSgxKS5zcGxpdChcIi5cIilbMF07XG4gICAgbW9kdWxlMi5leHBvcnRzID0gTnVtYmVyKHZlcnNpb24yKSA8IDYgPyBmdW5jdGlvbiBjcmVhdGUoc2l6ZSkge1xuICAgICAgcmV0dXJuIG5ldyBCdWZmZXIyKHNpemUpO1xuICAgIH0gOiBmdW5jdGlvbiBjcmVhdGUoc2l6ZSkge1xuICAgICAgcmV0dXJuIEJ1ZmZlcjIuYWxsb2Moc2l6ZSk7XG4gICAgfTtcbiAgfVxufSk7XG5cbi8vIG5vZGVfbW9kdWxlcy9ib3BzL3JlYWQuanNcbnZhciByZXF1aXJlX3JlYWQgPSBfX2NvbW1vbkpTKHtcbiAgXCJub2RlX21vZHVsZXMvYm9wcy9yZWFkLmpzXCIoZXhwb3J0czIsIG1vZHVsZTIpIHtcbiAgICB2YXIgcHJvdG8gPSB7fTtcbiAgICB2YXIgcmV4ID0gL3JlYWQuKy87XG4gICAgdmFyIGJ1aWxkRm47XG4gICAgYnVpbGRGbiA9IGZ1bmN0aW9uKGtleTIpIHtcbiAgICAgIHZhciBjb2RlID0gXCJyZXR1cm4gYnVmLlwiICsga2V5MiArIFwiKFwiICsgW1wiYVwiLCBcImJcIiwgXCJjXCJdLmpvaW4oXCIsXCIpICsgXCIpXCI7XG4gICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKFtcImJ1ZlwiLCBcImFcIiwgXCJiXCIsIFwiY1wiXSwgY29kZSk7XG4gICAgfTtcbiAgICBtb2R1bGUyLmV4cG9ydHMgPSBwcm90bztcbiAgICBmb3IgKGtleSBpbiBCdWZmZXIucHJvdG90eXBlKSB7XG4gICAgICBpZiAocmV4LnRlc3Qoa2V5KSkge1xuICAgICAgICBwcm90b1trZXldID0gYnVpbGRGbihrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIga2V5O1xuICB9XG59KTtcblxuLy8gbm9kZV9tb2R1bGVzL2JvcHMvd3JpdGUuanNcbnZhciByZXF1aXJlX3dyaXRlID0gX19jb21tb25KUyh7XG4gIFwibm9kZV9tb2R1bGVzL2JvcHMvd3JpdGUuanNcIihleHBvcnRzMiwgbW9kdWxlMikge1xuICAgIHZhciBCdWZmZXIyID0gcmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXI7XG4gICAgdmFyIHByb3RvID0ge307XG4gICAgdmFyIHJleCA9IC93cml0ZS4rLztcbiAgICB2YXIgYnVpbGRGbjtcbiAgICBidWlsZEZuID0gZnVuY3Rpb24oa2V5Mikge1xuICAgICAgdmFyIGNvZGUgPSBcInJldHVybiBidWYuXCIgKyBrZXkyICsgXCIoXCIgKyBbXCJhXCIsIFwiYlwiLCBcImNcIl0uam9pbihcIixcIikgKyBcIilcIjtcbiAgICAgIHJldHVybiBuZXcgRnVuY3Rpb24oW1wiYnVmXCIsIFwiYVwiLCBcImJcIiwgXCJjXCJdLCBjb2RlKTtcbiAgICB9O1xuICAgIG1vZHVsZTIuZXhwb3J0cyA9IHByb3RvO1xuICAgIGZvciAoa2V5IGluIEJ1ZmZlcjIucHJvdG90eXBlKSB7XG4gICAgICBpZiAocmV4LnRlc3Qoa2V5KSkge1xuICAgICAgICBwcm90b1trZXldID0gYnVpbGRGbihrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIga2V5O1xuICB9XG59KTtcblxuLy8gbm9kZV9tb2R1bGVzL2JvcHMvaW5kZXguanNcbnZhciByZXF1aXJlX2JvcHMgPSBfX2NvbW1vbkpTKHtcbiAgXCJub2RlX21vZHVsZXMvYm9wcy9pbmRleC5qc1wiKGV4cG9ydHMyLCBtb2R1bGUyKSB7XG4gICAgdmFyIHByb3RvID0ge307XG4gICAgbW9kdWxlMi5leHBvcnRzID0gcHJvdG87XG4gICAgcHJvdG8uZnJvbSA9IHJlcXVpcmVfZnJvbSgpO1xuICAgIHByb3RvLnRvID0gcmVxdWlyZV90bygpO1xuICAgIHByb3RvLmlzID0gcmVxdWlyZV9pcygpO1xuICAgIHByb3RvLnN1YmFycmF5ID0gcmVxdWlyZV9zdWJhcnJheSgpO1xuICAgIHByb3RvLmpvaW4gPSByZXF1aXJlX2pvaW4oKTtcbiAgICBwcm90by5jb3B5ID0gcmVxdWlyZV9jb3B5KCk7XG4gICAgcHJvdG8uY3JlYXRlID0gcmVxdWlyZV9jcmVhdGUoKTtcbiAgICBtaXgocmVxdWlyZV9yZWFkKCksIHByb3RvKTtcbiAgICBtaXgocmVxdWlyZV93cml0ZSgpLCBwcm90byk7XG4gICAgZnVuY3Rpb24gbWl4KGZyb20sIGludG8pIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgICAgIGludG9ba2V5XSA9IGZyb21ba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG4vLyBub2RlX21vZHVsZXMvQGFibHkvbXNncGFjay1qcy9tc2dwYWNrLmpzXG52YXIgcmVxdWlyZV9tc2dwYWNrID0gX19jb21tb25KUyh7XG4gIFwibm9kZV9tb2R1bGVzL0BhYmx5L21zZ3BhY2stanMvbXNncGFjay5qc1wiKGV4cG9ydHMyKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIGJvcHMgPSByZXF1aXJlX2JvcHMoKTtcbiAgICBleHBvcnRzMi5lbmNvZGUgPSBmdW5jdGlvbih2YWx1ZSwgc3BhcnNlKSB7XG4gICAgICB2YXIgc2l6ZSA9IHNpemVvZih2YWx1ZSwgc3BhcnNlKTtcbiAgICAgIGlmIChzaXplID09IDApXG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB2YXIgYnVmZmVyID0gYm9wcy5jcmVhdGUoc2l6ZSk7XG4gICAgICBlbmNvZGUyKHZhbHVlLCBidWZmZXIsIDAsIHNwYXJzZSk7XG4gICAgICByZXR1cm4gYnVmZmVyO1xuICAgIH07XG4gICAgZXhwb3J0czIuZGVjb2RlID0gZGVjb2RlMztcbiAgICB2YXIgU0hfTF8zMiA9ICgxIDw8IDE2KSAqICgxIDw8IDE2KTtcbiAgICB2YXIgU0hfUl8zMiA9IDEgLyBTSF9MXzMyO1xuICAgIGZ1bmN0aW9uIHJlYWRJbnQ2NEJFKGJ1Ziwgb2Zmc2V0KSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcbiAgICAgIHJldHVybiBidWYucmVhZEludDMyQkUob2Zmc2V0ICsgMCkgKiBTSF9MXzMyICsgYnVmLnJlYWRVSW50MzJCRShvZmZzZXQgKyA0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVhZFVJbnQ2NEJFKGJ1Ziwgb2Zmc2V0KSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQzMkJFKG9mZnNldCArIDApICogU0hfTF8zMiArIGJ1Zi5yZWFkVUludDMyQkUob2Zmc2V0ICsgNCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdyaXRlSW50NjRCRShidWYsIHZhbCwgb2Zmc2V0KSB7XG4gICAgICBpZiAodmFsIDwgOTIyMzM3MjAzNjg1NDc3NmUzKSB7XG4gICAgICAgIGJ1Zi53cml0ZUludDMyQkUoTWF0aC5mbG9vcih2YWwgKiBTSF9SXzMyKSwgb2Zmc2V0KTtcbiAgICAgICAgYnVmLndyaXRlSW50MzJCRSh2YWwgJiAtMSwgb2Zmc2V0ICsgNCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBidWYud3JpdGVVSW50MzJCRSgyMTQ3NDgzNjQ3LCBvZmZzZXQpO1xuICAgICAgICBidWYud3JpdGVVSW50MzJCRSg0Mjk0OTY3Mjk1LCBvZmZzZXQgKyA0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gd3JpdGVVSW50NjRCRShidWYsIHZhbCwgb2Zmc2V0KSB7XG4gICAgICBpZiAodmFsIDwgMTg0NDY3NDQwNzM3MDk1NTJlMykge1xuICAgICAgICBidWYud3JpdGVVSW50MzJCRShNYXRoLmZsb29yKHZhbCAqIFNIX1JfMzIpLCBvZmZzZXQpO1xuICAgICAgICBidWYud3JpdGVJbnQzMkJFKHZhbCAmIC0xLCBvZmZzZXQgKyA0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1Zi53cml0ZVVJbnQzMkJFKDQyOTQ5NjcyOTUsIG9mZnNldCk7XG4gICAgICAgIGJ1Zi53cml0ZVVJbnQzMkJFKDQyOTQ5NjcyOTUsIG9mZnNldCArIDQpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBEZWNvZGVyKGJ1ZmZlciwgb2Zmc2V0KSB7XG4gICAgICB0aGlzLm9mZnNldCA9IG9mZnNldCB8fCAwO1xuICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgICB0aGlzLmJ1ZmZlckxlbmd0aCA9IGJ1ZmZlci5sZW5ndGg7XG4gICAgfVxuICAgIERlY29kZXIucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uKGxlbmd0aCkge1xuICAgICAgaWYgKGxlbmd0aCAqIDIgPiB0aGlzLmJ1ZmZlckxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG1hbGZvcm1lZCBtZXNzYWdlcGFjayBkZXRlY3RlZDogYnVmZmVyIHNpemUgd2FzICR7dGhpcy5idWZmZXJMZW5ndGh9LCBidXQgcmVmZXJlbmNlZCBhIG1hcCBvZiBsZW5ndGggJHtsZW5ndGh9KWApO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0ge307XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSB0aGlzLnBhcnNlKCk7XG4gICAgICAgIHZhbHVlW2tleV0gPSB0aGlzLnBhcnNlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBEZWNvZGVyLnByb3RvdHlwZS5iaW4gPSBEZWNvZGVyLnByb3RvdHlwZS5idWYgPSBmdW5jdGlvbihsZW5ndGgpIHtcbiAgICAgIGlmIChsZW5ndGggPiB0aGlzLmJ1ZmZlckxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG1hbGZvcm1lZCBtZXNzYWdlcGFjayBkZXRlY3RlZDogYnVmZmVyIHNpemUgd2FzICR7dGhpcy5idWZmZXJMZW5ndGh9LCBidXQgcmVmZXJlbmNlZCBhIGJpbmFyeSBvZiBsZW5ndGggJHtsZW5ndGh9KWApO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYm9wcy5zdWJhcnJheSh0aGlzLmJ1ZmZlciwgdGhpcy5vZmZzZXQsIHRoaXMub2Zmc2V0ICsgbGVuZ3RoKTtcbiAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbmd0aDtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIERlY29kZXIucHJvdG90eXBlLnN0ciA9IGZ1bmN0aW9uKGxlbmd0aCkge1xuICAgICAgaWYgKGxlbmd0aCA+IHRoaXMuYnVmZmVyTGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgbWFsZm9ybWVkIG1lc3NhZ2VwYWNrIGRldGVjdGVkOiBidWZmZXIgc2l6ZSB3YXMgJHt0aGlzLmJ1ZmZlckxlbmd0aH0sIGJ1dCByZWZlcmVuY2VkIGEgc3RyaW5nIG9mIGxlbmd0aCAke2xlbmd0aH0pYCk7XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBib3BzLnRvKGJvcHMuc3ViYXJyYXkodGhpcy5idWZmZXIsIHRoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArIGxlbmd0aCkpO1xuICAgICAgdGhpcy5vZmZzZXQgKz0gbGVuZ3RoO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgRGVjb2Rlci5wcm90b3R5cGUuYXJyYXkgPSBmdW5jdGlvbihsZW5ndGgpIHtcbiAgICAgIGlmIChsZW5ndGggPiB0aGlzLmJ1ZmZlckxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG1hbGZvcm1lZCBtZXNzYWdlcGFjayBkZXRlY3RlZDogYnVmZmVyIHNpemUgd2FzICR7dGhpcy5idWZmZXJMZW5ndGh9LCBidXQgcmVmZXJlbmNlZCBhbiBhcnJheSBvZiBsZW5ndGggJHtsZW5ndGh9KWApO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlW2ldID0gdGhpcy5wYXJzZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgRGVjb2Rlci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0eXBlID0gdGhpcy5idWZmZXJbdGhpcy5vZmZzZXRdO1xuICAgICAgdmFyIHZhbHVlLCBsZW5ndGgsIGV4dFR5cGU7XG4gICAgICBpZiAodHlwZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBtZXNzYWdlcGFjayAocmVmZXJlbmNlZCBvZmZzZXQgaXMgb3V0c2lkZSBidWZmZXIpXCIpO1xuICAgICAgfVxuICAgICAgaWYgKCh0eXBlICYgMTI4KSA9PT0gMCkge1xuICAgICAgICB0aGlzLm9mZnNldCsrO1xuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgIH1cbiAgICAgIGlmICgodHlwZSAmIDI0MCkgPT09IDEyOCkge1xuICAgICAgICBsZW5ndGggPSB0eXBlICYgMTU7XG4gICAgICAgIHRoaXMub2Zmc2V0Kys7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcChsZW5ndGgpO1xuICAgICAgfVxuICAgICAgaWYgKCh0eXBlICYgMjQwKSA9PT0gMTQ0KSB7XG4gICAgICAgIGxlbmd0aCA9IHR5cGUgJiAxNTtcbiAgICAgICAgdGhpcy5vZmZzZXQrKztcbiAgICAgICAgcmV0dXJuIHRoaXMuYXJyYXkobGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIGlmICgodHlwZSAmIDIyNCkgPT09IDE2MCkge1xuICAgICAgICBsZW5ndGggPSB0eXBlICYgMzE7XG4gICAgICAgIHRoaXMub2Zmc2V0Kys7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cihsZW5ndGgpO1xuICAgICAgfVxuICAgICAgaWYgKCh0eXBlICYgMjI0KSA9PT0gMjI0KSB7XG4gICAgICAgIHZhbHVlID0gYm9wcy5yZWFkSW50OCh0aGlzLmJ1ZmZlciwgdGhpcy5vZmZzZXQpO1xuICAgICAgICB0aGlzLm9mZnNldCsrO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAxOTI6XG4gICAgICAgICAgdGhpcy5vZmZzZXQrKztcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgY2FzZSAxOTQ6XG4gICAgICAgICAgdGhpcy5vZmZzZXQrKztcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNhc2UgMTk1OlxuICAgICAgICAgIHRoaXMub2Zmc2V0Kys7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGNhc2UgMTk2OlxuICAgICAgICAgIGxlbmd0aCA9IGJvcHMucmVhZFVJbnQ4KHRoaXMuYnVmZmVyLCB0aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDI7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYmluKGxlbmd0aCk7XG4gICAgICAgIGNhc2UgMTk3OlxuICAgICAgICAgIGxlbmd0aCA9IGJvcHMucmVhZFVJbnQxNkJFKHRoaXMuYnVmZmVyLCB0aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDM7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYmluKGxlbmd0aCk7XG4gICAgICAgIGNhc2UgMTk4OlxuICAgICAgICAgIGxlbmd0aCA9IGJvcHMucmVhZFVJbnQzMkJFKHRoaXMuYnVmZmVyLCB0aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDU7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYmluKGxlbmd0aCk7XG4gICAgICAgIGNhc2UgMTk5OlxuICAgICAgICAgIGxlbmd0aCA9IGJvcHMucmVhZFVJbnQ4KHRoaXMuYnVmZmVyLCB0aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgIGV4dFR5cGUgPSBib3BzLnJlYWRVSW50OCh0aGlzLmJ1ZmZlciwgdGhpcy5vZmZzZXQgKyAyKTtcbiAgICAgICAgICB0aGlzLm9mZnNldCArPSAzO1xuICAgICAgICAgIHJldHVybiBbZXh0VHlwZSwgdGhpcy5iaW4obGVuZ3RoKV07XG4gICAgICAgIGNhc2UgMjAwOlxuICAgICAgICAgIGxlbmd0aCA9IGJvcHMucmVhZFVJbnQxNkJFKHRoaXMuYnVmZmVyLCB0aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgIGV4dFR5cGUgPSBib3BzLnJlYWRVSW50OCh0aGlzLmJ1ZmZlciwgdGhpcy5vZmZzZXQgKyAzKTtcbiAgICAgICAgICB0aGlzLm9mZnNldCArPSA0O1xuICAgICAgICAgIHJldHVybiBbZXh0VHlwZSwgdGhpcy5iaW4obGVuZ3RoKV07XG4gICAgICAgIGNhc2UgMjAxOlxuICAgICAgICAgIGxlbmd0aCA9IGJvcHMucmVhZFVJbnQzMkJFKHRoaXMuYnVmZmVyLCB0aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgIGV4dFR5cGUgPSBib3BzLnJlYWRVSW50OCh0aGlzLmJ1ZmZlciwgdGhpcy5vZmZzZXQgKyA1KTtcbiAgICAgICAgICB0aGlzLm9mZnNldCArPSA2O1xuICAgICAgICAgIHJldHVybiBbZXh0VHlwZSwgdGhpcy5iaW4obGVuZ3RoKV07XG4gICAgICAgIGNhc2UgMjAyOlxuICAgICAgICAgIHZhbHVlID0gYm9wcy5yZWFkRmxvYXRCRSh0aGlzLmJ1ZmZlciwgdGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICB0aGlzLm9mZnNldCArPSA1O1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgY2FzZSAyMDM6XG4gICAgICAgICAgdmFsdWUgPSBib3BzLnJlYWREb3VibGVCRSh0aGlzLmJ1ZmZlciwgdGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICB0aGlzLm9mZnNldCArPSA5O1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgY2FzZSAyMDQ6XG4gICAgICAgICAgdmFsdWUgPSB0aGlzLmJ1ZmZlclt0aGlzLm9mZnNldCArIDFdO1xuICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDI7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICBjYXNlIDIwNTpcbiAgICAgICAgICB2YWx1ZSA9IGJvcHMucmVhZFVJbnQxNkJFKHRoaXMuYnVmZmVyLCB0aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDM7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICBjYXNlIDIwNjpcbiAgICAgICAgICB2YWx1ZSA9IGJvcHMucmVhZFVJbnQzMkJFKHRoaXMuYnVmZmVyLCB0aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDU7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICBjYXNlIDIwNzpcbiAgICAgICAgICB2YWx1ZSA9IHJlYWRVSW50NjRCRSh0aGlzLmJ1ZmZlciwgdGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICB0aGlzLm9mZnNldCArPSA5O1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgY2FzZSAyMDg6XG4gICAgICAgICAgdmFsdWUgPSBib3BzLnJlYWRJbnQ4KHRoaXMuYnVmZmVyLCB0aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDI7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICBjYXNlIDIwOTpcbiAgICAgICAgICB2YWx1ZSA9IGJvcHMucmVhZEludDE2QkUodGhpcy5idWZmZXIsIHRoaXMub2Zmc2V0ICsgMSk7XG4gICAgICAgICAgdGhpcy5vZmZzZXQgKz0gMztcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIGNhc2UgMjEwOlxuICAgICAgICAgIHZhbHVlID0gYm9wcy5yZWFkSW50MzJCRSh0aGlzLmJ1ZmZlciwgdGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICB0aGlzLm9mZnNldCArPSA1O1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgY2FzZSAyMTE6XG4gICAgICAgICAgdmFsdWUgPSByZWFkSW50NjRCRSh0aGlzLmJ1ZmZlciwgdGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICB0aGlzLm9mZnNldCArPSA5O1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgY2FzZSAyMTI6XG4gICAgICAgICAgZXh0VHlwZSA9IGJvcHMucmVhZFVJbnQ4KHRoaXMuYnVmZmVyLCB0aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgIHZhbHVlID0gYm9wcy5yZWFkVUludDgodGhpcy5idWZmZXIsIHRoaXMub2Zmc2V0ICsgMik7XG4gICAgICAgICAgdGhpcy5vZmZzZXQgKz0gMztcbiAgICAgICAgICByZXR1cm4gZXh0VHlwZSA9PT0gMCAmJiB2YWx1ZSA9PT0gMCA/IHZvaWQgMCA6IFtleHRUeXBlLCB2YWx1ZV07XG4gICAgICAgIGNhc2UgMjEzOlxuICAgICAgICAgIGV4dFR5cGUgPSBib3BzLnJlYWRVSW50OCh0aGlzLmJ1ZmZlciwgdGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICB0aGlzLm9mZnNldCArPSAyO1xuICAgICAgICAgIHJldHVybiBbZXh0VHlwZSwgdGhpcy5iaW4oMildO1xuICAgICAgICBjYXNlIDIxNDpcbiAgICAgICAgICBleHRUeXBlID0gYm9wcy5yZWFkVUludDgodGhpcy5idWZmZXIsIHRoaXMub2Zmc2V0ICsgMSk7XG4gICAgICAgICAgdGhpcy5vZmZzZXQgKz0gMjtcbiAgICAgICAgICByZXR1cm4gW2V4dFR5cGUsIHRoaXMuYmluKDQpXTtcbiAgICAgICAgY2FzZSAyMTU6XG4gICAgICAgICAgZXh0VHlwZSA9IGJvcHMucmVhZFVJbnQ4KHRoaXMuYnVmZmVyLCB0aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDI7XG4gICAgICAgICAgcmV0dXJuIFtleHRUeXBlLCB0aGlzLmJpbig4KV07XG4gICAgICAgIGNhc2UgMjE2OlxuICAgICAgICAgIGV4dFR5cGUgPSBib3BzLnJlYWRVSW50OCh0aGlzLmJ1ZmZlciwgdGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICB0aGlzLm9mZnNldCArPSAyO1xuICAgICAgICAgIHJldHVybiBbZXh0VHlwZSwgdGhpcy5iaW4oMTYpXTtcbiAgICAgICAgY2FzZSAyMTc6XG4gICAgICAgICAgbGVuZ3RoID0gYm9wcy5yZWFkVUludDgodGhpcy5idWZmZXIsIHRoaXMub2Zmc2V0ICsgMSk7XG4gICAgICAgICAgdGhpcy5vZmZzZXQgKz0gMjtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zdHIobGVuZ3RoKTtcbiAgICAgICAgY2FzZSAyMTg6XG4gICAgICAgICAgbGVuZ3RoID0gYm9wcy5yZWFkVUludDE2QkUodGhpcy5idWZmZXIsIHRoaXMub2Zmc2V0ICsgMSk7XG4gICAgICAgICAgdGhpcy5vZmZzZXQgKz0gMztcbiAgICAgICAgICByZXR1cm4gdGhpcy5zdHIobGVuZ3RoKTtcbiAgICAgICAgY2FzZSAyMTk6XG4gICAgICAgICAgbGVuZ3RoID0gYm9wcy5yZWFkVUludDMyQkUodGhpcy5idWZmZXIsIHRoaXMub2Zmc2V0ICsgMSk7XG4gICAgICAgICAgdGhpcy5vZmZzZXQgKz0gNTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zdHIobGVuZ3RoKTtcbiAgICAgICAgY2FzZSAyMjA6XG4gICAgICAgICAgbGVuZ3RoID0gYm9wcy5yZWFkVUludDE2QkUodGhpcy5idWZmZXIsIHRoaXMub2Zmc2V0ICsgMSk7XG4gICAgICAgICAgdGhpcy5vZmZzZXQgKz0gMztcbiAgICAgICAgICByZXR1cm4gdGhpcy5hcnJheShsZW5ndGgpO1xuICAgICAgICBjYXNlIDIyMTpcbiAgICAgICAgICBsZW5ndGggPSBib3BzLnJlYWRVSW50MzJCRSh0aGlzLmJ1ZmZlciwgdGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICB0aGlzLm9mZnNldCArPSA1O1xuICAgICAgICAgIHJldHVybiB0aGlzLmFycmF5KGxlbmd0aCk7XG4gICAgICAgIGNhc2UgMjIyOlxuICAgICAgICAgIGxlbmd0aCA9IGJvcHMucmVhZFVJbnQxNkJFKHRoaXMuYnVmZmVyLCB0aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDM7XG4gICAgICAgICAgcmV0dXJuIHRoaXMubWFwKGxlbmd0aCk7XG4gICAgICAgIGNhc2UgMjIzOlxuICAgICAgICAgIGxlbmd0aCA9IGJvcHMucmVhZFVJbnQzMkJFKHRoaXMuYnVmZmVyLCB0aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDU7XG4gICAgICAgICAgcmV0dXJuIHRoaXMubWFwKGxlbmd0aCk7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHR5cGUgMHhcIiArIHR5cGUudG9TdHJpbmcoMTYpKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGRlY29kZTMoYnVmZmVyKSB7XG4gICAgICB2YXIgZGVjb2RlciA9IG5ldyBEZWNvZGVyKGJ1ZmZlcik7XG4gICAgICB2YXIgdmFsdWUgPSBkZWNvZGVyLnBhcnNlKCk7XG4gICAgICBpZiAoZGVjb2Rlci5vZmZzZXQgIT09IGJ1ZmZlci5sZW5ndGgpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihidWZmZXIubGVuZ3RoIC0gZGVjb2Rlci5vZmZzZXQgKyBcIiB0cmFpbGluZyBieXRlc1wiKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZW5jb2RlYWJsZUtleXModmFsdWUsIHNwYXJzZSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHZhbHVlKS5maWx0ZXIoZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgdmFsID0gdmFsdWVbZV0sIHR5cGUgPSB0eXBlb2YgdmFsO1xuICAgICAgICByZXR1cm4gKCFzcGFyc2UgfHwgdmFsICE9PSB2b2lkIDAgJiYgdmFsICE9PSBudWxsKSAmJiAoXCJmdW5jdGlvblwiICE9PSB0eXBlIHx8ICEhdmFsLnRvSlNPTik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZW5jb2RlMih2YWx1ZSwgYnVmZmVyLCBvZmZzZXQsIHNwYXJzZSwgaXNNYXBFbGVtZW50KSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHZhciBsZW5ndGgsIHNpemU7XG4gICAgICBpZiAodHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB2YWx1ZSA9IGJvcHMuZnJvbSh2YWx1ZSk7XG4gICAgICAgIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbmd0aCA8IDMyKSB7XG4gICAgICAgICAgYnVmZmVyW29mZnNldF0gPSBsZW5ndGggfCAxNjA7XG4gICAgICAgICAgYm9wcy5jb3B5KHZhbHVlLCBidWZmZXIsIG9mZnNldCArIDEpO1xuICAgICAgICAgIHJldHVybiAxICsgbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsZW5ndGggPCAyNTYpIHtcbiAgICAgICAgICBidWZmZXJbb2Zmc2V0XSA9IDIxNztcbiAgICAgICAgICBib3BzLndyaXRlVUludDgoYnVmZmVyLCBsZW5ndGgsIG9mZnNldCArIDEpO1xuICAgICAgICAgIGJvcHMuY29weSh2YWx1ZSwgYnVmZmVyLCBvZmZzZXQgKyAyKTtcbiAgICAgICAgICByZXR1cm4gMiArIGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVuZ3RoIDwgNjU1MzYpIHtcbiAgICAgICAgICBidWZmZXJbb2Zmc2V0XSA9IDIxODtcbiAgICAgICAgICBib3BzLndyaXRlVUludDE2QkUoYnVmZmVyLCBsZW5ndGgsIG9mZnNldCArIDEpO1xuICAgICAgICAgIGJvcHMuY29weSh2YWx1ZSwgYnVmZmVyLCBvZmZzZXQgKyAzKTtcbiAgICAgICAgICByZXR1cm4gMyArIGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVuZ3RoIDwgNDI5NDk2NzI5Nikge1xuICAgICAgICAgIGJ1ZmZlcltvZmZzZXRdID0gMjE5O1xuICAgICAgICAgIGJvcHMud3JpdGVVSW50MzJCRShidWZmZXIsIGxlbmd0aCwgb2Zmc2V0ICsgMSk7XG4gICAgICAgICAgYm9wcy5jb3B5KHZhbHVlLCBidWZmZXIsIG9mZnNldCArIDUpO1xuICAgICAgICAgIHJldHVybiA1ICsgbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYm9wcy5pcyh2YWx1ZSkpIHtcbiAgICAgICAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoIDwgMjU2KSB7XG4gICAgICAgICAgYnVmZmVyW29mZnNldF0gPSAxOTY7XG4gICAgICAgICAgYm9wcy53cml0ZVVJbnQ4KGJ1ZmZlciwgbGVuZ3RoLCBvZmZzZXQgKyAxKTtcbiAgICAgICAgICBib3BzLmNvcHkodmFsdWUsIGJ1ZmZlciwgb2Zmc2V0ICsgMik7XG4gICAgICAgICAgcmV0dXJuIDIgKyBsZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlbmd0aCA8IDY1NTM2KSB7XG4gICAgICAgICAgYnVmZmVyW29mZnNldF0gPSAxOTc7XG4gICAgICAgICAgYm9wcy53cml0ZVVJbnQxNkJFKGJ1ZmZlciwgbGVuZ3RoLCBvZmZzZXQgKyAxKTtcbiAgICAgICAgICBib3BzLmNvcHkodmFsdWUsIGJ1ZmZlciwgb2Zmc2V0ICsgMyk7XG4gICAgICAgICAgcmV0dXJuIDMgKyBsZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlbmd0aCA8IDQyOTQ5NjcyOTYpIHtcbiAgICAgICAgICBidWZmZXJbb2Zmc2V0XSA9IDE5ODtcbiAgICAgICAgICBib3BzLndyaXRlVUludDMyQkUoYnVmZmVyLCBsZW5ndGgsIG9mZnNldCArIDEpO1xuICAgICAgICAgIGJvcHMuY29weSh2YWx1ZSwgYnVmZmVyLCBvZmZzZXQgKyA1KTtcbiAgICAgICAgICByZXR1cm4gNSArIGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHR5cGUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgaWYgKE1hdGguZmxvb3IodmFsdWUpICE9PSB2YWx1ZSkge1xuICAgICAgICAgIGJ1ZmZlcltvZmZzZXRdID0gMjAzO1xuICAgICAgICAgIGJvcHMud3JpdGVEb3VibGVCRShidWZmZXIsIHZhbHVlLCBvZmZzZXQgKyAxKTtcbiAgICAgICAgICByZXR1cm4gOTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPj0gMCkge1xuICAgICAgICAgIGlmICh2YWx1ZSA8IDEyOCkge1xuICAgICAgICAgICAgYnVmZmVyW29mZnNldF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodmFsdWUgPCAyNTYpIHtcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXRdID0gMjA0O1xuICAgICAgICAgICAgYnVmZmVyW29mZnNldCArIDFdID0gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHZhbHVlIDwgNjU1MzYpIHtcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXRdID0gMjA1O1xuICAgICAgICAgICAgYm9wcy53cml0ZVVJbnQxNkJFKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCArIDEpO1xuICAgICAgICAgICAgcmV0dXJuIDM7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh2YWx1ZSA8IDQyOTQ5NjcyOTYpIHtcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXRdID0gMjA2O1xuICAgICAgICAgICAgYm9wcy53cml0ZVVJbnQzMkJFKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCArIDEpO1xuICAgICAgICAgICAgcmV0dXJuIDU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh2YWx1ZSA8IDE4NDQ2NzQ0MDczNzA5NTUyZTMpIHtcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXRdID0gMjA3O1xuICAgICAgICAgICAgd3JpdGVVSW50NjRCRShidWZmZXIsIHZhbHVlLCBvZmZzZXQgKyAxKTtcbiAgICAgICAgICAgIHJldHVybiA5O1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOdW1iZXIgdG9vIGJpZyAweFwiICsgdmFsdWUudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPj0gLTMyKSB7XG4gICAgICAgICAgYm9wcy53cml0ZUludDgoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0KTtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPj0gLTEyOCkge1xuICAgICAgICAgIGJ1ZmZlcltvZmZzZXRdID0gMjA4O1xuICAgICAgICAgIGJvcHMud3JpdGVJbnQ4KGJ1ZmZlciwgdmFsdWUsIG9mZnNldCArIDEpO1xuICAgICAgICAgIHJldHVybiAyO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSA+PSAtMzI3NjgpIHtcbiAgICAgICAgICBidWZmZXJbb2Zmc2V0XSA9IDIwOTtcbiAgICAgICAgICBib3BzLndyaXRlSW50MTZCRShidWZmZXIsIHZhbHVlLCBvZmZzZXQgKyAxKTtcbiAgICAgICAgICByZXR1cm4gMztcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPj0gLTIxNDc0ODM2NDgpIHtcbiAgICAgICAgICBidWZmZXJbb2Zmc2V0XSA9IDIxMDtcbiAgICAgICAgICBib3BzLndyaXRlSW50MzJCRShidWZmZXIsIHZhbHVlLCBvZmZzZXQgKyAxKTtcbiAgICAgICAgICByZXR1cm4gNTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPj0gLTkyMjMzNzIwMzY4NTQ3NzZlMykge1xuICAgICAgICAgIGJ1ZmZlcltvZmZzZXRdID0gMjExO1xuICAgICAgICAgIHdyaXRlSW50NjRCRShidWZmZXIsIHZhbHVlLCBvZmZzZXQgKyAxKTtcbiAgICAgICAgICByZXR1cm4gOTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOdW1iZXIgdG9vIHNtYWxsIC0weFwiICsgdmFsdWUudG9TdHJpbmcoMTYpLnN1YnN0cigxKSk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAoc3BhcnNlICYmIGlzTWFwRWxlbWVudClcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgYnVmZmVyW29mZnNldF0gPSAyMTI7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQgKyAxXSA9IDA7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQgKyAyXSA9IDA7XG4gICAgICAgIHJldHVybiAzO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIGlmIChzcGFyc2UgJiYgaXNNYXBFbGVtZW50KVxuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICBidWZmZXJbb2Zmc2V0XSA9IDE5MjtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgICBpZiAodHlwZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgYnVmZmVyW29mZnNldF0gPSB2YWx1ZSA/IDE5NSA6IDE5NDtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUudG9KU09OKVxuICAgICAgICByZXR1cm4gZW5jb2RlMih2YWx1ZS50b0pTT04oKSwgYnVmZmVyLCBvZmZzZXQsIHNwYXJzZSk7XG4gICAgICBpZiAodHlwZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBzaXplID0gMDtcbiAgICAgICAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgICAgICAgaWYgKGlzQXJyYXkpIHtcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGtleXMgPSBlbmNvZGVhYmxlS2V5cyh2YWx1ZSwgc3BhcnNlKTtcbiAgICAgICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVuZ3RoIDwgMTYpIHtcbiAgICAgICAgICBidWZmZXJbb2Zmc2V0XSA9IGxlbmd0aCB8IChpc0FycmF5ID8gMTQ0IDogMTI4KTtcbiAgICAgICAgICBzaXplID0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChsZW5ndGggPCA2NTUzNikge1xuICAgICAgICAgIGJ1ZmZlcltvZmZzZXRdID0gaXNBcnJheSA/IDIyMCA6IDIyMjtcbiAgICAgICAgICBib3BzLndyaXRlVUludDE2QkUoYnVmZmVyLCBsZW5ndGgsIG9mZnNldCArIDEpO1xuICAgICAgICAgIHNpemUgPSAzO1xuICAgICAgICB9IGVsc2UgaWYgKGxlbmd0aCA8IDQyOTQ5NjcyOTYpIHtcbiAgICAgICAgICBidWZmZXJbb2Zmc2V0XSA9IGlzQXJyYXkgPyAyMjEgOiAyMjM7XG4gICAgICAgICAgYm9wcy53cml0ZVVJbnQzMkJFKGJ1ZmZlciwgbGVuZ3RoLCBvZmZzZXQgKyAxKTtcbiAgICAgICAgICBzaXplID0gNTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnJheSkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHNpemUgKz0gZW5jb2RlMih2YWx1ZVtpXSwgYnVmZmVyLCBvZmZzZXQgKyBzaXplLCBzcGFyc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIHNpemUgKz0gZW5jb2RlMihrZXksIGJ1ZmZlciwgb2Zmc2V0ICsgc2l6ZSk7XG4gICAgICAgICAgICBzaXplICs9IGVuY29kZTIodmFsdWVba2V5XSwgYnVmZmVyLCBvZmZzZXQgKyBzaXplLCBzcGFyc2UsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHR5cGUgXCIgKyB0eXBlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2l6ZW9mKHZhbHVlLCBzcGFyc2UsIGlzTWFwRWxlbWVudCkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICB2YXIgbGVuZ3RoLCBzaXplO1xuICAgICAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgbGVuZ3RoID0gYm9wcy5mcm9tKHZhbHVlKS5sZW5ndGg7XG4gICAgICAgIGlmIChsZW5ndGggPCAzMikge1xuICAgICAgICAgIHJldHVybiAxICsgbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsZW5ndGggPCAyNTYpIHtcbiAgICAgICAgICByZXR1cm4gMiArIGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVuZ3RoIDwgNjU1MzYpIHtcbiAgICAgICAgICByZXR1cm4gMyArIGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVuZ3RoIDwgNDI5NDk2NzI5Nikge1xuICAgICAgICAgIHJldHVybiA1ICsgbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYm9wcy5pcyh2YWx1ZSkpIHtcbiAgICAgICAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoIDwgMjU2KSB7XG4gICAgICAgICAgcmV0dXJuIDIgKyBsZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlbmd0aCA8IDY1NTM2KSB7XG4gICAgICAgICAgcmV0dXJuIDMgKyBsZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlbmd0aCA8IDQyOTQ5NjcyOTYpIHtcbiAgICAgICAgICByZXR1cm4gNSArIGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHR5cGUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgaWYgKE1hdGguZmxvb3IodmFsdWUpICE9PSB2YWx1ZSlcbiAgICAgICAgICByZXR1cm4gOTtcbiAgICAgICAgaWYgKHZhbHVlID49IDApIHtcbiAgICAgICAgICBpZiAodmFsdWUgPCAxMjgpXG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICBpZiAodmFsdWUgPCAyNTYpXG4gICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgICBpZiAodmFsdWUgPCA2NTUzNilcbiAgICAgICAgICAgIHJldHVybiAzO1xuICAgICAgICAgIGlmICh2YWx1ZSA8IDQyOTQ5NjcyOTYpXG4gICAgICAgICAgICByZXR1cm4gNTtcbiAgICAgICAgICBpZiAodmFsdWUgPCAxODQ0Njc0NDA3MzcwOTU1MmUzKVxuICAgICAgICAgICAgcmV0dXJuIDk7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTnVtYmVyIHRvbyBiaWcgMHhcIiArIHZhbHVlLnRvU3RyaW5nKDE2KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlID49IC0zMilcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgaWYgKHZhbHVlID49IC0xMjgpXG4gICAgICAgICAgcmV0dXJuIDI7XG4gICAgICAgIGlmICh2YWx1ZSA+PSAtMzI3NjgpXG4gICAgICAgICAgcmV0dXJuIDM7XG4gICAgICAgIGlmICh2YWx1ZSA+PSAtMjE0NzQ4MzY0OClcbiAgICAgICAgICByZXR1cm4gNTtcbiAgICAgICAgaWYgKHZhbHVlID49IC05MjIzMzcyMDM2ODU0Nzc2ZTMpXG4gICAgICAgICAgcmV0dXJuIDk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk51bWJlciB0b28gc21hbGwgLTB4XCIgKyB2YWx1ZS50b1N0cmluZygxNikuc3Vic3RyKDEpKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlID09PSBcImJvb2xlYW5cIilcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICBpZiAodmFsdWUgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBzcGFyc2UgJiYgaXNNYXBFbGVtZW50ID8gMCA6IDE7XG4gICAgICBpZiAodmFsdWUgPT09IHZvaWQgMClcbiAgICAgICAgcmV0dXJuIHNwYXJzZSAmJiBpc01hcEVsZW1lbnQgPyAwIDogMztcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB2YWx1ZS50b0pTT04pXG4gICAgICAgIHJldHVybiBzaXplb2YodmFsdWUudG9KU09OKCksIHNwYXJzZSk7XG4gICAgICBpZiAodHlwZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBzaXplID0gMDtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHNpemUgKz0gc2l6ZW9mKHZhbHVlW2ldLCBzcGFyc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIga2V5cyA9IGVuY29kZWFibGVLZXlzKHZhbHVlLCBzcGFyc2UpO1xuICAgICAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgc2l6ZSArPSBzaXplb2Yoa2V5KSArIHNpemVvZih2YWx1ZVtrZXldLCBzcGFyc2UsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobGVuZ3RoIDwgMTYpIHtcbiAgICAgICAgICByZXR1cm4gMSArIHNpemU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlbmd0aCA8IDY1NTM2KSB7XG4gICAgICAgICAgcmV0dXJuIDMgKyBzaXplO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsZW5ndGggPCA0Mjk0OTY3Mjk2KSB7XG4gICAgICAgICAgcmV0dXJuIDUgKyBzaXplO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFycmF5IG9yIG9iamVjdCB0b28gbG9uZyAweFwiICsgbGVuZ3RoLnRvU3RyaW5nKDE2KSk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZSA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gdHlwZSBcIiArIHR5cGUpO1xuICAgIH1cbiAgfVxufSk7XG5cbi8vIHNyYy9jb21tb24vcGxhdGZvcm0udHNcbnZhciBQbGF0Zm9ybSA9IGNsYXNzIHtcbn07XG5cbi8vIHNyYy9jb21tb24vbGliL3V0aWwvbG9nZ2VyLnRzXG52YXIgZ2xvYmFsT2JqZWN0ID0gdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiBzZWxmO1xuZnVuY3Rpb24gcGFkKHRpbWVTZWdtZW50LCB0aHJlZSkge1xuICByZXR1cm4gYCR7dGltZVNlZ21lbnR9YC5wYWRTdGFydCh0aHJlZSA/IDMgOiAyLCBcIjBcIik7XG59XG5mdW5jdGlvbiBnZXRIYW5kbGVyKGxvZ2dlcikge1xuICByZXR1cm4gUGxhdGZvcm0uQ29uZmlnLmxvZ1RpbWVzdGFtcHMgPyBmdW5jdGlvbihtc2cpIHtcbiAgICBjb25zdCB0aW1lID0gLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCk7XG4gICAgbG9nZ2VyKFxuICAgICAgcGFkKHRpbWUuZ2V0SG91cnMoKSkgKyBcIjpcIiArIHBhZCh0aW1lLmdldE1pbnV0ZXMoKSkgKyBcIjpcIiArIHBhZCh0aW1lLmdldFNlY29uZHMoKSkgKyBcIi5cIiArIHBhZCh0aW1lLmdldE1pbGxpc2Vjb25kcygpLCAxKSArIFwiIFwiICsgbXNnXG4gICAgKTtcbiAgfSA6IGZ1bmN0aW9uKG1zZykge1xuICAgIGxvZ2dlcihtc2cpO1xuICB9O1xufVxudmFyIGdldERlZmF1bHRMb2dnZXJzID0gKCkgPT4ge1xuICB2YXIgX2EyO1xuICBsZXQgY29uc29sZUxvZ2dlcjtcbiAgbGV0IGVycm9yTG9nZ2VyO1xuICBpZiAodHlwZW9mICgoX2EyID0gZ2xvYmFsT2JqZWN0ID09IG51bGwgPyB2b2lkIDAgOiBnbG9iYWxPYmplY3QuY29uc29sZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5sb2cpID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjb25zb2xlTG9nZ2VyID0gZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJncyk7XG4gICAgfTtcbiAgICBlcnJvckxvZ2dlciA9IGNvbnNvbGUud2FybiA/IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgIGNvbnNvbGUud2Fybi5hcHBseShjb25zb2xlLCBhcmdzKTtcbiAgICB9IDogY29uc29sZUxvZ2dlcjtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlTG9nZ2VyID0gZXJyb3JMb2dnZXIgPSBmdW5jdGlvbigpIHtcbiAgICB9O1xuICB9XG4gIHJldHVybiBbY29uc29sZUxvZ2dlciwgZXJyb3JMb2dnZXJdLm1hcChnZXRIYW5kbGVyKTtcbn07XG52YXIgX0xvZ2dlciA9IGNsYXNzIF9Mb2dnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRlcHJlY2F0ZWQgPSAoZGVzY3JpcHRpb24sIG1zZykgPT4ge1xuICAgICAgdGhpcy5kZXByZWNhdGlvbldhcm5pbmcoYCR7ZGVzY3JpcHRpb259IGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uLiAke21zZ31gKTtcbiAgICB9O1xuICAgIC8qIFdoZXJlIGEgbG9nZ2luZyBvcGVyYXRpb24gaXMgZXhwZW5zaXZlLCBzdWNoIGFzIHNlcmlhbGlzYXRpb24gb2YgZGF0YSwgdXNlIHNob3VsZExvZyB3aWxsIHByZXZlbnRcbiAgICAgIHRoZSBvYmplY3QgYmVpbmcgc2VyaWFsaXNlZCBpZiB0aGUgbG9nIGxldmVsIHdpbGwgbm90IG91dHB1dCB0aGUgbWVzc2FnZSAqL1xuICAgIHRoaXMuc2hvdWxkTG9nID0gKGxldmVsKSA9PiB7XG4gICAgICByZXR1cm4gbGV2ZWwgPD0gdGhpcy5sb2dMZXZlbDtcbiAgICB9O1xuICAgIHRoaXMuc2V0TG9nID0gKGxldmVsLCBoYW5kbGVyKSA9PiB7XG4gICAgICBpZiAobGV2ZWwgIT09IHZvaWQgMClcbiAgICAgICAgdGhpcy5sb2dMZXZlbCA9IGxldmVsO1xuICAgICAgaWYgKGhhbmRsZXIgIT09IHZvaWQgMClcbiAgICAgICAgdGhpcy5sb2dIYW5kbGVyID0gdGhpcy5sb2dFcnJvckhhbmRsZXIgPSBoYW5kbGVyO1xuICAgIH07XG4gICAgdGhpcy5sb2dMZXZlbCA9IF9Mb2dnZXIuZGVmYXVsdExvZ0xldmVsO1xuICAgIHRoaXMubG9nSGFuZGxlciA9IF9Mb2dnZXIuZGVmYXVsdExvZ0hhbmRsZXI7XG4gICAgdGhpcy5sb2dFcnJvckhhbmRsZXIgPSBfTG9nZ2VyLmRlZmF1bHRMb2dFcnJvckhhbmRsZXI7XG4gIH1cbiAgc3RhdGljIGluaXRMb2dIYW5kbGVycygpIHtcbiAgICBjb25zdCBbbG9nSGFuZGxlciwgbG9nRXJyb3JIYW5kbGVyXSA9IGdldERlZmF1bHRMb2dnZXJzKCk7XG4gICAgdGhpcy5kZWZhdWx0TG9nSGFuZGxlciA9IGxvZ0hhbmRsZXI7XG4gICAgdGhpcy5kZWZhdWx0TG9nRXJyb3JIYW5kbGVyID0gbG9nRXJyb3JIYW5kbGVyO1xuICAgIHRoaXMuZGVmYXVsdExvZ2dlciA9IG5ldyBfTG9nZ2VyKCk7XG4gIH1cbiAgLyoqXG4gICAqIENhbGxzIHRvIHRoaXMgbWV0aG9kIGFyZSBuZXZlciBzdHJpcHBlZCBieSB0aGUgYHN0cmlwTG9nc2AgZXNidWlsZCBwbHVnaW4uIFVzZSBpdCBmb3IgbG9nIHN0YXRlbWVudHMgdGhhdCB5b3Ugd2lzaCB0byBhbHdheXMgYmUgaW5jbHVkZWQgaW4gdGhlIG1vZHVsYXIgdmFyaWFudCBvZiB0aGUgU0RLLlxuICAgKi9cbiAgc3RhdGljIGxvZ0FjdGlvbk5vU3RyaXAobG9nZ2VyLCBsZXZlbCwgYWN0aW9uLCBtZXNzYWdlKSB7XG4gICAgbG9nZ2VyLmxvZ0FjdGlvbihsZXZlbCwgYWN0aW9uLCBtZXNzYWdlKTtcbiAgfVxuICBsb2dBY3Rpb24obGV2ZWwsIGFjdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmICh0aGlzLnNob3VsZExvZyhsZXZlbCkpIHtcbiAgICAgIChsZXZlbCA9PT0gMSAvKiBFcnJvciAqLyA/IHRoaXMubG9nRXJyb3JIYW5kbGVyIDogdGhpcy5sb2dIYW5kbGVyKShcIkFibHk6IFwiICsgYWN0aW9uICsgXCI6IFwiICsgbWVzc2FnZSwgbGV2ZWwpO1xuICAgIH1cbiAgfVxuICByZW5hbWVkQ2xpZW50T3B0aW9uKG9sZE5hbWUsIG5ld05hbWUpIHtcbiAgICB0aGlzLmRlcHJlY2F0aW9uV2FybmluZyhcbiAgICAgIGBUaGUgXFxgJHtvbGROYW1lfVxcYCBjbGllbnQgb3B0aW9uIGhhcyBiZWVuIHJlbmFtZWQgdG8gXFxgJHtuZXdOYW1lfVxcYC4gUGxlYXNlIHVwZGF0ZSB5b3VyIGNvZGUgdG8gdXNlIFxcYCR7bmV3TmFtZX1cXGAgaW5zdGVhZC4gXFxgJHtvbGROYW1lfVxcYCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbi5gXG4gICAgKTtcbiAgfVxuICByZW5hbWVkTWV0aG9kKGNsYXNzTmFtZSwgb2xkTmFtZSwgbmV3TmFtZSkge1xuICAgIHRoaXMuZGVwcmVjYXRpb25XYXJuaW5nKFxuICAgICAgYFxcYCR7Y2xhc3NOYW1lfVxcYFxcdTIwMTlzIFxcYCR7b2xkTmFtZX1cXGAgbWV0aG9kIGhhcyBiZWVuIHJlbmFtZWQgdG8gXFxgJHtuZXdOYW1lfVxcYC4gUGxlYXNlIHVwZGF0ZSB5b3VyIGNvZGUgdG8gdXNlIFxcYCR7bmV3TmFtZX1cXGAgaW5zdGVhZC4gXFxgJHtvbGROYW1lfVxcYCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbi5gXG4gICAgKTtcbiAgfVxuICBkZXByZWNhdGlvbldhcm5pbmcobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLnNob3VsZExvZygxIC8qIEVycm9yICovKSkge1xuICAgICAgdGhpcy5sb2dFcnJvckhhbmRsZXIoYEFibHk6IERlcHJlY2F0aW9uIHdhcm5pbmcgLSAke21lc3NhZ2V9YCwgMSAvKiBFcnJvciAqLyk7XG4gICAgfVxuICB9XG59O1xuX0xvZ2dlci5kZWZhdWx0TG9nTGV2ZWwgPSAxIC8qIEVycm9yICovO1xuLy8gcHVibGljIGNvbnN0YW50c1xuX0xvZ2dlci5MT0dfTk9ORSA9IDAgLyogTm9uZSAqLztcbl9Mb2dnZXIuTE9HX0VSUk9SID0gMSAvKiBFcnJvciAqLztcbl9Mb2dnZXIuTE9HX01BSk9SID0gMiAvKiBNYWpvciAqLztcbl9Mb2dnZXIuTE9HX01JTk9SID0gMyAvKiBNaW5vciAqLztcbl9Mb2dnZXIuTE9HX01JQ1JPID0gNCAvKiBNaWNybyAqLztcbi8qIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb25zICovXG4vKipcbiAqIEluIHRoZSBtb2R1bGFyIHZhcmlhbnQgb2YgdGhlIFNESywgdGhlIGBzdHJpcExvZ3NgIGVzYnVpbGQgcGx1Z2luIHN0cmlwcyBvdXQgYWxsIGNhbGxzIHRvIHRoaXMgbWV0aG9kICh3aGVuIGludm9rZWQgYXMgYExvZ2dlci5sb2dBY3Rpb24oLi4uKWApIGV4Y2VwdCB3aGVuIGNhbGxlZCB3aXRoIGxldmVsIGBMb2dnZXIuTE9HX0VSUk9SYC4gSWYgeW91IHdpc2ggZm9yIGEgbG9nIHN0YXRlbWVudCB0byBuZXZlciBiZSBzdHJpcHBlZCwgdXNlIHRoZSB7QGxpbmsgbG9nQWN0aW9uTm9TdHJpcH0gbWV0aG9kIGluc3RlYWQuXG4gKlxuICogVGhlIGFmb3JlbWVudGlvbmVkIHBsdWdpbiBleHBlY3RzIGBsZXZlbGAgdG8gYmUgYW4gZXhwcmVzc2lvbiBvZiB0aGUgZm9ybSBgTG9nZ2VyLkxPR18qYDsgdGhhdCBpcywgeW91IGNhbuKAmXQgZHluYW1pY2FsbHkgc3BlY2lmeSB0aGUgbG9nIGxldmVsLlxuICovXG5fTG9nZ2VyLmxvZ0FjdGlvbiA9IChsb2dnZXIsIGxldmVsLCBhY3Rpb24sIG1lc3NhZ2UpID0+IHtcbiAgX0xvZ2dlci5sb2dBY3Rpb25Ob1N0cmlwKGxvZ2dlciwgbGV2ZWwsIGFjdGlvbiwgbWVzc2FnZSk7XG59O1xudmFyIExvZ2dlciA9IF9Mb2dnZXI7XG52YXIgbG9nZ2VyX2RlZmF1bHQgPSBMb2dnZXI7XG5cbi8vIHNyYy9jb21tb24vbGliL3V0aWwvdXRpbHMudHNcbnZhciB1dGlsc19leHBvcnRzID0ge307XG5fX2V4cG9ydCh1dGlsc19leHBvcnRzLCB7XG4gIEZvcm1hdDogKCkgPT4gRm9ybWF0LFxuICBhbGxTYW1lOiAoKSA9PiBhbGxTYW1lLFxuICBhbGxUb0xvd2VyQ2FzZTogKCkgPT4gYWxsVG9Mb3dlckNhc2UsXG4gIGFsbFRvVXBwZXJDYXNlOiAoKSA9PiBhbGxUb1VwcGVyQ2FzZSxcbiAgYXJyQ2hvb3NlTjogKCkgPT4gYXJyQ2hvb3NlTixcbiAgYXJyRGVsZXRlVmFsdWU6ICgpID0+IGFyckRlbGV0ZVZhbHVlLFxuICBhcnJFcXVhbHM6ICgpID0+IGFyckVxdWFscyxcbiAgYXJySW50ZXJzZWN0OiAoKSA9PiBhcnJJbnRlcnNlY3QsXG4gIGFyckludGVyc2VjdE9iOiAoKSA9PiBhcnJJbnRlcnNlY3RPYixcbiAgYXJyUG9wUmFuZG9tRWxlbWVudDogKCkgPT4gYXJyUG9wUmFuZG9tRWxlbWVudCxcbiAgYXJyU3VidHJhY3Q6ICgpID0+IGFyclN1YnRyYWN0LFxuICBhcnJXaXRob3V0VmFsdWU6ICgpID0+IGFycldpdGhvdXRWYWx1ZSxcbiAgY2hlYXBSYW5kU3RyOiAoKSA9PiBjaGVhcFJhbmRTdHIsXG4gIGNvbnRhaW5zVmFsdWU6ICgpID0+IGNvbnRhaW5zVmFsdWUsXG4gIGNvcHk6ICgpID0+IGNvcHksXG4gIGNyZWF0ZU1pc3NpbmdQbHVnaW5FcnJvcjogKCkgPT4gY3JlYXRlTWlzc2luZ1BsdWdpbkVycm9yLFxuICBkYXRhU2l6ZUJ5dGVzOiAoKSA9PiBkYXRhU2l6ZUJ5dGVzLFxuICBkZWNvZGVCb2R5OiAoKSA9PiBkZWNvZGVCb2R5LFxuICBlbmNvZGVCb2R5OiAoKSA9PiBlbmNvZGVCb2R5LFxuICBlbnN1cmVBcnJheTogKCkgPT4gZW5zdXJlQXJyYXksXG4gIGZvckluT3duTm9uTnVsbFByb3BlcnRpZXM6ICgpID0+IGZvckluT3duTm9uTnVsbFByb3BlcnRpZXMsXG4gIGdldEJhY2tvZmZDb2VmZmljaWVudDogKCkgPT4gZ2V0QmFja29mZkNvZWZmaWNpZW50LFxuICBnZXRHbG9iYWxPYmplY3Q6ICgpID0+IGdldEdsb2JhbE9iamVjdCxcbiAgZ2V0Sml0dGVyQ29lZmZpY2llbnQ6ICgpID0+IGdldEppdHRlckNvZWZmaWNpZW50LFxuICBnZXRSZXRyeVRpbWU6ICgpID0+IGdldFJldHJ5VGltZSxcbiAgaW5oZXJpdHM6ICgpID0+IGluaGVyaXRzLFxuICBpbnNwZWN0Qm9keTogKCkgPT4gaW5zcGVjdEJvZHksXG4gIGluc3BlY3RFcnJvcjogKCkgPT4gaW5zcGVjdEVycm9yLFxuICBpbnRlcnNlY3Q6ICgpID0+IGludGVyc2VjdCxcbiAgaXNFbXB0eTogKCkgPT4gaXNFbXB0eSxcbiAgaXNFcnJvckluZm9PclBhcnRpYWxFcnJvckluZm86ICgpID0+IGlzRXJyb3JJbmZvT3JQYXJ0aWFsRXJyb3JJbmZvLFxuICBpc05pbDogKCkgPT4gaXNOaWwsXG4gIGlzT2JqZWN0OiAoKSA9PiBpc09iamVjdCxcbiAga2V5c0FycmF5OiAoKSA9PiBrZXlzQXJyYXksXG4gIG1hdGNoRGVyaXZlZENoYW5uZWw6ICgpID0+IG1hdGNoRGVyaXZlZENoYW5uZWwsXG4gIG1peGluOiAoKSA9PiBtaXhpbixcbiAgcGFyc2VRdWVyeVN0cmluZzogKCkgPT4gcGFyc2VRdWVyeVN0cmluZyxcbiAgcHJvdG90eXBpY2FsQ2xvbmU6ICgpID0+IHByb3RvdHlwaWNhbENsb25lLFxuICByYW5kb21TdHJpbmc6ICgpID0+IHJhbmRvbVN0cmluZyxcbiAgc2hhbGxvd0Nsb25lOiAoKSA9PiBzaGFsbG93Q2xvbmUsXG4gIHNoYWxsb3dFcXVhbHM6ICgpID0+IHNoYWxsb3dFcXVhbHMsXG4gIHRocm93TWlzc2luZ1BsdWdpbkVycm9yOiAoKSA9PiB0aHJvd01pc3NpbmdQbHVnaW5FcnJvcixcbiAgdG9CYXNlNjQ6ICgpID0+IHRvQmFzZTY0LFxuICB0b1F1ZXJ5U3RyaW5nOiAoKSA9PiB0b1F1ZXJ5U3RyaW5nLFxuICB2YWx1ZXNBcnJheTogKCkgPT4gdmFsdWVzQXJyYXksXG4gIHdoZW5Qcm9taXNlU2V0dGxlczogKCkgPT4gd2hlblByb21pc2VTZXR0bGVzLFxuICB3aXRoVGltZW91dEFzeW5jOiAoKSA9PiB3aXRoVGltZW91dEFzeW5jXG59KTtcblxuLy8gc3JjL2NvbW1vbi9saWIvdHlwZXMvZXJyb3JpbmZvLnRzXG5mdW5jdGlvbiB0b1N0cmluZyhlcnIpIHtcbiAgbGV0IHJlc3VsdCA9IFwiW1wiICsgZXJyLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChlcnIubWVzc2FnZSlcbiAgICByZXN1bHQgKz0gXCI6IFwiICsgZXJyLm1lc3NhZ2U7XG4gIGlmIChlcnIuc3RhdHVzQ29kZSlcbiAgICByZXN1bHQgKz0gXCI7IHN0YXR1c0NvZGU9XCIgKyBlcnIuc3RhdHVzQ29kZTtcbiAgaWYgKGVyci5jb2RlKVxuICAgIHJlc3VsdCArPSBcIjsgY29kZT1cIiArIGVyci5jb2RlO1xuICBpZiAoZXJyLmNhdXNlKVxuICAgIHJlc3VsdCArPSBcIjsgY2F1c2U9XCIgKyBpbnNwZWN0RXJyb3IoZXJyLmNhdXNlKTtcbiAgaWYgKGVyci5ocmVmICYmICEoZXJyLm1lc3NhZ2UgJiYgZXJyLm1lc3NhZ2UuaW5kZXhPZihcImhlbHAuYWJseS5pb1wiKSA+IC0xKSlcbiAgICByZXN1bHQgKz0gXCI7IHNlZSBcIiArIGVyci5ocmVmICsgXCIgXCI7XG4gIHJlc3VsdCArPSBcIl1cIjtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbnZhciBFcnJvckluZm8gPSBjbGFzcyBfRXJyb3JJbmZvIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBjb2RlLCBzdGF0dXNDb2RlLCBjYXVzZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIGlmICh0eXBlb2YgT2JqZWN0LnNldFByb3RvdHlwZU9mICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgX0Vycm9ySW5mby5wcm90b3R5cGUpO1xuICAgIH1cbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XG4gICAgdGhpcy5jYXVzZSA9IGNhdXNlO1xuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0b1N0cmluZyh0aGlzKTtcbiAgfVxuICBzdGF0aWMgZnJvbVZhbHVlcyh2YWx1ZXMpIHtcbiAgICBjb25zdCB7IG1lc3NhZ2UsIGNvZGUsIHN0YXR1c0NvZGUgfSA9IHZhbHVlcztcbiAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGNvZGUgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHN0YXR1c0NvZGUgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9ySW5mby5mcm9tVmFsdWVzKCk6IGludmFsaWQgdmFsdWVzOiBcIiArIFBsYXRmb3JtLkNvbmZpZy5pbnNwZWN0KHZhbHVlcykpO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBPYmplY3QuYXNzaWduKG5ldyBfRXJyb3JJbmZvKG1lc3NhZ2UsIGNvZGUsIHN0YXR1c0NvZGUpLCB2YWx1ZXMpO1xuICAgIGlmIChyZXN1bHQuY29kZSAmJiAhcmVzdWx0LmhyZWYpIHtcbiAgICAgIHJlc3VsdC5ocmVmID0gXCJodHRwczovL2hlbHAuYWJseS5pby9lcnJvci9cIiArIHJlc3VsdC5jb2RlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xudmFyIFBhcnRpYWxFcnJvckluZm8gPSBjbGFzcyBfUGFydGlhbEVycm9ySW5mbyBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgY29kZSwgc3RhdHVzQ29kZSwgY2F1c2UpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICBpZiAodHlwZW9mIE9iamVjdC5zZXRQcm90b3R5cGVPZiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIF9QYXJ0aWFsRXJyb3JJbmZvLnByb3RvdHlwZSk7XG4gICAgfVxuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgdGhpcy5zdGF0dXNDb2RlID0gc3RhdHVzQ29kZTtcbiAgICB0aGlzLmNhdXNlID0gY2F1c2U7XG4gIH1cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nKHRoaXMpO1xuICB9XG4gIHN0YXRpYyBmcm9tVmFsdWVzKHZhbHVlcykge1xuICAgIGNvbnN0IHsgbWVzc2FnZSwgY29kZSwgc3RhdHVzQ29kZSB9ID0gdmFsdWVzO1xuICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gXCJzdHJpbmdcIiB8fCAhaXNOaWwoY29kZSkgJiYgdHlwZW9mIGNvZGUgIT09IFwibnVtYmVyXCIgfHwgIWlzTmlsKHN0YXR1c0NvZGUpICYmIHR5cGVvZiBzdGF0dXNDb2RlICE9PSBcIm51bWJlclwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQYXJ0aWFsRXJyb3JJbmZvLmZyb21WYWx1ZXMoKTogaW52YWxpZCB2YWx1ZXM6IFwiICsgUGxhdGZvcm0uQ29uZmlnLmluc3BlY3QodmFsdWVzKSk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IE9iamVjdC5hc3NpZ24obmV3IF9QYXJ0aWFsRXJyb3JJbmZvKG1lc3NhZ2UsIGNvZGUsIHN0YXR1c0NvZGUpLCB2YWx1ZXMpO1xuICAgIGlmIChyZXN1bHQuY29kZSAmJiAhcmVzdWx0LmhyZWYpIHtcbiAgICAgIHJlc3VsdC5ocmVmID0gXCJodHRwczovL2hlbHAuYWJseS5pby9lcnJvci9cIiArIHJlc3VsdC5jb2RlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuXG4vLyBzcmMvY29tbW9uL2xpYi91dGlsL3V0aWxzLnRzXG5mdW5jdGlvbiByYW5kb21Qb3NuKGFyck9yU3RyKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhcnJPclN0ci5sZW5ndGgpO1xufVxuZnVuY3Rpb24gbWl4aW4odGFyZ2V0LCAuLi5hcmdzKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHNvdXJjZSA9IGFyZ3NbaV07XG4gICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBjb3B5KHNyYykge1xuICByZXR1cm4gbWl4aW4oe30sIHNyYyk7XG59XG5mdW5jdGlvbiBlbnN1cmVBcnJheShvYmopIHtcbiAgaWYgKGlzTmlsKG9iaikpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cbiAgcmV0dXJuIFtvYmpdO1xufVxuZnVuY3Rpb24gaXNPYmplY3Qob2IpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYikgPT0gXCJbb2JqZWN0IE9iamVjdF1cIjtcbn1cbmZ1bmN0aW9uIGlzRW1wdHkob2IpIHtcbiAgZm9yIChjb25zdCBwcm9wIGluIG9iKVxuICAgIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBpc05pbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZnVuY3Rpb24gc2hhbGxvd0Nsb25lKG9iKSB7XG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBPYmplY3QoKTtcbiAgZm9yIChjb25zdCBwcm9wIGluIG9iKVxuICAgIHJlc3VsdFtwcm9wXSA9IG9iW3Byb3BdO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gcHJvdG90eXBpY2FsQ2xvbmUob2IsIG93blByb3BlcnRpZXMpIHtcbiAgY2xhc3MgRiB7XG4gIH1cbiAgRi5wcm90b3R5cGUgPSBvYjtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IEYoKTtcbiAgaWYgKG93blByb3BlcnRpZXMpXG4gICAgbWl4aW4ocmVzdWx0LCBvd25Qcm9wZXJ0aWVzKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbnZhciBpbmhlcml0cyA9IGZ1bmN0aW9uKGN0b3IsIHN1cGVyQ3Rvcikge1xuICBpZiAoUGxhdGZvcm0uQ29uZmlnLmluaGVyaXRzKSB7XG4gICAgUGxhdGZvcm0uQ29uZmlnLmluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICBjdG9yLnByb3RvdHlwZSA9IHByb3RvdHlwaWNhbENsb25lKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IGN0b3IgfSk7XG59O1xuZnVuY3Rpb24gY29udGFpbnNWYWx1ZShvYiwgdmFsKSB7XG4gIGZvciAoY29uc3QgaSBpbiBvYikge1xuICAgIGlmIChvYltpXSA9PSB2YWwpXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpbnRlcnNlY3QoYXJyLCBvYikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShvYikgPyBhcnJJbnRlcnNlY3QoYXJyLCBvYikgOiBhcnJJbnRlcnNlY3RPYihhcnIsIG9iKTtcbn1cbmZ1bmN0aW9uIGFyckludGVyc2VjdChhcnIxLCBhcnIyKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFycjEubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBtZW1iZXIgPSBhcnIxW2ldO1xuICAgIGlmIChhcnIyLmluZGV4T2YobWVtYmVyKSAhPSAtMSlcbiAgICAgIHJlc3VsdC5wdXNoKG1lbWJlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGFyckludGVyc2VjdE9iKGFyciwgb2IpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgbWVtYmVyID0gYXJyW2ldO1xuICAgIGlmIChtZW1iZXIgaW4gb2IpXG4gICAgICByZXN1bHQucHVzaChtZW1iZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBhcnJTdWJ0cmFjdChhcnIxLCBhcnIyKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFycjEubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBlbGVtZW50ID0gYXJyMVtpXTtcbiAgICBpZiAoYXJyMi5pbmRleE9mKGVsZW1lbnQpID09IC0xKVxuICAgICAgcmVzdWx0LnB1c2goZWxlbWVudCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGFyckRlbGV0ZVZhbHVlKGFyciwgdmFsKSB7XG4gIGNvbnN0IGlkeCA9IGFyci5pbmRleE9mKHZhbCk7XG4gIGNvbnN0IHJlcyA9IGlkeCAhPSAtMTtcbiAgaWYgKHJlcylcbiAgICBhcnIuc3BsaWNlKGlkeCwgMSk7XG4gIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBhcnJXaXRob3V0VmFsdWUoYXJyLCB2YWwpIHtcbiAgY29uc3QgbmV3QXJyID0gYXJyLnNsaWNlKCk7XG4gIGFyckRlbGV0ZVZhbHVlKG5ld0FyciwgdmFsKTtcbiAgcmV0dXJuIG5ld0Fycjtcbn1cbmZ1bmN0aW9uIGtleXNBcnJheShvYiwgb3duT25seSkge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgZm9yIChjb25zdCBwcm9wIGluIG9iKSB7XG4gICAgaWYgKG93bk9ubHkgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYiwgcHJvcCkpXG4gICAgICBjb250aW51ZTtcbiAgICByZXN1bHQucHVzaChwcm9wKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gdmFsdWVzQXJyYXkob2IsIG93bk9ubHkpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAoY29uc3QgcHJvcCBpbiBvYikge1xuICAgIGlmIChvd25Pbmx5ICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2IsIHByb3ApKVxuICAgICAgY29udGludWU7XG4gICAgcmVzdWx0LnB1c2gob2JbcHJvcF0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBmb3JJbk93bk5vbk51bGxQcm9wZXJ0aWVzKG9iLCBmbikge1xuICBmb3IgKGNvbnN0IHByb3AgaW4gb2IpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iLCBwcm9wKSAmJiBvYltwcm9wXSkge1xuICAgICAgZm4ocHJvcCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBhbGxTYW1lKGFyciwgcHJvcCkge1xuICBpZiAoYXJyLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNvbnN0IGZpcnN0ID0gYXJyWzBdW3Byb3BdO1xuICByZXR1cm4gYXJyLmV2ZXJ5KGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbVtwcm9wXSA9PT0gZmlyc3Q7XG4gIH0pO1xufVxudmFyIEZvcm1hdCA9IC8qIEBfX1BVUkVfXyAqLyAoKEZvcm1hdDIpID0+IHtcbiAgRm9ybWF0MltcIm1zZ3BhY2tcIl0gPSBcIm1zZ3BhY2tcIjtcbiAgRm9ybWF0MltcImpzb25cIl0gPSBcImpzb25cIjtcbiAgcmV0dXJuIEZvcm1hdDI7XG59KShGb3JtYXQgfHwge30pO1xuZnVuY3Rpb24gYXJyUG9wUmFuZG9tRWxlbWVudChhcnIpIHtcbiAgcmV0dXJuIGFyci5zcGxpY2UocmFuZG9tUG9zbihhcnIpLCAxKVswXTtcbn1cbmZ1bmN0aW9uIHRvUXVlcnlTdHJpbmcocGFyYW1zKSB7XG4gIGNvbnN0IHBhcnRzID0gW107XG4gIGlmIChwYXJhbXMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpXG4gICAgICBwYXJ0cy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQocGFyYW1zW2tleV0pKTtcbiAgfVxuICByZXR1cm4gcGFydHMubGVuZ3RoID8gXCI/XCIgKyBwYXJ0cy5qb2luKFwiJlwiKSA6IFwiXCI7XG59XG5mdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nKHF1ZXJ5KSB7XG4gIGxldCBtYXRjaDtcbiAgY29uc3Qgc2VhcmNoID0gLyhbXj8mPV0rKT0/KFteJl0qKS9nO1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgd2hpbGUgKG1hdGNoID0gc2VhcmNoLmV4ZWMocXVlcnkpKVxuICAgIHJlc3VsdFtkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMV0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFsyXSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBpc0Vycm9ySW5mb09yUGFydGlhbEVycm9ySW5mbyhlcnIpIHtcbiAgcmV0dXJuIHR5cGVvZiBlcnIgPT0gXCJvYmplY3RcIiAmJiBlcnIgIT09IG51bGwgJiYgKGVyciBpbnN0YW5jZW9mIEVycm9ySW5mbyB8fCBlcnIgaW5zdGFuY2VvZiBQYXJ0aWFsRXJyb3JJbmZvKTtcbn1cbmZ1bmN0aW9uIGluc3BlY3RFcnJvcihlcnIpIHtcbiAgdmFyIF9hMiwgX2I7XG4gIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvciB8fCAoKF9hMiA9IGVyciA9PSBudWxsID8gdm9pZCAwIDogZXJyLmNvbnN0cnVjdG9yKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLm5hbWUpID09PSBcIkVycm9ySW5mb1wiIHx8ICgoX2IgPSBlcnIgPT0gbnVsbCA/IHZvaWQgMCA6IGVyci5jb25zdHJ1Y3RvcikgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLm5hbWUpID09PSBcIlBhcnRpYWxFcnJvckluZm9cIilcbiAgICByZXR1cm4gZXJyLnRvU3RyaW5nKCk7XG4gIHJldHVybiBQbGF0Zm9ybS5Db25maWcuaW5zcGVjdChlcnIpO1xufVxuZnVuY3Rpb24gaW5zcGVjdEJvZHkoYm9keSkge1xuICBpZiAoUGxhdGZvcm0uQnVmZmVyVXRpbHMuaXNCdWZmZXIoYm9keSkpIHtcbiAgICByZXR1cm4gYm9keS50b1N0cmluZygpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGJvZHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFBsYXRmb3JtLkNvbmZpZy5pbnNwZWN0KGJvZHkpO1xuICB9XG59XG5mdW5jdGlvbiBkYXRhU2l6ZUJ5dGVzKGRhdGEpIHtcbiAgaWYgKFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmlzQnVmZmVyKGRhdGEpKSB7XG4gICAgcmV0dXJuIFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmJ5dGVMZW5ndGgoZGF0YSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIFBsYXRmb3JtLkNvbmZpZy5zdHJpbmdCeXRlU2l6ZShkYXRhKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBpbnB1dCBvZiBVdGlscy5kYXRhU2l6ZUJ5dGVzIHRvIGJlIGEgYnVmZmVyIG9yIHN0cmluZywgYnV0IHdhczogXCIgKyB0eXBlb2YgZGF0YSk7XG59XG5mdW5jdGlvbiBjaGVhcFJhbmRTdHIoKSB7XG4gIHJldHVybiBTdHJpbmcoTWF0aC5yYW5kb20oKSkuc3Vic3RyKDIpO1xufVxudmFyIHJhbmRvbVN0cmluZyA9IGFzeW5jIChudW1CeXRlcykgPT4ge1xuICBjb25zdCBidWZmZXIgPSBhd2FpdCBQbGF0Zm9ybS5Db25maWcuZ2V0UmFuZG9tQXJyYXlCdWZmZXIobnVtQnl0ZXMpO1xuICByZXR1cm4gUGxhdGZvcm0uQnVmZmVyVXRpbHMuYmFzZTY0RW5jb2RlKGJ1ZmZlcik7XG59O1xuZnVuY3Rpb24gYXJyQ2hvb3NlTihhcnIsIG4pIHtcbiAgY29uc3QgbnVtSXRlbXMgPSBNYXRoLm1pbihuLCBhcnIubGVuZ3RoKSwgbXV0YWJsZUFyciA9IGFyci5zbGljZSgpLCByZXN1bHQgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1JdGVtczsgaSsrKSB7XG4gICAgcmVzdWx0LnB1c2goYXJyUG9wUmFuZG9tRWxlbWVudChtdXRhYmxlQXJyKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHdoZW5Qcm9taXNlU2V0dGxlcyhwcm9taXNlLCBjYWxsYmFjaykge1xuICBwcm9taXNlLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgIGNhbGxiYWNrID09IG51bGwgPyB2b2lkIDAgOiBjYWxsYmFjayhudWxsLCByZXN1bHQpO1xuICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgY2FsbGJhY2sgPT0gbnVsbCA/IHZvaWQgMCA6IGNhbGxiYWNrKGVycik7XG4gIH0pO1xufVxuZnVuY3Rpb24gZGVjb2RlQm9keShib2R5LCBNc2dQYWNrLCBmb3JtYXQpIHtcbiAgaWYgKGZvcm1hdCA9PSBcIm1zZ3BhY2tcIikge1xuICAgIGlmICghTXNnUGFjaykge1xuICAgICAgdGhyb3dNaXNzaW5nUGx1Z2luRXJyb3IoXCJNc2dQYWNrXCIpO1xuICAgIH1cbiAgICByZXR1cm4gTXNnUGFjay5kZWNvZGUoYm9keSk7XG4gIH1cbiAgcmV0dXJuIEpTT04ucGFyc2UoU3RyaW5nKGJvZHkpKTtcbn1cbmZ1bmN0aW9uIGVuY29kZUJvZHkoYm9keSwgTXNnUGFjaywgZm9ybWF0KSB7XG4gIGlmIChmb3JtYXQgPT0gXCJtc2dwYWNrXCIpIHtcbiAgICBpZiAoIU1zZ1BhY2spIHtcbiAgICAgIHRocm93TWlzc2luZ1BsdWdpbkVycm9yKFwiTXNnUGFja1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIE1zZ1BhY2suZW5jb2RlKGJvZHksIHRydWUpO1xuICB9XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShib2R5KTtcbn1cbmZ1bmN0aW9uIGFsbFRvTG93ZXJDYXNlKGFycikge1xuICByZXR1cm4gYXJyLm1hcChmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC50b0xvd2VyQ2FzZSgpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGFsbFRvVXBwZXJDYXNlKGFycikge1xuICByZXR1cm4gYXJyLm1hcChmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGdldEJhY2tvZmZDb2VmZmljaWVudChjb3VudCkge1xuICByZXR1cm4gTWF0aC5taW4oKGNvdW50ICsgMikgLyAzLCAyKTtcbn1cbmZ1bmN0aW9uIGdldEppdHRlckNvZWZmaWNpZW50KCkge1xuICByZXR1cm4gMSAtIE1hdGgucmFuZG9tKCkgKiAwLjI7XG59XG5mdW5jdGlvbiBnZXRSZXRyeVRpbWUoaW5pdGlhbFRpbWVvdXQsIHJldHJ5QXR0ZW1wdCkge1xuICByZXR1cm4gaW5pdGlhbFRpbWVvdXQgKiBnZXRCYWNrb2ZmQ29lZmZpY2llbnQocmV0cnlBdHRlbXB0KSAqIGdldEppdHRlckNvZWZmaWNpZW50KCk7XG59XG5mdW5jdGlvbiBnZXRHbG9iYWxPYmplY3QoKSB7XG4gIGlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIGdsb2JhbDtcbiAgfVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH1cbiAgcmV0dXJuIHNlbGY7XG59XG5mdW5jdGlvbiBzaGFsbG93RXF1YWxzKHNvdXJjZSwgdGFyZ2V0KSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhzb3VyY2UpLmV2ZXJ5KChrZXkpID0+IHNvdXJjZVtrZXldID09PSB0YXJnZXRba2V5XSkgJiYgT2JqZWN0LmtleXModGFyZ2V0KS5ldmVyeSgoa2V5KSA9PiB0YXJnZXRba2V5XSA9PT0gc291cmNlW2tleV0pO1xufVxuZnVuY3Rpb24gbWF0Y2hEZXJpdmVkQ2hhbm5lbChuYW1lKSB7XG4gIGNvbnN0IHJlZ2V4ID0gL14oXFxbKFteP10qKSg/OiguKikpXFxdKT8oLispJC87XG4gIGNvbnN0IG1hdGNoID0gbmFtZS5tYXRjaChyZWdleCk7XG4gIGlmICghbWF0Y2ggfHwgIW1hdGNoLmxlbmd0aCB8fCBtYXRjaC5sZW5ndGggPCA1KSB7XG4gICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcInJlZ2V4IG1hdGNoIGZhaWxlZFwiLCA0MDAsIDQwMDEwKTtcbiAgfVxuICBpZiAobWF0Y2hbMl0pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKGBjYW5ub3QgdXNlIGEgZGVyaXZlZCBvcHRpb24gd2l0aCBhICR7bWF0Y2hbMl19IGNoYW5uZWxgLCA0MDAsIDQwMDEwKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHF1YWxpZmllclBhcmFtOiBtYXRjaFszXSB8fCBcIlwiLFxuICAgIGNoYW5uZWxOYW1lOiBtYXRjaFs0XVxuICB9O1xufVxuZnVuY3Rpb24gdG9CYXNlNjQoc3RyKSB7XG4gIGNvbnN0IGJ1ZmZlclV0aWxzID0gUGxhdGZvcm0uQnVmZmVyVXRpbHM7XG4gIGNvbnN0IHRleHRCdWZmZXIgPSBidWZmZXJVdGlscy51dGY4RW5jb2RlKHN0cik7XG4gIHJldHVybiBidWZmZXJVdGlscy5iYXNlNjRFbmNvZGUodGV4dEJ1ZmZlcik7XG59XG5mdW5jdGlvbiBhcnJFcXVhbHMoYSwgYikge1xuICByZXR1cm4gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24odmFsLCBpKSB7XG4gICAgcmV0dXJuIHZhbCA9PT0gYltpXTtcbiAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVNaXNzaW5nUGx1Z2luRXJyb3IocGx1Z2luTmFtZSkge1xuICByZXR1cm4gbmV3IEVycm9ySW5mbyhgJHtwbHVnaW5OYW1lfSBwbHVnaW4gbm90IHByb3ZpZGVkYCwgNDAwMTksIDQwMCk7XG59XG5mdW5jdGlvbiB0aHJvd01pc3NpbmdQbHVnaW5FcnJvcihwbHVnaW5OYW1lKSB7XG4gIHRocm93IGNyZWF0ZU1pc3NpbmdQbHVnaW5FcnJvcihwbHVnaW5OYW1lKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHdpdGhUaW1lb3V0QXN5bmMocHJvbWlzZSwgdGltZW91dCA9IDVlMywgZXJyID0gXCJUaW1lb3V0IGV4cGlyZWRcIikge1xuICBjb25zdCBlID0gbmV3IEVycm9ySW5mbyhlcnIsIDVlNCwgNTAwKTtcbiAgcmV0dXJuIFByb21pc2UucmFjZShbcHJvbWlzZSwgbmV3IFByb21pc2UoKF9yZXNvbHZlLCByZWplY3QpID0+IHNldFRpbWVvdXQoKCkgPT4gcmVqZWN0KGUpLCB0aW1lb3V0KSldKTtcbn1cblxuLy8gcGFja2FnZS5qc29uXG52YXIgdmVyc2lvbiA9IFwiMi42LjBcIjtcblxuLy8gc3JjL2NvbW1vbi9saWIvdXRpbC9kZWZhdWx0cy50c1xudmFyIGFnZW50ID0gXCJhYmx5LWpzL1wiICsgdmVyc2lvbjtcbnZhciBEZWZhdWx0cyA9IHtcbiAgRU5WSVJPTk1FTlQ6IFwiXCIsXG4gIFJFU1RfSE9TVDogXCJyZXN0LmFibHkuaW9cIixcbiAgUkVBTFRJTUVfSE9TVDogXCJyZWFsdGltZS5hYmx5LmlvXCIsXG4gIEZBTExCQUNLX0hPU1RTOiBbXG4gICAgXCJBLmFibHktcmVhbHRpbWUuY29tXCIsXG4gICAgXCJCLmFibHktcmVhbHRpbWUuY29tXCIsXG4gICAgXCJDLmFibHktcmVhbHRpbWUuY29tXCIsXG4gICAgXCJELmFibHktcmVhbHRpbWUuY29tXCIsXG4gICAgXCJFLmFibHktcmVhbHRpbWUuY29tXCJcbiAgXSxcbiAgUE9SVDogODAsXG4gIFRMU19QT1JUOiA0NDMsXG4gIFRJTUVPVVRTOiB7XG4gICAgLyogRG9jdW1lbnRlZCBhcyBvcHRpb25zIHBhcmFtczogKi9cbiAgICBkaXNjb25uZWN0ZWRSZXRyeVRpbWVvdXQ6IDE1ZTMsXG4gICAgc3VzcGVuZGVkUmV0cnlUaW1lb3V0OiAzZTQsXG4gICAgLyogVW5kb2N1bWVudGVkLCBidXQgcGFydCBvZiB0aGUgYXBpIGFuZCBjYW4gYmUgdXNlZCBieSBjdXN0b21lcnM6ICovXG4gICAgaHR0cFJlcXVlc3RUaW1lb3V0OiAxZTQsXG4gICAgaHR0cE1heFJldHJ5RHVyYXRpb246IDE1ZTMsXG4gICAgY2hhbm5lbFJldHJ5VGltZW91dDogMTVlMyxcbiAgICBmYWxsYmFja1JldHJ5VGltZW91dDogNmU1LFxuICAgIC8qIEZvciBpbnRlcm5hbCAvIHRlc3QgdXNlIG9ubHk6ICovXG4gICAgY29ubmVjdGlvblN0YXRlVHRsOiAxMmU0LFxuICAgIHJlYWx0aW1lUmVxdWVzdFRpbWVvdXQ6IDFlNCxcbiAgICByZWN2VGltZW91dDogOWU0LFxuICAgIHdlYlNvY2tldENvbm5lY3RUaW1lb3V0OiAxZTQsXG4gICAgd2ViU29ja2V0U2xvd1RpbWVvdXQ6IDRlM1xuICB9LFxuICBodHRwTWF4UmV0cnlDb3VudDogMyxcbiAgbWF4TWVzc2FnZVNpemU6IDY1NTM2LFxuICB2ZXJzaW9uLFxuICBwcm90b2NvbFZlcnNpb246IDMsXG4gIGFnZW50LFxuICBnZXRIb3N0LFxuICBnZXRQb3J0LFxuICBnZXRIdHRwU2NoZW1lLFxuICBlbnZpcm9ubWVudEZhbGxiYWNrSG9zdHMsXG4gIGdldEZhbGxiYWNrSG9zdHMsXG4gIGdldEhvc3RzLFxuICBjaGVja0hvc3QsXG4gIG9iamVjdGlmeU9wdGlvbnMsXG4gIG5vcm1hbGlzZU9wdGlvbnMsXG4gIGRlZmF1bHRHZXRIZWFkZXJzLFxuICBkZWZhdWx0UG9zdEhlYWRlcnNcbn07XG5mdW5jdGlvbiBnZXRIb3N0KG9wdGlvbnMsIGhvc3QsIHdzKSB7XG4gIGlmICh3cylcbiAgICBob3N0ID0gaG9zdCA9PSBvcHRpb25zLnJlc3RIb3N0ICYmIG9wdGlvbnMucmVhbHRpbWVIb3N0IHx8IGhvc3QgfHwgb3B0aW9ucy5yZWFsdGltZUhvc3Q7XG4gIGVsc2VcbiAgICBob3N0ID0gaG9zdCB8fCBvcHRpb25zLnJlc3RIb3N0O1xuICByZXR1cm4gaG9zdDtcbn1cbmZ1bmN0aW9uIGdldFBvcnQob3B0aW9ucywgdGxzKSB7XG4gIHJldHVybiB0bHMgfHwgb3B0aW9ucy50bHMgPyBvcHRpb25zLnRsc1BvcnQgOiBvcHRpb25zLnBvcnQ7XG59XG5mdW5jdGlvbiBnZXRIdHRwU2NoZW1lKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMudGxzID8gXCJodHRwczovL1wiIDogXCJodHRwOi8vXCI7XG59XG5mdW5jdGlvbiBlbnZpcm9ubWVudEZhbGxiYWNrSG9zdHMoZW52aXJvbm1lbnQpIHtcbiAgcmV0dXJuIFtcbiAgICBlbnZpcm9ubWVudCArIFwiLWEtZmFsbGJhY2suYWJseS1yZWFsdGltZS5jb21cIixcbiAgICBlbnZpcm9ubWVudCArIFwiLWItZmFsbGJhY2suYWJseS1yZWFsdGltZS5jb21cIixcbiAgICBlbnZpcm9ubWVudCArIFwiLWMtZmFsbGJhY2suYWJseS1yZWFsdGltZS5jb21cIixcbiAgICBlbnZpcm9ubWVudCArIFwiLWQtZmFsbGJhY2suYWJseS1yZWFsdGltZS5jb21cIixcbiAgICBlbnZpcm9ubWVudCArIFwiLWUtZmFsbGJhY2suYWJseS1yZWFsdGltZS5jb21cIlxuICBdO1xufVxuZnVuY3Rpb24gZ2V0RmFsbGJhY2tIb3N0cyhvcHRpb25zKSB7XG4gIGNvbnN0IGZhbGxiYWNrSG9zdHMgPSBvcHRpb25zLmZhbGxiYWNrSG9zdHMsIGh0dHBNYXhSZXRyeUNvdW50ID0gdHlwZW9mIG9wdGlvbnMuaHR0cE1heFJldHJ5Q291bnQgIT09IFwidW5kZWZpbmVkXCIgPyBvcHRpb25zLmh0dHBNYXhSZXRyeUNvdW50IDogRGVmYXVsdHMuaHR0cE1heFJldHJ5Q291bnQ7XG4gIHJldHVybiBmYWxsYmFja0hvc3RzID8gYXJyQ2hvb3NlTihmYWxsYmFja0hvc3RzLCBodHRwTWF4UmV0cnlDb3VudCkgOiBbXTtcbn1cbmZ1bmN0aW9uIGdldEhvc3RzKG9wdGlvbnMsIHdzKSB7XG4gIGNvbnN0IGhvc3RzID0gW29wdGlvbnMucmVzdEhvc3RdLmNvbmNhdChnZXRGYWxsYmFja0hvc3RzKG9wdGlvbnMpKTtcbiAgcmV0dXJuIHdzID8gaG9zdHMubWFwKChob3N0KSA9PiBnZXRIb3N0KG9wdGlvbnMsIGhvc3QsIHRydWUpKSA6IGhvc3RzO1xufVxuZnVuY3Rpb24gY2hlY2tIb3N0KGhvc3QpIHtcbiAgaWYgKHR5cGVvZiBob3N0ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcImhvc3QgbXVzdCBiZSBhIHN0cmluZzsgd2FzIGEgXCIgKyB0eXBlb2YgaG9zdCwgNGU0LCA0MDApO1xuICB9XG4gIGlmICghaG9zdC5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFwiaG9zdCBtdXN0IG5vdCBiZSB6ZXJvLWxlbmd0aFwiLCA0ZTQsIDQwMCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFJlYWx0aW1lSG9zdChvcHRpb25zLCBwcm9kdWN0aW9uLCBlbnZpcm9ubWVudCwgbG9nZ2VyKSB7XG4gIGlmIChvcHRpb25zLnJlYWx0aW1lSG9zdClcbiAgICByZXR1cm4gb3B0aW9ucy5yZWFsdGltZUhvc3Q7XG4gIGlmIChvcHRpb25zLnJlc3RIb3N0KSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgbG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgXCJEZWZhdWx0cy5ub3JtYWxpc2VPcHRpb25zXCIsXG4gICAgICAncmVzdEhvc3QgaXMgc2V0IHRvIFwiJyArIG9wdGlvbnMucmVzdEhvc3QgKyAnXCIgYnV0IHJlYWx0aW1lSG9zdCBpcyBub3Qgc2V0LCBzbyBzZXR0aW5nIHJlYWx0aW1lSG9zdCB0byBcIicgKyBvcHRpb25zLnJlc3RIb3N0ICsgJ1wiIHRvby4gSWYgdGhpcyBpcyBub3Qgd2hhdCB5b3Ugd2FudCwgcGxlYXNlIHNldCByZWFsdGltZUhvc3QgZXhwbGljaXRseS4nXG4gICAgKTtcbiAgICByZXR1cm4gb3B0aW9ucy5yZXN0SG9zdDtcbiAgfVxuICByZXR1cm4gcHJvZHVjdGlvbiA/IERlZmF1bHRzLlJFQUxUSU1FX0hPU1QgOiBlbnZpcm9ubWVudCArIFwiLVwiICsgRGVmYXVsdHMuUkVBTFRJTUVfSE9TVDtcbn1cbmZ1bmN0aW9uIGdldFRpbWVvdXRzKG9wdGlvbnMpIHtcbiAgY29uc3QgdGltZW91dHMgPSB7fTtcbiAgZm9yIChjb25zdCBwcm9wIGluIERlZmF1bHRzLlRJTUVPVVRTKSB7XG4gICAgdGltZW91dHNbcHJvcF0gPSBvcHRpb25zW3Byb3BdIHx8IERlZmF1bHRzLlRJTUVPVVRTW3Byb3BdO1xuICB9XG4gIHJldHVybiB0aW1lb3V0cztcbn1cbmZ1bmN0aW9uIGdldEFnZW50U3RyaW5nKG9wdGlvbnMpIHtcbiAgbGV0IGFnZW50U3RyID0gRGVmYXVsdHMuYWdlbnQ7XG4gIGlmIChvcHRpb25zLmFnZW50cykge1xuICAgIGZvciAodmFyIGFnZW50MiBpbiBvcHRpb25zLmFnZW50cykge1xuICAgICAgYWdlbnRTdHIgKz0gXCIgXCIgKyBhZ2VudDIgKyBcIi9cIiArIG9wdGlvbnMuYWdlbnRzW2FnZW50Ml07XG4gICAgfVxuICB9XG4gIHJldHVybiBhZ2VudFN0cjtcbn1cbmZ1bmN0aW9uIG9iamVjdGlmeU9wdGlvbnMob3B0aW9ucywgYWxsb3dLZXlPclRva2VuLCBzb3VyY2VGb3JFcnJvck1lc3NhZ2UsIGxvZ2dlciwgbW9kdWxhclBsdWdpbnNUb0luY2x1ZGUpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIGNvbnN0IG1zZyA9IGFsbG93S2V5T3JUb2tlbiA/IGAke3NvdXJjZUZvckVycm9yTWVzc2FnZX0gbXVzdCBiZSBpbml0aWFsaXplZCB3aXRoIGVpdGhlciBhIGNsaWVudCBvcHRpb25zIG9iamVjdCwgYW4gQWJseSBBUEkga2V5LCBvciBhbiBBYmx5IFRva2VuYCA6IGAke3NvdXJjZUZvckVycm9yTWVzc2FnZX0gbXVzdCBiZSBpbml0aWFsaXplZCB3aXRoIGEgY2xpZW50IG9wdGlvbnMgb2JqZWN0YDtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIGAke3NvdXJjZUZvckVycm9yTWVzc2FnZX0oKWAsIG1zZyk7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gIH1cbiAgbGV0IG9wdGlvbnNPYmo7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikge1xuICAgIGlmIChvcHRpb25zLmluZGV4T2YoXCI6XCIpID09IC0xKSB7XG4gICAgICBpZiAoIWFsbG93S2V5T3JUb2tlbikge1xuICAgICAgICBjb25zdCBtc2cgPSBgJHtzb3VyY2VGb3JFcnJvck1lc3NhZ2V9IGNhbm5vdCBiZSBpbml0aWFsaXplZCB3aXRoIGp1c3QgYW4gQWJseSBUb2tlbjsgeW91IG11c3QgcHJvdmlkZSBhIGNsaWVudCBvcHRpb25zIG9iamVjdCB3aXRoIGEgXFxgcGx1Z2luc1xcYCBwcm9wZXJ0eS4gKFNldCB0aGlzIEFibHkgVG9rZW4gYXMgdGhlIG9iamVjdFxcdTIwMTlzIFxcYHRva2VuXFxgIHByb3BlcnR5LilgO1xuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIGAke3NvdXJjZUZvckVycm9yTWVzc2FnZX0oKWAsIG1zZyk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfVxuICAgICAgb3B0aW9uc09iaiA9IHsgdG9rZW46IG9wdGlvbnMgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFhbGxvd0tleU9yVG9rZW4pIHtcbiAgICAgICAgY29uc3QgbXNnID0gYCR7c291cmNlRm9yRXJyb3JNZXNzYWdlfSBjYW5ub3QgYmUgaW5pdGlhbGl6ZWQgd2l0aCBqdXN0IGFuIEFibHkgQVBJIGtleTsgeW91IG11c3QgcHJvdmlkZSBhIGNsaWVudCBvcHRpb25zIG9iamVjdCB3aXRoIGEgXFxgcGx1Z2luc1xcYCBwcm9wZXJ0eS4gKFNldCB0aGlzIEFibHkgQVBJIGtleSBhcyB0aGUgb2JqZWN0XFx1MjAxOXMgXFxga2V5XFxgIHByb3BlcnR5LilgO1xuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIGAke3NvdXJjZUZvckVycm9yTWVzc2FnZX0oKWAsIG1zZyk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfVxuICAgICAgb3B0aW9uc09iaiA9IHsga2V5OiBvcHRpb25zIH07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG9wdGlvbnNPYmogPSBvcHRpb25zO1xuICB9XG4gIGlmIChtb2R1bGFyUGx1Z2luc1RvSW5jbHVkZSkge1xuICAgIG9wdGlvbnNPYmogPSBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBvcHRpb25zT2JqKSwgeyBwbHVnaW5zOiBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgbW9kdWxhclBsdWdpbnNUb0luY2x1ZGUpLCBvcHRpb25zT2JqLnBsdWdpbnMpIH0pO1xuICB9XG4gIHJldHVybiBvcHRpb25zT2JqO1xufVxuZnVuY3Rpb24gbm9ybWFsaXNlT3B0aW9ucyhvcHRpb25zLCBNc2dQYWNrLCBsb2dnZXIpIHtcbiAgY29uc3QgbG9nZ2VyVG9Vc2UgPSBsb2dnZXIgIT0gbnVsbCA/IGxvZ2dlciA6IGxvZ2dlcl9kZWZhdWx0LmRlZmF1bHRMb2dnZXI7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5yZWNvdmVyID09PSBcImZ1bmN0aW9uXCIgJiYgb3B0aW9ucy5jbG9zZU9uVW5sb2FkID09PSB0cnVlKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgbG9nZ2VyVG9Vc2UsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICBcIkRlZmF1bHRzLm5vcm1hbGlzZU9wdGlvbnNcIixcbiAgICAgIFwiY2xvc2VPblVubG9hZCB3YXMgdHJ1ZSBhbmQgYSBzZXNzaW9uIHJlY292ZXJ5IGZ1bmN0aW9uIHdhcyBzZXQgLSB0aGVzZSBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLCBzbyB1bnNldHRpbmcgdGhlIGxhdHRlclwiXG4gICAgKTtcbiAgICBvcHRpb25zLnJlY292ZXIgPSB2b2lkIDA7XG4gIH1cbiAgaWYgKCEoXCJjbG9zZU9uVW5sb2FkXCIgaW4gb3B0aW9ucykpIHtcbiAgICBvcHRpb25zLmNsb3NlT25VbmxvYWQgPSAhb3B0aW9ucy5yZWNvdmVyO1xuICB9XG4gIGlmICghKFwicXVldWVNZXNzYWdlc1wiIGluIG9wdGlvbnMpKVxuICAgIG9wdGlvbnMucXVldWVNZXNzYWdlcyA9IHRydWU7XG4gIGNvbnN0IGVudmlyb25tZW50ID0gb3B0aW9ucy5lbnZpcm9ubWVudCAmJiBTdHJpbmcob3B0aW9ucy5lbnZpcm9ubWVudCkudG9Mb3dlckNhc2UoKSB8fCBEZWZhdWx0cy5FTlZJUk9OTUVOVDtcbiAgY29uc3QgcHJvZHVjdGlvbiA9ICFlbnZpcm9ubWVudCB8fCBlbnZpcm9ubWVudCA9PT0gXCJwcm9kdWN0aW9uXCI7XG4gIGlmICghb3B0aW9ucy5mYWxsYmFja0hvc3RzICYmICFvcHRpb25zLnJlc3RIb3N0ICYmICFvcHRpb25zLnJlYWx0aW1lSG9zdCAmJiAhb3B0aW9ucy5wb3J0ICYmICFvcHRpb25zLnRsc1BvcnQpIHtcbiAgICBvcHRpb25zLmZhbGxiYWNrSG9zdHMgPSBwcm9kdWN0aW9uID8gRGVmYXVsdHMuRkFMTEJBQ0tfSE9TVFMgOiBlbnZpcm9ubWVudEZhbGxiYWNrSG9zdHMoZW52aXJvbm1lbnQpO1xuICB9XG4gIGNvbnN0IHJlc3RIb3N0ID0gb3B0aW9ucy5yZXN0SG9zdCB8fCAocHJvZHVjdGlvbiA/IERlZmF1bHRzLlJFU1RfSE9TVCA6IGVudmlyb25tZW50ICsgXCItXCIgKyBEZWZhdWx0cy5SRVNUX0hPU1QpO1xuICBjb25zdCByZWFsdGltZUhvc3QgPSBnZXRSZWFsdGltZUhvc3Qob3B0aW9ucywgcHJvZHVjdGlvbiwgZW52aXJvbm1lbnQsIGxvZ2dlclRvVXNlKTtcbiAgKG9wdGlvbnMuZmFsbGJhY2tIb3N0cyB8fCBbXSkuY29uY2F0KHJlc3RIb3N0LCByZWFsdGltZUhvc3QpLmZvckVhY2goY2hlY2tIb3N0KTtcbiAgb3B0aW9ucy5wb3J0ID0gb3B0aW9ucy5wb3J0IHx8IERlZmF1bHRzLlBPUlQ7XG4gIG9wdGlvbnMudGxzUG9ydCA9IG9wdGlvbnMudGxzUG9ydCB8fCBEZWZhdWx0cy5UTFNfUE9SVDtcbiAgaWYgKCEoXCJ0bHNcIiBpbiBvcHRpb25zKSlcbiAgICBvcHRpb25zLnRscyA9IHRydWU7XG4gIGNvbnN0IHRpbWVvdXRzID0gZ2V0VGltZW91dHMob3B0aW9ucyk7XG4gIGlmIChNc2dQYWNrKSB7XG4gICAgaWYgKFwidXNlQmluYXJ5UHJvdG9jb2xcIiBpbiBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zLnVzZUJpbmFyeVByb3RvY29sID0gUGxhdGZvcm0uQ29uZmlnLnN1cHBvcnRzQmluYXJ5ICYmIG9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2w7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPSBQbGF0Zm9ybS5Db25maWcucHJlZmVyQmluYXJ5O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvcHRpb25zLnVzZUJpbmFyeVByb3RvY29sID0gZmFsc2U7XG4gIH1cbiAgY29uc3QgaGVhZGVycyA9IHt9O1xuICBpZiAob3B0aW9ucy5jbGllbnRJZCkge1xuICAgIGhlYWRlcnNbXCJYLUFibHktQ2xpZW50SWRcIl0gPSBQbGF0Zm9ybS5CdWZmZXJVdGlscy5iYXNlNjRFbmNvZGUoUGxhdGZvcm0uQnVmZmVyVXRpbHMudXRmOEVuY29kZShvcHRpb25zLmNsaWVudElkKSk7XG4gIH1cbiAgaWYgKCEoXCJpZGVtcG90ZW50UmVzdFB1Ymxpc2hpbmdcIiBpbiBvcHRpb25zKSkge1xuICAgIG9wdGlvbnMuaWRlbXBvdGVudFJlc3RQdWJsaXNoaW5nID0gdHJ1ZTtcbiAgfVxuICBsZXQgY29ubmVjdGl2aXR5Q2hlY2tQYXJhbXMgPSBudWxsO1xuICBsZXQgY29ubmVjdGl2aXR5Q2hlY2tVcmwgPSBvcHRpb25zLmNvbm5lY3Rpdml0eUNoZWNrVXJsO1xuICBpZiAob3B0aW9ucy5jb25uZWN0aXZpdHlDaGVja1VybCkge1xuICAgIGxldCBbdXJpLCBxc10gPSBvcHRpb25zLmNvbm5lY3Rpdml0eUNoZWNrVXJsLnNwbGl0KFwiP1wiKTtcbiAgICBjb25uZWN0aXZpdHlDaGVja1BhcmFtcyA9IHFzID8gcGFyc2VRdWVyeVN0cmluZyhxcykgOiB7fTtcbiAgICBpZiAodXJpLmluZGV4T2YoXCI6Ly9cIikgPT09IC0xKSB7XG4gICAgICB1cmkgPSBcImh0dHBzOi8vXCIgKyB1cmk7XG4gICAgfVxuICAgIGNvbm5lY3Rpdml0eUNoZWNrVXJsID0gdXJpO1xuICB9XG4gIGxldCB3c0Nvbm5lY3Rpdml0eUNoZWNrVXJsID0gb3B0aW9ucy53c0Nvbm5lY3Rpdml0eUNoZWNrVXJsO1xuICBpZiAod3NDb25uZWN0aXZpdHlDaGVja1VybCAmJiB3c0Nvbm5lY3Rpdml0eUNoZWNrVXJsLmluZGV4T2YoXCI6Ly9cIikgPT09IC0xKSB7XG4gICAgd3NDb25uZWN0aXZpdHlDaGVja1VybCA9IFwid3NzOi8vXCIgKyB3c0Nvbm5lY3Rpdml0eUNoZWNrVXJsO1xuICB9XG4gIHJldHVybiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBvcHRpb25zKSwge1xuICAgIHJlYWx0aW1lSG9zdCxcbiAgICByZXN0SG9zdCxcbiAgICBtYXhNZXNzYWdlU2l6ZTogb3B0aW9ucy5tYXhNZXNzYWdlU2l6ZSB8fCBEZWZhdWx0cy5tYXhNZXNzYWdlU2l6ZSxcbiAgICB0aW1lb3V0cyxcbiAgICBjb25uZWN0aXZpdHlDaGVja1BhcmFtcyxcbiAgICBjb25uZWN0aXZpdHlDaGVja1VybCxcbiAgICB3c0Nvbm5lY3Rpdml0eUNoZWNrVXJsLFxuICAgIGhlYWRlcnNcbiAgfSk7XG59XG5mdW5jdGlvbiBub3JtYWxpc2VDaGFubmVsT3B0aW9ucyhDcnlwdG8yLCBsb2dnZXIsIG9wdGlvbnMpIHtcbiAgY29uc3QgY2hhbm5lbE9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBpZiAoY2hhbm5lbE9wdGlvbnMuY2lwaGVyKSB7XG4gICAgaWYgKCFDcnlwdG8yKVxuICAgICAgdGhyb3dNaXNzaW5nUGx1Z2luRXJyb3IoXCJDcnlwdG9cIik7XG4gICAgY29uc3QgY2lwaGVyID0gQ3J5cHRvMi5nZXRDaXBoZXIoY2hhbm5lbE9wdGlvbnMuY2lwaGVyLCBsb2dnZXIpO1xuICAgIGNoYW5uZWxPcHRpb25zLmNpcGhlciA9IGNpcGhlci5jaXBoZXJQYXJhbXM7XG4gICAgY2hhbm5lbE9wdGlvbnMuY2hhbm5lbENpcGhlciA9IGNpcGhlci5jaXBoZXI7XG4gIH0gZWxzZSBpZiAoXCJjaXBoZXJcIiBpbiBjaGFubmVsT3B0aW9ucykge1xuICAgIGNoYW5uZWxPcHRpb25zLmNpcGhlciA9IHZvaWQgMDtcbiAgICBjaGFubmVsT3B0aW9ucy5jaGFubmVsQ2lwaGVyID0gbnVsbDtcbiAgfVxuICByZXR1cm4gY2hhbm5lbE9wdGlvbnM7XG59XG52YXIgY29udGVudFR5cGVzID0ge1xuICBqc29uOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgeG1sOiBcImFwcGxpY2F0aW9uL3htbFwiLFxuICBodG1sOiBcInRleHQvaHRtbFwiLFxuICBtc2dwYWNrOiBcImFwcGxpY2F0aW9uL3gtbXNncGFja1wiLFxuICB0ZXh0OiBcInRleHQvcGxhaW5cIlxufTtcbnZhciBkZWZhdWx0SGVhZGVyc09wdGlvbnMgPSB7XG4gIGZvcm1hdDogXCJqc29uXCIgLyoganNvbiAqLyxcbiAgcHJvdG9jb2xWZXJzaW9uOiBEZWZhdWx0cy5wcm90b2NvbFZlcnNpb25cbn07XG5mdW5jdGlvbiBkZWZhdWx0R2V0SGVhZGVycyhvcHRpb25zLCB7XG4gIGZvcm1hdCA9IGRlZmF1bHRIZWFkZXJzT3B0aW9ucy5mb3JtYXQsXG4gIHByb3RvY29sVmVyc2lvbiA9IGRlZmF1bHRIZWFkZXJzT3B0aW9ucy5wcm90b2NvbFZlcnNpb25cbn0gPSB7fSkge1xuICBjb25zdCBhY2NlcHQgPSBjb250ZW50VHlwZXNbZm9ybWF0XTtcbiAgcmV0dXJuIHtcbiAgICBhY2NlcHQsXG4gICAgXCJYLUFibHktVmVyc2lvblwiOiBwcm90b2NvbFZlcnNpb24udG9TdHJpbmcoKSxcbiAgICBcIkFibHktQWdlbnRcIjogZ2V0QWdlbnRTdHJpbmcob3B0aW9ucylcbiAgfTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRQb3N0SGVhZGVycyhvcHRpb25zLCB7XG4gIGZvcm1hdCA9IGRlZmF1bHRIZWFkZXJzT3B0aW9ucy5mb3JtYXQsXG4gIHByb3RvY29sVmVyc2lvbiA9IGRlZmF1bHRIZWFkZXJzT3B0aW9ucy5wcm90b2NvbFZlcnNpb25cbn0gPSB7fSkge1xuICBsZXQgY29udGVudFR5cGU7XG4gIGNvbnN0IGFjY2VwdCA9IGNvbnRlbnRUeXBlID0gY29udGVudFR5cGVzW2Zvcm1hdF07XG4gIHJldHVybiB7XG4gICAgYWNjZXB0LFxuICAgIFwiY29udGVudC10eXBlXCI6IGNvbnRlbnRUeXBlLFxuICAgIFwiWC1BYmx5LVZlcnNpb25cIjogcHJvdG9jb2xWZXJzaW9uLnRvU3RyaW5nKCksXG4gICAgXCJBYmx5LUFnZW50XCI6IGdldEFnZW50U3RyaW5nKG9wdGlvbnMpXG4gIH07XG59XG52YXIgZGVmYXVsdHNfZGVmYXVsdCA9IERlZmF1bHRzO1xuZnVuY3Rpb24gZ2V0RGVmYXVsdHMocGxhdGZvcm1EZWZhdWx0cykge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihEZWZhdWx0cywgcGxhdGZvcm1EZWZhdWx0cyk7XG59XG5cbi8vIHNyYy9jb21tb24vbGliL3V0aWwvbXVsdGljYXN0ZXIudHNcbnZhciBNdWx0aWNhc3RlciA9IGNsYXNzIF9NdWx0aWNhc3RlciB7XG4gIC8vIFByaXZhdGUgY29uc3RydWN0b3I7IHVzZSBzdGF0aWMgTXVsdGljYXN0ZXIuY3JlYXRlIGluc3RlYWRcbiAgY29uc3RydWN0b3IobG9nZ2VyLCBtZW1iZXJzKSB7XG4gICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gICAgdGhpcy5tZW1iZXJzID0gbWVtYmVycyB8fCBbXTtcbiAgfVxuICBjYWxsKGVyciwgcmVzdWx0KSB7XG4gICAgZm9yIChjb25zdCBtZW1iZXIgb2YgdGhpcy5tZW1iZXJzKSB7XG4gICAgICBpZiAobWVtYmVyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbWVtYmVyKGVyciwgcmVzdWx0KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLFxuICAgICAgICAgICAgXCJNdWx0aWNhc3RlciBtdWx0aXBsZSBjYWxsYmFjayBoYW5kbGVyXCIsXG4gICAgICAgICAgICBcIlVuZXhwZWN0ZWQgZXhjZXB0aW9uOiBcIiArIGUgKyBcIjsgc3RhY2sgPSBcIiArIGUuc3RhY2tcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHB1c2goLi4uYXJncykge1xuICAgIHRoaXMubWVtYmVycy5wdXNoKC4uLmFyZ3MpO1xuICB9XG4gIGNyZWF0ZVByb21pc2UoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMucHVzaCgoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKHJlc3VsdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICByZXNvbHZlQWxsKHJlc3VsdCkge1xuICAgIHRoaXMuY2FsbChudWxsLCByZXN1bHQpO1xuICB9XG4gIHJlamVjdEFsbChlcnIpIHtcbiAgICB0aGlzLmNhbGwoZXJyKTtcbiAgfVxuICBzdGF0aWMgY3JlYXRlKGxvZ2dlciwgbWVtYmVycykge1xuICAgIGNvbnN0IGluc3RhbmNlID0gbmV3IF9NdWx0aWNhc3Rlcihsb2dnZXIsIG1lbWJlcnMpO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKChlcnIsIHJlc3VsdCkgPT4gaW5zdGFuY2UuY2FsbChlcnIsIHJlc3VsdCksIHtcbiAgICAgIHB1c2g6IChmbikgPT4gaW5zdGFuY2UucHVzaChmbiksXG4gICAgICBjcmVhdGVQcm9taXNlOiAoKSA9PiBpbnN0YW5jZS5jcmVhdGVQcm9taXNlKCksXG4gICAgICByZXNvbHZlQWxsOiAocmVzdWx0KSA9PiBpbnN0YW5jZS5yZXNvbHZlQWxsKHJlc3VsdCksXG4gICAgICByZWplY3RBbGw6IChlcnIpID0+IGluc3RhbmNlLnJlamVjdEFsbChlcnIpXG4gICAgfSk7XG4gIH1cbn07XG52YXIgbXVsdGljYXN0ZXJfZGVmYXVsdCA9IE11bHRpY2FzdGVyO1xuXG4vLyBzcmMvY29tbW9uL2NvbnN0YW50cy9IdHRwTWV0aG9kcy50c1xudmFyIEh0dHBNZXRob2RzID0gLyogQF9fUFVSRV9fICovICgoSHR0cE1ldGhvZHMyKSA9PiB7XG4gIEh0dHBNZXRob2RzMltcIkdldFwiXSA9IFwiZ2V0XCI7XG4gIEh0dHBNZXRob2RzMltcIkRlbGV0ZVwiXSA9IFwiZGVsZXRlXCI7XG4gIEh0dHBNZXRob2RzMltcIlBvc3RcIl0gPSBcInBvc3RcIjtcbiAgSHR0cE1ldGhvZHMyW1wiUHV0XCJdID0gXCJwdXRcIjtcbiAgSHR0cE1ldGhvZHMyW1wiUGF0Y2hcIl0gPSBcInBhdGNoXCI7XG4gIHJldHVybiBIdHRwTWV0aG9kczI7XG59KShIdHRwTWV0aG9kcyB8fCB7fSk7XG52YXIgSHR0cE1ldGhvZHNfZGVmYXVsdCA9IEh0dHBNZXRob2RzO1xuXG4vLyBzcmMvY29tbW9uL2NvbnN0YW50cy9IdHRwU3RhdHVzQ29kZXMudHNcbnZhciBIdHRwU3RhdHVzQ29kZXMgPSAvKiBAX19QVVJFX18gKi8gKChIdHRwU3RhdHVzQ29kZXMyKSA9PiB7XG4gIEh0dHBTdGF0dXNDb2RlczJbSHR0cFN0YXR1c0NvZGVzMltcIlN1Y2Nlc3NcIl0gPSAyMDBdID0gXCJTdWNjZXNzXCI7XG4gIEh0dHBTdGF0dXNDb2RlczJbSHR0cFN0YXR1c0NvZGVzMltcIk5vQ29udGVudFwiXSA9IDIwNF0gPSBcIk5vQ29udGVudFwiO1xuICBIdHRwU3RhdHVzQ29kZXMyW0h0dHBTdGF0dXNDb2RlczJbXCJCYWRSZXF1ZXN0XCJdID0gNDAwXSA9IFwiQmFkUmVxdWVzdFwiO1xuICBIdHRwU3RhdHVzQ29kZXMyW0h0dHBTdGF0dXNDb2RlczJbXCJVbmF1dGhvcml6ZWRcIl0gPSA0MDFdID0gXCJVbmF1dGhvcml6ZWRcIjtcbiAgSHR0cFN0YXR1c0NvZGVzMltIdHRwU3RhdHVzQ29kZXMyW1wiRm9yYmlkZGVuXCJdID0gNDAzXSA9IFwiRm9yYmlkZGVuXCI7XG4gIEh0dHBTdGF0dXNDb2RlczJbSHR0cFN0YXR1c0NvZGVzMltcIlJlcXVlc3RUaW1lb3V0XCJdID0gNDA4XSA9IFwiUmVxdWVzdFRpbWVvdXRcIjtcbiAgSHR0cFN0YXR1c0NvZGVzMltIdHRwU3RhdHVzQ29kZXMyW1wiSW50ZXJuYWxTZXJ2ZXJFcnJvclwiXSA9IDUwMF0gPSBcIkludGVybmFsU2VydmVyRXJyb3JcIjtcbiAgcmV0dXJuIEh0dHBTdGF0dXNDb2RlczI7XG59KShIdHRwU3RhdHVzQ29kZXMgfHwge30pO1xuZnVuY3Rpb24gaXNTdWNjZXNzQ29kZShzdGF0dXNDb2RlKSB7XG4gIHJldHVybiBzdGF0dXNDb2RlID49IDIwMCAvKiBTdWNjZXNzICovICYmIHN0YXR1c0NvZGUgPCA0MDAgLyogQmFkUmVxdWVzdCAqLztcbn1cbnZhciBIdHRwU3RhdHVzQ29kZXNfZGVmYXVsdCA9IEh0dHBTdGF0dXNDb2RlcztcblxuLy8gc3JjL2NvbW1vbi9saWIvY2xpZW50L2F1dGgudHNcbnZhciBNQVhfVE9LRU5fTEVOR1RIID0gTWF0aC5wb3coMiwgMTcpO1xuZnVuY3Rpb24gcmFuZG9tKCkge1xuICByZXR1cm4gKFwiMDAwMDAwXCIgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxZTE2KSkuc2xpY2UoLTE2KTtcbn1cbmZ1bmN0aW9uIGlzUmVhbHRpbWUoY2xpZW50KSB7XG4gIHJldHVybiAhIWNsaWVudC5jb25uZWN0aW9uO1xufVxuZnVuY3Rpb24gbm9ybWFsaXNlQXV0aGNhbGxiYWNrRXJyb3IoZXJyKSB7XG4gIGlmICghaXNFcnJvckluZm9PclBhcnRpYWxFcnJvckluZm8oZXJyKSkge1xuICAgIHJldHVybiBuZXcgRXJyb3JJbmZvKGluc3BlY3RFcnJvcihlcnIpLCBlcnIuY29kZSB8fCA0MDE3MCwgZXJyLnN0YXR1c0NvZGUgfHwgNDAxKTtcbiAgfVxuICBpZiAoIWVyci5jb2RlKSB7XG4gICAgaWYgKGVyci5zdGF0dXNDb2RlID09PSA0MDMpIHtcbiAgICAgIGVyci5jb2RlID0gNDAzMDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVyci5jb2RlID0gNDAxNzA7XG4gICAgICBlcnIuc3RhdHVzQ29kZSA9IDQwMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGVycjtcbn1cbnZhciBobWFjID0gKHRleHQsIGtleSkgPT4ge1xuICBjb25zdCBidWZmZXJVdGlscyA9IFBsYXRmb3JtLkJ1ZmZlclV0aWxzO1xuICBjb25zdCB0ZXh0QnVmZmVyID0gYnVmZmVyVXRpbHMudXRmOEVuY29kZSh0ZXh0KTtcbiAgY29uc3Qga2V5QnVmZmVyID0gYnVmZmVyVXRpbHMudXRmOEVuY29kZShrZXkpO1xuICBjb25zdCBkaWdlc3QgPSBidWZmZXJVdGlscy5obWFjU2hhMjU2KHRleHRCdWZmZXIsIGtleUJ1ZmZlcik7XG4gIHJldHVybiBidWZmZXJVdGlscy5iYXNlNjRFbmNvZGUoZGlnZXN0KTtcbn07XG5mdW5jdGlvbiBjMTRuKGNhcGFiaWxpdHkpIHtcbiAgaWYgKCFjYXBhYmlsaXR5KVxuICAgIHJldHVybiBcIlwiO1xuICBpZiAodHlwZW9mIGNhcGFiaWxpdHkgPT0gXCJzdHJpbmdcIilcbiAgICBjYXBhYmlsaXR5ID0gSlNPTi5wYXJzZShjYXBhYmlsaXR5KTtcbiAgY29uc3QgYzE0bkNhcGFiaWxpdHkgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3Qga2V5cyA9IGtleXNBcnJheShjYXBhYmlsaXR5LCB0cnVlKTtcbiAgaWYgKCFrZXlzKVxuICAgIHJldHVybiBcIlwiO1xuICBrZXlzLnNvcnQoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgYzE0bkNhcGFiaWxpdHlba2V5c1tpXV0gPSBjYXBhYmlsaXR5W2tleXNbaV1dLnNvcnQoKTtcbiAgfVxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYzE0bkNhcGFiaWxpdHkpO1xufVxuZnVuY3Rpb24gbG9nQW5kVmFsaWRhdGVUb2tlbkF1dGhNZXRob2QoYXV0aE9wdGlvbnMsIGxvZ2dlcikge1xuICBpZiAoYXV0aE9wdGlvbnMuYXV0aENhbGxiYWNrKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKGxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIkF1dGgoKVwiLCBcInVzaW5nIHRva2VuIGF1dGggd2l0aCBhdXRoQ2FsbGJhY2tcIik7XG4gIH0gZWxzZSBpZiAoYXV0aE9wdGlvbnMuYXV0aFVybCkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJBdXRoKClcIiwgXCJ1c2luZyB0b2tlbiBhdXRoIHdpdGggYXV0aFVybFwiKTtcbiAgfSBlbHNlIGlmIChhdXRoT3B0aW9ucy5rZXkpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiQXV0aCgpXCIsIFwidXNpbmcgdG9rZW4gYXV0aCB3aXRoIGNsaWVudC1zaWRlIHNpZ25pbmdcIik7XG4gIH0gZWxzZSBpZiAoYXV0aE9wdGlvbnMudG9rZW5EZXRhaWxzKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKGxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIkF1dGgoKVwiLCBcInVzaW5nIHRva2VuIGF1dGggd2l0aCBzdXBwbGllZCB0b2tlbiBvbmx5XCIpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IG1zZyA9IFwiYXV0aE9wdGlvbnMgbXVzdCBpbmNsdWRlIHZhbGlkIGF1dGhlbnRpY2F0aW9uIHBhcmFtZXRlcnNcIjtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIFwiQXV0aCgpXCIsIG1zZyk7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gIH1cbn1cbmZ1bmN0aW9uIGJhc2ljQXV0aEZvcmNlZChvcHRpb25zKSB7XG4gIHJldHVybiBcInVzZVRva2VuQXV0aFwiIGluIG9wdGlvbnMgJiYgIW9wdGlvbnMudXNlVG9rZW5BdXRoO1xufVxuZnVuY3Rpb24gdXNlVG9rZW5BdXRoKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMudXNlVG9rZW5BdXRoIHx8ICFiYXNpY0F1dGhGb3JjZWQob3B0aW9ucykgJiYgKG9wdGlvbnMuYXV0aENhbGxiYWNrIHx8IG9wdGlvbnMuYXV0aFVybCB8fCBvcHRpb25zLnRva2VuIHx8IG9wdGlvbnMudG9rZW5EZXRhaWxzKTtcbn1cbmZ1bmN0aW9uIG5vV2F5VG9SZW5ldyhvcHRpb25zKSB7XG4gIHJldHVybiAhb3B0aW9ucy5rZXkgJiYgIW9wdGlvbnMuYXV0aENhbGxiYWNrICYmICFvcHRpb25zLmF1dGhVcmw7XG59XG52YXIgdHJJZCA9IDA7XG5mdW5jdGlvbiBnZXRUb2tlblJlcXVlc3RJZCgpIHtcbiAgcmV0dXJuIHRySWQrKztcbn1cbnZhciBBdXRoID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihjbGllbnQsIG9wdGlvbnMpIHtcbiAgICAvLyBUaGlzIGluaXRpYWxpemF0aW9uIGlzIGFsd2F5cyBvdmVyd3JpdHRlbiBhbmQgb25seSB1c2VkIHRvIHByZXZlbnQgYSBUeXBlU2NyaXB0IGNvbXBpbGVyIGVycm9yXG4gICAgdGhpcy5hdXRoT3B0aW9ucyA9IHt9O1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMudG9rZW5QYXJhbXMgPSBvcHRpb25zLmRlZmF1bHRUb2tlblBhcmFtcyB8fCB7fTtcbiAgICB0aGlzLmN1cnJlbnRUb2tlblJlcXVlc3RJZCA9IG51bGw7XG4gICAgdGhpcy53YWl0aW5nRm9yVG9rZW5SZXF1ZXN0ID0gbnVsbDtcbiAgICBpZiAodXNlVG9rZW5BdXRoKG9wdGlvbnMpKSB7XG4gICAgICBpZiAobm9XYXlUb1JlbmV3KG9wdGlvbnMpKSB7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICAgICAgXCJBdXRoKClcIixcbiAgICAgICAgICBcIldhcm5pbmc6IGxpYnJhcnkgaW5pdGlhbGl6ZWQgd2l0aCBhIHRva2VuIGxpdGVyYWwgd2l0aG91dCBhbnkgd2F5IHRvIHJlbmV3IHRoZSB0b2tlbiB3aGVuIGl0IGV4cGlyZXMgKG5vIGF1dGhVcmwsIGF1dGhDYWxsYmFjaywgb3Iga2V5KS4gU2VlIGh0dHBzOi8vaGVscC5hYmx5LmlvL2Vycm9yLzQwMTcxIGZvciBoZWxwXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3NhdmVUb2tlbk9wdGlvbnMob3B0aW9ucy5kZWZhdWx0VG9rZW5QYXJhbXMsIG9wdGlvbnMpO1xuICAgICAgbG9nQW5kVmFsaWRhdGVUb2tlbkF1dGhNZXRob2QodGhpcy5hdXRoT3B0aW9ucywgdGhpcy5sb2dnZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIW9wdGlvbnMua2V5KSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IFwiTm8gYXV0aGVudGljYXRpb24gb3B0aW9ucyBwcm92aWRlZDsgbmVlZCBvbmUgb2Y6IGtleSwgYXV0aFVybCwgb3IgYXV0aENhbGxiYWNrIChvciBmb3IgdGVzdGluZyBvbmx5LCB0b2tlbiBvciB0b2tlbkRldGFpbHMpXCI7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLCBcIkF1dGgoKVwiLCBtc2cpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKG1zZywgNDAxNjAsIDQwMSk7XG4gICAgICB9XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJBdXRoKClcIiwgXCJhbm9ueW1vdXMsIHVzaW5nIGJhc2ljIGF1dGhcIik7XG4gICAgICB0aGlzLl9zYXZlQmFzaWNPcHRpb25zKG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuICBnZXQgbG9nZ2VyKCkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5sb2dnZXI7XG4gIH1cbiAgYXN5bmMgYXV0aG9yaXplKHRva2VuUGFyYW1zLCBhdXRoT3B0aW9ucykge1xuICAgIGlmIChhdXRoT3B0aW9ucyAmJiBhdXRoT3B0aW9ucy5rZXkgJiYgdGhpcy5hdXRoT3B0aW9ucy5rZXkgIT09IGF1dGhPcHRpb25zLmtleSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcIlVuYWJsZSB0byB1cGRhdGUgYXV0aCBvcHRpb25zIHdpdGggaW5jb21wYXRpYmxlIGtleVwiLCA0MDEwMiwgNDAxKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGxldCB0b2tlbkRldGFpbHMgPSBhd2FpdCB0aGlzLl9mb3JjZU5ld1Rva2VuKHRva2VuUGFyYW1zICE9IG51bGwgPyB0b2tlblBhcmFtcyA6IG51bGwsIGF1dGhPcHRpb25zICE9IG51bGwgPyBhdXRoT3B0aW9ucyA6IG51bGwpO1xuICAgICAgaWYgKGlzUmVhbHRpbWUodGhpcy5jbGllbnQpKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgdGhpcy5jbGllbnQuY29ubmVjdGlvbi5jb25uZWN0aW9uTWFuYWdlci5vbkF1dGhVcGRhdGVkKFxuICAgICAgICAgICAgdG9rZW5EZXRhaWxzLFxuICAgICAgICAgICAgKGVyciwgdG9rZW5EZXRhaWxzMikgPT4gZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKHRva2VuRGV0YWlsczIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdG9rZW5EZXRhaWxzO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKHRoaXMuY2xpZW50LmNvbm5lY3Rpb24gJiYgZXJyLnN0YXR1c0NvZGUgPT09IEh0dHBTdGF0dXNDb2Rlc19kZWZhdWx0LkZvcmJpZGRlbikge1xuICAgICAgICB0aGlzLmNsaWVudC5jb25uZWN0aW9uLmNvbm5lY3Rpb25NYW5hZ2VyLmFjdE9uRXJyb3JGcm9tQXV0aG9yaXplKGVycik7XG4gICAgICB9XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG4gIC8qIEZvciBpbnRlcm5hbCB1c2UsIGVnIGJ5IGNvbm5lY3Rpb25NYW5hZ2VyIC0gdXNlZnVsIHdoZW4gd2FudCB0byBjYWxsIGJhY2tcbiAgICogYXMgc29vbiBhcyB3ZSBoYXZlIHRoZSBuZXcgdG9rZW4sIHJhdGhlciB0aGFuIHdhaXRpbmcgZm9yIGl0IHRvIHRha2VcbiAgICogZWZmZWN0IG9uIHRoZSBjb25uZWN0aW9uIGFzICNhdXRob3JpemUgZG9lcyAqL1xuICBhc3luYyBfZm9yY2VOZXdUb2tlbih0b2tlblBhcmFtcywgYXV0aE9wdGlvbnMpIHtcbiAgICB0aGlzLnRva2VuRGV0YWlscyA9IG51bGw7XG4gICAgdGhpcy5fc2F2ZVRva2VuT3B0aW9ucyh0b2tlblBhcmFtcywgYXV0aE9wdGlvbnMpO1xuICAgIGxvZ0FuZFZhbGlkYXRlVG9rZW5BdXRoTWV0aG9kKHRoaXMuYXV0aE9wdGlvbnMsIHRoaXMubG9nZ2VyKTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHRoaXMuX2Vuc3VyZVZhbGlkQXV0aENyZWRlbnRpYWxzKHRydWUpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBkZWxldGUgdGhpcy50b2tlblBhcmFtcy50aW1lc3RhbXA7XG4gICAgICBkZWxldGUgdGhpcy5hdXRoT3B0aW9ucy5xdWVyeVRpbWU7XG4gICAgfVxuICB9XG4gIGFzeW5jIHJlcXVlc3RUb2tlbih0b2tlblBhcmFtcywgYXV0aE9wdGlvbnMpIHtcbiAgICBjb25zdCByZXNvbHZlZEF1dGhPcHRpb25zID0gYXV0aE9wdGlvbnMgfHwgdGhpcy5hdXRoT3B0aW9ucztcbiAgICBjb25zdCByZXNvbHZlZFRva2VuUGFyYW1zID0gdG9rZW5QYXJhbXMgfHwgY29weSh0aGlzLnRva2VuUGFyYW1zKTtcbiAgICBsZXQgdG9rZW5SZXF1ZXN0Q2FsbGJhY2ssIGNsaWVudCA9IHRoaXMuY2xpZW50O1xuICAgIGlmIChyZXNvbHZlZEF1dGhPcHRpb25zLmF1dGhDYWxsYmFjaykge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiQXV0aC5yZXF1ZXN0VG9rZW4oKVwiLCBcInVzaW5nIHRva2VuIGF1dGggd2l0aCBhdXRoQ2FsbGJhY2tcIik7XG4gICAgICB0b2tlblJlcXVlc3RDYWxsYmFjayA9IHJlc29sdmVkQXV0aE9wdGlvbnMuYXV0aENhbGxiYWNrO1xuICAgIH0gZWxzZSBpZiAocmVzb2x2ZWRBdXRoT3B0aW9ucy5hdXRoVXJsKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJBdXRoLnJlcXVlc3RUb2tlbigpXCIsIFwidXNpbmcgdG9rZW4gYXV0aCB3aXRoIGF1dGhVcmxcIik7XG4gICAgICB0b2tlblJlcXVlc3RDYWxsYmFjayA9IChwYXJhbXMsIGNiKSA9PiB7XG4gICAgICAgIGNvbnN0IGF1dGhIZWFkZXJzID0gbWl4aW4oXG4gICAgICAgICAgeyBhY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpblwiIH0sXG4gICAgICAgICAgcmVzb2x2ZWRBdXRoT3B0aW9ucy5hdXRoSGVhZGVyc1xuICAgICAgICApO1xuICAgICAgICBjb25zdCB1c2VQb3N0ID0gcmVzb2x2ZWRBdXRoT3B0aW9ucy5hdXRoTWV0aG9kICYmIHJlc29sdmVkQXV0aE9wdGlvbnMuYXV0aE1ldGhvZC50b0xvd2VyQ2FzZSgpID09PSBcInBvc3RcIjtcbiAgICAgICAgbGV0IHByb3ZpZGVkUXNQYXJhbXM7XG4gICAgICAgIGNvbnN0IHF1ZXJ5SWR4ID0gcmVzb2x2ZWRBdXRoT3B0aW9ucy5hdXRoVXJsLmluZGV4T2YoXCI/XCIpO1xuICAgICAgICBpZiAocXVlcnlJZHggPiAtMSkge1xuICAgICAgICAgIHByb3ZpZGVkUXNQYXJhbXMgPSBwYXJzZVF1ZXJ5U3RyaW5nKHJlc29sdmVkQXV0aE9wdGlvbnMuYXV0aFVybC5zbGljZShxdWVyeUlkeCkpO1xuICAgICAgICAgIHJlc29sdmVkQXV0aE9wdGlvbnMuYXV0aFVybCA9IHJlc29sdmVkQXV0aE9wdGlvbnMuYXV0aFVybC5zbGljZSgwLCBxdWVyeUlkeCk7XG4gICAgICAgICAgaWYgKCF1c2VQb3N0KSB7XG4gICAgICAgICAgICByZXNvbHZlZEF1dGhPcHRpb25zLmF1dGhQYXJhbXMgPSBtaXhpbihcbiAgICAgICAgICAgICAgcHJvdmlkZWRRc1BhcmFtcyxcbiAgICAgICAgICAgICAgcmVzb2x2ZWRBdXRoT3B0aW9ucy5hdXRoUGFyYW1zXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhdXRoUGFyYW1zID0gbWl4aW4oe30sIHJlc29sdmVkQXV0aE9wdGlvbnMuYXV0aFBhcmFtcyB8fCB7fSwgcGFyYW1zKTtcbiAgICAgICAgY29uc3QgYXV0aFVybFJlcXVlc3RDYWxsYmFjayA9IChyZXN1bHQpID0+IHtcbiAgICAgICAgICB2YXIgX2EyLCBfYjtcbiAgICAgICAgICBsZXQgYm9keSA9IChfYTIgPSByZXN1bHQuYm9keSkgIT0gbnVsbCA/IF9hMiA6IG51bGw7XG4gICAgICAgICAgbGV0IGNvbnRlbnRUeXBlID0gbnVsbDtcbiAgICAgICAgICBpZiAocmVzdWx0LmVycm9yKSB7XG4gICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgICAgICAgIFwiQXV0aC5yZXF1ZXN0VG9rZW4oKS50b2tlblJlcXVlc3RDYWxsYmFja1wiLFxuICAgICAgICAgICAgICBcIlJlY2VpdmVkIEVycm9yOiBcIiArIGluc3BlY3RFcnJvcihyZXN1bHQuZXJyb3IpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50VHlwZUhlYWRlck9ySGVhZGVycyA9IChfYiA9IHJlc3VsdC5oZWFkZXJzW1wiY29udGVudC10eXBlXCJdKSAhPSBudWxsID8gX2IgOiBudWxsO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29udGVudFR5cGVIZWFkZXJPckhlYWRlcnMpKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnRUeXBlID0gY29udGVudFR5cGVIZWFkZXJPckhlYWRlcnMuam9pbihcIiwgXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29udGVudFR5cGUgPSBjb250ZW50VHlwZUhlYWRlck9ySGVhZGVycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTyxcbiAgICAgICAgICAgICAgXCJBdXRoLnJlcXVlc3RUb2tlbigpLnRva2VuUmVxdWVzdENhbGxiYWNrXCIsXG4gICAgICAgICAgICAgIFwiUmVjZWl2ZWQ7IGNvbnRlbnQtdHlwZTogXCIgKyBjb250ZW50VHlwZSArIFwiOyBib2R5OiBcIiArIGluc3BlY3RCb2R5KGJvZHkpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0LmVycm9yKSB7XG4gICAgICAgICAgICBjYihyZXN1bHQuZXJyb3IsIG51bGwpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0LnVucGFja2VkKSB7XG4gICAgICAgICAgICBjYihudWxsLCBib2R5KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmlzQnVmZmVyKGJvZHkpKVxuICAgICAgICAgICAgYm9keSA9IGJvZHkudG9TdHJpbmcoKTtcbiAgICAgICAgICBpZiAoIWNvbnRlbnRUeXBlKSB7XG4gICAgICAgICAgICBjYihuZXcgRXJyb3JJbmZvKFwiYXV0aFVybCByZXNwb25zZSBpcyBtaXNzaW5nIGEgY29udGVudC10eXBlIGhlYWRlclwiLCA0MDE3MCwgNDAxKSwgbnVsbCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGpzb24gPSBjb250ZW50VHlwZS5pbmRleE9mKFwiYXBwbGljYXRpb24vanNvblwiKSA+IC0xLCB0ZXh0ID0gY29udGVudFR5cGUuaW5kZXhPZihcInRleHQvcGxhaW5cIikgPiAtMSB8fCBjb250ZW50VHlwZS5pbmRleE9mKFwiYXBwbGljYXRpb24vand0XCIpID4gLTE7XG4gICAgICAgICAgaWYgKCFqc29uICYmICF0ZXh0KSB7XG4gICAgICAgICAgICBjYihcbiAgICAgICAgICAgICAgbmV3IEVycm9ySW5mbyhcbiAgICAgICAgICAgICAgICBcImF1dGhVcmwgcmVzcG9uZGVkIHdpdGggdW5hY2NlcHRhYmxlIGNvbnRlbnQtdHlwZSBcIiArIGNvbnRlbnRUeXBlICsgXCIsIHNob3VsZCBiZSBlaXRoZXIgdGV4dC9wbGFpbiwgYXBwbGljYXRpb24vand0IG9yIGFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgICAgICA0MDE3MCxcbiAgICAgICAgICAgICAgICA0MDFcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGpzb24pIHtcbiAgICAgICAgICAgIGlmIChib2R5Lmxlbmd0aCA+IE1BWF9UT0tFTl9MRU5HVEgpIHtcbiAgICAgICAgICAgICAgY2IobmV3IEVycm9ySW5mbyhcImF1dGhVcmwgcmVzcG9uc2UgZXhjZWVkZWQgbWF4IHBlcm1pdHRlZCBsZW5ndGhcIiwgNDAxNzAsIDQwMSksIG51bGwpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBib2R5ID0gSlNPTi5wYXJzZShib2R5KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgY2IoXG4gICAgICAgICAgICAgICAgbmV3IEVycm9ySW5mbyhcbiAgICAgICAgICAgICAgICAgIFwiVW5leHBlY3RlZCBlcnJvciBwcm9jZXNzaW5nIGF1dGhVUkwgcmVzcG9uc2U7IGVyciA9IFwiICsgZS5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgNDAxNzAsXG4gICAgICAgICAgICAgICAgICA0MDFcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjYihudWxsLCBib2R5LCBjb250ZW50VHlwZSk7XG4gICAgICAgIH07XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgICAgXCJBdXRoLnJlcXVlc3RUb2tlbigpLnRva2VuUmVxdWVzdENhbGxiYWNrXCIsXG4gICAgICAgICAgXCJSZXF1ZXN0aW5nIHRva2VuIGZyb20gXCIgKyByZXNvbHZlZEF1dGhPcHRpb25zLmF1dGhVcmwgKyBcIjsgUGFyYW1zOiBcIiArIEpTT04uc3RyaW5naWZ5KGF1dGhQYXJhbXMpICsgXCI7IG1ldGhvZDogXCIgKyAodXNlUG9zdCA/IFwiUE9TVFwiIDogXCJHRVRcIilcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHVzZVBvc3QpIHtcbiAgICAgICAgICBjb25zdCBoZWFkZXJzID0gYXV0aEhlYWRlcnMgfHwge307XG4gICAgICAgICAgaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSA9IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI7XG4gICAgICAgICAgY29uc3QgYm9keSA9IHRvUXVlcnlTdHJpbmcoYXV0aFBhcmFtcykuc2xpY2UoMSk7XG4gICAgICAgICAgd2hlblByb21pc2VTZXR0bGVzKFxuICAgICAgICAgICAgdGhpcy5jbGllbnQuaHR0cC5kb1VyaShcbiAgICAgICAgICAgICAgSHR0cE1ldGhvZHNfZGVmYXVsdC5Qb3N0LFxuICAgICAgICAgICAgICByZXNvbHZlZEF1dGhPcHRpb25zLmF1dGhVcmwsXG4gICAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAgIHByb3ZpZGVkUXNQYXJhbXNcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICAoZXJyLCByZXN1bHQpID0+IGVyciA/IGF1dGhVcmxSZXF1ZXN0Q2FsbGJhY2soZXJyKSA6IGF1dGhVcmxSZXF1ZXN0Q2FsbGJhY2socmVzdWx0KVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2hlblByb21pc2VTZXR0bGVzKFxuICAgICAgICAgICAgdGhpcy5jbGllbnQuaHR0cC5kb1VyaShIdHRwTWV0aG9kc19kZWZhdWx0LkdldCwgcmVzb2x2ZWRBdXRoT3B0aW9ucy5hdXRoVXJsLCBhdXRoSGVhZGVycyB8fCB7fSwgbnVsbCwgYXV0aFBhcmFtcyksXG4gICAgICAgICAgICAoZXJyLCByZXN1bHQpID0+IGVyciA/IGF1dGhVcmxSZXF1ZXN0Q2FsbGJhY2soZXJyKSA6IGF1dGhVcmxSZXF1ZXN0Q2FsbGJhY2socmVzdWx0KVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChyZXNvbHZlZEF1dGhPcHRpb25zLmtleSkge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgICBcIkF1dGgucmVxdWVzdFRva2VuKClcIixcbiAgICAgICAgXCJ1c2luZyB0b2tlbiBhdXRoIHdpdGggY2xpZW50LXNpZGUgc2lnbmluZ1wiXG4gICAgICApO1xuICAgICAgdG9rZW5SZXF1ZXN0Q2FsbGJhY2sgPSAocGFyYW1zLCBjYikgPT4ge1xuICAgICAgICB3aGVuUHJvbWlzZVNldHRsZXMoXG4gICAgICAgICAgdGhpcy5jcmVhdGVUb2tlblJlcXVlc3QocGFyYW1zLCByZXNvbHZlZEF1dGhPcHRpb25zKSxcbiAgICAgICAgICAoZXJyLCByZXN1bHQpID0+IGNiKGVyciwgcmVzdWx0ICE9IG51bGwgPyByZXN1bHQgOiBudWxsKVxuICAgICAgICApO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbXNnID0gXCJOZWVkIGEgbmV3IHRva2VuLCBidXQgYXV0aE9wdGlvbnMgZG9lcyBub3QgaW5jbHVkZSBhbnkgd2F5IHRvIHJlcXVlc3Qgb25lIChubyBhdXRoVXJsLCBhdXRoQ2FsbGJhY2ssIG9yIGtleSlcIjtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUixcbiAgICAgICAgXCJBdXRoKClcIixcbiAgICAgICAgXCJsaWJyYXJ5IGluaXRpYWxpemVkIHdpdGggYSB0b2tlbiBsaXRlcmFsIHdpdGhvdXQgYW55IHdheSB0byByZW5ldyB0aGUgdG9rZW4gd2hlbiBpdCBleHBpcmVzIChubyBhdXRoVXJsLCBhdXRoQ2FsbGJhY2ssIG9yIGtleSkuIFNlZSBodHRwczovL2hlbHAuYWJseS5pby9lcnJvci80MDE3MSBmb3IgaGVscFwiXG4gICAgICApO1xuICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhtc2csIDQwMTcxLCA0MDMpO1xuICAgIH1cbiAgICBpZiAoXCJjYXBhYmlsaXR5XCIgaW4gcmVzb2x2ZWRUb2tlblBhcmFtcylcbiAgICAgIHJlc29sdmVkVG9rZW5QYXJhbXMuY2FwYWJpbGl0eSA9IGMxNG4oXG4gICAgICAgIHJlc29sdmVkVG9rZW5QYXJhbXMuY2FwYWJpbGl0eVxuICAgICAgKTtcbiAgICBjb25zdCB0b2tlblJlcXVlc3QgPSAoc2lnbmVkVG9rZW5QYXJhbXMsIHRva2VuQ2IpID0+IHtcbiAgICAgIGNvbnN0IGtleU5hbWUgPSBzaWduZWRUb2tlblBhcmFtcy5rZXlOYW1lLCBwYXRoID0gXCIva2V5cy9cIiArIGtleU5hbWUgKyBcIi9yZXF1ZXN0VG9rZW5cIiwgdG9rZW5VcmkgPSBmdW5jdGlvbihob3N0KSB7XG4gICAgICAgIHJldHVybiBjbGllbnQuYmFzZVVyaShob3N0KSArIHBhdGg7XG4gICAgICB9O1xuICAgICAgY29uc3QgcmVxdWVzdEhlYWRlcnMgPSBkZWZhdWx0c19kZWZhdWx0LmRlZmF1bHRQb3N0SGVhZGVycyh0aGlzLmNsaWVudC5vcHRpb25zKTtcbiAgICAgIGlmIChyZXNvbHZlZEF1dGhPcHRpb25zLnJlcXVlc3RIZWFkZXJzKVxuICAgICAgICBtaXhpbihyZXF1ZXN0SGVhZGVycywgcmVzb2x2ZWRBdXRoT3B0aW9ucy5yZXF1ZXN0SGVhZGVycyk7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgIFwiQXV0aC5yZXF1ZXN0VG9rZW4oKS5yZXF1ZXN0VG9rZW5cIixcbiAgICAgICAgXCJTZW5kaW5nIFBPU1QgdG8gXCIgKyBwYXRoICsgXCI7IFRva2VuIHBhcmFtczogXCIgKyBKU09OLnN0cmluZ2lmeShzaWduZWRUb2tlblBhcmFtcylcbiAgICAgICk7XG4gICAgICB3aGVuUHJvbWlzZVNldHRsZXMoXG4gICAgICAgIHRoaXMuY2xpZW50Lmh0dHAuZG8oSHR0cE1ldGhvZHNfZGVmYXVsdC5Qb3N0LCB0b2tlblVyaSwgcmVxdWVzdEhlYWRlcnMsIEpTT04uc3RyaW5naWZ5KHNpZ25lZFRva2VuUGFyYW1zKSwgbnVsbCksXG4gICAgICAgIChlcnIsIHJlc3VsdCkgPT4gZXJyID8gdG9rZW5DYihlcnIpIDogdG9rZW5DYihyZXN1bHQuZXJyb3IsIHJlc3VsdC5ib2R5LCByZXN1bHQudW5wYWNrZWQpXG4gICAgICApO1xuICAgIH07XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxldCB0b2tlblJlcXVlc3RDYWxsYmFja1RpbWVvdXRFeHBpcmVkID0gZmFsc2UsIHRpbWVvdXRMZW5ndGggPSB0aGlzLmNsaWVudC5vcHRpb25zLnRpbWVvdXRzLnJlYWx0aW1lUmVxdWVzdFRpbWVvdXQsIHRva2VuUmVxdWVzdENhbGxiYWNrVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0b2tlblJlcXVlc3RDYWxsYmFja1RpbWVvdXRFeHBpcmVkID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgbXNnID0gXCJUb2tlbiByZXF1ZXN0IGNhbGxiYWNrIHRpbWVkIG91dCBhZnRlciBcIiArIHRpbWVvdXRMZW5ndGggLyAxZTMgKyBcIiBzZWNvbmRzXCI7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLCBcIkF1dGgucmVxdWVzdFRva2VuKClcIiwgbXNnKTtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvckluZm8obXNnLCA0MDE3MCwgNDAxKSk7XG4gICAgICB9LCB0aW1lb3V0TGVuZ3RoKTtcbiAgICAgIHRva2VuUmVxdWVzdENhbGxiYWNrKHJlc29sdmVkVG9rZW5QYXJhbXMsIChlcnIsIHRva2VuUmVxdWVzdE9yRGV0YWlscywgY29udGVudFR5cGUpID0+IHtcbiAgICAgICAgaWYgKHRva2VuUmVxdWVzdENhbGxiYWNrVGltZW91dEV4cGlyZWQpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjbGVhclRpbWVvdXQodG9rZW5SZXF1ZXN0Q2FsbGJhY2tUaW1lb3V0KTtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLFxuICAgICAgICAgICAgXCJBdXRoLnJlcXVlc3RUb2tlbigpXCIsXG4gICAgICAgICAgICBcInRva2VuIHJlcXVlc3Qgc2lnbmluZyBjYWxsIHJldHVybmVkIGVycm9yOyBlcnIgPSBcIiArIGluc3BlY3RFcnJvcihlcnIpXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZWplY3Qobm9ybWFsaXNlQXV0aGNhbGxiYWNrRXJyb3IoZXJyKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdG9rZW5SZXF1ZXN0T3JEZXRhaWxzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgaWYgKHRva2VuUmVxdWVzdE9yRGV0YWlscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3JJbmZvKFwiVG9rZW4gc3RyaW5nIGlzIGVtcHR5XCIsIDQwMTcwLCA0MDEpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRva2VuUmVxdWVzdE9yRGV0YWlscy5sZW5ndGggPiBNQVhfVE9LRU5fTEVOR1RIKSB7XG4gICAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICAgIG5ldyBFcnJvckluZm8oXG4gICAgICAgICAgICAgICAgXCJUb2tlbiBzdHJpbmcgZXhjZWVkZWQgbWF4IHBlcm1pdHRlZCBsZW5ndGggKHdhcyBcIiArIHRva2VuUmVxdWVzdE9yRGV0YWlscy5sZW5ndGggKyBcIiBieXRlcylcIixcbiAgICAgICAgICAgICAgICA0MDE3MCxcbiAgICAgICAgICAgICAgICA0MDFcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRva2VuUmVxdWVzdE9yRGV0YWlscyA9PT0gXCJ1bmRlZmluZWRcIiB8fCB0b2tlblJlcXVlc3RPckRldGFpbHMgPT09IFwibnVsbFwiKSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9ySW5mbyhcIlRva2VuIHN0cmluZyB3YXMgbGl0ZXJhbCBudWxsL3VuZGVmaW5lZFwiLCA0MDE3MCwgNDAxKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0b2tlblJlcXVlc3RPckRldGFpbHNbMF0gPT09IFwie1wiICYmICEoY29udGVudFR5cGUgJiYgY29udGVudFR5cGUuaW5kZXhPZihcImFwcGxpY2F0aW9uL2p3dFwiKSA+IC0xKSkge1xuICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICBuZXcgRXJyb3JJbmZvKFxuICAgICAgICAgICAgICAgIFwiVG9rZW4gd2FzIGRvdWJsZS1lbmNvZGVkOyBtYWtlIHN1cmUgeW91J3JlIG5vdCBKU09OLWVuY29kaW5nIGFuIGFscmVhZHkgZW5jb2RlZCB0b2tlbiByZXF1ZXN0IG9yIGRldGFpbHNcIixcbiAgICAgICAgICAgICAgICA0MDE3MCxcbiAgICAgICAgICAgICAgICA0MDFcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZSh7IHRva2VuOiB0b2tlblJlcXVlc3RPckRldGFpbHMgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRva2VuUmVxdWVzdE9yRGV0YWlscyAhPT0gXCJvYmplY3RcIiB8fCB0b2tlblJlcXVlc3RPckRldGFpbHMgPT09IG51bGwpIHtcbiAgICAgICAgICBjb25zdCBtc2cgPSBcIkV4cGVjdGVkIHRva2VuIHJlcXVlc3QgY2FsbGJhY2sgdG8gY2FsbCBiYWNrIHdpdGggYSB0b2tlbiBzdHJpbmcgb3IgdG9rZW4gcmVxdWVzdC9kZXRhaWxzIG9iamVjdCwgYnV0IGdvdCBhIFwiICsgdHlwZW9mIHRva2VuUmVxdWVzdE9yRGV0YWlscztcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUiwgXCJBdXRoLnJlcXVlc3RUb2tlbigpXCIsIG1zZyk7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvckluZm8obXNnLCA0MDE3MCwgNDAxKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9iamVjdFNpemUgPSBKU09OLnN0cmluZ2lmeSh0b2tlblJlcXVlc3RPckRldGFpbHMpLmxlbmd0aDtcbiAgICAgICAgaWYgKG9iamVjdFNpemUgPiBNQVhfVE9LRU5fTEVOR1RIICYmICFyZXNvbHZlZEF1dGhPcHRpb25zLnN1cHByZXNzTWF4TGVuZ3RoQ2hlY2spIHtcbiAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICBuZXcgRXJyb3JJbmZvKFxuICAgICAgICAgICAgICBcIlRva2VuIHJlcXVlc3QvZGV0YWlscyBvYmplY3QgZXhjZWVkZWQgbWF4IHBlcm1pdHRlZCBzdHJpbmdpZmllZCBzaXplICh3YXMgXCIgKyBvYmplY3RTaXplICsgXCIgYnl0ZXMpXCIsXG4gICAgICAgICAgICAgIDQwMTcwLFxuICAgICAgICAgICAgICA0MDFcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXCJpc3N1ZWRcIiBpbiB0b2tlblJlcXVlc3RPckRldGFpbHMpIHtcbiAgICAgICAgICByZXNvbHZlKHRva2VuUmVxdWVzdE9yRGV0YWlscyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKFwia2V5TmFtZVwiIGluIHRva2VuUmVxdWVzdE9yRGV0YWlscykpIHtcbiAgICAgICAgICBjb25zdCBtc2cgPSBcIkV4cGVjdGVkIHRva2VuIHJlcXVlc3QgY2FsbGJhY2sgdG8gY2FsbCBiYWNrIHdpdGggYSB0b2tlbiBzdHJpbmcsIHRva2VuIHJlcXVlc3Qgb2JqZWN0LCBvciB0b2tlbiBkZXRhaWxzIG9iamVjdFwiO1xuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLCBcIkF1dGgucmVxdWVzdFRva2VuKClcIiwgbXNnKTtcbiAgICAgICAgICByZWplY3QobmV3IEVycm9ySW5mbyhtc2csIDQwMTcwLCA0MDEpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdG9rZW5SZXF1ZXN0KHRva2VuUmVxdWVzdE9yRGV0YWlscywgKGVycjIsIHRva2VuUmVzcG9uc2UsIHVucGFja2VkKSA9PiB7XG4gICAgICAgICAgaWYgKGVycjIpIHtcbiAgICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUixcbiAgICAgICAgICAgICAgXCJBdXRoLnJlcXVlc3RUb2tlbigpXCIsXG4gICAgICAgICAgICAgIFwidG9rZW4gcmVxdWVzdCBBUEkgY2FsbCByZXR1cm5lZCBlcnJvcjsgZXJyID0gXCIgKyBpbnNwZWN0RXJyb3IoZXJyMilcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZWplY3Qobm9ybWFsaXNlQXV0aGNhbGxiYWNrRXJyb3IoZXJyMikpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXVucGFja2VkKVxuICAgICAgICAgICAgdG9rZW5SZXNwb25zZSA9IEpTT04ucGFyc2UodG9rZW5SZXNwb25zZSk7XG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiQXV0aC5nZXRUb2tlbigpXCIsIFwidG9rZW4gcmVjZWl2ZWRcIik7XG4gICAgICAgICAgcmVzb2x2ZSh0b2tlblJlc3BvbnNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCBzaWduIGEgdG9rZW4gcmVxdWVzdCBiYXNlZCBvbiB0aGUgZ2l2ZW4gb3B0aW9ucy5cbiAgICogTk9URSB0aGlzIGNhbiBvbmx5IGJlIHVzZWQgd2hlbiB0aGUga2V5IHZhbHVlIGlzIGF2YWlsYWJsZSBsb2NhbGx5LlxuICAgKiBPdGhlcndpc2UsIHNpZ25lZCB0b2tlbiByZXF1ZXN0cyBtdXN0IGJlIG9idGFpbmVkIGZyb20gdGhlIGtleVxuICAgKiBvd25lciAoZWl0aGVyIHVzaW5nIHRoZSB0b2tlbiByZXF1ZXN0IGNhbGxiYWNrIG9yIHVybCkuXG4gICAqXG4gICAqIEBwYXJhbSBhdXRoT3B0aW9uc1xuICAgKiBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgcmVxdWVzdCBvcHRpb25zOlxuICAgKiAtIGtleTogICAgICAgICAgIHRoZSBrZXkgdG8gdXNlLiBJZiBub3Qgc3BlY2lmaWVkLCBhIGtleSBwYXNzZWQgaW4gY29uc3RydWN0aW5nXG4gICAqICAgICAgICAgICAgICAgICAgdGhlIFJlc3QgaW50ZXJmYWNlIHdpbGwgYmUgdXNlZFxuICAgKlxuICAgKiAtIHF1ZXJ5VGltZSAgICAgIChvcHRpb25hbCkgYm9vbGVhbiBpbmRpY2F0aW5nIHRoYXQgdGhlIGFibHkgc3lzdGVtIHNob3VsZCBiZVxuICAgKiAgICAgICAgICAgICAgICAgIHF1ZXJpZWQgZm9yIHRoZSBjdXJyZW50IHRpbWUgd2hlbiBub25lIGlzIHNwZWNpZmllZCBleHBsaWNpdGx5XG4gICAqXG4gICAqIC0gcmVxdWVzdEhlYWRlcnMgKG9wdGlvbmFsLCB1bnN1cHBvcnRlZCwgZm9yIHRlc3Rpbmcgb25seSkgZXh0cmEgaGVhZGVycyB0byBhZGQgdG8gdGhlXG4gICAqICAgICAgICAgICAgICAgICAgcmVxdWVzdFRva2VuIHJlcXVlc3RcbiAgICpcbiAgICogQHBhcmFtIHRva2VuUGFyYW1zXG4gICAqIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBwYXJhbWV0ZXJzIGZvciB0aGUgcmVxdWVzdGVkIHRva2VuOlxuICAgKiAtIHR0bDogICAgICAgKG9wdGlvbmFsKSB0aGUgcmVxdWVzdGVkIGxpZmUgb2YgdGhlIHRva2VuIGluIG1zLiBJZiBub25lIGlzIHNwZWNpZmllZFxuICAgKiAgICAgICAgICAgICAgICAgIGEgZGVmYXVsdCBvZiAxIGhvdXIgaXMgcHJvdmlkZWQuIFRoZSBtYXhpbXVtIGxpZmV0aW1lIGlzIDI0aG91cnM7IGFueSByZXF1ZXN0XG4gICAqICAgICAgICAgICAgICAgICAgZXhjZWVkaW5nIHRoYXQgbGlmZXRpbWUgd2lsbCBiZSByZWplY3RlZCB3aXRoIGFuIGVycm9yLlxuICAgKlxuICAgKiAtIGNhcGFiaWxpdHk6ICAgIChvcHRpb25hbCkgdGhlIGNhcGFiaWxpdHkgdG8gYXNzb2NpYXRlIHdpdGggdGhlIGFjY2VzcyB0b2tlbi5cbiAgICogICAgICAgICAgICAgICAgICBJZiBub25lIGlzIHNwZWNpZmllZCwgYSB0b2tlbiB3aWxsIGJlIHJlcXVlc3RlZCB3aXRoIGFsbCBvZiB0aGVcbiAgICogICAgICAgICAgICAgICAgICBjYXBhYmlsaXRpZXMgb2YgdGhlIHNwZWNpZmllZCBrZXkuXG4gICAqXG4gICAqIC0gY2xpZW50SWQ6ICAgICAgKG9wdGlvbmFsKSBhIGNsaWVudCBJRCB0byBhc3NvY2lhdGUgd2l0aCB0aGUgdG9rZW47IGlmIG5vdFxuICAgKiAgICAgICAgICAgICAgICAgIHNwZWNpZmllZCwgYSBjbGllbnRJZCBwYXNzZWQgaW4gY29uc3RydWN0aW5nIHRoZSBSZXN0IGludGVyZmFjZSB3aWxsIGJlIHVzZWRcbiAgICpcbiAgICogLSB0aW1lc3RhbXA6ICAgICAob3B0aW9uYWwpIHRoZSB0aW1lIGluIG1zIHNpbmNlIHRoZSBlcG9jaC4gSWYgbm9uZSBpcyBzcGVjaWZpZWQsXG4gICAqICAgICAgICAgICAgICAgICAgdGhlIHN5c3RlbSB3aWxsIGJlIHF1ZXJpZWQgZm9yIGEgdGltZSB2YWx1ZSB0byB1c2UuXG4gICAqL1xuICBhc3luYyBjcmVhdGVUb2tlblJlcXVlc3QodG9rZW5QYXJhbXMsIGF1dGhPcHRpb25zKSB7XG4gICAgYXV0aE9wdGlvbnMgPSBhdXRoT3B0aW9ucyB8fCB0aGlzLmF1dGhPcHRpb25zO1xuICAgIHRva2VuUGFyYW1zID0gdG9rZW5QYXJhbXMgfHwgY29weSh0aGlzLnRva2VuUGFyYW1zKTtcbiAgICBjb25zdCBrZXkgPSBhdXRoT3B0aW9ucy5rZXk7XG4gICAgaWYgKCFrZXkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvckluZm8oXCJObyBrZXkgc3BlY2lmaWVkXCIsIDQwMTAxLCA0MDMpO1xuICAgIH1cbiAgICBjb25zdCBrZXlQYXJ0cyA9IGtleS5zcGxpdChcIjpcIiksIGtleU5hbWUgPSBrZXlQYXJ0c1swXSwga2V5U2VjcmV0ID0ga2V5UGFydHNbMV07XG4gICAgaWYgKCFrZXlTZWNyZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvckluZm8oXCJJbnZhbGlkIGtleSBzcGVjaWZpZWRcIiwgNDAxMDEsIDQwMyk7XG4gICAgfVxuICAgIGlmICh0b2tlblBhcmFtcy5jbGllbnRJZCA9PT0gXCJcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcImNsaWVudElkIGNhblxcdTIwMTl0IGJlIGFuIGVtcHR5IHN0cmluZ1wiLCA0MDAxMiwgNDAwKTtcbiAgICB9XG4gICAgaWYgKFwiY2FwYWJpbGl0eVwiIGluIHRva2VuUGFyYW1zKSB7XG4gICAgICB0b2tlblBhcmFtcy5jYXBhYmlsaXR5ID0gYzE0bih0b2tlblBhcmFtcy5jYXBhYmlsaXR5KTtcbiAgICB9XG4gICAgY29uc3QgcmVxdWVzdCA9IG1peGluKHsga2V5TmFtZSB9LCB0b2tlblBhcmFtcyksIGNsaWVudElkID0gdG9rZW5QYXJhbXMuY2xpZW50SWQgfHwgXCJcIiwgdHRsID0gdG9rZW5QYXJhbXMudHRsIHx8IFwiXCIsIGNhcGFiaWxpdHkgPSB0b2tlblBhcmFtcy5jYXBhYmlsaXR5IHx8IFwiXCI7XG4gICAgaWYgKCFyZXF1ZXN0LnRpbWVzdGFtcCkge1xuICAgICAgcmVxdWVzdC50aW1lc3RhbXAgPSBhd2FpdCB0aGlzLmdldFRpbWVzdGFtcChhdXRoT3B0aW9ucyAmJiBhdXRoT3B0aW9ucy5xdWVyeVRpbWUpO1xuICAgIH1cbiAgICBjb25zdCBub25jZSA9IHJlcXVlc3Qubm9uY2UgfHwgKHJlcXVlc3Qubm9uY2UgPSByYW5kb20oKSksIHRpbWVzdGFtcCA9IHJlcXVlc3QudGltZXN0YW1wO1xuICAgIGNvbnN0IHNpZ25UZXh0ID0gcmVxdWVzdC5rZXlOYW1lICsgXCJcXG5cIiArIHR0bCArIFwiXFxuXCIgKyBjYXBhYmlsaXR5ICsgXCJcXG5cIiArIGNsaWVudElkICsgXCJcXG5cIiArIHRpbWVzdGFtcCArIFwiXFxuXCIgKyBub25jZSArIFwiXFxuXCI7XG4gICAgcmVxdWVzdC5tYWMgPSByZXF1ZXN0Lm1hYyB8fCBobWFjKHNpZ25UZXh0LCBrZXlTZWNyZXQpO1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIkF1dGguZ2V0VG9rZW5SZXF1ZXN0KClcIiwgXCJnZW5lcmF0ZWQgc2lnbmVkIHJlcXVlc3RcIik7XG4gICAgcmV0dXJuIHJlcXVlc3Q7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgYXV0aCBxdWVyeSBwYXJhbXMgdG8gdXNlIGZvciBhIHdlYnNvY2tldCBjb25uZWN0aW9uLFxuICAgKiBiYXNlZCBvbiB0aGUgY3VycmVudCBhdXRoIHBhcmFtZXRlcnNcbiAgICovXG4gIGFzeW5jIGdldEF1dGhQYXJhbXMoKSB7XG4gICAgaWYgKHRoaXMubWV0aG9kID09IFwiYmFzaWNcIilcbiAgICAgIHJldHVybiB7IGtleTogdGhpcy5rZXkgfTtcbiAgICBlbHNlIHtcbiAgICAgIGxldCB0b2tlbkRldGFpbHMgPSBhd2FpdCB0aGlzLl9lbnN1cmVWYWxpZEF1dGhDcmVkZW50aWFscyhmYWxzZSk7XG4gICAgICBpZiAoIXRva2VuRGV0YWlscykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdXRoLmdldEF1dGhQYXJhbXMoKTogX2Vuc3VyZVZhbGlkQXV0aENyZWRlbnRpYWxzIHJldHVybmVkIG5vIGVycm9yIG9yIHRva2VuRGV0YWlsc1wiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGFjY2Vzc190b2tlbjogdG9rZW5EZXRhaWxzLnRva2VuIH07XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGF1dGhvcml6YXRpb24gaGVhZGVyIHRvIHVzZSBmb3IgYSBSRVNUIG9yIGNvbWV0IHJlcXVlc3QsXG4gICAqIGJhc2VkIG9uIHRoZSBjdXJyZW50IGF1dGggcGFyYW1ldGVyc1xuICAgKi9cbiAgYXN5bmMgZ2V0QXV0aEhlYWRlcnMoKSB7XG4gICAgaWYgKHRoaXMubWV0aG9kID09IFwiYmFzaWNcIikge1xuICAgICAgcmV0dXJuIHsgYXV0aG9yaXphdGlvbjogXCJCYXNpYyBcIiArIHRoaXMuYmFzaWNLZXkgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdG9rZW5EZXRhaWxzID0gYXdhaXQgdGhpcy5fZW5zdXJlVmFsaWRBdXRoQ3JlZGVudGlhbHMoZmFsc2UpO1xuICAgICAgaWYgKCF0b2tlbkRldGFpbHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXV0aC5nZXRBdXRoUGFyYW1zKCk6IF9lbnN1cmVWYWxpZEF1dGhDcmVkZW50aWFscyByZXR1cm5lZCBubyBlcnJvciBvciB0b2tlbkRldGFpbHNcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4geyBhdXRob3JpemF0aW9uOiBcIkJlYXJlciBcIiArIHRvQmFzZTY0KHRva2VuRGV0YWlscy50b2tlbikgfTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCB0aW1lIGJhc2VkIG9uIHRoZSBsb2NhbCBjbG9jayxcbiAgICogb3IgaWYgdGhlIG9wdGlvbiBxdWVyeVRpbWUgaXMgdHJ1ZSwgcmV0dXJuIHRoZSBzZXJ2ZXIgdGltZS5cbiAgICogVGhlIHNlcnZlciB0aW1lIG9mZnNldCBmcm9tIHRoZSBsb2NhbCB0aW1lIGlzIHN0b3JlZCBzbyB0aGF0XG4gICAqIG9ubHkgb25lIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB0byBnZXQgdGhlIHRpbWUgaXMgZXZlciBuZWVkZWRcbiAgICovXG4gIGFzeW5jIGdldFRpbWVzdGFtcChxdWVyeVRpbWUpIHtcbiAgICBpZiAoIXRoaXMuaXNUaW1lT2Zmc2V0U2V0KCkgJiYgKHF1ZXJ5VGltZSB8fCB0aGlzLmF1dGhPcHRpb25zLnF1ZXJ5VGltZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNsaWVudC50aW1lKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFRpbWVzdGFtcFVzaW5nT2Zmc2V0KCk7XG4gICAgfVxuICB9XG4gIGdldFRpbWVzdGFtcFVzaW5nT2Zmc2V0KCkge1xuICAgIHJldHVybiBEYXRlLm5vdygpICsgKHRoaXMuY2xpZW50LnNlcnZlclRpbWVPZmZzZXQgfHwgMCk7XG4gIH1cbiAgaXNUaW1lT2Zmc2V0U2V0KCkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5zZXJ2ZXJUaW1lT2Zmc2V0ICE9PSBudWxsO1xuICB9XG4gIF9zYXZlQmFzaWNPcHRpb25zKGF1dGhPcHRpb25zKSB7XG4gICAgdGhpcy5tZXRob2QgPSBcImJhc2ljXCI7XG4gICAgdGhpcy5rZXkgPSBhdXRoT3B0aW9ucy5rZXk7XG4gICAgdGhpcy5iYXNpY0tleSA9IHRvQmFzZTY0KGF1dGhPcHRpb25zLmtleSk7XG4gICAgdGhpcy5hdXRoT3B0aW9ucyA9IGF1dGhPcHRpb25zIHx8IHt9O1xuICAgIGlmIChcImNsaWVudElkXCIgaW4gYXV0aE9wdGlvbnMpIHtcbiAgICAgIHRoaXMuX3VzZXJTZXRDbGllbnRJZChhdXRoT3B0aW9ucy5jbGllbnRJZCk7XG4gICAgfVxuICB9XG4gIF9zYXZlVG9rZW5PcHRpb25zKHRva2VuUGFyYW1zLCBhdXRoT3B0aW9ucykge1xuICAgIHRoaXMubWV0aG9kID0gXCJ0b2tlblwiO1xuICAgIGlmICh0b2tlblBhcmFtcykge1xuICAgICAgdGhpcy50b2tlblBhcmFtcyA9IHRva2VuUGFyYW1zO1xuICAgIH1cbiAgICBpZiAoYXV0aE9wdGlvbnMpIHtcbiAgICAgIGlmIChhdXRoT3B0aW9ucy50b2tlbikge1xuICAgICAgICBhdXRoT3B0aW9ucy50b2tlbkRldGFpbHMgPSB0eXBlb2YgYXV0aE9wdGlvbnMudG9rZW4gPT09IFwic3RyaW5nXCIgPyB7IHRva2VuOiBhdXRoT3B0aW9ucy50b2tlbiB9IDogYXV0aE9wdGlvbnMudG9rZW47XG4gICAgICB9XG4gICAgICBpZiAoYXV0aE9wdGlvbnMudG9rZW5EZXRhaWxzKSB7XG4gICAgICAgIHRoaXMudG9rZW5EZXRhaWxzID0gYXV0aE9wdGlvbnMudG9rZW5EZXRhaWxzO1xuICAgICAgfVxuICAgICAgaWYgKFwiY2xpZW50SWRcIiBpbiBhdXRoT3B0aW9ucykge1xuICAgICAgICB0aGlzLl91c2VyU2V0Q2xpZW50SWQoYXV0aE9wdGlvbnMuY2xpZW50SWQpO1xuICAgICAgfVxuICAgICAgdGhpcy5hdXRoT3B0aW9ucyA9IGF1dGhPcHRpb25zO1xuICAgIH1cbiAgfVxuICAvKiBAcGFyYW0gZm9yY2VTdXBlcnNlZGU6IGZvcmNlIGEgbmV3IHRva2VuIHJlcXVlc3QgZXZlbiBpZiB0aGVyZSdzIG9uZSBpblxuICAgKiBwcm9ncmVzcywgbWFraW5nIGFsbCBwZW5kaW5nIGNhbGxiYWNrcyB3YWl0IGZvciB0aGUgbmV3IG9uZSAqL1xuICBhc3luYyBfZW5zdXJlVmFsaWRBdXRoQ3JlZGVudGlhbHMoZm9yY2VTdXBlcnNlZGUpIHtcbiAgICBjb25zdCB0b2tlbiA9IHRoaXMudG9rZW5EZXRhaWxzO1xuICAgIGlmICh0b2tlbikge1xuICAgICAgaWYgKHRoaXMuX3Rva2VuQ2xpZW50SWRNaXNtYXRjaCh0b2tlbi5jbGllbnRJZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcbiAgICAgICAgICBcIk1pc21hdGNoIGJldHdlZW4gY2xpZW50SWQgaW4gdG9rZW4gKFwiICsgdG9rZW4uY2xpZW50SWQgKyBcIikgYW5kIGN1cnJlbnQgY2xpZW50SWQgKFwiICsgdGhpcy5jbGllbnRJZCArIFwiKVwiLFxuICAgICAgICAgIDQwMTAyLFxuICAgICAgICAgIDQwM1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmlzVGltZU9mZnNldFNldCgpIHx8ICF0b2tlbi5leHBpcmVzIHx8IHRva2VuLmV4cGlyZXMgPj0gdGhpcy5nZXRUaW1lc3RhbXBVc2luZ09mZnNldCgpKSB7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgICAgXCJBdXRoLmdldFRva2VuKClcIixcbiAgICAgICAgICBcInVzaW5nIGNhY2hlZCB0b2tlbjsgZXhwaXJlcyA9IFwiICsgdG9rZW4uZXhwaXJlc1xuICAgICAgICApO1xuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICB9XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJBdXRoLmdldFRva2VuKClcIiwgXCJkZWxldGluZyBleHBpcmVkIHRva2VuXCIpO1xuICAgICAgdGhpcy50b2tlbkRldGFpbHMgPSBudWxsO1xuICAgIH1cbiAgICBjb25zdCBwcm9taXNlID0gKHRoaXMud2FpdGluZ0ZvclRva2VuUmVxdWVzdCB8fCAodGhpcy53YWl0aW5nRm9yVG9rZW5SZXF1ZXN0ID0gbXVsdGljYXN0ZXJfZGVmYXVsdC5jcmVhdGUodGhpcy5sb2dnZXIpKSkuY3JlYXRlUHJvbWlzZSgpO1xuICAgIGlmICh0aGlzLmN1cnJlbnRUb2tlblJlcXVlc3RJZCAhPT0gbnVsbCAmJiAhZm9yY2VTdXBlcnNlZGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgICBjb25zdCB0b2tlblJlcXVlc3RJZCA9IHRoaXMuY3VycmVudFRva2VuUmVxdWVzdElkID0gZ2V0VG9rZW5SZXF1ZXN0SWQoKTtcbiAgICBsZXQgdG9rZW5SZXNwb25zZSwgY2F1Z2h0RXJyb3IgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICB0b2tlblJlc3BvbnNlID0gYXdhaXQgdGhpcy5yZXF1ZXN0VG9rZW4odGhpcy50b2tlblBhcmFtcywgdGhpcy5hdXRoT3B0aW9ucyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjYXVnaHRFcnJvciA9IGVycjtcbiAgICB9XG4gICAgaWYgKHRoaXMuY3VycmVudFRva2VuUmVxdWVzdElkID4gdG9rZW5SZXF1ZXN0SWQpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgICAgXCJBdXRoLl9lbnN1cmVWYWxpZEF1dGhDcmVkZW50aWFscygpXCIsXG4gICAgICAgIFwiRGlzY2FyZGluZyB0b2tlbiByZXF1ZXN0IHJlc3BvbnNlOyBvdmVydGFrZW4gYnkgbmV3ZXIgb25lXCJcbiAgICAgICk7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50VG9rZW5SZXF1ZXN0SWQgPSBudWxsO1xuICAgIGNvbnN0IG11bHRpY2FzdGVyID0gdGhpcy53YWl0aW5nRm9yVG9rZW5SZXF1ZXN0O1xuICAgIHRoaXMud2FpdGluZ0ZvclRva2VuUmVxdWVzdCA9IG51bGw7XG4gICAgaWYgKGNhdWdodEVycm9yKSB7XG4gICAgICBtdWx0aWNhc3RlciA9PSBudWxsID8gdm9pZCAwIDogbXVsdGljYXN0ZXIucmVqZWN0QWxsKGNhdWdodEVycm9yKTtcbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgICBtdWx0aWNhc3RlciA9PSBudWxsID8gdm9pZCAwIDogbXVsdGljYXN0ZXIucmVzb2x2ZUFsbCh0aGlzLnRva2VuRGV0YWlscyA9IHRva2VuUmVzcG9uc2UpO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG4gIC8qIFVzZXItc2V0OiBjaGVjayB0eXBlcywgJyonIGlzIGRpc2FsbG93ZWQsIHRocm93IGFueSBlcnJvcnMgKi9cbiAgX3VzZXJTZXRDbGllbnRJZChjbGllbnRJZCkge1xuICAgIGlmICghKHR5cGVvZiBjbGllbnRJZCA9PT0gXCJzdHJpbmdcIiB8fCBjbGllbnRJZCA9PT0gbnVsbCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvckluZm8oXCJjbGllbnRJZCBtdXN0IGJlIGVpdGhlciBhIHN0cmluZyBvciBudWxsXCIsIDQwMDEyLCA0MDApO1xuICAgIH0gZWxzZSBpZiAoY2xpZW50SWQgPT09IFwiKlwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFxuICAgICAgICAnQ2FuXFx1MjAxOXQgdXNlIFwiKlwiIGFzIGEgY2xpZW50SWQgYXMgdGhhdCBzdHJpbmcgaXMgcmVzZXJ2ZWQuIChUbyBjaGFuZ2UgdGhlIGRlZmF1bHQgdG9rZW4gcmVxdWVzdCBiZWhhdmlvdXIgdG8gdXNlIGEgd2lsZGNhcmQgY2xpZW50SWQsIGluc3RhbnRpYXRlIHRoZSBsaWJyYXJ5IHdpdGgge2RlZmF1bHRUb2tlblBhcmFtczoge2NsaWVudElkOiBcIipcIn19KSwgb3IgaWYgY2FsbGluZyBhdXRob3JpemUoKSwgcGFzcyBpdCBpbiBhcyBhIHRva2VuUGFyYW06IGF1dGhvcml6ZSh7Y2xpZW50SWQ6IFwiKlwifSwgYXV0aE9wdGlvbnMpJyxcbiAgICAgICAgNDAwMTIsXG4gICAgICAgIDQwMFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZXJyID0gdGhpcy5fdW5jaGVja2VkU2V0Q2xpZW50SWQoY2xpZW50SWQpO1xuICAgICAgaWYgKGVycilcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuICAvKiBBYmx5LXNldDogbm8gdHlwZWNoZWNraW5nLCAnKicgaXMgYWxsb3dlZCBidXQgbm90IHNldCBvbiB0aGlzLmNsaWVudElkKSwgcmV0dXJuIGVycm9ycyB0byB0aGUgY2FsbGVyICovXG4gIF91bmNoZWNrZWRTZXRDbGllbnRJZChjbGllbnRJZCkge1xuICAgIGlmICh0aGlzLl90b2tlbkNsaWVudElkTWlzbWF0Y2goY2xpZW50SWQpKSB7XG4gICAgICBjb25zdCBtc2cgPSBcIlVuZXhwZWN0ZWQgY2xpZW50SWQgbWlzbWF0Y2g6IGNsaWVudCBoYXMgXCIgKyB0aGlzLmNsaWVudElkICsgXCIsIHJlcXVlc3RlZCBcIiArIGNsaWVudElkO1xuICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9ySW5mbyhtc2csIDQwMTAyLCA0MDEpO1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIFwiQXV0aC5fdW5jaGVja2VkU2V0Q2xpZW50SWQoKVwiLCBtc2cpO1xuICAgICAgcmV0dXJuIGVycjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jbGllbnRJZCA9IHRoaXMudG9rZW5QYXJhbXMuY2xpZW50SWQgPSBjbGllbnRJZDtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICBfdG9rZW5DbGllbnRJZE1pc21hdGNoKHRva2VuQ2xpZW50SWQpIHtcbiAgICByZXR1cm4gISEodGhpcy5jbGllbnRJZCAmJiB0aGlzLmNsaWVudElkICE9PSBcIipcIiAmJiB0b2tlbkNsaWVudElkICYmIHRva2VuQ2xpZW50SWQgIT09IFwiKlwiICYmIHRoaXMuY2xpZW50SWQgIT09IHRva2VuQ2xpZW50SWQpO1xuICB9XG4gIHN0YXRpYyBpc1Rva2VuRXJyKGVycm9yKSB7XG4gICAgcmV0dXJuIGVycm9yLmNvZGUgJiYgZXJyb3IuY29kZSA+PSA0MDE0MCAmJiBlcnJvci5jb2RlIDwgNDAxNTA7XG4gIH1cbiAgcmV2b2tlVG9rZW5zKHNwZWNpZmllcnMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQucmVzdC5yZXZva2VUb2tlbnMoc3BlY2lmaWVycywgb3B0aW9ucyk7XG4gIH1cbn07XG52YXIgYXV0aF9kZWZhdWx0ID0gQXV0aDtcblxuLy8gc3JjL2NvbW1vbi90eXBlcy9odHRwLnRzXG5mdW5jdGlvbiBwYXJhbVN0cmluZyhwYXJhbXMpIHtcbiAgY29uc3QgcGFyYW1QYWlycyA9IFtdO1xuICBpZiAocGFyYW1zKSB7XG4gICAgZm9yIChjb25zdCBuZWVkbGUgaW4gcGFyYW1zKSB7XG4gICAgICBwYXJhbVBhaXJzLnB1c2gobmVlZGxlICsgXCI9XCIgKyBwYXJhbXNbbmVlZGxlXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXJhbVBhaXJzLmpvaW4oXCImXCIpO1xufVxuZnVuY3Rpb24gYXBwZW5kaW5nUGFyYW1zKHVyaSwgcGFyYW1zKSB7XG4gIHJldHVybiB1cmkgKyAocGFyYW1zID8gXCI/XCIgOiBcIlwiKSArIHBhcmFtU3RyaW5nKHBhcmFtcyk7XG59XG5mdW5jdGlvbiBsb2dSZXN1bHQocmVzdWx0LCBtZXRob2QsIHVyaSwgcGFyYW1zLCBsb2dnZXIpIHtcbiAgaWYgKHJlc3VsdC5lcnJvcikge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbk5vU3RyaXAoXG4gICAgICBsb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICBcIkh0dHAuXCIgKyBtZXRob2QgKyBcIigpXCIsXG4gICAgICBcIlJlY2VpdmVkIEVycm9yOyBcIiArIGFwcGVuZGluZ1BhcmFtcyh1cmksIHBhcmFtcykgKyBcIjsgRXJyb3I6IFwiICsgaW5zcGVjdEVycm9yKHJlc3VsdC5lcnJvcilcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbk5vU3RyaXAoXG4gICAgICBsb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICBcIkh0dHAuXCIgKyBtZXRob2QgKyBcIigpXCIsXG4gICAgICBcIlJlY2VpdmVkOyBcIiArIGFwcGVuZGluZ1BhcmFtcyh1cmksIHBhcmFtcykgKyBcIjsgSGVhZGVyczogXCIgKyBwYXJhbVN0cmluZyhyZXN1bHQuaGVhZGVycykgKyBcIjsgU3RhdHVzQ29kZTogXCIgKyByZXN1bHQuc3RhdHVzQ29kZSArIFwiOyBCb2R5XCIgKyAoUGxhdGZvcm0uQnVmZmVyVXRpbHMuaXNCdWZmZXIocmVzdWx0LmJvZHkpID8gXCIgKEJhc2U2NCk6IFwiICsgUGxhdGZvcm0uQnVmZmVyVXRpbHMuYmFzZTY0RW5jb2RlKHJlc3VsdC5ib2R5KSA6IFwiOiBcIiArIHJlc3VsdC5ib2R5KVxuICAgICk7XG4gIH1cbn1cbmZ1bmN0aW9uIGxvZ1JlcXVlc3QobWV0aG9kLCB1cmksIGJvZHksIHBhcmFtcywgbG9nZ2VyKSB7XG4gIGlmIChsb2dnZXIuc2hvdWxkTG9nKGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTykpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb25Ob1N0cmlwKFxuICAgICAgbG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgXCJIdHRwLlwiICsgbWV0aG9kICsgXCIoKVwiLFxuICAgICAgXCJTZW5kaW5nOyBcIiArIGFwcGVuZGluZ1BhcmFtcyh1cmksIHBhcmFtcykgKyBcIjsgQm9keVwiICsgKFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmlzQnVmZmVyKGJvZHkpID8gXCIgKEJhc2U2NCk6IFwiICsgUGxhdGZvcm0uQnVmZmVyVXRpbHMuYmFzZTY0RW5jb2RlKGJvZHkpIDogXCI6IFwiICsgYm9keSlcbiAgICApO1xuICB9XG59XG52YXIgSHR0cCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy5wbGF0Zm9ybUh0dHAgPSBuZXcgUGxhdGZvcm0uSHR0cChjbGllbnQpO1xuICAgIHRoaXMuY2hlY2tDb25uZWN0aXZpdHkgPSB0aGlzLnBsYXRmb3JtSHR0cC5jaGVja0Nvbm5lY3Rpdml0eSA/ICgpID0+IHRoaXMucGxhdGZvcm1IdHRwLmNoZWNrQ29ubmVjdGl2aXR5KCkgOiB2b2lkIDA7XG4gIH1cbiAgZ2V0IGxvZ2dlcigpIHtcbiAgICB2YXIgX2EyLCBfYjtcbiAgICByZXR1cm4gKF9iID0gKF9hMiA9IHRoaXMuY2xpZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2EyLmxvZ2dlcikgIT0gbnVsbCA/IF9iIDogbG9nZ2VyX2RlZmF1bHQuZGVmYXVsdExvZ2dlcjtcbiAgfVxuICBnZXQgc3VwcG9ydHNBdXRoSGVhZGVycygpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF0Zm9ybUh0dHAuc3VwcG9ydHNBdXRoSGVhZGVycztcbiAgfVxuICBnZXQgc3VwcG9ydHNMaW5rSGVhZGVycygpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF0Zm9ybUh0dHAuc3VwcG9ydHNMaW5rSGVhZGVycztcbiAgfVxuICBfZ2V0SG9zdHMoY2xpZW50KSB7XG4gICAgY29uc3QgY29ubmVjdGlvbiA9IGNsaWVudC5jb25uZWN0aW9uLCBjb25uZWN0aW9uSG9zdCA9IGNvbm5lY3Rpb24gJiYgY29ubmVjdGlvbi5jb25uZWN0aW9uTWFuYWdlci5ob3N0O1xuICAgIGlmIChjb25uZWN0aW9uSG9zdCkge1xuICAgICAgcmV0dXJuIFtjb25uZWN0aW9uSG9zdF0uY29uY2F0KGRlZmF1bHRzX2RlZmF1bHQuZ2V0RmFsbGJhY2tIb3N0cyhjbGllbnQub3B0aW9ucykpO1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdHNfZGVmYXVsdC5nZXRIb3N0cyhjbGllbnQub3B0aW9ucyk7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgbm90IHRocm93IGFueSBlcnJvcnM7IHJhdGhlciwgaXQgd2lsbCBjb21tdW5pY2F0ZSBhbnkgZXJyb3IgYnkgcG9wdWxhdGluZyB0aGUge0BsaW5rIFJlcXVlc3RSZXN1bHQuZXJyb3J9IHByb3BlcnR5IG9mIHRoZSByZXR1cm5lZCB7QGxpbmsgUmVxdWVzdFJlc3VsdH0uXG4gICAqL1xuICBhc3luYyBkbyhtZXRob2QsIHBhdGgsIGhlYWRlcnMsIGJvZHksIHBhcmFtcykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjbGllbnQgPSB0aGlzLmNsaWVudDtcbiAgICAgIGlmICghY2xpZW50KSB7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBuZXcgRXJyb3JJbmZvKFwiaHR0cC5kbyBjYWxsZWQgd2l0aG91dCBjbGllbnRcIiwgNWU0LCA1MDApIH07XG4gICAgICB9XG4gICAgICBjb25zdCB1cmlGcm9tSG9zdCA9IHR5cGVvZiBwYXRoID09PSBcImZ1bmN0aW9uXCIgPyBwYXRoIDogZnVuY3Rpb24oaG9zdCkge1xuICAgICAgICByZXR1cm4gY2xpZW50LmJhc2VVcmkoaG9zdCkgKyBwYXRoO1xuICAgICAgfTtcbiAgICAgIGNvbnN0IGN1cnJlbnRGYWxsYmFjayA9IGNsaWVudC5fY3VycmVudEZhbGxiYWNrO1xuICAgICAgaWYgKGN1cnJlbnRGYWxsYmFjaykge1xuICAgICAgICBpZiAoY3VycmVudEZhbGxiYWNrLnZhbGlkVW50aWwgPiBEYXRlLm5vdygpKSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5kb1VyaShtZXRob2QsIHVyaUZyb21Ib3N0KGN1cnJlbnRGYWxsYmFjay5ob3N0KSwgaGVhZGVycywgYm9keSwgcGFyYW1zKTtcbiAgICAgICAgICBpZiAocmVzdWx0LmVycm9yICYmIHRoaXMucGxhdGZvcm1IdHRwLnNob3VsZEZhbGxiYWNrKHJlc3VsdC5lcnJvcikpIHtcbiAgICAgICAgICAgIGNsaWVudC5fY3VycmVudEZhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRvKG1ldGhvZCwgcGF0aCwgaGVhZGVycywgYm9keSwgcGFyYW1zKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjbGllbnQuX2N1cnJlbnRGYWxsYmFjayA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IGhvc3RzID0gdGhpcy5fZ2V0SG9zdHMoY2xpZW50KTtcbiAgICAgIGlmIChob3N0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9VcmkobWV0aG9kLCB1cmlGcm9tSG9zdChob3N0c1swXSksIGhlYWRlcnMsIGJvZHksIHBhcmFtcyk7XG4gICAgICB9XG4gICAgICBsZXQgdHJ5QUhvc3RTdGFydGVkQXQgPSBudWxsO1xuICAgICAgY29uc3QgdHJ5QUhvc3QgPSBhc3luYyAoY2FuZGlkYXRlSG9zdHMsIHBlcnNpc3RPblN1Y2Nlc3MpID0+IHtcbiAgICAgICAgY29uc3QgaG9zdCA9IGNhbmRpZGF0ZUhvc3RzLnNoaWZ0KCk7XG4gICAgICAgIHRyeUFIb3N0U3RhcnRlZEF0ID0gdHJ5QUhvc3RTdGFydGVkQXQgIT0gbnVsbCA/IHRyeUFIb3N0U3RhcnRlZEF0IDogLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZG9VcmkobWV0aG9kLCB1cmlGcm9tSG9zdChob3N0KSwgaGVhZGVycywgYm9keSwgcGFyYW1zKTtcbiAgICAgICAgaWYgKHJlc3VsdC5lcnJvciAmJiB0aGlzLnBsYXRmb3JtSHR0cC5zaG91bGRGYWxsYmFjayhyZXN1bHQuZXJyb3IpICYmIGNhbmRpZGF0ZUhvc3RzLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnN0IGVsYXBzZWRUaW1lID0gRGF0ZS5ub3coKSAtIHRyeUFIb3N0U3RhcnRlZEF0LmdldFRpbWUoKTtcbiAgICAgICAgICBpZiAoZWxhcHNlZFRpbWUgPiBjbGllbnQub3B0aW9ucy50aW1lb3V0cy5odHRwTWF4UmV0cnlEdXJhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgZXJyb3I6IG5ldyBFcnJvckluZm8oXG4gICAgICAgICAgICAgICAgYFRpbWVvdXQgZm9yIHRyeWluZyBmYWxsYmFjayBob3N0cyByZXRyaWVzLiBUb3RhbCBlbGFwc2VkIHRpbWUgZXhjZWVkZWQgdGhlICR7Y2xpZW50Lm9wdGlvbnMudGltZW91dHMuaHR0cE1heFJldHJ5RHVyYXRpb259bXMgbGltaXRgLFxuICAgICAgICAgICAgICAgIDUwMDAzLFxuICAgICAgICAgICAgICAgIDUwMFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ5QUhvc3QoY2FuZGlkYXRlSG9zdHMsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwZXJzaXN0T25TdWNjZXNzKSB7XG4gICAgICAgICAgY2xpZW50Ll9jdXJyZW50RmFsbGJhY2sgPSB7XG4gICAgICAgICAgICBob3N0LFxuICAgICAgICAgICAgdmFsaWRVbnRpbDogRGF0ZS5ub3coKSArIGNsaWVudC5vcHRpb25zLnRpbWVvdXRzLmZhbGxiYWNrUmV0cnlUaW1lb3V0XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIHJldHVybiB0cnlBSG9zdChob3N0cyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyBlcnJvcjogbmV3IEVycm9ySW5mbyhgVW5leHBlY3RlZCBlcnJvciBpbiBIdHRwLmRvOiAke2luc3BlY3RFcnJvcihlcnIpfWAsIDUwMCwgNWU0KSB9O1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVGhpcyBtZXRob2Qgd2lsbCBub3QgdGhyb3cgYW55IGVycm9yczsgcmF0aGVyLCBpdCB3aWxsIGNvbW11bmljYXRlIGFueSBlcnJvciBieSBwb3B1bGF0aW5nIHRoZSB7QGxpbmsgUmVxdWVzdFJlc3VsdC5lcnJvcn0gcHJvcGVydHkgb2YgdGhlIHJldHVybmVkIHtAbGluayBSZXF1ZXN0UmVzdWx0fS5cbiAgICovXG4gIGFzeW5jIGRvVXJpKG1ldGhvZCwgdXJpLCBoZWFkZXJzLCBib2R5LCBwYXJhbXMpIHtcbiAgICB0cnkge1xuICAgICAgbG9nUmVxdWVzdChtZXRob2QsIHVyaSwgYm9keSwgcGFyYW1zLCB0aGlzLmxvZ2dlcik7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnBsYXRmb3JtSHR0cC5kb1VyaShtZXRob2QsIHVyaSwgaGVhZGVycywgYm9keSwgcGFyYW1zKTtcbiAgICAgIGlmICh0aGlzLmxvZ2dlci5zaG91bGRMb2cobG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPKSkge1xuICAgICAgICBsb2dSZXN1bHQocmVzdWx0LCBtZXRob2QsIHVyaSwgcGFyYW1zLCB0aGlzLmxvZ2dlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgZXJyb3I6IG5ldyBFcnJvckluZm8oYFVuZXhwZWN0ZWQgZXJyb3IgaW4gSHR0cC5kb1VyaTogJHtpbnNwZWN0RXJyb3IoZXJyKX1gLCA1MDAsIDVlNCkgfTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tb24vbGliL2NsaWVudC9iYXNlY2xpZW50LnRzXG52YXIgQmFzZUNsaWVudCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIC8qKlxuICAgICAqIFRoZXNlIGV4cG9ydHMgYXJlIGZvciB1c2UgYnkgVU1EIHBsdWdpbnM7IHJlYXNvbiBiZWluZyBzbyB0aGF0IGNvbnN0cnVjdG9ycyBhbmQgc3RhdGljIG1ldGhvZHMgY2FuIGJlIGFjY2Vzc2VkIGJ5IHRoZXNlIHBsdWdpbnMgd2l0aG91dCBuZWVkaW5nIHRvIGltcG9ydCB0aGUgY2xhc3NlcyBkaXJlY3RseSBhbmQgcmVzdWx0IGluIHRoZSBjbGFzcyBleGlzdGluZyBpbiBib3RoIHRoZSBwbHVnaW4gYW5kIHRoZSBjb3JlIGxpYnJhcnkuXG4gICAgICovXG4gICAgdGhpcy5QbGF0Zm9ybSA9IFBsYXRmb3JtO1xuICAgIHRoaXMuRXJyb3JJbmZvID0gRXJyb3JJbmZvO1xuICAgIHRoaXMuTG9nZ2VyID0gbG9nZ2VyX2RlZmF1bHQ7XG4gICAgdGhpcy5EZWZhdWx0cyA9IGRlZmF1bHRzX2RlZmF1bHQ7XG4gICAgdGhpcy5VdGlscyA9IHV0aWxzX2V4cG9ydHM7XG4gICAgdmFyIF9hMiwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2g7XG4gICAgdGhpcy5fYWRkaXRpb25hbEhUVFBSZXF1ZXN0SW1wbGVtZW50YXRpb25zID0gKF9hMiA9IG9wdGlvbnMucGx1Z2lucykgIT0gbnVsbCA/IF9hMiA6IG51bGw7XG4gICAgdGhpcy5sb2dnZXIgPSBuZXcgbG9nZ2VyX2RlZmF1bHQoKTtcbiAgICB0aGlzLmxvZ2dlci5zZXRMb2cob3B0aW9ucy5sb2dMZXZlbCwgb3B0aW9ucy5sb2dIYW5kbGVyKTtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICB0aGlzLmxvZ2dlcixcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTyxcbiAgICAgIFwiQmFzZUNsaWVudCgpXCIsXG4gICAgICBcImluaXRpYWxpemVkIHdpdGggY2xpZW50T3B0aW9ucyBcIiArIFBsYXRmb3JtLkNvbmZpZy5pbnNwZWN0KG9wdGlvbnMpXG4gICAgKTtcbiAgICB0aGlzLl9Nc2dQYWNrID0gKF9jID0gKF9iID0gb3B0aW9ucy5wbHVnaW5zKSA9PSBudWxsID8gdm9pZCAwIDogX2IuTXNnUGFjaykgIT0gbnVsbCA/IF9jIDogbnVsbDtcbiAgICBjb25zdCBub3JtYWxPcHRpb25zID0gdGhpcy5vcHRpb25zID0gZGVmYXVsdHNfZGVmYXVsdC5ub3JtYWxpc2VPcHRpb25zKG9wdGlvbnMsIHRoaXMuX01zZ1BhY2ssIHRoaXMubG9nZ2VyKTtcbiAgICBpZiAobm9ybWFsT3B0aW9ucy5rZXkpIHtcbiAgICAgIGNvbnN0IGtleU1hdGNoID0gbm9ybWFsT3B0aW9ucy5rZXkubWF0Y2goL14oW146XFxzXSspOihbXjouXFxzXSspJC8pO1xuICAgICAgaWYgKCFrZXlNYXRjaCkge1xuICAgICAgICBjb25zdCBtc2cgPSBcImludmFsaWQga2V5IHBhcmFtZXRlclwiO1xuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUiwgXCJCYXNlQ2xpZW50KClcIiwgbXNnKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhtc2csIDQwNDAwLCA0MDQpO1xuICAgICAgfVxuICAgICAgbm9ybWFsT3B0aW9ucy5rZXlOYW1lID0ga2V5TWF0Y2hbMV07XG4gICAgICBub3JtYWxPcHRpb25zLmtleVNlY3JldCA9IGtleU1hdGNoWzJdO1xuICAgIH1cbiAgICBpZiAoXCJjbGllbnRJZFwiIGluIG5vcm1hbE9wdGlvbnMpIHtcbiAgICAgIGlmICghKHR5cGVvZiBub3JtYWxPcHRpb25zLmNsaWVudElkID09PSBcInN0cmluZ1wiIHx8IG5vcm1hbE9wdGlvbnMuY2xpZW50SWQgPT09IG51bGwpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFwiY2xpZW50SWQgbXVzdCBiZSBlaXRoZXIgYSBzdHJpbmcgb3IgbnVsbFwiLCA0MDAxMiwgNDAwKTtcbiAgICAgIGVsc2UgaWYgKG5vcm1hbE9wdGlvbnMuY2xpZW50SWQgPT09IFwiKlwiKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFxuICAgICAgICAgICdDYW5cXHUyMDE5dCB1c2UgXCIqXCIgYXMgYSBjbGllbnRJZCBhcyB0aGF0IHN0cmluZyBpcyByZXNlcnZlZC4gKFRvIGNoYW5nZSB0aGUgZGVmYXVsdCB0b2tlbiByZXF1ZXN0IGJlaGF2aW91ciB0byB1c2UgYSB3aWxkY2FyZCBjbGllbnRJZCwgdXNlIHtkZWZhdWx0VG9rZW5QYXJhbXM6IHtjbGllbnRJZDogXCIqXCJ9fSknLFxuICAgICAgICAgIDQwMDEyLFxuICAgICAgICAgIDQwMFxuICAgICAgICApO1xuICAgIH1cbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJCYXNlQ2xpZW50KClcIiwgXCJzdGFydGVkOyB2ZXJzaW9uID0gXCIgKyBkZWZhdWx0c19kZWZhdWx0LnZlcnNpb24pO1xuICAgIHRoaXMuX2N1cnJlbnRGYWxsYmFjayA9IG51bGw7XG4gICAgdGhpcy5zZXJ2ZXJUaW1lT2Zmc2V0ID0gbnVsbDtcbiAgICB0aGlzLmh0dHAgPSBuZXcgSHR0cCh0aGlzKTtcbiAgICB0aGlzLmF1dGggPSBuZXcgYXV0aF9kZWZhdWx0KHRoaXMsIG5vcm1hbE9wdGlvbnMpO1xuICAgIHRoaXMuX3Jlc3QgPSAoKF9kID0gb3B0aW9ucy5wbHVnaW5zKSA9PSBudWxsID8gdm9pZCAwIDogX2QuUmVzdCkgPyBuZXcgb3B0aW9ucy5wbHVnaW5zLlJlc3QodGhpcykgOiBudWxsO1xuICAgIHRoaXMuX0NyeXB0byA9IChfZiA9IChfZSA9IG9wdGlvbnMucGx1Z2lucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9lLkNyeXB0bykgIT0gbnVsbCA/IF9mIDogbnVsbDtcbiAgICB0aGlzLl9fRmlsdGVyZWRTdWJzY3JpcHRpb25zID0gKF9oID0gKF9nID0gb3B0aW9ucy5wbHVnaW5zKSA9PSBudWxsID8gdm9pZCAwIDogX2cuTWVzc2FnZUludGVyYWN0aW9ucykgIT0gbnVsbCA/IF9oIDogbnVsbDtcbiAgfVxuICBnZXQgcmVzdCgpIHtcbiAgICBpZiAoIXRoaXMuX3Jlc3QpIHtcbiAgICAgIHRocm93TWlzc2luZ1BsdWdpbkVycm9yKFwiUmVzdFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3Jlc3Q7XG4gIH1cbiAgZ2V0IF9GaWx0ZXJlZFN1YnNjcmlwdGlvbnMoKSB7XG4gICAgaWYgKCF0aGlzLl9fRmlsdGVyZWRTdWJzY3JpcHRpb25zKSB7XG4gICAgICB0aHJvd01pc3NpbmdQbHVnaW5FcnJvcihcIk1lc3NhZ2VJbnRlcmFjdGlvbnNcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9fRmlsdGVyZWRTdWJzY3JpcHRpb25zO1xuICB9XG4gIGdldCBjaGFubmVscygpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0LmNoYW5uZWxzO1xuICB9XG4gIGdldCBwdXNoKCkge1xuICAgIHJldHVybiB0aGlzLnJlc3QucHVzaDtcbiAgfVxuICBnZXQgZGV2aWNlKCkge1xuICAgIHZhciBfYTI7XG4gICAgaWYgKCEoKF9hMiA9IHRoaXMub3B0aW9ucy5wbHVnaW5zKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLlB1c2gpIHx8ICF0aGlzLnB1c2guTG9jYWxEZXZpY2UpIHtcbiAgICAgIHRocm93TWlzc2luZ1BsdWdpbkVycm9yKFwiUHVzaFwiKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLl9kZXZpY2UpIHtcbiAgICAgIHRoaXMuX2RldmljZSA9IHRoaXMucHVzaC5Mb2NhbERldmljZS5sb2FkKHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fZGV2aWNlO1xuICB9XG4gIGJhc2VVcmkoaG9zdCkge1xuICAgIHJldHVybiBkZWZhdWx0c19kZWZhdWx0LmdldEh0dHBTY2hlbWUodGhpcy5vcHRpb25zKSArIGhvc3QgKyBcIjpcIiArIGRlZmF1bHRzX2RlZmF1bHQuZ2V0UG9ydCh0aGlzLm9wdGlvbnMsIGZhbHNlKTtcbiAgfVxuICBhc3luYyBzdGF0cyhwYXJhbXMpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0LnN0YXRzKHBhcmFtcyk7XG4gIH1cbiAgYXN5bmMgdGltZShwYXJhbXMpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0LnRpbWUocGFyYW1zKTtcbiAgfVxuICBhc3luYyByZXF1ZXN0KG1ldGhvZCwgcGF0aCwgdmVyc2lvbjIsIHBhcmFtcywgYm9keSwgY3VzdG9tSGVhZGVycykge1xuICAgIHJldHVybiB0aGlzLnJlc3QucmVxdWVzdChtZXRob2QsIHBhdGgsIHZlcnNpb24yLCBwYXJhbXMsIGJvZHksIGN1c3RvbUhlYWRlcnMpO1xuICB9XG4gIGJhdGNoUHVibGlzaChzcGVjT3JTcGVjcykge1xuICAgIHJldHVybiB0aGlzLnJlc3QuYmF0Y2hQdWJsaXNoKHNwZWNPclNwZWNzKTtcbiAgfVxuICBiYXRjaFByZXNlbmNlKGNoYW5uZWxzKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5iYXRjaFByZXNlbmNlKGNoYW5uZWxzKTtcbiAgfVxuICBzZXRMb2cobG9nT3B0aW9ucykge1xuICAgIHRoaXMubG9nZ2VyLnNldExvZyhsb2dPcHRpb25zLmxldmVsLCBsb2dPcHRpb25zLmhhbmRsZXIpO1xuICB9XG59O1xuQmFzZUNsaWVudC5QbGF0Zm9ybSA9IFBsYXRmb3JtO1xudmFyIGJhc2VjbGllbnRfZGVmYXVsdCA9IEJhc2VDbGllbnQ7XG5cbi8vIHNyYy9jb21tb24vbGliL3R5cGVzL2RldmljZWRldGFpbHMudHNcbnZhciBEZXZpY2VEZXRhaWxzID0gY2xhc3MgX0RldmljZURldGFpbHMge1xuICB0b0pTT04oKSB7XG4gICAgdmFyIF9hMiwgX2IsIF9jO1xuICAgIHJldHVybiB7XG4gICAgICBpZDogdGhpcy5pZCxcbiAgICAgIGRldmljZVNlY3JldDogdGhpcy5kZXZpY2VTZWNyZXQsXG4gICAgICBwbGF0Zm9ybTogdGhpcy5wbGF0Zm9ybSxcbiAgICAgIGZvcm1GYWN0b3I6IHRoaXMuZm9ybUZhY3RvcixcbiAgICAgIGNsaWVudElkOiB0aGlzLmNsaWVudElkLFxuICAgICAgbWV0YWRhdGE6IHRoaXMubWV0YWRhdGEsXG4gICAgICBkZXZpY2VJZGVudGl0eVRva2VuOiB0aGlzLmRldmljZUlkZW50aXR5VG9rZW4sXG4gICAgICBwdXNoOiB7XG4gICAgICAgIHJlY2lwaWVudDogKF9hMiA9IHRoaXMucHVzaCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5yZWNpcGllbnQsXG4gICAgICAgIHN0YXRlOiAoX2IgPSB0aGlzLnB1c2gpID09IG51bGwgPyB2b2lkIDAgOiBfYi5zdGF0ZSxcbiAgICAgICAgZXJyb3I6IChfYyA9IHRoaXMucHVzaCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLmVycm9yXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICB0b1N0cmluZygpIHtcbiAgICB2YXIgX2EyLCBfYiwgX2MsIF9kO1xuICAgIGxldCByZXN1bHQgPSBcIltEZXZpY2VEZXRhaWxzXCI7XG4gICAgaWYgKHRoaXMuaWQpXG4gICAgICByZXN1bHQgKz0gXCI7IGlkPVwiICsgdGhpcy5pZDtcbiAgICBpZiAodGhpcy5wbGF0Zm9ybSlcbiAgICAgIHJlc3VsdCArPSBcIjsgcGxhdGZvcm09XCIgKyB0aGlzLnBsYXRmb3JtO1xuICAgIGlmICh0aGlzLmZvcm1GYWN0b3IpXG4gICAgICByZXN1bHQgKz0gXCI7IGZvcm1GYWN0b3I9XCIgKyB0aGlzLmZvcm1GYWN0b3I7XG4gICAgaWYgKHRoaXMuY2xpZW50SWQpXG4gICAgICByZXN1bHQgKz0gXCI7IGNsaWVudElkPVwiICsgdGhpcy5jbGllbnRJZDtcbiAgICBpZiAodGhpcy5tZXRhZGF0YSlcbiAgICAgIHJlc3VsdCArPSBcIjsgbWV0YWRhdGE9XCIgKyB0aGlzLm1ldGFkYXRhO1xuICAgIGlmICh0aGlzLmRldmljZUlkZW50aXR5VG9rZW4pXG4gICAgICByZXN1bHQgKz0gXCI7IGRldmljZUlkZW50aXR5VG9rZW49XCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLmRldmljZUlkZW50aXR5VG9rZW4pO1xuICAgIGlmICgoX2EyID0gdGhpcy5wdXNoKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLnJlY2lwaWVudClcbiAgICAgIHJlc3VsdCArPSBcIjsgcHVzaC5yZWNpcGllbnQ9XCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLnB1c2gucmVjaXBpZW50KTtcbiAgICBpZiAoKF9iID0gdGhpcy5wdXNoKSA9PSBudWxsID8gdm9pZCAwIDogX2Iuc3RhdGUpXG4gICAgICByZXN1bHQgKz0gXCI7IHB1c2guc3RhdGU9XCIgKyB0aGlzLnB1c2guc3RhdGU7XG4gICAgaWYgKChfYyA9IHRoaXMucHVzaCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLmVycm9yKVxuICAgICAgcmVzdWx0ICs9IFwiOyBwdXNoLmVycm9yPVwiICsgSlNPTi5zdHJpbmdpZnkodGhpcy5wdXNoLmVycm9yKTtcbiAgICBpZiAoKF9kID0gdGhpcy5wdXNoKSA9PSBudWxsID8gdm9pZCAwIDogX2QubWV0YWRhdGEpXG4gICAgICByZXN1bHQgKz0gXCI7IHB1c2gubWV0YWRhdGE9XCIgKyB0aGlzLnB1c2gubWV0YWRhdGE7XG4gICAgcmVzdWx0ICs9IFwiXVwiO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgc3RhdGljIHRvUmVxdWVzdEJvZHkoYm9keSwgTXNnUGFjaywgZm9ybWF0KSB7XG4gICAgcmV0dXJuIGVuY29kZUJvZHkoYm9keSwgTXNnUGFjaywgZm9ybWF0KTtcbiAgfVxuICBzdGF0aWMgZnJvbVJlc3BvbnNlQm9keShib2R5LCBNc2dQYWNrLCBmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0KSB7XG4gICAgICBib2R5ID0gZGVjb2RlQm9keShib2R5LCBNc2dQYWNrLCBmb3JtYXQpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShib2R5KSkge1xuICAgICAgcmV0dXJuIF9EZXZpY2VEZXRhaWxzLmZyb21WYWx1ZXNBcnJheShib2R5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIF9EZXZpY2VEZXRhaWxzLmZyb21WYWx1ZXMoYm9keSk7XG4gICAgfVxuICB9XG4gIHN0YXRpYyBmcm9tVmFsdWVzKHZhbHVlcykge1xuICAgIHZhbHVlcy5lcnJvciA9IHZhbHVlcy5lcnJvciAmJiBFcnJvckluZm8uZnJvbVZhbHVlcyh2YWx1ZXMuZXJyb3IpO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBfRGV2aWNlRGV0YWlscygpLCB2YWx1ZXMpO1xuICB9XG4gIHN0YXRpYyBmcm9tTG9jYWxEZXZpY2UoZGV2aWNlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IF9EZXZpY2VEZXRhaWxzKCksIGRldmljZSk7XG4gIH1cbiAgc3RhdGljIGZyb21WYWx1ZXNBcnJheSh2YWx1ZXMpIHtcbiAgICBjb25zdCBjb3VudCA9IHZhbHVlcy5sZW5ndGgsIHJlc3VsdCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKVxuICAgICAgcmVzdWx0W2ldID0gX0RldmljZURldGFpbHMuZnJvbVZhbHVlcyh2YWx1ZXNbaV0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG52YXIgZGV2aWNlZGV0YWlsc19kZWZhdWx0ID0gRGV2aWNlRGV0YWlscztcblxuLy8gc3JjL2NvbW1vbi9saWIvY2xpZW50L3Jlc291cmNlLnRzXG5hc3luYyBmdW5jdGlvbiB3aXRoQXV0aERldGFpbHMoY2xpZW50LCBoZWFkZXJzLCBwYXJhbXMsIG9wQ2FsbGJhY2spIHtcbiAgaWYgKGNsaWVudC5odHRwLnN1cHBvcnRzQXV0aEhlYWRlcnMpIHtcbiAgICBjb25zdCBhdXRoSGVhZGVycyA9IGF3YWl0IGNsaWVudC5hdXRoLmdldEF1dGhIZWFkZXJzKCk7XG4gICAgcmV0dXJuIG9wQ2FsbGJhY2sobWl4aW4oYXV0aEhlYWRlcnMsIGhlYWRlcnMpLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGF1dGhQYXJhbXMgPSBhd2FpdCBjbGllbnQuYXV0aC5nZXRBdXRoUGFyYW1zKCk7XG4gICAgcmV0dXJuIG9wQ2FsbGJhY2soaGVhZGVycywgbWl4aW4oYXV0aFBhcmFtcywgcGFyYW1zKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHVuZW52ZWxvcGUocmVzdWx0LCBNc2dQYWNrLCBmb3JtYXQpIHtcbiAgaWYgKHJlc3VsdC5lcnIgJiYgIXJlc3VsdC5ib2R5KSB7XG4gICAgcmV0dXJuIHsgZXJyOiByZXN1bHQuZXJyIH07XG4gIH1cbiAgaWYgKHJlc3VsdC5zdGF0dXNDb2RlID09PSBIdHRwU3RhdHVzQ29kZXNfZGVmYXVsdC5Ob0NvbnRlbnQpIHtcbiAgICByZXR1cm4gX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgcmVzdWx0KSwgeyBib2R5OiBbXSwgdW5wYWNrZWQ6IHRydWUgfSk7XG4gIH1cbiAgbGV0IGJvZHkgPSByZXN1bHQuYm9keTtcbiAgaWYgKCFyZXN1bHQudW5wYWNrZWQpIHtcbiAgICB0cnkge1xuICAgICAgYm9keSA9IGRlY29kZUJvZHkoYm9keSwgTXNnUGFjaywgZm9ybWF0KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoaXNFcnJvckluZm9PclBhcnRpYWxFcnJvckluZm8oZSkpIHtcbiAgICAgICAgcmV0dXJuIHsgZXJyOiBlIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4geyBlcnI6IG5ldyBQYXJ0aWFsRXJyb3JJbmZvKGluc3BlY3RFcnJvcihlKSwgbnVsbCkgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFib2R5KSB7XG4gICAgcmV0dXJuIHsgZXJyOiBuZXcgUGFydGlhbEVycm9ySW5mbyhcInVuZW52ZWxvcGUoKTogUmVzcG9uc2UgYm9keSBpcyBtaXNzaW5nXCIsIG51bGwpIH07XG4gIH1cbiAgY29uc3QgeyBzdGF0dXNDb2RlOiB3cmFwcGVkU3RhdHVzQ29kZSwgcmVzcG9uc2UsIGhlYWRlcnM6IHdyYXBwZWRIZWFkZXJzIH0gPSBib2R5O1xuICBpZiAod3JhcHBlZFN0YXR1c0NvZGUgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCByZXN1bHQpLCB7IGJvZHksIHVucGFja2VkOiB0cnVlIH0pO1xuICB9XG4gIGlmICh3cmFwcGVkU3RhdHVzQ29kZSA8IDIwMCB8fCB3cmFwcGVkU3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICBsZXQgd3JhcHBlZEVyciA9IHJlc3BvbnNlICYmIHJlc3BvbnNlLmVycm9yIHx8IHJlc3VsdC5lcnI7XG4gICAgaWYgKCF3cmFwcGVkRXJyKSB7XG4gICAgICB3cmFwcGVkRXJyID0gbmV3IEVycm9yKFwiRXJyb3IgaW4gdW5lbnZlbG9waW5nIFwiICsgYm9keSk7XG4gICAgICB3cmFwcGVkRXJyLnN0YXR1c0NvZGUgPSB3cmFwcGVkU3RhdHVzQ29kZTtcbiAgICB9XG4gICAgcmV0dXJuIHsgZXJyOiB3cmFwcGVkRXJyLCBib2R5OiByZXNwb25zZSwgaGVhZGVyczogd3JhcHBlZEhlYWRlcnMsIHVucGFja2VkOiB0cnVlLCBzdGF0dXNDb2RlOiB3cmFwcGVkU3RhdHVzQ29kZSB9O1xuICB9XG4gIHJldHVybiB7IGVycjogcmVzdWx0LmVyciwgYm9keTogcmVzcG9uc2UsIGhlYWRlcnM6IHdyYXBwZWRIZWFkZXJzLCB1bnBhY2tlZDogdHJ1ZSwgc3RhdHVzQ29kZTogd3JhcHBlZFN0YXR1c0NvZGUgfTtcbn1cbmZ1bmN0aW9uIGxvZ1Jlc3VsdDIocmVzdWx0LCBtZXRob2QsIHBhdGgsIHBhcmFtcywgbG9nZ2VyKSB7XG4gIGlmIChyZXN1bHQuZXJyKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgbG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgXCJSZXNvdXJjZS5cIiArIG1ldGhvZCArIFwiKClcIixcbiAgICAgIFwiUmVjZWl2ZWQgRXJyb3I7IFwiICsgYXBwZW5kaW5nUGFyYW1zKHBhdGgsIHBhcmFtcykgKyBcIjsgRXJyb3I6IFwiICsgaW5zcGVjdEVycm9yKHJlc3VsdC5lcnIpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICBsb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICBcIlJlc291cmNlLlwiICsgbWV0aG9kICsgXCIoKVwiLFxuICAgICAgXCJSZWNlaXZlZDsgXCIgKyBhcHBlbmRpbmdQYXJhbXMocGF0aCwgcGFyYW1zKSArIFwiOyBIZWFkZXJzOiBcIiArIHBhcmFtU3RyaW5nKHJlc3VsdC5oZWFkZXJzKSArIFwiOyBTdGF0dXNDb2RlOiBcIiArIHJlc3VsdC5zdGF0dXNDb2RlICsgXCI7IEJvZHk6IFwiICsgKFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmlzQnVmZmVyKHJlc3VsdC5ib2R5KSA/IFwiIChCYXNlNjQpOiBcIiArIFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmJhc2U2NEVuY29kZShyZXN1bHQuYm9keSkgOiBcIjogXCIgKyBQbGF0Zm9ybS5Db25maWcuaW5zcGVjdChyZXN1bHQuYm9keSkpXG4gICAgKTtcbiAgfVxufVxudmFyIFJlc291cmNlID0gY2xhc3MgX1Jlc291cmNlIHtcbiAgc3RhdGljIGFzeW5jIGdldChjbGllbnQsIHBhdGgsIGhlYWRlcnMsIHBhcmFtcywgZW52ZWxvcGUsIHRocm93RXJyb3IpIHtcbiAgICByZXR1cm4gX1Jlc291cmNlLmRvKEh0dHBNZXRob2RzX2RlZmF1bHQuR2V0LCBjbGllbnQsIHBhdGgsIG51bGwsIGhlYWRlcnMsIHBhcmFtcywgZW52ZWxvcGUsIHRocm93RXJyb3IgIT0gbnVsbCA/IHRocm93RXJyb3IgOiBmYWxzZSk7XG4gIH1cbiAgc3RhdGljIGFzeW5jIGRlbGV0ZShjbGllbnQsIHBhdGgsIGhlYWRlcnMsIHBhcmFtcywgZW52ZWxvcGUsIHRocm93RXJyb3IpIHtcbiAgICByZXR1cm4gX1Jlc291cmNlLmRvKEh0dHBNZXRob2RzX2RlZmF1bHQuRGVsZXRlLCBjbGllbnQsIHBhdGgsIG51bGwsIGhlYWRlcnMsIHBhcmFtcywgZW52ZWxvcGUsIHRocm93RXJyb3IpO1xuICB9XG4gIHN0YXRpYyBhc3luYyBwb3N0KGNsaWVudCwgcGF0aCwgYm9keSwgaGVhZGVycywgcGFyYW1zLCBlbnZlbG9wZSwgdGhyb3dFcnJvcikge1xuICAgIHJldHVybiBfUmVzb3VyY2UuZG8oSHR0cE1ldGhvZHNfZGVmYXVsdC5Qb3N0LCBjbGllbnQsIHBhdGgsIGJvZHksIGhlYWRlcnMsIHBhcmFtcywgZW52ZWxvcGUsIHRocm93RXJyb3IpO1xuICB9XG4gIHN0YXRpYyBhc3luYyBwYXRjaChjbGllbnQsIHBhdGgsIGJvZHksIGhlYWRlcnMsIHBhcmFtcywgZW52ZWxvcGUsIHRocm93RXJyb3IpIHtcbiAgICByZXR1cm4gX1Jlc291cmNlLmRvKEh0dHBNZXRob2RzX2RlZmF1bHQuUGF0Y2gsIGNsaWVudCwgcGF0aCwgYm9keSwgaGVhZGVycywgcGFyYW1zLCBlbnZlbG9wZSwgdGhyb3dFcnJvcik7XG4gIH1cbiAgc3RhdGljIGFzeW5jIHB1dChjbGllbnQsIHBhdGgsIGJvZHksIGhlYWRlcnMsIHBhcmFtcywgZW52ZWxvcGUsIHRocm93RXJyb3IpIHtcbiAgICByZXR1cm4gX1Jlc291cmNlLmRvKEh0dHBNZXRob2RzX2RlZmF1bHQuUHV0LCBjbGllbnQsIHBhdGgsIGJvZHksIGhlYWRlcnMsIHBhcmFtcywgZW52ZWxvcGUsIHRocm93RXJyb3IpO1xuICB9XG4gIHN0YXRpYyBhc3luYyBkbyhtZXRob2QsIGNsaWVudCwgcGF0aCwgYm9keSwgaGVhZGVycywgcGFyYW1zLCBlbnZlbG9wZSwgdGhyb3dFcnJvcikge1xuICAgIGlmIChlbnZlbG9wZSkge1xuICAgICAgKHBhcmFtcyA9IHBhcmFtcyB8fCB7fSlbXCJlbnZlbG9wZVwiXSA9IGVudmVsb3BlO1xuICAgIH1cbiAgICBjb25zdCBsb2dnZXIgPSBjbGllbnQubG9nZ2VyO1xuICAgIGFzeW5jIGZ1bmN0aW9uIGRvUmVxdWVzdChoZWFkZXJzMiwgcGFyYW1zMikge1xuICAgICAgdmFyIF9hMjtcbiAgICAgIGlmIChsb2dnZXIuc2hvdWxkTG9nKGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTykpIHtcbiAgICAgICAgbGV0IGRlY29kZWRCb2R5ID0gYm9keTtcbiAgICAgICAgaWYgKCgoX2EyID0gaGVhZGVyczJbXCJjb250ZW50LXR5cGVcIl0pID09IG51bGwgPyB2b2lkIDAgOiBfYTIuaW5kZXhPZihcIm1zZ3BhY2tcIikpID4gMCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIWNsaWVudC5fTXNnUGFjaykge1xuICAgICAgICAgICAgICB0aHJvd01pc3NpbmdQbHVnaW5FcnJvcihcIk1zZ1BhY2tcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWNvZGVkQm9keSA9IGNsaWVudC5fTXNnUGFjay5kZWNvZGUoYm9keSk7XG4gICAgICAgICAgfSBjYXRjaCAoZGVjb2RlRXJyKSB7XG4gICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgICAgIGxvZ2dlcixcbiAgICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgICAgICAgICBcIlJlc291cmNlLlwiICsgbWV0aG9kICsgXCIoKVwiLFxuICAgICAgICAgICAgICBcIlNlbmRpbmcgTXNnUGFjayBEZWNvZGluZyBFcnJvcjogXCIgKyBpbnNwZWN0RXJyb3IoZGVjb2RlRXJyKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgIGxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgICAgXCJSZXNvdXJjZS5cIiArIG1ldGhvZCArIFwiKClcIixcbiAgICAgICAgICBcIlNlbmRpbmc7IFwiICsgYXBwZW5kaW5nUGFyYW1zKHBhdGgsIHBhcmFtczIpICsgXCI7IEJvZHk6IFwiICsgZGVjb2RlZEJvZHlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGh0dHBSZXN1bHQgPSBhd2FpdCBjbGllbnQuaHR0cC5kbyhtZXRob2QsIHBhdGgsIGhlYWRlcnMyLCBib2R5LCBwYXJhbXMyKTtcbiAgICAgIGlmIChodHRwUmVzdWx0LmVycm9yICYmIGF1dGhfZGVmYXVsdC5pc1Rva2VuRXJyKGh0dHBSZXN1bHQuZXJyb3IpKSB7XG4gICAgICAgIGF3YWl0IGNsaWVudC5hdXRoLmF1dGhvcml6ZShudWxsLCBudWxsKTtcbiAgICAgICAgcmV0dXJuIHdpdGhBdXRoRGV0YWlscyhjbGllbnQsIGhlYWRlcnMyLCBwYXJhbXMyLCBkb1JlcXVlc3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXJyOiBodHRwUmVzdWx0LmVycm9yLFxuICAgICAgICBib2R5OiBodHRwUmVzdWx0LmJvZHksXG4gICAgICAgIGhlYWRlcnM6IGh0dHBSZXN1bHQuaGVhZGVycyxcbiAgICAgICAgdW5wYWNrZWQ6IGh0dHBSZXN1bHQudW5wYWNrZWQsXG4gICAgICAgIHN0YXR1c0NvZGU6IGh0dHBSZXN1bHQuc3RhdHVzQ29kZVxuICAgICAgfTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IHdpdGhBdXRoRGV0YWlscyhjbGllbnQsIGhlYWRlcnMsIHBhcmFtcywgZG9SZXF1ZXN0KTtcbiAgICBpZiAoZW52ZWxvcGUpIHtcbiAgICAgIHJlc3VsdCA9IHVuZW52ZWxvcGUocmVzdWx0LCBjbGllbnQuX01zZ1BhY2ssIGVudmVsb3BlKTtcbiAgICB9XG4gICAgaWYgKGxvZ2dlci5zaG91bGRMb2cobG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPKSkge1xuICAgICAgbG9nUmVzdWx0MihyZXN1bHQsIG1ldGhvZCwgcGF0aCwgcGFyYW1zLCBsb2dnZXIpO1xuICAgIH1cbiAgICBpZiAodGhyb3dFcnJvcikge1xuICAgICAgaWYgKHJlc3VsdC5lcnIpIHtcbiAgICAgICAgdGhyb3cgcmVzdWx0LmVycjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gX19zcHJlYWRWYWx1ZXMoe30sIHJlc3VsdCk7XG4gICAgICAgIGRlbGV0ZSByZXNwb25zZS5lcnI7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbnZhciByZXNvdXJjZV9kZWZhdWx0ID0gUmVzb3VyY2U7XG5cbi8vIHNyYy9jb21tb24vbGliL2NsaWVudC9wYWdpbmF0ZWRyZXNvdXJjZS50c1xuZnVuY3Rpb24gZ2V0UmVsUGFyYW1zKGxpbmtVcmwpIHtcbiAgY29uc3QgdXJsTWF0Y2ggPSBsaW5rVXJsLm1hdGNoKC9eXFwuXFwvKFxcdyspXFw/KC4qKSQvKTtcbiAgcmV0dXJuIHVybE1hdGNoICYmIHVybE1hdGNoWzJdICYmIHBhcnNlUXVlcnlTdHJpbmcodXJsTWF0Y2hbMl0pO1xufVxuZnVuY3Rpb24gcGFyc2VSZWxMaW5rcyhsaW5rSGVhZGVyKSB7XG4gIGlmICh0eXBlb2YgbGlua0hlYWRlciA9PSBcInN0cmluZ1wiKVxuICAgIGxpbmtIZWFkZXIgPSBsaW5rSGVhZGVyLnNwbGl0KFwiLFwiKTtcbiAgY29uc3QgcmVsUGFyYW1zID0ge307XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGlua0hlYWRlci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGxpbmtNYXRjaCA9IGxpbmtIZWFkZXJbaV0ubWF0Y2goL15cXHMqPCguKyk+O1xccypyZWw9XCIoXFx3KylcIiQvKTtcbiAgICBpZiAobGlua01hdGNoKSB7XG4gICAgICBjb25zdCBwYXJhbXMgPSBnZXRSZWxQYXJhbXMobGlua01hdGNoWzFdKTtcbiAgICAgIGlmIChwYXJhbXMpXG4gICAgICAgIHJlbFBhcmFtc1tsaW5rTWF0Y2hbMl1dID0gcGFyYW1zO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVsUGFyYW1zO1xufVxuZnVuY3Rpb24gcmV0dXJuRXJyT25seShlcnIsIGJvZHksIHVzZUhQUikge1xuICByZXR1cm4gISh1c2VIUFIgJiYgKGJvZHkgfHwgdHlwZW9mIGVyci5jb2RlID09PSBcIm51bWJlclwiKSk7XG59XG52YXIgUGFnaW5hdGVkUmVzb3VyY2UgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCwgcGF0aCwgaGVhZGVycywgZW52ZWxvcGUsIGJvZHlIYW5kbGVyLCB1c2VIdHRwUGFnaW5hdGVkUmVzcG9uc2UpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgIHRoaXMuaGVhZGVycyA9IGhlYWRlcnM7XG4gICAgdGhpcy5lbnZlbG9wZSA9IGVudmVsb3BlICE9IG51bGwgPyBlbnZlbG9wZSA6IG51bGw7XG4gICAgdGhpcy5ib2R5SGFuZGxlciA9IGJvZHlIYW5kbGVyO1xuICAgIHRoaXMudXNlSHR0cFBhZ2luYXRlZFJlc3BvbnNlID0gdXNlSHR0cFBhZ2luYXRlZFJlc3BvbnNlIHx8IGZhbHNlO1xuICB9XG4gIGdldCBsb2dnZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmxvZ2dlcjtcbiAgfVxuICBhc3luYyBnZXQocGFyYW1zKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzb3VyY2VfZGVmYXVsdC5nZXQodGhpcy5jbGllbnQsIHRoaXMucGF0aCwgdGhpcy5oZWFkZXJzLCBwYXJhbXMsIHRoaXMuZW52ZWxvcGUsIGZhbHNlKTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVQYWdlKHJlc3VsdCk7XG4gIH1cbiAgYXN5bmMgZGVsZXRlKHBhcmFtcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc291cmNlX2RlZmF1bHQuZGVsZXRlKHRoaXMuY2xpZW50LCB0aGlzLnBhdGgsIHRoaXMuaGVhZGVycywgcGFyYW1zLCB0aGlzLmVudmVsb3BlLCBmYWxzZSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUGFnZShyZXN1bHQpO1xuICB9XG4gIGFzeW5jIHBvc3QocGFyYW1zLCBib2R5KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzb3VyY2VfZGVmYXVsdC5wb3N0KHRoaXMuY2xpZW50LCB0aGlzLnBhdGgsIGJvZHksIHRoaXMuaGVhZGVycywgcGFyYW1zLCB0aGlzLmVudmVsb3BlLCBmYWxzZSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUGFnZShyZXN1bHQpO1xuICB9XG4gIGFzeW5jIHB1dChwYXJhbXMsIGJvZHkpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNvdXJjZV9kZWZhdWx0LnB1dCh0aGlzLmNsaWVudCwgdGhpcy5wYXRoLCBib2R5LCB0aGlzLmhlYWRlcnMsIHBhcmFtcywgdGhpcy5lbnZlbG9wZSwgZmFsc2UpO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZVBhZ2UocmVzdWx0KTtcbiAgfVxuICBhc3luYyBwYXRjaChwYXJhbXMsIGJvZHkpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNvdXJjZV9kZWZhdWx0LnBhdGNoKHRoaXMuY2xpZW50LCB0aGlzLnBhdGgsIGJvZHksIHRoaXMuaGVhZGVycywgcGFyYW1zLCB0aGlzLmVudmVsb3BlLCBmYWxzZSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUGFnZShyZXN1bHQpO1xuICB9XG4gIGFzeW5jIGhhbmRsZVBhZ2UocmVzdWx0KSB7XG4gICAgaWYgKHJlc3VsdC5lcnIgJiYgcmV0dXJuRXJyT25seShyZXN1bHQuZXJyLCByZXN1bHQuYm9keSwgdGhpcy51c2VIdHRwUGFnaW5hdGVkUmVzcG9uc2UpKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICAgIFwiUGFnaW5hdGVkUmVzb3VyY2UuaGFuZGxlUGFnZSgpXCIsXG4gICAgICAgIFwiVW5leHBlY3RlZCBlcnJvciBnZXR0aW5nIHJlc291cmNlOiBlcnIgPSBcIiArIGluc3BlY3RFcnJvcihyZXN1bHQuZXJyKVxuICAgICAgKTtcbiAgICAgIHRocm93IHJlc3VsdC5lcnI7XG4gICAgfVxuICAgIGxldCBpdGVtcywgbGlua0hlYWRlciwgcmVsUGFyYW1zO1xuICAgIHRyeSB7XG4gICAgICBpdGVtcyA9IHJlc3VsdC5zdGF0dXNDb2RlID09IEh0dHBTdGF0dXNDb2Rlc19kZWZhdWx0Lk5vQ29udGVudCA/IFtdIDogYXdhaXQgdGhpcy5ib2R5SGFuZGxlcihyZXN1bHQuYm9keSwgcmVzdWx0LmhlYWRlcnMgfHwge30sIHJlc3VsdC51bnBhY2tlZCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgcmVzdWx0LmVyciB8fCBlO1xuICAgIH1cbiAgICBpZiAocmVzdWx0LmhlYWRlcnMgJiYgKGxpbmtIZWFkZXIgPSByZXN1bHQuaGVhZGVyc1tcIkxpbmtcIl0gfHwgcmVzdWx0LmhlYWRlcnNbXCJsaW5rXCJdKSkge1xuICAgICAgcmVsUGFyYW1zID0gcGFyc2VSZWxMaW5rcyhsaW5rSGVhZGVyKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudXNlSHR0cFBhZ2luYXRlZFJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gbmV3IEh0dHBQYWdpbmF0ZWRSZXNwb25zZShcbiAgICAgICAgdGhpcyxcbiAgICAgICAgaXRlbXMsXG4gICAgICAgIHJlc3VsdC5oZWFkZXJzIHx8IHt9LFxuICAgICAgICByZXN1bHQuc3RhdHVzQ29kZSxcbiAgICAgICAgcmVsUGFyYW1zLFxuICAgICAgICByZXN1bHQuZXJyXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IFBhZ2luYXRlZFJlc3VsdCh0aGlzLCBpdGVtcywgcmVsUGFyYW1zKTtcbiAgICB9XG4gIH1cbn07XG52YXIgUGFnaW5hdGVkUmVzdWx0ID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihyZXNvdXJjZSwgaXRlbXMsIHJlbFBhcmFtcykge1xuICAgIHRoaXMucmVzb3VyY2UgPSByZXNvdXJjZTtcbiAgICB0aGlzLml0ZW1zID0gaXRlbXM7XG4gICAgY29uc3Qgc2VsZjIgPSB0aGlzO1xuICAgIGlmIChyZWxQYXJhbXMpIHtcbiAgICAgIGlmIChcImZpcnN0XCIgaW4gcmVsUGFyYW1zKSB7XG4gICAgICAgIHRoaXMuZmlyc3QgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZjIuZ2V0KHJlbFBhcmFtcy5maXJzdCk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAoXCJjdXJyZW50XCIgaW4gcmVsUGFyYW1zKSB7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBzZWxmMi5nZXQocmVsUGFyYW1zLmN1cnJlbnQpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdGhpcy5uZXh0ID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChcIm5leHRcIiBpbiByZWxQYXJhbXMpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZjIuZ2V0KHJlbFBhcmFtcy5uZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHRoaXMuaGFzTmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gXCJuZXh0XCIgaW4gcmVsUGFyYW1zO1xuICAgICAgfTtcbiAgICAgIHRoaXMuaXNMYXN0ID0gKCkgPT4ge1xuICAgICAgICB2YXIgX2EyO1xuICAgICAgICByZXR1cm4gISgoX2EyID0gdGhpcy5oYXNOZXh0KSA9PSBudWxsID8gdm9pZCAwIDogX2EyLmNhbGwodGhpcykpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgLyogV2UgYXNzdW1lIHRoYXQgb25seSB0aGUgaW5pdGlhbCByZXF1ZXN0IGNhbiBiZSBhIFBPU1QsIGFuZCB0aGF0IGFjY2Vzc2luZ1xuICAgKiB0aGUgcmVzdCBvZiBhIG11bHRpcGFnZSBzZXQgb2YgcmVzdWx0cyBjYW4gYWx3YXlzIGJlIGRvbmUgd2l0aCBHRVQgKi9cbiAgYXN5bmMgZ2V0KHBhcmFtcykge1xuICAgIGNvbnN0IHJlcyA9IHRoaXMucmVzb3VyY2U7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzb3VyY2VfZGVmYXVsdC5nZXQocmVzLmNsaWVudCwgcmVzLnBhdGgsIHJlcy5oZWFkZXJzLCBwYXJhbXMsIHJlcy5lbnZlbG9wZSwgZmFsc2UpO1xuICAgIHJldHVybiByZXMuaGFuZGxlUGFnZShyZXN1bHQpO1xuICB9XG59O1xudmFyIEh0dHBQYWdpbmF0ZWRSZXNwb25zZSA9IGNsYXNzIGV4dGVuZHMgUGFnaW5hdGVkUmVzdWx0IHtcbiAgY29uc3RydWN0b3IocmVzb3VyY2UsIGl0ZW1zLCBoZWFkZXJzLCBzdGF0dXNDb2RlLCByZWxQYXJhbXMsIGVycikge1xuICAgIHN1cGVyKHJlc291cmNlLCBpdGVtcywgcmVsUGFyYW1zKTtcbiAgICB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuICAgIHRoaXMuc3VjY2VzcyA9IHN0YXR1c0NvZGUgPCAzMDAgJiYgc3RhdHVzQ29kZSA+PSAyMDA7XG4gICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcbiAgICB0aGlzLmVycm9yQ29kZSA9IGVyciAmJiBlcnIuY29kZTtcbiAgICB0aGlzLmVycm9yTWVzc2FnZSA9IGVyciAmJiBlcnIubWVzc2FnZTtcbiAgfVxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGl0ZW1zOiB0aGlzLml0ZW1zLFxuICAgICAgc3RhdHVzQ29kZTogdGhpcy5zdGF0dXNDb2RlLFxuICAgICAgc3VjY2VzczogdGhpcy5zdWNjZXNzLFxuICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgZXJyb3JDb2RlOiB0aGlzLmVycm9yQ29kZSxcbiAgICAgIGVycm9yTWVzc2FnZTogdGhpcy5lcnJvck1lc3NhZ2VcbiAgICB9O1xuICB9XG59O1xudmFyIHBhZ2luYXRlZHJlc291cmNlX2RlZmF1bHQgPSBQYWdpbmF0ZWRSZXNvdXJjZTtcblxuLy8gc3JjL2NvbW1vbi9saWIvdHlwZXMvcHVzaGNoYW5uZWxzdWJzY3JpcHRpb24udHNcbnZhciBfUHVzaENoYW5uZWxTdWJzY3JpcHRpb24gPSBjbGFzcyBfUHVzaENoYW5uZWxTdWJzY3JpcHRpb24ge1xuICAvKipcbiAgICogT3ZlcmxvYWQgdG9KU09OKCkgdG8gaW50ZXJjZXB0IEpTT04uc3RyaW5naWZ5KClcbiAgICogQHJldHVybiB7Kn1cbiAgICovXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2hhbm5lbDogdGhpcy5jaGFubmVsLFxuICAgICAgZGV2aWNlSWQ6IHRoaXMuZGV2aWNlSWQsXG4gICAgICBjbGllbnRJZDogdGhpcy5jbGllbnRJZFxuICAgIH07XG4gIH1cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IHJlc3VsdCA9IFwiW1B1c2hDaGFubmVsU3Vic2NyaXB0aW9uXCI7XG4gICAgaWYgKHRoaXMuY2hhbm5lbClcbiAgICAgIHJlc3VsdCArPSBcIjsgY2hhbm5lbD1cIiArIHRoaXMuY2hhbm5lbDtcbiAgICBpZiAodGhpcy5kZXZpY2VJZClcbiAgICAgIHJlc3VsdCArPSBcIjsgZGV2aWNlSWQ9XCIgKyB0aGlzLmRldmljZUlkO1xuICAgIGlmICh0aGlzLmNsaWVudElkKVxuICAgICAgcmVzdWx0ICs9IFwiOyBjbGllbnRJZD1cIiArIHRoaXMuY2xpZW50SWQ7XG4gICAgcmVzdWx0ICs9IFwiXVwiO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgc3RhdGljIGZyb21SZXNwb25zZUJvZHkoYm9keSwgTXNnUGFjaywgZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCkge1xuICAgICAgYm9keSA9IGRlY29kZUJvZHkoYm9keSwgTXNnUGFjaywgZm9ybWF0KTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYm9keSkpIHtcbiAgICAgIHJldHVybiBfUHVzaENoYW5uZWxTdWJzY3JpcHRpb24uZnJvbVZhbHVlc0FycmF5KGJvZHkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gX1B1c2hDaGFubmVsU3Vic2NyaXB0aW9uLmZyb21WYWx1ZXMoYm9keSk7XG4gICAgfVxuICB9XG4gIHN0YXRpYyBmcm9tVmFsdWVzKHZhbHVlcykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBfUHVzaENoYW5uZWxTdWJzY3JpcHRpb24oKSwgdmFsdWVzKTtcbiAgfVxuICBzdGF0aWMgZnJvbVZhbHVlc0FycmF5KHZhbHVlcykge1xuICAgIGNvbnN0IGNvdW50ID0gdmFsdWVzLmxlbmd0aCwgcmVzdWx0ID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspXG4gICAgICByZXN1bHRbaV0gPSBfUHVzaENoYW5uZWxTdWJzY3JpcHRpb24uZnJvbVZhbHVlcyh2YWx1ZXNbaV0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5fUHVzaENoYW5uZWxTdWJzY3JpcHRpb24udG9SZXF1ZXN0Qm9keSA9IGVuY29kZUJvZHk7XG52YXIgUHVzaENoYW5uZWxTdWJzY3JpcHRpb24gPSBfUHVzaENoYW5uZWxTdWJzY3JpcHRpb247XG52YXIgcHVzaGNoYW5uZWxzdWJzY3JpcHRpb25fZGVmYXVsdCA9IFB1c2hDaGFubmVsU3Vic2NyaXB0aW9uO1xuXG4vLyBzcmMvY29tbW9uL2xpYi9jbGllbnQvcHVzaC50c1xudmFyIFB1c2ggPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHZhciBfYTI7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy5hZG1pbiA9IG5ldyBBZG1pbihjbGllbnQpO1xuICAgIGlmIChQbGF0Zm9ybS5Db25maWcucHVzaCAmJiAoKF9hMiA9IGNsaWVudC5vcHRpb25zLnBsdWdpbnMpID09IG51bGwgPyB2b2lkIDAgOiBfYTIuUHVzaCkpIHtcbiAgICAgIHRoaXMuc3RhdGVNYWNoaW5lID0gbmV3IGNsaWVudC5vcHRpb25zLnBsdWdpbnMuUHVzaC5BY3RpdmF0aW9uU3RhdGVNYWNoaW5lKGNsaWVudCk7XG4gICAgICB0aGlzLkxvY2FsRGV2aWNlID0gY2xpZW50Lm9wdGlvbnMucGx1Z2lucy5QdXNoLmxvY2FsRGV2aWNlRmFjdG9yeShkZXZpY2VkZXRhaWxzX2RlZmF1bHQpO1xuICAgIH1cbiAgfVxuICBhc3luYyBhY3RpdmF0ZShyZWdpc3RlckNhbGxiYWNrLCB1cGRhdGVGYWlsZWRDYWxsYmFjaykge1xuICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHZhciBfYTI7XG4gICAgICBpZiAoISgoX2EyID0gdGhpcy5jbGllbnQub3B0aW9ucy5wbHVnaW5zKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLlB1c2gpKSB7XG4gICAgICAgIHJlamVjdChjcmVhdGVNaXNzaW5nUGx1Z2luRXJyb3IoXCJQdXNoXCIpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLnN0YXRlTWFjaGluZSkge1xuICAgICAgICByZWplY3QobmV3IEVycm9ySW5mbyhcIlRoaXMgcGxhdGZvcm0gaXMgbm90IHN1cHBvcnRlZCBhcyBhIHRhcmdldCBvZiBwdXNoIG5vdGlmaWNhdGlvbnNcIiwgNGU0LCA0MDApKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RhdGVNYWNoaW5lLmFjdGl2YXRlZENhbGxiYWNrKSB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3JJbmZvKFwiQWN0aXZhdGlvbiBhbHJlYWR5IGluIHByb2dyZXNzXCIsIDRlNCwgNDAwKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhdGVNYWNoaW5lLmFjdGl2YXRlZENhbGxiYWNrID0gKGVycikgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH07XG4gICAgICB0aGlzLnN0YXRlTWFjaGluZS51cGRhdGVGYWlsZWRDYWxsYmFjayA9IHVwZGF0ZUZhaWxlZENhbGxiYWNrO1xuICAgICAgdGhpcy5zdGF0ZU1hY2hpbmUuaGFuZGxlRXZlbnQoXG4gICAgICAgIG5ldyB0aGlzLmNsaWVudC5vcHRpb25zLnBsdWdpbnMuUHVzaC5DYWxsZWRBY3RpdmF0ZSh0aGlzLnN0YXRlTWFjaGluZSwgcmVnaXN0ZXJDYWxsYmFjaylcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgZGVhY3RpdmF0ZShkZXJlZ2lzdGVyQ2FsbGJhY2spIHtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB2YXIgX2EyO1xuICAgICAgaWYgKCEoKF9hMiA9IHRoaXMuY2xpZW50Lm9wdGlvbnMucGx1Z2lucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5QdXNoKSkge1xuICAgICAgICByZWplY3QoY3JlYXRlTWlzc2luZ1BsdWdpbkVycm9yKFwiUHVzaFwiKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5zdGF0ZU1hY2hpbmUpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvckluZm8oXCJUaGlzIHBsYXRmb3JtIGlzIG5vdCBzdXBwb3J0ZWQgYXMgYSB0YXJnZXQgb2YgcHVzaCBub3RpZmljYXRpb25zXCIsIDRlNCwgNDAwKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnN0YXRlTWFjaGluZS5kZWFjdGl2YXRlZENhbGxiYWNrKSB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3JJbmZvKFwiRGVhY3RpdmF0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3NcIiwgNGU0LCA0MDApKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5zdGF0ZU1hY2hpbmUuZGVhY3RpdmF0ZWRDYWxsYmFjayA9IChlcnIpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9O1xuICAgICAgdGhpcy5zdGF0ZU1hY2hpbmUuaGFuZGxlRXZlbnQoXG4gICAgICAgIG5ldyB0aGlzLmNsaWVudC5vcHRpb25zLnBsdWdpbnMuUHVzaC5DYWxsZWREZWFjdGl2YXRlKHRoaXMuc3RhdGVNYWNoaW5lLCBkZXJlZ2lzdGVyQ2FsbGJhY2spXG4gICAgICApO1xuICAgIH0pO1xuICB9XG59O1xudmFyIEFkbWluID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB0aGlzLmRldmljZVJlZ2lzdHJhdGlvbnMgPSBuZXcgRGV2aWNlUmVnaXN0cmF0aW9ucyhjbGllbnQpO1xuICAgIHRoaXMuY2hhbm5lbFN1YnNjcmlwdGlvbnMgPSBuZXcgQ2hhbm5lbFN1YnNjcmlwdGlvbnMoY2xpZW50KTtcbiAgfVxuICBhc3luYyBwdWJsaXNoKHJlY2lwaWVudCwgcGF5bG9hZCkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuY2xpZW50O1xuICAgIGNvbnN0IGZvcm1hdCA9IGNsaWVudC5vcHRpb25zLnVzZUJpbmFyeVByb3RvY29sID8gXCJtc2dwYWNrXCIgLyogbXNncGFjayAqLyA6IFwianNvblwiIC8qIGpzb24gKi8sIGhlYWRlcnMgPSBkZWZhdWx0c19kZWZhdWx0LmRlZmF1bHRQb3N0SGVhZGVycyhjbGllbnQub3B0aW9ucywgeyBmb3JtYXQgfSksIHBhcmFtcyA9IHt9O1xuICAgIGNvbnN0IGJvZHkgPSBtaXhpbih7IHJlY2lwaWVudCB9LCBwYXlsb2FkKTtcbiAgICBtaXhpbihoZWFkZXJzLCBjbGllbnQub3B0aW9ucy5oZWFkZXJzKTtcbiAgICBpZiAoY2xpZW50Lm9wdGlvbnMucHVzaEZ1bGxXYWl0KVxuICAgICAgbWl4aW4ocGFyYW1zLCB7IGZ1bGxXYWl0OiBcInRydWVcIiB9KTtcbiAgICBjb25zdCByZXF1ZXN0Qm9keSA9IGVuY29kZUJvZHkoYm9keSwgY2xpZW50Ll9Nc2dQYWNrLCBmb3JtYXQpO1xuICAgIGF3YWl0IHJlc291cmNlX2RlZmF1bHQucG9zdChjbGllbnQsIFwiL3B1c2gvcHVibGlzaFwiLCByZXF1ZXN0Qm9keSwgaGVhZGVycywgcGFyYW1zLCBudWxsLCB0cnVlKTtcbiAgfVxufTtcbnZhciBEZXZpY2VSZWdpc3RyYXRpb25zID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuICBhc3luYyBzYXZlKGRldmljZSkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuY2xpZW50O1xuICAgIGNvbnN0IGJvZHkgPSBkZXZpY2VkZXRhaWxzX2RlZmF1bHQuZnJvbVZhbHVlcyhkZXZpY2UpO1xuICAgIGNvbnN0IGZvcm1hdCA9IGNsaWVudC5vcHRpb25zLnVzZUJpbmFyeVByb3RvY29sID8gXCJtc2dwYWNrXCIgLyogbXNncGFjayAqLyA6IFwianNvblwiIC8qIGpzb24gKi8sIGhlYWRlcnMgPSBkZWZhdWx0c19kZWZhdWx0LmRlZmF1bHRQb3N0SGVhZGVycyhjbGllbnQub3B0aW9ucywgeyBmb3JtYXQgfSksIHBhcmFtcyA9IHt9O1xuICAgIG1peGluKGhlYWRlcnMsIGNsaWVudC5vcHRpb25zLmhlYWRlcnMpO1xuICAgIGlmIChjbGllbnQub3B0aW9ucy5wdXNoRnVsbFdhaXQpXG4gICAgICBtaXhpbihwYXJhbXMsIHsgZnVsbFdhaXQ6IFwidHJ1ZVwiIH0pO1xuICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0gZW5jb2RlQm9keShib2R5LCBjbGllbnQuX01zZ1BhY2ssIGZvcm1hdCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXNvdXJjZV9kZWZhdWx0LnB1dChcbiAgICAgIGNsaWVudCxcbiAgICAgIFwiL3B1c2gvZGV2aWNlUmVnaXN0cmF0aW9ucy9cIiArIGVuY29kZVVSSUNvbXBvbmVudChkZXZpY2UuaWQpLFxuICAgICAgcmVxdWVzdEJvZHksXG4gICAgICBoZWFkZXJzLFxuICAgICAgcGFyYW1zLFxuICAgICAgbnVsbCxcbiAgICAgIHRydWVcbiAgICApO1xuICAgIHJldHVybiBkZXZpY2VkZXRhaWxzX2RlZmF1bHQuZnJvbVJlc3BvbnNlQm9keShcbiAgICAgIHJlc3BvbnNlLmJvZHksXG4gICAgICBjbGllbnQuX01zZ1BhY2ssXG4gICAgICByZXNwb25zZS51bnBhY2tlZCA/IHZvaWQgMCA6IGZvcm1hdFxuICAgICk7XG4gIH1cbiAgYXN5bmMgZ2V0KGRldmljZUlkT3JEZXRhaWxzKSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5jbGllbnQsIGZvcm1hdCA9IGNsaWVudC5vcHRpb25zLnVzZUJpbmFyeVByb3RvY29sID8gXCJtc2dwYWNrXCIgLyogbXNncGFjayAqLyA6IFwianNvblwiIC8qIGpzb24gKi8sIGhlYWRlcnMgPSBkZWZhdWx0c19kZWZhdWx0LmRlZmF1bHRHZXRIZWFkZXJzKGNsaWVudC5vcHRpb25zLCB7IGZvcm1hdCB9KSwgZGV2aWNlSWQgPSBkZXZpY2VJZE9yRGV0YWlscy5pZCB8fCBkZXZpY2VJZE9yRGV0YWlscztcbiAgICBpZiAodHlwZW9mIGRldmljZUlkICE9PSBcInN0cmluZ1wiIHx8ICFkZXZpY2VJZC5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvckluZm8oXG4gICAgICAgIFwiRmlyc3QgYXJndW1lbnQgdG8gRGV2aWNlUmVnaXN0cmF0aW9ucyNnZXQgbXVzdCBiZSBhIGRldmljZUlkIHN0cmluZyBvciBEZXZpY2VEZXRhaWxzXCIsXG4gICAgICAgIDRlNCxcbiAgICAgICAgNDAwXG4gICAgICApO1xuICAgIH1cbiAgICBtaXhpbihoZWFkZXJzLCBjbGllbnQub3B0aW9ucy5oZWFkZXJzKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlc291cmNlX2RlZmF1bHQuZ2V0KFxuICAgICAgY2xpZW50LFxuICAgICAgXCIvcHVzaC9kZXZpY2VSZWdpc3RyYXRpb25zL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGRldmljZUlkKSxcbiAgICAgIGhlYWRlcnMsXG4gICAgICB7fSxcbiAgICAgIG51bGwsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgICByZXR1cm4gZGV2aWNlZGV0YWlsc19kZWZhdWx0LmZyb21SZXNwb25zZUJvZHkoXG4gICAgICByZXNwb25zZS5ib2R5LFxuICAgICAgY2xpZW50Ll9Nc2dQYWNrLFxuICAgICAgcmVzcG9uc2UudW5wYWNrZWQgPyB2b2lkIDAgOiBmb3JtYXRcbiAgICApO1xuICB9XG4gIGFzeW5jIGxpc3QocGFyYW1zKSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5jbGllbnQsIGZvcm1hdCA9IGNsaWVudC5vcHRpb25zLnVzZUJpbmFyeVByb3RvY29sID8gXCJtc2dwYWNrXCIgLyogbXNncGFjayAqLyA6IFwianNvblwiIC8qIGpzb24gKi8sIGVudmVsb3BlID0gdGhpcy5jbGllbnQuaHR0cC5zdXBwb3J0c0xpbmtIZWFkZXJzID8gdm9pZCAwIDogZm9ybWF0LCBoZWFkZXJzID0gZGVmYXVsdHNfZGVmYXVsdC5kZWZhdWx0R2V0SGVhZGVycyhjbGllbnQub3B0aW9ucywgeyBmb3JtYXQgfSk7XG4gICAgbWl4aW4oaGVhZGVycywgY2xpZW50Lm9wdGlvbnMuaGVhZGVycyk7XG4gICAgcmV0dXJuIG5ldyBwYWdpbmF0ZWRyZXNvdXJjZV9kZWZhdWx0KGNsaWVudCwgXCIvcHVzaC9kZXZpY2VSZWdpc3RyYXRpb25zXCIsIGhlYWRlcnMsIGVudmVsb3BlLCBhc3luYyBmdW5jdGlvbihib2R5LCBoZWFkZXJzMiwgdW5wYWNrZWQpIHtcbiAgICAgIHJldHVybiBkZXZpY2VkZXRhaWxzX2RlZmF1bHQuZnJvbVJlc3BvbnNlQm9keShcbiAgICAgICAgYm9keSxcbiAgICAgICAgY2xpZW50Ll9Nc2dQYWNrLFxuICAgICAgICB1bnBhY2tlZCA/IHZvaWQgMCA6IGZvcm1hdFxuICAgICAgKTtcbiAgICB9KS5nZXQocGFyYW1zKTtcbiAgfVxuICBhc3luYyByZW1vdmUoZGV2aWNlSWRPckRldGFpbHMpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLmNsaWVudCwgZm9ybWF0ID0gY2xpZW50Lm9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBcIm1zZ3BhY2tcIiAvKiBtc2dwYWNrICovIDogXCJqc29uXCIgLyoganNvbiAqLywgaGVhZGVycyA9IGRlZmF1bHRzX2RlZmF1bHQuZGVmYXVsdEdldEhlYWRlcnMoY2xpZW50Lm9wdGlvbnMsIHsgZm9ybWF0IH0pLCBwYXJhbXMgPSB7fSwgZGV2aWNlSWQgPSBkZXZpY2VJZE9yRGV0YWlscy5pZCB8fCBkZXZpY2VJZE9yRGV0YWlscztcbiAgICBpZiAodHlwZW9mIGRldmljZUlkICE9PSBcInN0cmluZ1wiIHx8ICFkZXZpY2VJZC5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvckluZm8oXG4gICAgICAgIFwiRmlyc3QgYXJndW1lbnQgdG8gRGV2aWNlUmVnaXN0cmF0aW9ucyNyZW1vdmUgbXVzdCBiZSBhIGRldmljZUlkIHN0cmluZyBvciBEZXZpY2VEZXRhaWxzXCIsXG4gICAgICAgIDRlNCxcbiAgICAgICAgNDAwXG4gICAgICApO1xuICAgIH1cbiAgICBtaXhpbihoZWFkZXJzLCBjbGllbnQub3B0aW9ucy5oZWFkZXJzKTtcbiAgICBpZiAoY2xpZW50Lm9wdGlvbnMucHVzaEZ1bGxXYWl0KVxuICAgICAgbWl4aW4ocGFyYW1zLCB7IGZ1bGxXYWl0OiBcInRydWVcIiB9KTtcbiAgICBhd2FpdCByZXNvdXJjZV9kZWZhdWx0W1wiZGVsZXRlXCJdKFxuICAgICAgY2xpZW50LFxuICAgICAgXCIvcHVzaC9kZXZpY2VSZWdpc3RyYXRpb25zL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGRldmljZUlkKSxcbiAgICAgIGhlYWRlcnMsXG4gICAgICBwYXJhbXMsXG4gICAgICBudWxsLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gIH1cbiAgYXN5bmMgcmVtb3ZlV2hlcmUocGFyYW1zKSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5jbGllbnQsIGZvcm1hdCA9IGNsaWVudC5vcHRpb25zLnVzZUJpbmFyeVByb3RvY29sID8gXCJtc2dwYWNrXCIgLyogbXNncGFjayAqLyA6IFwianNvblwiIC8qIGpzb24gKi8sIGhlYWRlcnMgPSBkZWZhdWx0c19kZWZhdWx0LmRlZmF1bHRHZXRIZWFkZXJzKGNsaWVudC5vcHRpb25zLCB7IGZvcm1hdCB9KTtcbiAgICBtaXhpbihoZWFkZXJzLCBjbGllbnQub3B0aW9ucy5oZWFkZXJzKTtcbiAgICBpZiAoY2xpZW50Lm9wdGlvbnMucHVzaEZ1bGxXYWl0KVxuICAgICAgbWl4aW4ocGFyYW1zLCB7IGZ1bGxXYWl0OiBcInRydWVcIiB9KTtcbiAgICBhd2FpdCByZXNvdXJjZV9kZWZhdWx0W1wiZGVsZXRlXCJdKGNsaWVudCwgXCIvcHVzaC9kZXZpY2VSZWdpc3RyYXRpb25zXCIsIGhlYWRlcnMsIHBhcmFtcywgbnVsbCwgdHJ1ZSk7XG4gIH1cbn07XG52YXIgQ2hhbm5lbFN1YnNjcmlwdGlvbnMgPSBjbGFzcyBfQ2hhbm5lbFN1YnNjcmlwdGlvbnMge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICAvKiBDaGFubmVsU3Vic2NyaXB0aW9ucyBoYXZlIG5vIHVuaXF1ZSBpZDsgcmVtb3Zpbmcgb25lIGlzIGVxdWl2YWxlbnQgdG8gcmVtb3ZlV2hlcmUgYnkgaXRzIHByb3BlcnRpZXMgKi9cbiAgICB0aGlzLnJlbW92ZSA9IF9DaGFubmVsU3Vic2NyaXB0aW9ucy5wcm90b3R5cGUucmVtb3ZlV2hlcmU7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cbiAgYXN5bmMgc2F2ZShzdWJzY3JpcHRpb24pIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLmNsaWVudDtcbiAgICBjb25zdCBib2R5ID0gcHVzaGNoYW5uZWxzdWJzY3JpcHRpb25fZGVmYXVsdC5mcm9tVmFsdWVzKHN1YnNjcmlwdGlvbik7XG4gICAgY29uc3QgZm9ybWF0ID0gY2xpZW50Lm9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBcIm1zZ3BhY2tcIiAvKiBtc2dwYWNrICovIDogXCJqc29uXCIgLyoganNvbiAqLywgaGVhZGVycyA9IGRlZmF1bHRzX2RlZmF1bHQuZGVmYXVsdFBvc3RIZWFkZXJzKGNsaWVudC5vcHRpb25zLCB7IGZvcm1hdCB9KSwgcGFyYW1zID0ge307XG4gICAgbWl4aW4oaGVhZGVycywgY2xpZW50Lm9wdGlvbnMuaGVhZGVycyk7XG4gICAgaWYgKGNsaWVudC5vcHRpb25zLnB1c2hGdWxsV2FpdClcbiAgICAgIG1peGluKHBhcmFtcywgeyBmdWxsV2FpdDogXCJ0cnVlXCIgfSk7XG4gICAgY29uc3QgcmVxdWVzdEJvZHkgPSBlbmNvZGVCb2R5KGJvZHksIGNsaWVudC5fTXNnUGFjaywgZm9ybWF0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlc291cmNlX2RlZmF1bHQucG9zdChcbiAgICAgIGNsaWVudCxcbiAgICAgIFwiL3B1c2gvY2hhbm5lbFN1YnNjcmlwdGlvbnNcIixcbiAgICAgIHJlcXVlc3RCb2R5LFxuICAgICAgaGVhZGVycyxcbiAgICAgIHBhcmFtcyxcbiAgICAgIG51bGwsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgICByZXR1cm4gcHVzaGNoYW5uZWxzdWJzY3JpcHRpb25fZGVmYXVsdC5mcm9tUmVzcG9uc2VCb2R5KFxuICAgICAgcmVzcG9uc2UuYm9keSxcbiAgICAgIGNsaWVudC5fTXNnUGFjayxcbiAgICAgIHJlc3BvbnNlLnVucGFja2VkID8gdm9pZCAwIDogZm9ybWF0XG4gICAgKTtcbiAgfVxuICBhc3luYyBsaXN0KHBhcmFtcykge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuY2xpZW50LCBmb3JtYXQgPSBjbGllbnQub3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCA/IFwibXNncGFja1wiIC8qIG1zZ3BhY2sgKi8gOiBcImpzb25cIiAvKiBqc29uICovLCBlbnZlbG9wZSA9IHRoaXMuY2xpZW50Lmh0dHAuc3VwcG9ydHNMaW5rSGVhZGVycyA/IHZvaWQgMCA6IGZvcm1hdCwgaGVhZGVycyA9IGRlZmF1bHRzX2RlZmF1bHQuZGVmYXVsdEdldEhlYWRlcnMoY2xpZW50Lm9wdGlvbnMsIHsgZm9ybWF0IH0pO1xuICAgIG1peGluKGhlYWRlcnMsIGNsaWVudC5vcHRpb25zLmhlYWRlcnMpO1xuICAgIHJldHVybiBuZXcgcGFnaW5hdGVkcmVzb3VyY2VfZGVmYXVsdChjbGllbnQsIFwiL3B1c2gvY2hhbm5lbFN1YnNjcmlwdGlvbnNcIiwgaGVhZGVycywgZW52ZWxvcGUsIGFzeW5jIGZ1bmN0aW9uKGJvZHksIGhlYWRlcnMyLCB1bnBhY2tlZCkge1xuICAgICAgcmV0dXJuIHB1c2hjaGFubmVsc3Vic2NyaXB0aW9uX2RlZmF1bHQuZnJvbVJlc3BvbnNlQm9keShcbiAgICAgICAgYm9keSxcbiAgICAgICAgY2xpZW50Ll9Nc2dQYWNrLFxuICAgICAgICB1bnBhY2tlZCA/IHZvaWQgMCA6IGZvcm1hdFxuICAgICAgKTtcbiAgICB9KS5nZXQocGFyYW1zKTtcbiAgfVxuICBhc3luYyByZW1vdmVXaGVyZShwYXJhbXMpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLmNsaWVudCwgZm9ybWF0ID0gY2xpZW50Lm9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBcIm1zZ3BhY2tcIiAvKiBtc2dwYWNrICovIDogXCJqc29uXCIgLyoganNvbiAqLywgaGVhZGVycyA9IGRlZmF1bHRzX2RlZmF1bHQuZGVmYXVsdEdldEhlYWRlcnMoY2xpZW50Lm9wdGlvbnMsIHsgZm9ybWF0IH0pO1xuICAgIG1peGluKGhlYWRlcnMsIGNsaWVudC5vcHRpb25zLmhlYWRlcnMpO1xuICAgIGlmIChjbGllbnQub3B0aW9ucy5wdXNoRnVsbFdhaXQpXG4gICAgICBtaXhpbihwYXJhbXMsIHsgZnVsbFdhaXQ6IFwidHJ1ZVwiIH0pO1xuICAgIGF3YWl0IHJlc291cmNlX2RlZmF1bHRbXCJkZWxldGVcIl0oY2xpZW50LCBcIi9wdXNoL2NoYW5uZWxTdWJzY3JpcHRpb25zXCIsIGhlYWRlcnMsIHBhcmFtcywgbnVsbCwgdHJ1ZSk7XG4gIH1cbiAgYXN5bmMgbGlzdENoYW5uZWxzKHBhcmFtcykge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuY2xpZW50LCBmb3JtYXQgPSBjbGllbnQub3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCA/IFwibXNncGFja1wiIC8qIG1zZ3BhY2sgKi8gOiBcImpzb25cIiAvKiBqc29uICovLCBlbnZlbG9wZSA9IHRoaXMuY2xpZW50Lmh0dHAuc3VwcG9ydHNMaW5rSGVhZGVycyA/IHZvaWQgMCA6IGZvcm1hdCwgaGVhZGVycyA9IGRlZmF1bHRzX2RlZmF1bHQuZGVmYXVsdEdldEhlYWRlcnMoY2xpZW50Lm9wdGlvbnMsIHsgZm9ybWF0IH0pO1xuICAgIG1peGluKGhlYWRlcnMsIGNsaWVudC5vcHRpb25zLmhlYWRlcnMpO1xuICAgIGlmIChjbGllbnQub3B0aW9ucy5wdXNoRnVsbFdhaXQpXG4gICAgICBtaXhpbihwYXJhbXMsIHsgZnVsbFdhaXQ6IFwidHJ1ZVwiIH0pO1xuICAgIHJldHVybiBuZXcgcGFnaW5hdGVkcmVzb3VyY2VfZGVmYXVsdChjbGllbnQsIFwiL3B1c2gvY2hhbm5lbHNcIiwgaGVhZGVycywgZW52ZWxvcGUsIGFzeW5jIGZ1bmN0aW9uKGJvZHksIGhlYWRlcnMyLCB1bnBhY2tlZCkge1xuICAgICAgY29uc3QgcGFyc2VkQm9keSA9ICF1bnBhY2tlZCAmJiBmb3JtYXQgPyBkZWNvZGVCb2R5KGJvZHksIGNsaWVudC5fTXNnUGFjaywgZm9ybWF0KSA6IGJvZHk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnNlZEJvZHkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcGFyc2VkQm9keVtpXSA9IFN0cmluZyhwYXJzZWRCb2R5W2ldKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXJzZWRCb2R5O1xuICAgIH0pLmdldChwYXJhbXMpO1xuICB9XG59O1xudmFyIHB1c2hfZGVmYXVsdCA9IFB1c2g7XG5cbi8vIHNyYy9jb21tb24vbGliL3R5cGVzL21lc3NhZ2UudHNcbnZhciBNZXNzYWdlQWN0aW9uQXJyYXkgPSBbXG4gIFwibWVzc2FnZS51bnNldFwiLFxuICBcIm1lc3NhZ2UuY3JlYXRlXCIsXG4gIFwibWVzc2FnZS51cGRhdGVcIixcbiAgXCJtZXNzYWdlLmRlbGV0ZVwiLFxuICBcImFubm90YXRpb24uY3JlYXRlXCIsXG4gIFwiYW5ub3RhdGlvbi5kZWxldGVcIixcbiAgXCJtZXRhLm9jY3VwYW5jeVwiXG5dO1xudmFyIE1lc3NhZ2VBY3Rpb25NYXAgPSBuZXcgTWFwKE1lc3NhZ2VBY3Rpb25BcnJheS5tYXAoKGFjdGlvbiwgaW5kZXgpID0+IFthY3Rpb24sIGluZGV4XSkpO1xudmFyIFJldmVyc2VNZXNzYWdlQWN0aW9uTWFwID0gbmV3IE1hcChcbiAgTWVzc2FnZUFjdGlvbkFycmF5Lm1hcCgoYWN0aW9uLCBpbmRleCkgPT4gW2luZGV4LCBhY3Rpb25dKVxuKTtcbmZ1bmN0aW9uIHRvTWVzc2FnZUFjdGlvblN0cmluZyhhY3Rpb25OdW1iZXIpIHtcbiAgcmV0dXJuIFJldmVyc2VNZXNzYWdlQWN0aW9uTWFwLmdldChhY3Rpb25OdW1iZXIpO1xufVxuZnVuY3Rpb24gdG9NZXNzYWdlQWN0aW9uTnVtYmVyKG1lc3NhZ2VBY3Rpb24pIHtcbiAgcmV0dXJuIG1lc3NhZ2VBY3Rpb24gPyBNZXNzYWdlQWN0aW9uTWFwLmdldChtZXNzYWdlQWN0aW9uKSA6IHZvaWQgMDtcbn1cbmZ1bmN0aW9uIG5vcm1hbGlzZUNvbnRleHQoY29udGV4dCkge1xuICBpZiAoIWNvbnRleHQgfHwgIWNvbnRleHQuY2hhbm5lbE9wdGlvbnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2hhbm5lbE9wdGlvbnM6IGNvbnRleHQsXG4gICAgICBwbHVnaW5zOiB7fSxcbiAgICAgIGJhc2VFbmNvZGVkUHJldmlvdXNQYXlsb2FkOiB2b2lkIDBcbiAgICB9O1xuICB9XG4gIHJldHVybiBjb250ZXh0O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplQ2lwaGVyT3B0aW9ucyhDcnlwdG8yLCBsb2dnZXIsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5jaXBoZXIpIHtcbiAgICBpZiAoIUNyeXB0bzIpXG4gICAgICB0aHJvd01pc3NpbmdQbHVnaW5FcnJvcihcIkNyeXB0b1wiKTtcbiAgICBjb25zdCBjaXBoZXIgPSBDcnlwdG8yLmdldENpcGhlcihvcHRpb25zLmNpcGhlciwgbG9nZ2VyKTtcbiAgICByZXR1cm4ge1xuICAgICAgY2lwaGVyOiBjaXBoZXIuY2lwaGVyUGFyYW1zLFxuICAgICAgY2hhbm5lbENpcGhlcjogY2lwaGVyLmNpcGhlclxuICAgIH07XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMgOiB7fTtcbn1cbmZ1bmN0aW9uIGdldE1lc3NhZ2VTaXplKG1zZykge1xuICBsZXQgc2l6ZSA9IDA7XG4gIGlmIChtc2cubmFtZSkge1xuICAgIHNpemUgKz0gbXNnLm5hbWUubGVuZ3RoO1xuICB9XG4gIGlmIChtc2cuY2xpZW50SWQpIHtcbiAgICBzaXplICs9IG1zZy5jbGllbnRJZC5sZW5ndGg7XG4gIH1cbiAgaWYgKG1zZy5leHRyYXMpIHtcbiAgICBzaXplICs9IEpTT04uc3RyaW5naWZ5KG1zZy5leHRyYXMpLmxlbmd0aDtcbiAgfVxuICBpZiAobXNnLmRhdGEpIHtcbiAgICBzaXplICs9IGRhdGFTaXplQnl0ZXMobXNnLmRhdGEpO1xuICB9XG4gIHJldHVybiBzaXplO1xufVxuYXN5bmMgZnVuY3Rpb24gZnJvbUVuY29kZWQobG9nZ2VyLCBDcnlwdG8yLCBlbmNvZGVkLCBpbnB1dE9wdGlvbnMpIHtcbiAgY29uc3QgbXNnID0gZnJvbVdpcmVQcm90b2NvbChlbmNvZGVkKTtcbiAgY29uc3Qgb3B0aW9ucyA9IG5vcm1hbGl6ZUNpcGhlck9wdGlvbnMoQ3J5cHRvMiwgbG9nZ2VyLCBpbnB1dE9wdGlvbnMgIT0gbnVsbCA/IGlucHV0T3B0aW9ucyA6IG51bGwpO1xuICB0cnkge1xuICAgIGF3YWl0IGRlY29kZShtc2csIG9wdGlvbnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKGxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLCBcIk1lc3NhZ2UuZnJvbUVuY29kZWQoKVwiLCBlLnRvU3RyaW5nKCkpO1xuICB9XG4gIHJldHVybiBtc2c7XG59XG5hc3luYyBmdW5jdGlvbiBmcm9tRW5jb2RlZEFycmF5KGxvZ2dlciwgQ3J5cHRvMiwgZW5jb2RlZEFycmF5LCBvcHRpb25zKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChcbiAgICBlbmNvZGVkQXJyYXkubWFwKGZ1bmN0aW9uKGVuY29kZWQpIHtcbiAgICAgIHJldHVybiBmcm9tRW5jb2RlZChsb2dnZXIsIENyeXB0bzIsIGVuY29kZWQsIG9wdGlvbnMpO1xuICAgIH0pXG4gICk7XG59XG5hc3luYyBmdW5jdGlvbiBfZnJvbUVuY29kZWQoZW5jb2RlZCwgY2hhbm5lbCkge1xuICBjb25zdCBtc2cgPSBmcm9tV2lyZVByb3RvY29sKGVuY29kZWQpO1xuICB0cnkge1xuICAgIGF3YWl0IGRlY29kZShtc2csIGNoYW5uZWwuY2hhbm5lbE9wdGlvbnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKGNoYW5uZWwubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIFwiTWVzc2FnZS5fZnJvbUVuY29kZWQoKVwiLCBlLnRvU3RyaW5nKCkpO1xuICB9XG4gIHJldHVybiBtc2c7XG59XG5hc3luYyBmdW5jdGlvbiBfZnJvbUVuY29kZWRBcnJheShlbmNvZGVkQXJyYXksIGNoYW5uZWwpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgIGVuY29kZWRBcnJheS5tYXAoZnVuY3Rpb24oZW5jb2RlZCkge1xuICAgICAgcmV0dXJuIF9mcm9tRW5jb2RlZChlbmNvZGVkLCBjaGFubmVsKTtcbiAgICB9KVxuICApO1xufVxuYXN5bmMgZnVuY3Rpb24gZW5jcnlwdChtc2csIG9wdGlvbnMpIHtcbiAgbGV0IGRhdGEgPSBtc2cuZGF0YSwgZW5jb2RpbmcgPSBtc2cuZW5jb2RpbmcsIGNpcGhlciA9IG9wdGlvbnMuY2hhbm5lbENpcGhlcjtcbiAgZW5jb2RpbmcgPSBlbmNvZGluZyA/IGVuY29kaW5nICsgXCIvXCIgOiBcIlwiO1xuICBpZiAoIVBsYXRmb3JtLkJ1ZmZlclV0aWxzLmlzQnVmZmVyKGRhdGEpKSB7XG4gICAgZGF0YSA9IFBsYXRmb3JtLkJ1ZmZlclV0aWxzLnV0ZjhFbmNvZGUoU3RyaW5nKGRhdGEpKTtcbiAgICBlbmNvZGluZyA9IGVuY29kaW5nICsgXCJ1dGYtOC9cIjtcbiAgfVxuICBjb25zdCBjaXBoZXJ0ZXh0ID0gYXdhaXQgY2lwaGVyLmVuY3J5cHQoZGF0YSk7XG4gIG1zZy5kYXRhID0gY2lwaGVydGV4dDtcbiAgbXNnLmVuY29kaW5nID0gZW5jb2RpbmcgKyBcImNpcGhlcitcIiArIGNpcGhlci5hbGdvcml0aG07XG4gIHJldHVybiBtc2c7XG59XG5hc3luYyBmdW5jdGlvbiBlbmNvZGUobXNnLCBvcHRpb25zKSB7XG4gIGNvbnN0IGRhdGEgPSBtc2cuZGF0YTtcbiAgY29uc3QgbmF0aXZlRGF0YVR5cGUgPSB0eXBlb2YgZGF0YSA9PSBcInN0cmluZ1wiIHx8IFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwO1xuICBpZiAoIW5hdGl2ZURhdGFUeXBlKSB7XG4gICAgaWYgKGlzT2JqZWN0KGRhdGEpIHx8IEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgIG1zZy5kYXRhID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgICBtc2cuZW5jb2RpbmcgPSBtc2cuZW5jb2RpbmcgPyBtc2cuZW5jb2RpbmcgKyBcIi9qc29uXCIgOiBcImpzb25cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcIkRhdGEgdHlwZSBpcyB1bnN1cHBvcnRlZFwiLCA0MDAxMywgNDAwKTtcbiAgICB9XG4gIH1cbiAgaWYgKG9wdGlvbnMgIT0gbnVsbCAmJiBvcHRpb25zLmNpcGhlcikge1xuICAgIHJldHVybiBlbmNyeXB0KG1zZywgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG1zZztcbiAgfVxufVxuYXN5bmMgZnVuY3Rpb24gZW5jb2RlQXJyYXkobWVzc2FnZXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKG1lc3NhZ2VzLm1hcCgobWVzc2FnZSkgPT4gZW5jb2RlKG1lc3NhZ2UsIG9wdGlvbnMpKSk7XG59XG52YXIgc2VyaWFsaXplID0gZW5jb2RlQm9keTtcbmFzeW5jIGZ1bmN0aW9uIGRlY29kZShtZXNzYWdlLCBpbnB1dENvbnRleHQpIHtcbiAgY29uc3QgY29udGV4dCA9IG5vcm1hbGlzZUNvbnRleHQoaW5wdXRDb250ZXh0KTtcbiAgbGV0IGxhc3RQYXlsb2FkID0gbWVzc2FnZS5kYXRhO1xuICBjb25zdCBlbmNvZGluZyA9IG1lc3NhZ2UuZW5jb2Rpbmc7XG4gIGlmIChlbmNvZGluZykge1xuICAgIGNvbnN0IHhmb3JtcyA9IGVuY29kaW5nLnNwbGl0KFwiL1wiKTtcbiAgICBsZXQgbGFzdFByb2Nlc3NlZEVuY29kaW5nSW5kZXgsIGVuY29kaW5nc1RvUHJvY2VzcyA9IHhmb3Jtcy5sZW5ndGgsIGRhdGEgPSBtZXNzYWdlLmRhdGE7XG4gICAgbGV0IHhmb3JtID0gXCJcIjtcbiAgICB0cnkge1xuICAgICAgd2hpbGUgKChsYXN0UHJvY2Vzc2VkRW5jb2RpbmdJbmRleCA9IGVuY29kaW5nc1RvUHJvY2VzcykgPiAwKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0geGZvcm1zWy0tZW5jb2RpbmdzVG9Qcm9jZXNzXS5tYXRjaCgvKFstXFx3XSspKFxcKyhbXFx3LV0rKSk/Lyk7XG4gICAgICAgIGlmICghbWF0Y2gpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIHhmb3JtID0gbWF0Y2hbMV07XG4gICAgICAgIHN3aXRjaCAoeGZvcm0pIHtcbiAgICAgICAgICBjYXNlIFwiYmFzZTY0XCI6XG4gICAgICAgICAgICBkYXRhID0gUGxhdGZvcm0uQnVmZmVyVXRpbHMuYmFzZTY0RGVjb2RlKFN0cmluZyhkYXRhKSk7XG4gICAgICAgICAgICBpZiAobGFzdFByb2Nlc3NlZEVuY29kaW5nSW5kZXggPT0geGZvcm1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICBsYXN0UGF5bG9hZCA9IGRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFwidXRmLThcIjpcbiAgICAgICAgICAgIGRhdGEgPSBQbGF0Zm9ybS5CdWZmZXJVdGlscy51dGY4RGVjb2RlKGRhdGEpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBcImpzb25cIjpcbiAgICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBcImNpcGhlclwiOlxuICAgICAgICAgICAgaWYgKGNvbnRleHQuY2hhbm5lbE9wdGlvbnMgIT0gbnVsbCAmJiBjb250ZXh0LmNoYW5uZWxPcHRpb25zLmNpcGhlciAmJiBjb250ZXh0LmNoYW5uZWxPcHRpb25zLmNoYW5uZWxDaXBoZXIpIHtcbiAgICAgICAgICAgICAgY29uc3QgeGZvcm1BbGdvcml0aG0gPSBtYXRjaFszXSwgY2lwaGVyID0gY29udGV4dC5jaGFubmVsT3B0aW9ucy5jaGFubmVsQ2lwaGVyO1xuICAgICAgICAgICAgICBpZiAoeGZvcm1BbGdvcml0aG0gIT0gY2lwaGVyLmFsZ29yaXRobSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBkZWNyeXB0IG1lc3NhZ2Ugd2l0aCBnaXZlbiBjaXBoZXI7IGluY29tcGF0aWJsZSBjaXBoZXIgcGFyYW1zXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGRhdGEgPSBhd2FpdCBjaXBoZXIuZGVjcnlwdChkYXRhKTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gZGVjcnlwdCBtZXNzYWdlOyBub3QgYW4gZW5jcnlwdGVkIGNoYW5uZWxcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcInZjZGlmZlwiOlxuICAgICAgICAgICAgaWYgKCFjb250ZXh0LnBsdWdpbnMgfHwgIWNvbnRleHQucGx1Z2lucy52Y2RpZmYpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcIk1pc3NpbmcgVmNkaWZmIGRlY29kZXIgKGh0dHBzOi8vZ2l0aHViLmNvbS9hYmx5LWZvcmtzL3ZjZGlmZi1kZWNvZGVyKVwiLCA0MDAxOSwgNDAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgVWludDhBcnJheSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFxuICAgICAgICAgICAgICAgIFwiRGVsdGEgZGVjb2Rpbmcgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGJyb3dzZXIgKG5lZWQgQXJyYXlCdWZmZXIgJiBVaW50OEFycmF5KVwiLFxuICAgICAgICAgICAgICAgIDQwMDIwLFxuICAgICAgICAgICAgICAgIDQwMFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgbGV0IGRlbHRhQmFzZSA9IGNvbnRleHQuYmFzZUVuY29kZWRQcmV2aW91c1BheWxvYWQ7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgZGVsdGFCYXNlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgZGVsdGFCYXNlID0gUGxhdGZvcm0uQnVmZmVyVXRpbHMudXRmOEVuY29kZShkZWx0YUJhc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnN0IGRlbHRhQmFzZUJ1ZmZlciA9IFBsYXRmb3JtLkJ1ZmZlclV0aWxzLnRvQnVmZmVyKGRlbHRhQmFzZSk7XG4gICAgICAgICAgICAgIGRhdGEgPSBQbGF0Zm9ybS5CdWZmZXJVdGlscy50b0J1ZmZlcihkYXRhKTtcbiAgICAgICAgICAgICAgZGF0YSA9IFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmFycmF5QnVmZmVyVmlld1RvQnVmZmVyKGNvbnRleHQucGx1Z2lucy52Y2RpZmYuZGVjb2RlKGRhdGEsIGRlbHRhQmFzZUJ1ZmZlcikpO1xuICAgICAgICAgICAgICBsYXN0UGF5bG9hZCA9IGRhdGE7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvckluZm8oXCJWY2RpZmYgZGVsdGEgZGVjb2RlIGZhaWxlZCB3aXRoIFwiICsgZSwgNDAwMTgsIDQwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBlbmNvZGluZ1wiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IGVyciA9IGU7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFxuICAgICAgICBcIkVycm9yIHByb2Nlc3NpbmcgdGhlIFwiICsgeGZvcm0gKyBcIiBlbmNvZGluZywgZGVjb2RlciByZXR1cm5lZCBcXHUyMDE4XCIgKyBlcnIubWVzc2FnZSArIFwiXFx1MjAxOVwiLFxuICAgICAgICBlcnIuY29kZSB8fCA0MDAxMyxcbiAgICAgICAgNDAwXG4gICAgICApO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBtZXNzYWdlLmVuY29kaW5nID0gbGFzdFByb2Nlc3NlZEVuY29kaW5nSW5kZXggPD0gMCA/IG51bGwgOiB4Zm9ybXMuc2xpY2UoMCwgbGFzdFByb2Nlc3NlZEVuY29kaW5nSW5kZXgpLmpvaW4oXCIvXCIpO1xuICAgICAgbWVzc2FnZS5kYXRhID0gZGF0YTtcbiAgICB9XG4gIH1cbiAgY29udGV4dC5iYXNlRW5jb2RlZFByZXZpb3VzUGF5bG9hZCA9IGxhc3RQYXlsb2FkO1xufVxuZnVuY3Rpb24gZnJvbVZhbHVlcyh2YWx1ZXMpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IE1lc3NhZ2UoKSwgdmFsdWVzKTtcbn1cbmZ1bmN0aW9uIGZyb21XaXJlUHJvdG9jb2wodmFsdWVzKSB7XG4gIGNvbnN0IGFjdGlvbiA9IHRvTWVzc2FnZUFjdGlvblN0cmluZyh2YWx1ZXMuYWN0aW9uKSB8fCB2YWx1ZXMuYWN0aW9uO1xuICBjb25zdCByZXMgPSBPYmplY3QuYXNzaWduKG5ldyBNZXNzYWdlKCksIF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIHZhbHVlcyksIHsgYWN0aW9uIH0pKTtcbiAgcmVzLmV4cGFuZEZpZWxkcygpO1xuICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gZnJvbVZhbHVlc0FycmF5KHZhbHVlcykge1xuICByZXR1cm4gdmFsdWVzLm1hcChmcm9tVmFsdWVzKTtcbn1cbmZ1bmN0aW9uIGdldE1lc3NhZ2VzU2l6ZShtZXNzYWdlcykge1xuICBsZXQgbXNnLCB0b3RhbCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWVzc2FnZXMubGVuZ3RoOyBpKyspIHtcbiAgICBtc2cgPSBtZXNzYWdlc1tpXTtcbiAgICB0b3RhbCArPSBtc2cuc2l6ZSB8fCAobXNnLnNpemUgPSBnZXRNZXNzYWdlU2l6ZShtc2cpKTtcbiAgfVxuICByZXR1cm4gdG90YWw7XG59XG52YXIgTWVzc2FnZSA9IGNsYXNzIHtcbiAgLyoqXG4gICAqIE92ZXJsb2FkIHRvSlNPTigpIHRvIGludGVyY2VwdCBKU09OLnN0cmluZ2lmeSgpXG4gICAqIEByZXR1cm4geyp9XG4gICAqL1xuICB0b0pTT04oKSB7XG4gICAgbGV0IGVuY29kaW5nID0gdGhpcy5lbmNvZGluZztcbiAgICBsZXQgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICBpZiAoZGF0YSAmJiBQbGF0Zm9ybS5CdWZmZXJVdGlscy5pc0J1ZmZlcihkYXRhKSkge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGVuY29kaW5nID0gZW5jb2RpbmcgPyBlbmNvZGluZyArIFwiL2Jhc2U2NFwiIDogXCJiYXNlNjRcIjtcbiAgICAgICAgZGF0YSA9IFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmJhc2U2NEVuY29kZShkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEgPSBQbGF0Zm9ybS5CdWZmZXJVdGlscy50b0J1ZmZlcihkYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgY2xpZW50SWQ6IHRoaXMuY2xpZW50SWQsXG4gICAgICBjb25uZWN0aW9uSWQ6IHRoaXMuY29ubmVjdGlvbklkLFxuICAgICAgY29ubmVjdGlvbktleTogdGhpcy5jb25uZWN0aW9uS2V5LFxuICAgICAgZXh0cmFzOiB0aGlzLmV4dHJhcyxcbiAgICAgIHNlcmlhbDogdGhpcy5zZXJpYWwsXG4gICAgICBhY3Rpb246IHRvTWVzc2FnZUFjdGlvbk51bWJlcih0aGlzLmFjdGlvbikgfHwgdGhpcy5hY3Rpb24sXG4gICAgICByZWZTZXJpYWw6IHRoaXMucmVmU2VyaWFsLFxuICAgICAgcmVmVHlwZTogdGhpcy5yZWZUeXBlLFxuICAgICAgY3JlYXRlZEF0OiB0aGlzLmNyZWF0ZWRBdCxcbiAgICAgIHZlcnNpb246IHRoaXMudmVyc2lvbixcbiAgICAgIG9wZXJhdGlvbjogdGhpcy5vcGVyYXRpb24sXG4gICAgICBlbmNvZGluZyxcbiAgICAgIGRhdGFcbiAgICB9O1xuICB9XG4gIGV4cGFuZEZpZWxkcygpIHtcbiAgICBpZiAodGhpcy5hY3Rpb24gPT09IFwibWVzc2FnZS5jcmVhdGVcIikge1xuICAgICAgaWYgKHRoaXMudmVyc2lvbiAmJiAhdGhpcy5zZXJpYWwpIHtcbiAgICAgICAgdGhpcy5zZXJpYWwgPSB0aGlzLnZlcnNpb247XG4gICAgICB9XG4gICAgICBpZiAodGhpcy50aW1lc3RhbXAgJiYgIXRoaXMuY3JlYXRlZEF0KSB7XG4gICAgICAgIHRoaXMuY3JlYXRlZEF0ID0gdGhpcy50aW1lc3RhbXA7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCByZXN1bHQgPSBcIltNZXNzYWdlXCI7XG4gICAgaWYgKHRoaXMubmFtZSlcbiAgICAgIHJlc3VsdCArPSBcIjsgbmFtZT1cIiArIHRoaXMubmFtZTtcbiAgICBpZiAodGhpcy5pZClcbiAgICAgIHJlc3VsdCArPSBcIjsgaWQ9XCIgKyB0aGlzLmlkO1xuICAgIGlmICh0aGlzLnRpbWVzdGFtcClcbiAgICAgIHJlc3VsdCArPSBcIjsgdGltZXN0YW1wPVwiICsgdGhpcy50aW1lc3RhbXA7XG4gICAgaWYgKHRoaXMuY2xpZW50SWQpXG4gICAgICByZXN1bHQgKz0gXCI7IGNsaWVudElkPVwiICsgdGhpcy5jbGllbnRJZDtcbiAgICBpZiAodGhpcy5jb25uZWN0aW9uSWQpXG4gICAgICByZXN1bHQgKz0gXCI7IGNvbm5lY3Rpb25JZD1cIiArIHRoaXMuY29ubmVjdGlvbklkO1xuICAgIGlmICh0aGlzLmVuY29kaW5nKVxuICAgICAgcmVzdWx0ICs9IFwiOyBlbmNvZGluZz1cIiArIHRoaXMuZW5jb2Rpbmc7XG4gICAgaWYgKHRoaXMuZXh0cmFzKVxuICAgICAgcmVzdWx0ICs9IFwiOyBleHRyYXMgPVwiICsgSlNPTi5zdHJpbmdpZnkodGhpcy5leHRyYXMpO1xuICAgIGlmICh0aGlzLmRhdGEpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5kYXRhID09IFwic3RyaW5nXCIpXG4gICAgICAgIHJlc3VsdCArPSBcIjsgZGF0YT1cIiArIHRoaXMuZGF0YTtcbiAgICAgIGVsc2UgaWYgKFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmlzQnVmZmVyKHRoaXMuZGF0YSkpXG4gICAgICAgIHJlc3VsdCArPSBcIjsgZGF0YSAoYnVmZmVyKT1cIiArIFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmJhc2U2NEVuY29kZSh0aGlzLmRhdGEpO1xuICAgICAgZWxzZVxuICAgICAgICByZXN1bHQgKz0gXCI7IGRhdGEgKGpzb24pPVwiICsgSlNPTi5zdHJpbmdpZnkodGhpcy5kYXRhKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZXh0cmFzKVxuICAgICAgcmVzdWx0ICs9IFwiOyBleHRyYXM9XCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLmV4dHJhcyk7XG4gICAgaWYgKHRoaXMuYWN0aW9uKVxuICAgICAgcmVzdWx0ICs9IFwiOyBhY3Rpb249XCIgKyB0aGlzLmFjdGlvbjtcbiAgICBpZiAodGhpcy5zZXJpYWwpXG4gICAgICByZXN1bHQgKz0gXCI7IHNlcmlhbD1cIiArIHRoaXMuc2VyaWFsO1xuICAgIGlmICh0aGlzLnZlcnNpb24pXG4gICAgICByZXN1bHQgKz0gXCI7IHZlcnNpb249XCIgKyB0aGlzLnZlcnNpb247XG4gICAgaWYgKHRoaXMucmVmU2VyaWFsKVxuICAgICAgcmVzdWx0ICs9IFwiOyByZWZTZXJpYWw9XCIgKyB0aGlzLnJlZlNlcmlhbDtcbiAgICBpZiAodGhpcy5yZWZUeXBlKVxuICAgICAgcmVzdWx0ICs9IFwiOyByZWZUeXBlPVwiICsgdGhpcy5yZWZUeXBlO1xuICAgIGlmICh0aGlzLmNyZWF0ZWRBdClcbiAgICAgIHJlc3VsdCArPSBcIjsgY3JlYXRlZEF0PVwiICsgdGhpcy5jcmVhdGVkQXQ7XG4gICAgaWYgKHRoaXMub3BlcmF0aW9uKVxuICAgICAgcmVzdWx0ICs9IFwiOyBvcGVyYXRpb249XCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLm9wZXJhdGlvbik7XG4gICAgcmVzdWx0ICs9IFwiXVwiO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG52YXIgbWVzc2FnZV9kZWZhdWx0ID0gTWVzc2FnZTtcblxuLy8gc3JjL2NvbW1vbi9saWIvdHlwZXMvcHJlc2VuY2VtZXNzYWdlLnRzXG52YXIgYWN0aW9ucyA9IFtcImFic2VudFwiLCBcInByZXNlbnRcIiwgXCJlbnRlclwiLCBcImxlYXZlXCIsIFwidXBkYXRlXCJdO1xuZnVuY3Rpb24gdG9BY3Rpb25WYWx1ZShhY3Rpb25TdHJpbmcpIHtcbiAgcmV0dXJuIGFjdGlvbnMuaW5kZXhPZihhY3Rpb25TdHJpbmcpO1xufVxuYXN5bmMgZnVuY3Rpb24gZnJvbUVuY29kZWQyKGxvZ2dlciwgQ3J5cHRvMiwgZW5jb2RlZCwgaW5wdXRPcHRpb25zKSB7XG4gIGNvbnN0IG1zZyA9IGZyb21XaXJlUHJvdG9jb2wyKGVuY29kZWQpO1xuICBjb25zdCBvcHRpb25zID0gbm9ybWFsaXplQ2lwaGVyT3B0aW9ucyhDcnlwdG8yLCBsb2dnZXIsIGlucHV0T3B0aW9ucyAhPSBudWxsID8gaW5wdXRPcHRpb25zIDogbnVsbCk7XG4gIHRyeSB7XG4gICAgYXdhaXQgZGVjb2RlMihtc2csIG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMgOiB7fSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIFwiUHJlc2VuY2VNZXNzYWdlLmZyb21FbmNvZGVkKClcIiwgZS50b1N0cmluZygpKTtcbiAgfVxuICByZXR1cm4gbXNnO1xufVxuYXN5bmMgZnVuY3Rpb24gZnJvbUVuY29kZWRBcnJheTIobG9nZ2VyLCBDcnlwdG8yLCBlbmNvZGVkQXJyYXksIG9wdGlvbnMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgIGVuY29kZWRBcnJheS5tYXAoZnVuY3Rpb24oZW5jb2RlZCkge1xuICAgICAgcmV0dXJuIGZyb21FbmNvZGVkMihsb2dnZXIsIENyeXB0bzIsIGVuY29kZWQsIG9wdGlvbnMpO1xuICAgIH0pXG4gICk7XG59XG5hc3luYyBmdW5jdGlvbiBfZnJvbUVuY29kZWQyKGVuY29kZWQsIGNoYW5uZWwpIHtcbiAgY29uc3QgbXNnID0gZnJvbVdpcmVQcm90b2NvbDIoZW5jb2RlZCk7XG4gIHRyeSB7XG4gICAgYXdhaXQgZGVjb2RlMihtc2csIGNoYW5uZWwuY2hhbm5lbE9wdGlvbnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKGNoYW5uZWwubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIFwiUHJlc2VuY2VNZXNzYWdlLl9mcm9tRW5jb2RlZCgpXCIsIGUudG9TdHJpbmcoKSk7XG4gIH1cbiAgcmV0dXJuIG1zZztcbn1cbmFzeW5jIGZ1bmN0aW9uIF9mcm9tRW5jb2RlZEFycmF5MihlbmNvZGVkQXJyYXksIGNoYW5uZWwpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgIGVuY29kZWRBcnJheS5tYXAoZnVuY3Rpb24oZW5jb2RlZCkge1xuICAgICAgcmV0dXJuIF9mcm9tRW5jb2RlZDIoZW5jb2RlZCwgY2hhbm5lbCk7XG4gICAgfSlcbiAgKTtcbn1cbmZ1bmN0aW9uIGZyb21WYWx1ZXMyKHZhbHVlcykge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgUHJlc2VuY2VNZXNzYWdlKCksIHZhbHVlcyk7XG59XG5mdW5jdGlvbiBmcm9tV2lyZVByb3RvY29sMih2YWx1ZXMpIHtcbiAgY29uc3QgYWN0aW9uID0gYWN0aW9uc1t2YWx1ZXMuYWN0aW9uXTtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IFByZXNlbmNlTWVzc2FnZSgpLCBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCB2YWx1ZXMpLCB7IGFjdGlvbiB9KSk7XG59XG52YXIgZGVjb2RlMiA9IGRlY29kZTtcbmZ1bmN0aW9uIGZyb21WYWx1ZXNBcnJheTIodmFsdWVzKSB7XG4gIHJldHVybiB2YWx1ZXMubWFwKGZyb21WYWx1ZXMyKTtcbn1cbmZ1bmN0aW9uIGZyb21EYXRhKGRhdGEpIHtcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBQcmVzZW5jZU1lc3NhZ2UpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuICByZXR1cm4gZnJvbVZhbHVlczIoe1xuICAgIGRhdGFcbiAgfSk7XG59XG52YXIgUHJlc2VuY2VNZXNzYWdlID0gY2xhc3Mge1xuICAvKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBwcmVzZW5jZU1lc3NhZ2UgaXMgc3ludGhlc2l6ZWQsIGkuZS4gd2FzIG5vdCBhY3R1YWxseVxuICAgKiBzZW50IGJ5IHRoZSBjb25uZWN0aW9uICh1c3VhbGx5IG1lYW5zIGEgbGVhdmUgZXZlbnQgc2VudCAxNXMgYWZ0ZXIgYVxuICAgKiBkaXNjb25uZWN0aW9uKS4gVGhpcyBpcyB1c2VmdWwgYmVjYXVzZSBzeW50aGVzaXplZCBtZXNzYWdlcyBjYW5ub3QgYmVcbiAgICogY29tcGFyZWQgZm9yIG5ld25lc3MgYnkgaWQgbGV4aWNvZ3JhcGhpY2FsbHkgLSBSVFAyYjFcbiAgICovXG4gIGlzU3ludGhlc2l6ZWQoKSB7XG4gICAgaWYgKCF0aGlzLmlkIHx8ICF0aGlzLmNvbm5lY3Rpb25JZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmlkLnN1YnN0cmluZyh0aGlzLmNvbm5lY3Rpb25JZC5sZW5ndGgsIDApICE9PSB0aGlzLmNvbm5lY3Rpb25JZDtcbiAgfVxuICAvKiBSVFAyYjIgKi9cbiAgcGFyc2VJZCgpIHtcbiAgICBpZiAoIXRoaXMuaWQpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZUlkKCk6IFByZXNlbmNlIG1lc3NhZ2UgZG9lcyBub3QgY29udGFpbiBhbiBpZFwiKTtcbiAgICBjb25zdCBwYXJ0cyA9IHRoaXMuaWQuc3BsaXQoXCI6XCIpO1xuICAgIHJldHVybiB7XG4gICAgICBjb25uZWN0aW9uSWQ6IHBhcnRzWzBdLFxuICAgICAgbXNnU2VyaWFsOiBwYXJzZUludChwYXJ0c1sxXSwgMTApLFxuICAgICAgaW5kZXg6IHBhcnNlSW50KHBhcnRzWzJdLCAxMClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBPdmVybG9hZCB0b0pTT04oKSB0byBpbnRlcmNlcHQgSlNPTi5zdHJpbmdpZnkoKVxuICAgKiBAcmV0dXJuIHsqfVxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIGxldCBkYXRhID0gdGhpcy5kYXRhO1xuICAgIGxldCBlbmNvZGluZyA9IHRoaXMuZW5jb2Rpbmc7XG4gICAgaWYgKGRhdGEgJiYgUGxhdGZvcm0uQnVmZmVyVXRpbHMuaXNCdWZmZXIoZGF0YSkpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICBlbmNvZGluZyA9IGVuY29kaW5nID8gZW5jb2RpbmcgKyBcIi9iYXNlNjRcIiA6IFwiYmFzZTY0XCI7XG4gICAgICAgIGRhdGEgPSBQbGF0Zm9ybS5CdWZmZXJVdGlscy5iYXNlNjRFbmNvZGUoZGF0YSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhID0gUGxhdGZvcm0uQnVmZmVyVXRpbHMudG9CdWZmZXIoZGF0YSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBpZDogdGhpcy5pZCxcbiAgICAgIGNsaWVudElkOiB0aGlzLmNsaWVudElkLFxuICAgICAgLyogQ29udmVydCBwcmVzZW5jZSBhY3Rpb24gYmFjayB0byBhbiBpbnQgZm9yIHNlbmRpbmcgdG8gQWJseSAqL1xuICAgICAgYWN0aW9uOiB0b0FjdGlvblZhbHVlKHRoaXMuYWN0aW9uKSxcbiAgICAgIGRhdGEsXG4gICAgICBlbmNvZGluZyxcbiAgICAgIGV4dHJhczogdGhpcy5leHRyYXNcbiAgICB9O1xuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCByZXN1bHQgPSBcIltQcmVzZW5jZU1lc3NhZ2VcIjtcbiAgICByZXN1bHQgKz0gXCI7IGFjdGlvbj1cIiArIHRoaXMuYWN0aW9uO1xuICAgIGlmICh0aGlzLmlkKVxuICAgICAgcmVzdWx0ICs9IFwiOyBpZD1cIiArIHRoaXMuaWQ7XG4gICAgaWYgKHRoaXMudGltZXN0YW1wKVxuICAgICAgcmVzdWx0ICs9IFwiOyB0aW1lc3RhbXA9XCIgKyB0aGlzLnRpbWVzdGFtcDtcbiAgICBpZiAodGhpcy5jbGllbnRJZClcbiAgICAgIHJlc3VsdCArPSBcIjsgY2xpZW50SWQ9XCIgKyB0aGlzLmNsaWVudElkO1xuICAgIGlmICh0aGlzLmNvbm5lY3Rpb25JZClcbiAgICAgIHJlc3VsdCArPSBcIjsgY29ubmVjdGlvbklkPVwiICsgdGhpcy5jb25uZWN0aW9uSWQ7XG4gICAgaWYgKHRoaXMuZW5jb2RpbmcpXG4gICAgICByZXN1bHQgKz0gXCI7IGVuY29kaW5nPVwiICsgdGhpcy5lbmNvZGluZztcbiAgICBpZiAodGhpcy5kYXRhKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuZGF0YSA9PSBcInN0cmluZ1wiKVxuICAgICAgICByZXN1bHQgKz0gXCI7IGRhdGE9XCIgKyB0aGlzLmRhdGE7XG4gICAgICBlbHNlIGlmIChQbGF0Zm9ybS5CdWZmZXJVdGlscy5pc0J1ZmZlcih0aGlzLmRhdGEpKVxuICAgICAgICByZXN1bHQgKz0gXCI7IGRhdGEgKGJ1ZmZlcik9XCIgKyBQbGF0Zm9ybS5CdWZmZXJVdGlscy5iYXNlNjRFbmNvZGUodGhpcy5kYXRhKTtcbiAgICAgIGVsc2VcbiAgICAgICAgcmVzdWx0ICs9IFwiOyBkYXRhIChqc29uKT1cIiArIEpTT04uc3RyaW5naWZ5KHRoaXMuZGF0YSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmV4dHJhcykge1xuICAgICAgcmVzdWx0ICs9IFwiOyBleHRyYXM9XCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLmV4dHJhcyk7XG4gICAgfVxuICAgIHJlc3VsdCArPSBcIl1cIjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xudmFyIHByZXNlbmNlbWVzc2FnZV9kZWZhdWx0ID0gUHJlc2VuY2VNZXNzYWdlO1xuXG4vLyBzcmMvY29tbW9uL2xpYi9jbGllbnQvcmVzdHByZXNlbmNlLnRzXG52YXIgUmVzdFByZXNlbmNlID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihjaGFubmVsKSB7XG4gICAgdGhpcy5jaGFubmVsID0gY2hhbm5lbDtcbiAgfVxuICBnZXQgbG9nZ2VyKCkge1xuICAgIHJldHVybiB0aGlzLmNoYW5uZWwubG9nZ2VyO1xuICB9XG4gIGFzeW5jIGdldChwYXJhbXMpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTywgXCJSZXN0UHJlc2VuY2UuZ2V0KClcIiwgXCJjaGFubmVsID0gXCIgKyB0aGlzLmNoYW5uZWwubmFtZSk7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5jaGFubmVsLmNsaWVudCwgZm9ybWF0ID0gY2xpZW50Lm9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBcIm1zZ3BhY2tcIiAvKiBtc2dwYWNrICovIDogXCJqc29uXCIgLyoganNvbiAqLywgZW52ZWxvcGUgPSB0aGlzLmNoYW5uZWwuY2xpZW50Lmh0dHAuc3VwcG9ydHNMaW5rSGVhZGVycyA/IHZvaWQgMCA6IGZvcm1hdCwgaGVhZGVycyA9IGRlZmF1bHRzX2RlZmF1bHQuZGVmYXVsdEdldEhlYWRlcnMoY2xpZW50Lm9wdGlvbnMsIHsgZm9ybWF0IH0pO1xuICAgIG1peGluKGhlYWRlcnMsIGNsaWVudC5vcHRpb25zLmhlYWRlcnMpO1xuICAgIHJldHVybiBuZXcgcGFnaW5hdGVkcmVzb3VyY2VfZGVmYXVsdChcbiAgICAgIGNsaWVudCxcbiAgICAgIHRoaXMuY2hhbm5lbC5jbGllbnQucmVzdC5wcmVzZW5jZU1peGluLmJhc2VQYXRoKHRoaXMpLFxuICAgICAgaGVhZGVycyxcbiAgICAgIGVudmVsb3BlLFxuICAgICAgYXN5bmMgKGJvZHksIGhlYWRlcnMyLCB1bnBhY2tlZCkgPT4ge1xuICAgICAgICBjb25zdCBkZWNvZGVkID0gdW5wYWNrZWQgPyBib2R5IDogZGVjb2RlQm9keShib2R5LCBjbGllbnQuX01zZ1BhY2ssIGZvcm1hdCk7XG4gICAgICAgIHJldHVybiBfZnJvbUVuY29kZWRBcnJheTIoZGVjb2RlZCwgdGhpcy5jaGFubmVsKTtcbiAgICAgIH1cbiAgICApLmdldChwYXJhbXMpO1xuICB9XG4gIGFzeW5jIGhpc3RvcnkocGFyYW1zKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sIFwiUmVzdFByZXNlbmNlLmhpc3RvcnkoKVwiLCBcImNoYW5uZWwgPSBcIiArIHRoaXMuY2hhbm5lbC5uYW1lKTtcbiAgICByZXR1cm4gdGhpcy5jaGFubmVsLmNsaWVudC5yZXN0LnByZXNlbmNlTWl4aW4uaGlzdG9yeSh0aGlzLCBwYXJhbXMpO1xuICB9XG59O1xudmFyIHJlc3RwcmVzZW5jZV9kZWZhdWx0ID0gUmVzdFByZXNlbmNlO1xuXG4vLyBzcmMvY29tbW9uL2xpYi9jbGllbnQvcmVzdGNoYW5uZWwudHNcbnZhciBNU0dfSURfRU5UUk9QWV9CWVRFUyA9IDk7XG5mdW5jdGlvbiBhbGxFbXB0eUlkcyhtZXNzYWdlcykge1xuICByZXR1cm4gbWVzc2FnZXMuZXZlcnkoZnVuY3Rpb24obWVzc2FnZSkge1xuICAgIHJldHVybiAhbWVzc2FnZS5pZDtcbiAgfSk7XG59XG52YXIgUmVzdENoYW5uZWwgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCwgbmFtZSwgY2hhbm5lbE9wdGlvbnMpIHtcbiAgICB2YXIgX2EyLCBfYjtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oY2xpZW50LmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIlJlc3RDaGFubmVsKClcIiwgXCJzdGFydGVkOyBuYW1lID0gXCIgKyBuYW1lKTtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMucHJlc2VuY2UgPSBuZXcgcmVzdHByZXNlbmNlX2RlZmF1bHQodGhpcyk7XG4gICAgdGhpcy5jaGFubmVsT3B0aW9ucyA9IG5vcm1hbGlzZUNoYW5uZWxPcHRpb25zKChfYTIgPSBjbGllbnQuX0NyeXB0bykgIT0gbnVsbCA/IF9hMiA6IG51bGwsIHRoaXMubG9nZ2VyLCBjaGFubmVsT3B0aW9ucyk7XG4gICAgaWYgKChfYiA9IGNsaWVudC5vcHRpb25zLnBsdWdpbnMpID09IG51bGwgPyB2b2lkIDAgOiBfYi5QdXNoKSB7XG4gICAgICB0aGlzLl9wdXNoID0gbmV3IGNsaWVudC5vcHRpb25zLnBsdWdpbnMuUHVzaC5QdXNoQ2hhbm5lbCh0aGlzKTtcbiAgICB9XG4gIH1cbiAgZ2V0IHB1c2goKSB7XG4gICAgaWYgKCF0aGlzLl9wdXNoKSB7XG4gICAgICB0aHJvd01pc3NpbmdQbHVnaW5FcnJvcihcIlB1c2hcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9wdXNoO1xuICB9XG4gIGdldCBsb2dnZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmxvZ2dlcjtcbiAgfVxuICBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICB2YXIgX2EyO1xuICAgIHRoaXMuY2hhbm5lbE9wdGlvbnMgPSBub3JtYWxpc2VDaGFubmVsT3B0aW9ucygoX2EyID0gdGhpcy5jbGllbnQuX0NyeXB0bykgIT0gbnVsbCA/IF9hMiA6IG51bGwsIHRoaXMubG9nZ2VyLCBvcHRpb25zKTtcbiAgfVxuICBhc3luYyBoaXN0b3J5KHBhcmFtcykge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLCBcIlJlc3RDaGFubmVsLmhpc3RvcnkoKVwiLCBcImNoYW5uZWwgPSBcIiArIHRoaXMubmFtZSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnJlc3QuY2hhbm5lbE1peGluLmhpc3RvcnkodGhpcywgcGFyYW1zKTtcbiAgfVxuICBhc3luYyBwdWJsaXNoKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmaXJzdCA9IGFyZ3NbMF0sIHNlY29uZCA9IGFyZ3NbMV07XG4gICAgbGV0IG1lc3NhZ2VzO1xuICAgIGxldCBwYXJhbXM7XG4gICAgaWYgKHR5cGVvZiBmaXJzdCA9PT0gXCJzdHJpbmdcIiB8fCBmaXJzdCA9PT0gbnVsbCkge1xuICAgICAgbWVzc2FnZXMgPSBbZnJvbVZhbHVlcyh7IG5hbWU6IGZpcnN0LCBkYXRhOiBzZWNvbmQgfSldO1xuICAgICAgcGFyYW1zID0gYXJnc1syXTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGZpcnN0KSkge1xuICAgICAgbWVzc2FnZXMgPSBbZnJvbVZhbHVlcyhmaXJzdCldO1xuICAgICAgcGFyYW1zID0gYXJnc1sxXTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZmlyc3QpKSB7XG4gICAgICBtZXNzYWdlcyA9IGZyb21WYWx1ZXNBcnJheShmaXJzdCk7XG4gICAgICBwYXJhbXMgPSBhcmdzWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFxuICAgICAgICBcIlRoZSBzaW5nbGUtYXJndW1lbnQgZm9ybSBvZiBwdWJsaXNoKCkgZXhwZWN0cyBhIG1lc3NhZ2Ugb2JqZWN0IG9yIGFuIGFycmF5IG9mIG1lc3NhZ2Ugb2JqZWN0c1wiLFxuICAgICAgICA0MDAxMyxcbiAgICAgICAgNDAwXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIXBhcmFtcykge1xuICAgICAgcGFyYW1zID0ge307XG4gICAgfVxuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuY2xpZW50LCBvcHRpb25zID0gY2xpZW50Lm9wdGlvbnMsIGZvcm1hdCA9IG9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBcIm1zZ3BhY2tcIiAvKiBtc2dwYWNrICovIDogXCJqc29uXCIgLyoganNvbiAqLywgaWRlbXBvdGVudFJlc3RQdWJsaXNoaW5nID0gY2xpZW50Lm9wdGlvbnMuaWRlbXBvdGVudFJlc3RQdWJsaXNoaW5nLCBoZWFkZXJzID0gZGVmYXVsdHNfZGVmYXVsdC5kZWZhdWx0UG9zdEhlYWRlcnMoY2xpZW50Lm9wdGlvbnMsIHsgZm9ybWF0IH0pO1xuICAgIG1peGluKGhlYWRlcnMsIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgaWYgKGlkZW1wb3RlbnRSZXN0UHVibGlzaGluZyAmJiBhbGxFbXB0eUlkcyhtZXNzYWdlcykpIHtcbiAgICAgIGNvbnN0IG1zZ0lkQmFzZSA9IGF3YWl0IHJhbmRvbVN0cmluZyhNU0dfSURfRU5UUk9QWV9CWVRFUyk7XG4gICAgICBtZXNzYWdlcy5mb3JFYWNoKGZ1bmN0aW9uKG1lc3NhZ2UsIGluZGV4KSB7XG4gICAgICAgIG1lc3NhZ2UuaWQgPSBtc2dJZEJhc2UgKyBcIjpcIiArIGluZGV4LnRvU3RyaW5nKCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgYXdhaXQgZW5jb2RlQXJyYXkobWVzc2FnZXMsIHRoaXMuY2hhbm5lbE9wdGlvbnMpO1xuICAgIGNvbnN0IHNpemUgPSBnZXRNZXNzYWdlc1NpemUobWVzc2FnZXMpLCBtYXhNZXNzYWdlU2l6ZSA9IG9wdGlvbnMubWF4TWVzc2FnZVNpemU7XG4gICAgaWYgKHNpemUgPiBtYXhNZXNzYWdlU2l6ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcbiAgICAgICAgXCJNYXhpbXVtIHNpemUgb2YgbWVzc2FnZXMgdGhhdCBjYW4gYmUgcHVibGlzaGVkIGF0IG9uY2UgZXhjZWVkZWQgKCB3YXMgXCIgKyBzaXplICsgXCIgYnl0ZXM7IGxpbWl0IGlzIFwiICsgbWF4TWVzc2FnZVNpemUgKyBcIiBieXRlcylcIixcbiAgICAgICAgNDAwMDksXG4gICAgICAgIDQwMFxuICAgICAgKTtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5fcHVibGlzaChzZXJpYWxpemUobWVzc2FnZXMsIGNsaWVudC5fTXNnUGFjaywgZm9ybWF0KSwgaGVhZGVycywgcGFyYW1zKTtcbiAgfVxuICBhc3luYyBfcHVibGlzaChyZXF1ZXN0Qm9keSwgaGVhZGVycywgcGFyYW1zKSB7XG4gICAgYXdhaXQgcmVzb3VyY2VfZGVmYXVsdC5wb3N0KFxuICAgICAgdGhpcy5jbGllbnQsXG4gICAgICB0aGlzLmNsaWVudC5yZXN0LmNoYW5uZWxNaXhpbi5iYXNlUGF0aCh0aGlzKSArIFwiL21lc3NhZ2VzXCIsXG4gICAgICByZXF1ZXN0Qm9keSxcbiAgICAgIGhlYWRlcnMsXG4gICAgICBwYXJhbXMsXG4gICAgICBudWxsLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gIH1cbiAgYXN5bmMgc3RhdHVzKCkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5yZXN0LmNoYW5uZWxNaXhpbi5zdGF0dXModGhpcyk7XG4gIH1cbn07XG52YXIgcmVzdGNoYW5uZWxfZGVmYXVsdCA9IFJlc3RDaGFubmVsO1xuXG4vLyBzcmMvY29tbW9uL2xpYi90eXBlcy9zdGF0cy50c1xudmFyIFN0YXRzID0gY2xhc3MgX1N0YXRzIHtcbiAgY29uc3RydWN0b3IodmFsdWVzKSB7XG4gICAgdGhpcy5lbnRyaWVzID0gdmFsdWVzICYmIHZhbHVlcy5lbnRyaWVzIHx8IHZvaWQgMDtcbiAgICB0aGlzLnNjaGVtYSA9IHZhbHVlcyAmJiB2YWx1ZXMuc2NoZW1hIHx8IHZvaWQgMDtcbiAgICB0aGlzLmFwcElkID0gdmFsdWVzICYmIHZhbHVlcy5hcHBJZCB8fCB2b2lkIDA7XG4gICAgdGhpcy5pblByb2dyZXNzID0gdmFsdWVzICYmIHZhbHVlcy5pblByb2dyZXNzIHx8IHZvaWQgMDtcbiAgICB0aGlzLnVuaXQgPSB2YWx1ZXMgJiYgdmFsdWVzLnVuaXQgfHwgdm9pZCAwO1xuICAgIHRoaXMuaW50ZXJ2YWxJZCA9IHZhbHVlcyAmJiB2YWx1ZXMuaW50ZXJ2YWxJZCB8fCB2b2lkIDA7XG4gIH1cbiAgc3RhdGljIGZyb21WYWx1ZXModmFsdWVzKSB7XG4gICAgcmV0dXJuIG5ldyBfU3RhdHModmFsdWVzKTtcbiAgfVxufTtcbnZhciBzdGF0c19kZWZhdWx0ID0gU3RhdHM7XG5cbi8vIHNyYy9jb21tb24vbGliL2NsaWVudC9yZXN0Y2hhbm5lbG1peGluLnRzXG52YXIgUmVzdENoYW5uZWxNaXhpbiA9IGNsYXNzIHtcbiAgc3RhdGljIGJhc2VQYXRoKGNoYW5uZWwpIHtcbiAgICByZXR1cm4gXCIvY2hhbm5lbHMvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoY2hhbm5lbC5uYW1lKTtcbiAgfVxuICBzdGF0aWMgaGlzdG9yeShjaGFubmVsLCBwYXJhbXMpIHtcbiAgICBjb25zdCBjbGllbnQgPSBjaGFubmVsLmNsaWVudCwgZm9ybWF0ID0gY2xpZW50Lm9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBcIm1zZ3BhY2tcIiAvKiBtc2dwYWNrICovIDogXCJqc29uXCIgLyoganNvbiAqLywgZW52ZWxvcGUgPSBjaGFubmVsLmNsaWVudC5odHRwLnN1cHBvcnRzTGlua0hlYWRlcnMgPyB2b2lkIDAgOiBmb3JtYXQsIGhlYWRlcnMgPSBkZWZhdWx0c19kZWZhdWx0LmRlZmF1bHRHZXRIZWFkZXJzKGNsaWVudC5vcHRpb25zLCB7IGZvcm1hdCB9KTtcbiAgICBtaXhpbihoZWFkZXJzLCBjbGllbnQub3B0aW9ucy5oZWFkZXJzKTtcbiAgICByZXR1cm4gbmV3IHBhZ2luYXRlZHJlc291cmNlX2RlZmF1bHQoY2xpZW50LCB0aGlzLmJhc2VQYXRoKGNoYW5uZWwpICsgXCIvbWVzc2FnZXNcIiwgaGVhZGVycywgZW52ZWxvcGUsIGFzeW5jIGZ1bmN0aW9uKGJvZHksIGhlYWRlcnMyLCB1bnBhY2tlZCkge1xuICAgICAgY29uc3QgZGVjb2RlZCA9IHVucGFja2VkID8gYm9keSA6IGRlY29kZUJvZHkoYm9keSwgY2xpZW50Ll9Nc2dQYWNrLCBmb3JtYXQpO1xuICAgICAgcmV0dXJuIF9mcm9tRW5jb2RlZEFycmF5KGRlY29kZWQsIGNoYW5uZWwpO1xuICAgIH0pLmdldChwYXJhbXMpO1xuICB9XG4gIHN0YXRpYyBhc3luYyBzdGF0dXMoY2hhbm5lbCkge1xuICAgIGNvbnN0IGZvcm1hdCA9IGNoYW5uZWwuY2xpZW50Lm9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBcIm1zZ3BhY2tcIiAvKiBtc2dwYWNrICovIDogXCJqc29uXCIgLyoganNvbiAqLztcbiAgICBjb25zdCBoZWFkZXJzID0gZGVmYXVsdHNfZGVmYXVsdC5kZWZhdWx0UG9zdEhlYWRlcnMoY2hhbm5lbC5jbGllbnQub3B0aW9ucywgeyBmb3JtYXQgfSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXNvdXJjZV9kZWZhdWx0LmdldChcbiAgICAgIGNoYW5uZWwuY2xpZW50LFxuICAgICAgdGhpcy5iYXNlUGF0aChjaGFubmVsKSxcbiAgICAgIGhlYWRlcnMsXG4gICAgICB7fSxcbiAgICAgIGZvcm1hdCxcbiAgICAgIHRydWVcbiAgICApO1xuICAgIHJldHVybiByZXNwb25zZS5ib2R5O1xuICB9XG59O1xuXG4vLyBzcmMvY29tbW9uL2xpYi9jbGllbnQvcmVzdHByZXNlbmNlbWl4aW4udHNcbnZhciBSZXN0UHJlc2VuY2VNaXhpbiA9IGNsYXNzIHtcbiAgc3RhdGljIGJhc2VQYXRoKHByZXNlbmNlKSB7XG4gICAgcmV0dXJuIFJlc3RDaGFubmVsTWl4aW4uYmFzZVBhdGgocHJlc2VuY2UuY2hhbm5lbCkgKyBcIi9wcmVzZW5jZVwiO1xuICB9XG4gIHN0YXRpYyBhc3luYyBoaXN0b3J5KHByZXNlbmNlLCBwYXJhbXMpIHtcbiAgICBjb25zdCBjbGllbnQgPSBwcmVzZW5jZS5jaGFubmVsLmNsaWVudCwgZm9ybWF0ID0gY2xpZW50Lm9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBcIm1zZ3BhY2tcIiAvKiBtc2dwYWNrICovIDogXCJqc29uXCIgLyoganNvbiAqLywgZW52ZWxvcGUgPSBwcmVzZW5jZS5jaGFubmVsLmNsaWVudC5odHRwLnN1cHBvcnRzTGlua0hlYWRlcnMgPyB2b2lkIDAgOiBmb3JtYXQsIGhlYWRlcnMgPSBkZWZhdWx0c19kZWZhdWx0LmRlZmF1bHRHZXRIZWFkZXJzKGNsaWVudC5vcHRpb25zLCB7IGZvcm1hdCB9KTtcbiAgICBtaXhpbihoZWFkZXJzLCBjbGllbnQub3B0aW9ucy5oZWFkZXJzKTtcbiAgICByZXR1cm4gbmV3IHBhZ2luYXRlZHJlc291cmNlX2RlZmF1bHQoXG4gICAgICBjbGllbnQsXG4gICAgICB0aGlzLmJhc2VQYXRoKHByZXNlbmNlKSArIFwiL2hpc3RvcnlcIixcbiAgICAgIGhlYWRlcnMsXG4gICAgICBlbnZlbG9wZSxcbiAgICAgIGFzeW5jIChib2R5LCBoZWFkZXJzMiwgdW5wYWNrZWQpID0+IHtcbiAgICAgICAgY29uc3QgZGVjb2RlZCA9IHVucGFja2VkID8gYm9keSA6IGRlY29kZUJvZHkoYm9keSwgY2xpZW50Ll9Nc2dQYWNrLCBmb3JtYXQpO1xuICAgICAgICByZXR1cm4gX2Zyb21FbmNvZGVkQXJyYXkyKGRlY29kZWQsIHByZXNlbmNlLmNoYW5uZWwpO1xuICAgICAgfVxuICAgICkuZ2V0KHBhcmFtcyk7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tb24vbGliL2NsaWVudC9yZXN0LnRzXG52YXIgUmVzdCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jaGFubmVsTWl4aW4gPSBSZXN0Q2hhbm5lbE1peGluO1xuICAgIHRoaXMucHJlc2VuY2VNaXhpbiA9IFJlc3RQcmVzZW5jZU1peGluO1xuICAgIC8vIGV4cG9zZWQgZm9yIHBsdWdpbnMgYnV0IHNob3VsZG4ndCBiZSBidW5kbGVkIHdpdGggbWluaW1hbCByZWFsdGltZVxuICAgIHRoaXMuUmVzb3VyY2UgPSByZXNvdXJjZV9kZWZhdWx0O1xuICAgIHRoaXMuRGV2aWNlRGV0YWlscyA9IGRldmljZWRldGFpbHNfZGVmYXVsdDtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB0aGlzLmNoYW5uZWxzID0gbmV3IENoYW5uZWxzKHRoaXMuY2xpZW50KTtcbiAgICB0aGlzLnB1c2ggPSBuZXcgcHVzaF9kZWZhdWx0KHRoaXMuY2xpZW50KTtcbiAgfVxuICBhc3luYyBzdGF0cyhwYXJhbXMpIHtcbiAgICBjb25zdCBoZWFkZXJzID0gZGVmYXVsdHNfZGVmYXVsdC5kZWZhdWx0R2V0SGVhZGVycyh0aGlzLmNsaWVudC5vcHRpb25zKSwgZm9ybWF0ID0gdGhpcy5jbGllbnQub3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCA/IFwibXNncGFja1wiIC8qIG1zZ3BhY2sgKi8gOiBcImpzb25cIiAvKiBqc29uICovLCBlbnZlbG9wZSA9IHRoaXMuY2xpZW50Lmh0dHAuc3VwcG9ydHNMaW5rSGVhZGVycyA/IHZvaWQgMCA6IGZvcm1hdDtcbiAgICBtaXhpbihoZWFkZXJzLCB0aGlzLmNsaWVudC5vcHRpb25zLmhlYWRlcnMpO1xuICAgIHJldHVybiBuZXcgcGFnaW5hdGVkcmVzb3VyY2VfZGVmYXVsdCh0aGlzLmNsaWVudCwgXCIvc3RhdHNcIiwgaGVhZGVycywgZW52ZWxvcGUsIGZ1bmN0aW9uKGJvZHksIGhlYWRlcnMyLCB1bnBhY2tlZCkge1xuICAgICAgY29uc3Qgc3RhdHNWYWx1ZXMgPSB1bnBhY2tlZCA/IGJvZHkgOiBKU09OLnBhcnNlKGJvZHkpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGF0c1ZhbHVlcy5sZW5ndGg7IGkrKylcbiAgICAgICAgc3RhdHNWYWx1ZXNbaV0gPSBzdGF0c19kZWZhdWx0LmZyb21WYWx1ZXMoc3RhdHNWYWx1ZXNbaV0pO1xuICAgICAgcmV0dXJuIHN0YXRzVmFsdWVzO1xuICAgIH0pLmdldChwYXJhbXMpO1xuICB9XG4gIGFzeW5jIHRpbWUocGFyYW1zKSB7XG4gICAgY29uc3QgaGVhZGVycyA9IGRlZmF1bHRzX2RlZmF1bHQuZGVmYXVsdEdldEhlYWRlcnModGhpcy5jbGllbnQub3B0aW9ucyk7XG4gICAgaWYgKHRoaXMuY2xpZW50Lm9wdGlvbnMuaGVhZGVycylcbiAgICAgIG1peGluKGhlYWRlcnMsIHRoaXMuY2xpZW50Lm9wdGlvbnMuaGVhZGVycyk7XG4gICAgY29uc3QgdGltZVVyaSA9IChob3N0KSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5jbGllbnQuYmFzZVVyaShob3N0KSArIFwiL3RpbWVcIjtcbiAgICB9O1xuICAgIGxldCB7IGVycm9yLCBib2R5LCB1bnBhY2tlZCB9ID0gYXdhaXQgdGhpcy5jbGllbnQuaHR0cC5kbyhcbiAgICAgIEh0dHBNZXRob2RzX2RlZmF1bHQuR2V0LFxuICAgICAgdGltZVVyaSxcbiAgICAgIGhlYWRlcnMsXG4gICAgICBudWxsLFxuICAgICAgcGFyYW1zXG4gICAgKTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICBpZiAoIXVucGFja2VkKVxuICAgICAgYm9keSA9IEpTT04ucGFyc2UoYm9keSk7XG4gICAgY29uc3QgdGltZSA9IGJvZHlbMF07XG4gICAgaWYgKCF0aW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFwiSW50ZXJuYWwgZXJyb3IgKHVuZXhwZWN0ZWQgcmVzdWx0IHR5cGUgZnJvbSBHRVQgL3RpbWUpXCIsIDVlNCwgNTAwKTtcbiAgICB9XG4gICAgdGhpcy5jbGllbnQuc2VydmVyVGltZU9mZnNldCA9IHRpbWUgLSBEYXRlLm5vdygpO1xuICAgIHJldHVybiB0aW1lO1xuICB9XG4gIGFzeW5jIHJlcXVlc3QobWV0aG9kLCBwYXRoLCB2ZXJzaW9uMiwgcGFyYW1zLCBib2R5LCBjdXN0b21IZWFkZXJzKSB7XG4gICAgdmFyIF9hMjtcbiAgICBjb25zdCBbZW5jb2RlciwgZGVjb2RlciwgZm9ybWF0XSA9ICgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5jbGllbnQub3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xpZW50Ll9Nc2dQYWNrKSB7XG4gICAgICAgICAgdGhyb3dNaXNzaW5nUGx1Z2luRXJyb3IoXCJNc2dQYWNrXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdGhpcy5jbGllbnQuX01zZ1BhY2suZW5jb2RlLCB0aGlzLmNsaWVudC5fTXNnUGFjay5kZWNvZGUsIFwibXNncGFja1wiIC8qIG1zZ3BhY2sgKi9dO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFtKU09OLnN0cmluZ2lmeSwgSlNPTi5wYXJzZSwgXCJqc29uXCIgLyoganNvbiAqL107XG4gICAgICB9XG4gICAgfSkoKTtcbiAgICBjb25zdCBlbnZlbG9wZSA9IHRoaXMuY2xpZW50Lmh0dHAuc3VwcG9ydHNMaW5rSGVhZGVycyA/IHZvaWQgMCA6IGZvcm1hdDtcbiAgICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG4gICAgY29uc3QgX21ldGhvZCA9IG1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSBfbWV0aG9kID09IFwiZ2V0XCIgPyBkZWZhdWx0c19kZWZhdWx0LmRlZmF1bHRHZXRIZWFkZXJzKHRoaXMuY2xpZW50Lm9wdGlvbnMsIHsgZm9ybWF0LCBwcm90b2NvbFZlcnNpb246IHZlcnNpb24yIH0pIDogZGVmYXVsdHNfZGVmYXVsdC5kZWZhdWx0UG9zdEhlYWRlcnModGhpcy5jbGllbnQub3B0aW9ucywgeyBmb3JtYXQsIHByb3RvY29sVmVyc2lvbjogdmVyc2lvbjIgfSk7XG4gICAgaWYgKHR5cGVvZiBib2R5ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICBib2R5ID0gKF9hMiA9IGVuY29kZXIoYm9keSkpICE9IG51bGwgPyBfYTIgOiBudWxsO1xuICAgIH1cbiAgICBtaXhpbihoZWFkZXJzLCB0aGlzLmNsaWVudC5vcHRpb25zLmhlYWRlcnMpO1xuICAgIGlmIChjdXN0b21IZWFkZXJzKSB7XG4gICAgICBtaXhpbihoZWFkZXJzLCBjdXN0b21IZWFkZXJzKTtcbiAgICB9XG4gICAgY29uc3QgcGFnaW5hdGVkUmVzb3VyY2UgPSBuZXcgcGFnaW5hdGVkcmVzb3VyY2VfZGVmYXVsdChcbiAgICAgIHRoaXMuY2xpZW50LFxuICAgICAgcGF0aCxcbiAgICAgIGhlYWRlcnMsXG4gICAgICBlbnZlbG9wZSxcbiAgICAgIGFzeW5jIGZ1bmN0aW9uKHJlc2JvZHksIGhlYWRlcnMyLCB1bnBhY2tlZCkge1xuICAgICAgICByZXR1cm4gZW5zdXJlQXJyYXkodW5wYWNrZWQgPyByZXNib2R5IDogZGVjb2RlcihyZXNib2R5KSk7XG4gICAgICB9LFxuICAgICAgLyogdXNlSHR0cFBhZ2luYXRlZFJlc3BvbnNlOiAqL1xuICAgICAgdHJ1ZVxuICAgICk7XG4gICAgaWYgKCFQbGF0Zm9ybS5IdHRwLm1ldGhvZHMuaW5jbHVkZXMoX21ldGhvZCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvckluZm8oXCJVbnN1cHBvcnRlZCBtZXRob2QgXCIgKyBfbWV0aG9kLCA0MDUwMCwgNDA1KTtcbiAgICB9XG4gICAgaWYgKFBsYXRmb3JtLkh0dHAubWV0aG9kc1dpdGhCb2R5LmluY2x1ZGVzKF9tZXRob2QpKSB7XG4gICAgICByZXR1cm4gcGFnaW5hdGVkUmVzb3VyY2VbX21ldGhvZF0ocGFyYW1zLCBib2R5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhZ2luYXRlZFJlc291cmNlW19tZXRob2RdKHBhcmFtcyk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGJhdGNoUHVibGlzaChzcGVjT3JTcGVjcykge1xuICAgIGxldCByZXF1ZXN0Qm9keURUTztcbiAgICBsZXQgc2luZ2xlU3BlY01vZGU7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3BlY09yU3BlY3MpKSB7XG4gICAgICByZXF1ZXN0Qm9keURUTyA9IHNwZWNPclNwZWNzO1xuICAgICAgc2luZ2xlU3BlY01vZGUgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVxdWVzdEJvZHlEVE8gPSBbc3BlY09yU3BlY3NdO1xuICAgICAgc2luZ2xlU3BlY01vZGUgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBmb3JtYXQgPSB0aGlzLmNsaWVudC5vcHRpb25zLnVzZUJpbmFyeVByb3RvY29sID8gXCJtc2dwYWNrXCIgLyogbXNncGFjayAqLyA6IFwianNvblwiIC8qIGpzb24gKi8sIGhlYWRlcnMgPSBkZWZhdWx0c19kZWZhdWx0LmRlZmF1bHRQb3N0SGVhZGVycyh0aGlzLmNsaWVudC5vcHRpb25zLCB7IGZvcm1hdCB9KTtcbiAgICBpZiAodGhpcy5jbGllbnQub3B0aW9ucy5oZWFkZXJzKVxuICAgICAgbWl4aW4oaGVhZGVycywgdGhpcy5jbGllbnQub3B0aW9ucy5oZWFkZXJzKTtcbiAgICBjb25zdCByZXF1ZXN0Qm9keSA9IGVuY29kZUJvZHkocmVxdWVzdEJvZHlEVE8sIHRoaXMuY2xpZW50Ll9Nc2dQYWNrLCBmb3JtYXQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVzb3VyY2VfZGVmYXVsdC5wb3N0KHRoaXMuY2xpZW50LCBcIi9tZXNzYWdlc1wiLCByZXF1ZXN0Qm9keSwgaGVhZGVycywge30sIG51bGwsIHRydWUpO1xuICAgIGNvbnN0IGJhdGNoUmVzdWx0cyA9IHJlc3BvbnNlLnVucGFja2VkID8gcmVzcG9uc2UuYm9keSA6IGRlY29kZUJvZHkocmVzcG9uc2UuYm9keSwgdGhpcy5jbGllbnQuX01zZ1BhY2ssIGZvcm1hdCk7XG4gICAgaWYgKHNpbmdsZVNwZWNNb2RlKSB7XG4gICAgICByZXR1cm4gYmF0Y2hSZXN1bHRzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYmF0Y2hSZXN1bHRzO1xuICAgIH1cbiAgfVxuICBhc3luYyBiYXRjaFByZXNlbmNlKGNoYW5uZWxzKSB7XG4gICAgY29uc3QgZm9ybWF0ID0gdGhpcy5jbGllbnQub3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCA/IFwibXNncGFja1wiIC8qIG1zZ3BhY2sgKi8gOiBcImpzb25cIiAvKiBqc29uICovLCBoZWFkZXJzID0gZGVmYXVsdHNfZGVmYXVsdC5kZWZhdWx0UG9zdEhlYWRlcnModGhpcy5jbGllbnQub3B0aW9ucywgeyBmb3JtYXQgfSk7XG4gICAgaWYgKHRoaXMuY2xpZW50Lm9wdGlvbnMuaGVhZGVycylcbiAgICAgIG1peGluKGhlYWRlcnMsIHRoaXMuY2xpZW50Lm9wdGlvbnMuaGVhZGVycyk7XG4gICAgY29uc3QgY2hhbm5lbHNQYXJhbSA9IGNoYW5uZWxzLmpvaW4oXCIsXCIpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVzb3VyY2VfZGVmYXVsdC5nZXQodGhpcy5jbGllbnQsIFwiL3ByZXNlbmNlXCIsIGhlYWRlcnMsIHsgY2hhbm5lbHM6IGNoYW5uZWxzUGFyYW0gfSwgbnVsbCwgdHJ1ZSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLnVucGFja2VkID8gcmVzcG9uc2UuYm9keSA6IGRlY29kZUJvZHkocmVzcG9uc2UuYm9keSwgdGhpcy5jbGllbnQuX01zZ1BhY2ssIGZvcm1hdCk7XG4gIH1cbiAgYXN5bmMgcmV2b2tlVG9rZW5zKHNwZWNpZmllcnMsIG9wdGlvbnMpIHtcbiAgICBpZiAodXNlVG9rZW5BdXRoKHRoaXMuY2xpZW50Lm9wdGlvbnMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFwiQ2Fubm90IHJldm9rZSB0b2tlbnMgd2hlbiB1c2luZyB0b2tlbiBhdXRoXCIsIDQwMTYyLCA0MDEpO1xuICAgIH1cbiAgICBjb25zdCBrZXlOYW1lID0gdGhpcy5jbGllbnQub3B0aW9ucy5rZXlOYW1lO1xuICAgIGxldCByZXNvbHZlZE9wdGlvbnMgPSBvcHRpb25zICE9IG51bGwgPyBvcHRpb25zIDoge307XG4gICAgY29uc3QgcmVxdWVzdEJvZHlEVE8gPSBfX3NwcmVhZFZhbHVlcyh7XG4gICAgICB0YXJnZXRzOiBzcGVjaWZpZXJzLm1hcCgoc3BlY2lmaWVyKSA9PiBgJHtzcGVjaWZpZXIudHlwZX06JHtzcGVjaWZpZXIudmFsdWV9YClcbiAgICB9LCByZXNvbHZlZE9wdGlvbnMpO1xuICAgIGNvbnN0IGZvcm1hdCA9IHRoaXMuY2xpZW50Lm9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBcIm1zZ3BhY2tcIiAvKiBtc2dwYWNrICovIDogXCJqc29uXCIgLyoganNvbiAqLywgaGVhZGVycyA9IGRlZmF1bHRzX2RlZmF1bHQuZGVmYXVsdFBvc3RIZWFkZXJzKHRoaXMuY2xpZW50Lm9wdGlvbnMsIHsgZm9ybWF0IH0pO1xuICAgIGlmICh0aGlzLmNsaWVudC5vcHRpb25zLmhlYWRlcnMpXG4gICAgICBtaXhpbihoZWFkZXJzLCB0aGlzLmNsaWVudC5vcHRpb25zLmhlYWRlcnMpO1xuICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0gZW5jb2RlQm9keShyZXF1ZXN0Qm9keURUTywgdGhpcy5jbGllbnQuX01zZ1BhY2ssIGZvcm1hdCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXNvdXJjZV9kZWZhdWx0LnBvc3QoXG4gICAgICB0aGlzLmNsaWVudCxcbiAgICAgIGAva2V5cy8ke2tleU5hbWV9L3Jldm9rZVRva2Vuc2AsXG4gICAgICByZXF1ZXN0Qm9keSxcbiAgICAgIGhlYWRlcnMsXG4gICAgICB7fSxcbiAgICAgIG51bGwsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgICByZXR1cm4gcmVzcG9uc2UudW5wYWNrZWQgPyByZXNwb25zZS5ib2R5IDogZGVjb2RlQm9keShyZXNwb25zZS5ib2R5LCB0aGlzLmNsaWVudC5fTXNnUGFjaywgZm9ybWF0KTtcbiAgfVxufTtcbnZhciBDaGFubmVscyA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy5hbGwgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuICBnZXQobmFtZSwgY2hhbm5lbE9wdGlvbnMpIHtcbiAgICBuYW1lID0gU3RyaW5nKG5hbWUpO1xuICAgIGxldCBjaGFubmVsID0gdGhpcy5hbGxbbmFtZV07XG4gICAgaWYgKCFjaGFubmVsKSB7XG4gICAgICB0aGlzLmFsbFtuYW1lXSA9IGNoYW5uZWwgPSBuZXcgcmVzdGNoYW5uZWxfZGVmYXVsdCh0aGlzLmNsaWVudCwgbmFtZSwgY2hhbm5lbE9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAoY2hhbm5lbE9wdGlvbnMpIHtcbiAgICAgIGNoYW5uZWwuc2V0T3B0aW9ucyhjaGFubmVsT3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiBjaGFubmVsO1xuICB9XG4gIC8qIEluY2x1ZGVkIHRvIHN1cHBvcnQgY2VydGFpbiBuaWNoZSB1c2UtY2FzZXM7IG1vc3QgdXNlcnMgc2hvdWxkIGlnbm9yZSB0aGlzLlxuICAgKiBQbGVhc2UgZG8gbm90IHVzZSB0aGlzIHVubGVzcyB5b3Uga25vdyB3aGF0IHlvdSdyZSBkb2luZyAqL1xuICByZWxlYXNlKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5hbGxbU3RyaW5nKG5hbWUpXTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1vbi9saWIvY2xpZW50L2Jhc2VyZXN0LnRzXG52YXIgQmFzZVJlc3QgPSBjbGFzcyBleHRlbmRzIGJhc2VjbGllbnRfZGVmYXVsdCB7XG4gIC8qXG4gICAqIFRoZSBwdWJsaWMgdHlwaW5ncyBkZWNsYXJlIHRoYXQgdGhpcyBvbmx5IGFjY2VwdHMgYW4gb2JqZWN0LCBidXQgc2luY2Ugd2Ugd2FudCB0byBlbWl0IGEgZ29vZCBlcnJvciBtZXNzYWdlIGluIHRoZSBjYXNlIHdoZXJlIGEgbm9uLVR5cGVTY3JpcHQgdXNlciBkb2VzIG9uZSBvZiB0aGVzZSB0aGluZ3M6XG4gICAqXG4gICAqIDEuIHBhc3NlcyBhIHN0cmluZyAod2hpY2ggaXMgcXVpdGUgbGlrZWx5IGlmIHRoZXnigJlyZSBlLmcuIG1pZ3JhdGluZyBmcm9tIHRoZSBkZWZhdWx0IHZhcmlhbnQgdG8gdGhlIG1vZHVsYXIgdmFyaWFudClcbiAgICogMi4gcGFzc2VzIG5vIGFyZ3VtZW50IGF0IGFsbFxuICAgKlxuICAgKiB0ZWxsIHRoZSBjb21waWxlciB0aGF0IHRoZXNlIGNhc2VzIGFyZSBwb3NzaWJsZSBzbyB0aGF0IGl0IGZvcmNlcyB1cyB0byBoYW5kbGUgdGhlbS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcihkZWZhdWx0c19kZWZhdWx0Lm9iamVjdGlmeU9wdGlvbnMob3B0aW9ucywgZmFsc2UsIFwiQmFzZVJlc3RcIiwgbG9nZ2VyX2RlZmF1bHQuZGVmYXVsdExvZ2dlciwgeyBSZXN0IH0pKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1vbi9saWIvY2xpZW50L21vZHVsYXJwbHVnaW5zLnRzXG52YXIgYWxsQ29tbW9uTW9kdWxhclBsdWdpbnMgPSB7IFJlc3QgfTtcblxuLy8gc3JjL2NvbW1vbi9saWIvdHlwZXMvZGVmYXVsdG1lc3NhZ2UudHNcbnZhciBEZWZhdWx0TWVzc2FnZSA9IGNsYXNzIGV4dGVuZHMgbWVzc2FnZV9kZWZhdWx0IHtcbiAgc3RhdGljIGFzeW5jIGZyb21FbmNvZGVkKGVuY29kZWQsIGlucHV0T3B0aW9ucykge1xuICAgIHJldHVybiBmcm9tRW5jb2RlZChsb2dnZXJfZGVmYXVsdC5kZWZhdWx0TG9nZ2VyLCBQbGF0Zm9ybS5DcnlwdG8sIGVuY29kZWQsIGlucHV0T3B0aW9ucyk7XG4gIH1cbiAgc3RhdGljIGFzeW5jIGZyb21FbmNvZGVkQXJyYXkoZW5jb2RlZEFycmF5LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGZyb21FbmNvZGVkQXJyYXkobG9nZ2VyX2RlZmF1bHQuZGVmYXVsdExvZ2dlciwgUGxhdGZvcm0uQ3J5cHRvLCBlbmNvZGVkQXJyYXksIG9wdGlvbnMpO1xuICB9XG4gIC8vIFVzZWQgYnkgdGVzdHNcbiAgc3RhdGljIGZyb21WYWx1ZXModmFsdWVzKSB7XG4gICAgcmV0dXJuIGZyb21WYWx1ZXModmFsdWVzKTtcbiAgfVxuICAvLyBVc2VkIGJ5IHRlc3RzXG4gIHN0YXRpYyBmcm9tV2lyZVByb3RvY29sKHZhbHVlcykge1xuICAgIHJldHVybiBmcm9tV2lyZVByb3RvY29sKHZhbHVlcyk7XG4gIH1cbiAgLy8gVXNlZCBieSB0ZXN0c1xuICBzdGF0aWMgYXN5bmMgZW5jb2RlKG1zZywgb3B0aW9ucykge1xuICAgIHJldHVybiBlbmNvZGUobXNnLCBvcHRpb25zKTtcbiAgfVxuICAvLyBVc2VkIGJ5IHRlc3RzXG4gIHN0YXRpYyBhc3luYyBkZWNvZGUobWVzc2FnZSwgaW5wdXRDb250ZXh0KSB7XG4gICAgcmV0dXJuIGRlY29kZShtZXNzYWdlLCBpbnB1dENvbnRleHQpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbW9uL2xpYi90eXBlcy9kZWZhdWx0cHJlc2VuY2VtZXNzYWdlLnRzXG52YXIgRGVmYXVsdFByZXNlbmNlTWVzc2FnZSA9IGNsYXNzIGV4dGVuZHMgcHJlc2VuY2VtZXNzYWdlX2RlZmF1bHQge1xuICBzdGF0aWMgYXN5bmMgZnJvbUVuY29kZWQoZW5jb2RlZCwgaW5wdXRPcHRpb25zKSB7XG4gICAgcmV0dXJuIGZyb21FbmNvZGVkMihsb2dnZXJfZGVmYXVsdC5kZWZhdWx0TG9nZ2VyLCBQbGF0Zm9ybS5DcnlwdG8sIGVuY29kZWQsIGlucHV0T3B0aW9ucyk7XG4gIH1cbiAgc3RhdGljIGFzeW5jIGZyb21FbmNvZGVkQXJyYXkoZW5jb2RlZEFycmF5LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGZyb21FbmNvZGVkQXJyYXkyKFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuZGVmYXVsdExvZ2dlcixcbiAgICAgIFBsYXRmb3JtLkNyeXB0byxcbiAgICAgIGVuY29kZWRBcnJheSxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHN0YXRpYyBmcm9tVmFsdWVzKHZhbHVlcykge1xuICAgIHJldHVybiBmcm9tVmFsdWVzMih2YWx1ZXMpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbW9uL2xpYi9jbGllbnQvZGVmYXVsdHJlc3QudHNcbnZhciBfRGVmYXVsdFJlc3QgPSBjbGFzcyBfRGVmYXVsdFJlc3QgZXh0ZW5kcyBCYXNlUmVzdCB7XG4gIC8vIFRoZSBwdWJsaWMgdHlwaW5ncyBkZWNsYXJlIHRoYXQgdGhpcyByZXF1aXJlcyBhbiBhcmd1bWVudCB0byBiZSBwYXNzZWQsIGJ1dCBzaW5jZSB3ZSB3YW50IHRvIGVtaXQgYSBnb29kIGVycm9yIG1lc3NhZ2UgaW4gdGhlIGNhc2Ugd2hlcmUgYSBub24tVHlwZVNjcmlwdCB1c2VyIGRvZXMgbm90IHBhc3MgYW4gYXJndW1lbnQsIHRlbGwgdGhlIGNvbXBpbGVyIHRoYXQgdGhpcyBpcyBwb3NzaWJsZSBzbyB0aGF0IGl0IGZvcmNlcyB1cyB0byBoYW5kbGUgaXQuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB2YXIgX2EyLCBfYjtcbiAgICBjb25zdCBNc2dQYWNrID0gX0RlZmF1bHRSZXN0Ll9Nc2dQYWNrO1xuICAgIGlmICghTXNnUGFjaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgRGVmYXVsdFJlc3QuX01zZ1BhY2sgdG8gaGF2ZSBiZWVuIHNldFwiKTtcbiAgICB9XG4gICAgc3VwZXIoXG4gICAgICBkZWZhdWx0c19kZWZhdWx0Lm9iamVjdGlmeU9wdGlvbnMob3B0aW9ucywgdHJ1ZSwgXCJSZXN0XCIsIGxvZ2dlcl9kZWZhdWx0LmRlZmF1bHRMb2dnZXIsIF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIGFsbENvbW1vbk1vZHVsYXJQbHVnaW5zKSwge1xuICAgICAgICBDcnlwdG86IChfYTIgPSBfRGVmYXVsdFJlc3QuQ3J5cHRvKSAhPSBudWxsID8gX2EyIDogdm9pZCAwLFxuICAgICAgICBNc2dQYWNrOiAoX2IgPSBfRGVmYXVsdFJlc3QuX01zZ1BhY2spICE9IG51bGwgPyBfYiA6IHZvaWQgMFxuICAgICAgfSkpXG4gICAgKTtcbiAgfVxuICBzdGF0aWMgZ2V0IENyeXB0bygpIHtcbiAgICBpZiAodGhpcy5fQ3J5cHRvID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbmNyeXB0aW9uIG5vdCBlbmFibGVkOyB1c2UgYWJseS5lbmNyeXB0aW9uLmpzIGluc3RlYWRcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9DcnlwdG87XG4gIH1cbiAgc3RhdGljIHNldCBDcnlwdG8obmV3VmFsdWUpIHtcbiAgICB0aGlzLl9DcnlwdG8gPSBuZXdWYWx1ZTtcbiAgfVxufTtcbl9EZWZhdWx0UmVzdC5fQ3J5cHRvID0gbnVsbDtcbl9EZWZhdWx0UmVzdC5NZXNzYWdlID0gRGVmYXVsdE1lc3NhZ2U7XG5fRGVmYXVsdFJlc3QuUHJlc2VuY2VNZXNzYWdlID0gRGVmYXVsdFByZXNlbmNlTWVzc2FnZTtcbl9EZWZhdWx0UmVzdC5fTXNnUGFjayA9IG51bGw7XG4vLyBVc2VkIGJ5IHRlc3RzXG5fRGVmYXVsdFJlc3QuX0h0dHAgPSBIdHRwO1xudmFyIERlZmF1bHRSZXN0ID0gX0RlZmF1bHRSZXN0O1xuXG4vLyBzcmMvY29tbW9uL2xpYi91dGlsL2V2ZW50ZW1pdHRlci50c1xuZnVuY3Rpb24gY2FsbExpc3RlbmVyKGxvZ2dlciwgZXZlbnRUaGlzLCBsaXN0ZW5lciwgYXJncykge1xuICB0cnkge1xuICAgIGxpc3RlbmVyLmFwcGx5KGV2ZW50VGhpcywgYXJncyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICBsb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICBcIkV2ZW50RW1pdHRlci5lbWl0KClcIixcbiAgICAgIFwiVW5leHBlY3RlZCBsaXN0ZW5lciBleGNlcHRpb246IFwiICsgZSArIFwiOyBzdGFjayA9IFwiICsgKGUgJiYgZS5zdGFjaylcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0YXJnZXRMaXN0ZW5lcnMsIGxpc3RlbmVyLCBldmVudEZpbHRlcikge1xuICBsZXQgbGlzdGVuZXJzO1xuICBsZXQgaW5kZXg7XG4gIGxldCBldmVudE5hbWU7XG4gIGZvciAobGV0IHRhcmdldExpc3RlbmVyc0luZGV4ID0gMDsgdGFyZ2V0TGlzdGVuZXJzSW5kZXggPCB0YXJnZXRMaXN0ZW5lcnMubGVuZ3RoOyB0YXJnZXRMaXN0ZW5lcnNJbmRleCsrKSB7XG4gICAgbGlzdGVuZXJzID0gdGFyZ2V0TGlzdGVuZXJzW3RhcmdldExpc3RlbmVyc0luZGV4XTtcbiAgICBpZiAoZXZlbnRGaWx0ZXIpIHtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVyc1tldmVudEZpbHRlcl07XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGxpc3RlbmVycykpIHtcbiAgICAgIHdoaWxlICgoaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcikpICE9PSAtMSkge1xuICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChldmVudEZpbHRlciAmJiBsaXN0ZW5lcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGRlbGV0ZSB0YXJnZXRMaXN0ZW5lcnNbdGFyZ2V0TGlzdGVuZXJzSW5kZXhdW2V2ZW50RmlsdGVyXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGxpc3RlbmVycykpIHtcbiAgICAgIGZvciAoZXZlbnROYW1lIGluIGxpc3RlbmVycykge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGxpc3RlbmVycywgZXZlbnROYW1lKSAmJiBBcnJheS5pc0FycmF5KGxpc3RlbmVyc1tldmVudE5hbWVdKSkge1xuICAgICAgICAgIHJlbW92ZUxpc3RlbmVyKFtsaXN0ZW5lcnNdLCBsaXN0ZW5lciwgZXZlbnROYW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxudmFyIEV2ZW50RW1pdHRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IobG9nZ2VyKSB7XG4gICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gICAgdGhpcy5hbnkgPSBbXTtcbiAgICB0aGlzLmV2ZW50cyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuYW55T25jZSA9IFtdO1xuICAgIHRoaXMuZXZlbnRzT25jZSA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG4gIG9uKC4uLmFyZ3MpIHtcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IGxpc3RlbmVyID0gYXJnc1swXTtcbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aGlzLmFueS5wdXNoKGxpc3RlbmVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV2ZW50TGlzdGVuZXIub24oKTogSW52YWxpZCBhcmd1bWVudHM6IFwiICsgUGxhdGZvcm0uQ29uZmlnLmluc3BlY3QoYXJncykpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDIpIHtcbiAgICAgIGNvbnN0IFtldmVudCwgbGlzdGVuZXJdID0gYXJncztcbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFdmVudExpc3RlbmVyLm9uKCk6IEludmFsaWQgYXJndW1lbnRzOiBcIiArIFBsYXRmb3JtLkNvbmZpZy5pbnNwZWN0KGFyZ3MpKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc05pbChldmVudCkpIHtcbiAgICAgICAgdGhpcy5hbnkucHVzaChsaXN0ZW5lcik7XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICAgIGV2ZW50LmZvckVhY2goKGV2ZW50TmFtZSkgPT4ge1xuICAgICAgICAgIHRoaXMub24oZXZlbnROYW1lLCBsaXN0ZW5lcik7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHR5cGVvZiBldmVudCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV2ZW50TGlzdGVuZXIub24oKTogSW52YWxpZCBhcmd1bWVudHM6IFwiICsgUGxhdGZvcm0uQ29uZmlnLmluc3BlY3QoYXJncykpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuZXZlbnRzW2V2ZW50XSB8fCAodGhpcy5ldmVudHNbZXZlbnRdID0gW10pO1xuICAgICAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIG9mZiguLi5hcmdzKSB7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09IDAgfHwgaXNOaWwoYXJnc1swXSkgJiYgaXNOaWwoYXJnc1sxXSkpIHtcbiAgICAgIHRoaXMuYW55ID0gW107XG4gICAgICB0aGlzLmV2ZW50cyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgdGhpcy5hbnlPbmNlID0gW107XG4gICAgICB0aGlzLmV2ZW50c09uY2UgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgW2ZpcnN0QXJnLCBzZWNvbmRBcmddID0gYXJncztcbiAgICBsZXQgbGlzdGVuZXIgPSBudWxsO1xuICAgIGxldCBldmVudCA9IG51bGw7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxIHx8ICFzZWNvbmRBcmcpIHtcbiAgICAgIGlmICh0eXBlb2YgZmlyc3RBcmcgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBsaXN0ZW5lciA9IGZpcnN0QXJnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXZlbnQgPSBmaXJzdEFyZztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGVvZiBzZWNvbmRBcmcgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFdmVudEVtaXR0ZXIub2ZmKCk6IGludmFsaWQgYXJndW1lbnRzOlwiICsgUGxhdGZvcm0uQ29uZmlnLmluc3BlY3QoYXJncykpO1xuICAgICAgfVxuICAgICAgW2V2ZW50LCBsaXN0ZW5lcl0gPSBbZmlyc3RBcmcsIHNlY29uZEFyZ107XG4gICAgfVxuICAgIGlmIChsaXN0ZW5lciAmJiBpc05pbChldmVudCkpIHtcbiAgICAgIHJlbW92ZUxpc3RlbmVyKFt0aGlzLmFueSwgdGhpcy5ldmVudHMsIHRoaXMuYW55T25jZSwgdGhpcy5ldmVudHNPbmNlXSwgbGlzdGVuZXIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGV2ZW50LmZvckVhY2goKGV2ZW50TmFtZSkgPT4ge1xuICAgICAgICB0aGlzLm9mZihldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGV2ZW50ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFdmVudEVtaXR0ZXIub2ZmKCk6IGludmFsaWQgYXJndW1lbnRzOlwiICsgUGxhdGZvcm0uQ29uZmlnLmluc3BlY3QoYXJncykpO1xuICAgIH1cbiAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgIHJlbW92ZUxpc3RlbmVyKFt0aGlzLmV2ZW50cywgdGhpcy5ldmVudHNPbmNlXSwgbGlzdGVuZXIsIGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHRoaXMuZXZlbnRzW2V2ZW50XTtcbiAgICAgIGRlbGV0ZSB0aGlzLmV2ZW50c09uY2VbZXZlbnRdO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBhcnJheSBvZiBsaXN0ZW5lcnMgZm9yIGEgZ2l2ZW4gZXZlbnQ7IGV4Y2x1ZGVzIG9uY2UgZXZlbnRzXG4gICAqIEBwYXJhbSBldmVudCAob3B0aW9uYWwpIHRoZSBuYW1lIG9mIHRoZSBldmVudCwgb3Igbm9uZSBmb3IgJ2FueSdcbiAgICogQHJldHVybiBhcnJheSBvZiBldmVudHMsIG9yIG51bGwgaWYgbm9uZVxuICAgKi9cbiAgbGlzdGVuZXJzKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLmV2ZW50c1tldmVudF0gfHwgW107XG4gICAgICBpZiAodGhpcy5ldmVudHNPbmNlW2V2ZW50XSlcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkobGlzdGVuZXJzLCB0aGlzLmV2ZW50c09uY2VbZXZlbnRdKTtcbiAgICAgIHJldHVybiBsaXN0ZW5lcnMubGVuZ3RoID8gbGlzdGVuZXJzIDogbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuYW55Lmxlbmd0aCA/IHRoaXMuYW55IDogbnVsbDtcbiAgfVxuICAvKipcbiAgICogRW1pdCBhbiBldmVudFxuICAgKiBAcGFyYW0gZXZlbnQgdGhlIGV2ZW50IG5hbWVcbiAgICogQHBhcmFtIGFyZ3MgdGhlIGFyZ3VtZW50cyB0byBwYXNzIHRvIHRoZSBsaXN0ZW5lclxuICAgKi9cbiAgZW1pdChldmVudCwgLi4uYXJncykge1xuICAgIGNvbnN0IGV2ZW50VGhpcyA9IHsgZXZlbnQgfTtcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSBbXTtcbiAgICBpZiAodGhpcy5hbnlPbmNlLmxlbmd0aCkge1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkobGlzdGVuZXJzLCB0aGlzLmFueU9uY2UpO1xuICAgICAgdGhpcy5hbnlPbmNlID0gW107XG4gICAgfVxuICAgIGlmICh0aGlzLmFueS5sZW5ndGgpIHtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGxpc3RlbmVycywgdGhpcy5hbnkpO1xuICAgIH1cbiAgICBjb25zdCBldmVudHNPbmNlTGlzdGVuZXJzID0gdGhpcy5ldmVudHNPbmNlW2V2ZW50XTtcbiAgICBpZiAoZXZlbnRzT25jZUxpc3RlbmVycykge1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkobGlzdGVuZXJzLCBldmVudHNPbmNlTGlzdGVuZXJzKTtcbiAgICAgIGRlbGV0ZSB0aGlzLmV2ZW50c09uY2VbZXZlbnRdO1xuICAgIH1cbiAgICBjb25zdCBldmVudHNMaXN0ZW5lcnMgPSB0aGlzLmV2ZW50c1tldmVudF07XG4gICAgaWYgKGV2ZW50c0xpc3RlbmVycykge1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkobGlzdGVuZXJzLCBldmVudHNMaXN0ZW5lcnMpO1xuICAgIH1cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXIpID0+IHtcbiAgICAgIGNhbGxMaXN0ZW5lcih0aGlzLmxvZ2dlciwgZXZlbnRUaGlzLCBsaXN0ZW5lciwgYXJncyk7XG4gICAgfSk7XG4gIH1cbiAgb25jZSguLi5hcmdzKSB7XG4gICAgY29uc3QgYXJnQ291bnQgPSBhcmdzLmxlbmd0aDtcbiAgICBpZiAoYXJnQ291bnQgPT09IDAgfHwgYXJnQ291bnQgPT09IDEgJiYgdHlwZW9mIGFyZ3NbMF0gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY29uc3QgZXZlbnQgPSBhcmdzWzBdO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHRoaXMub25jZShldmVudCwgcmVzb2x2ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgW2ZpcnN0QXJnLCBzZWNvbmRBcmddID0gYXJncztcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGZpcnN0QXJnID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRoaXMuYW55T25jZS5wdXNoKGZpcnN0QXJnKTtcbiAgICB9IGVsc2UgaWYgKGlzTmlsKGZpcnN0QXJnKSkge1xuICAgICAgaWYgKHR5cGVvZiBzZWNvbmRBcmcgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFdmVudEVtaXR0ZXIub25jZSgpOiBJbnZhbGlkIGFyZ3VtZW50czpcIiArIFBsYXRmb3JtLkNvbmZpZy5pbnNwZWN0KGFyZ3MpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYW55T25jZS5wdXNoKHNlY29uZEFyZyk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGZpcnN0QXJnKSkge1xuICAgICAgY29uc3Qgc2VsZjIgPSB0aGlzO1xuICAgICAgY29uc3QgbGlzdGVuZXJXcmFwcGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGlubmVyQXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgIGZpcnN0QXJnLmZvckVhY2goZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gICAgICAgICAgc2VsZjIub2ZmKGV2ZW50TmFtZSwgbGlzdGVuZXJXcmFwcGVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0eXBlb2Ygc2Vjb25kQXJnICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFdmVudEVtaXR0ZXIub25jZSgpOiBJbnZhbGlkIGFyZ3VtZW50czpcIiArIFBsYXRmb3JtLkNvbmZpZy5pbnNwZWN0KGFyZ3MpKTtcbiAgICAgICAgfVxuICAgICAgICBzZWNvbmRBcmcuYXBwbHkodGhpcywgaW5uZXJBcmdzKTtcbiAgICAgIH07XG4gICAgICBmaXJzdEFyZy5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuICAgICAgICBzZWxmMi5vbihldmVudE5hbWUsIGxpc3RlbmVyV3JhcHBlcik7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGVvZiBmaXJzdEFyZyAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFdmVudEVtaXR0ZXIub25jZSgpOiBJbnZhbGlkIGFyZ3VtZW50czpcIiArIFBsYXRmb3JtLkNvbmZpZy5pbnNwZWN0KGFyZ3MpKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuZXZlbnRzT25jZVtmaXJzdEFyZ10gfHwgKHRoaXMuZXZlbnRzT25jZVtmaXJzdEFyZ10gPSBbXSk7XG4gICAgICBpZiAoc2Vjb25kQXJnKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2Vjb25kQXJnICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFdmVudEVtaXR0ZXIub25jZSgpOiBJbnZhbGlkIGFyZ3VtZW50czpcIiArIFBsYXRmb3JtLkNvbmZpZy5pbnNwZWN0KGFyZ3MpKTtcbiAgICAgICAgfVxuICAgICAgICBsaXN0ZW5lcnMucHVzaChzZWNvbmRBcmcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogTGlzdGVuIGZvciBhIHNpbmdsZSBvY2N1cnJlbmNlIG9mIGEgc3RhdGUgZXZlbnQgYW5kIGZpcmUgaW1tZWRpYXRlbHkgaWYgY3VycmVudFN0YXRlIG1hdGNoZXMgdGFyZ2V0U3RhdGVcbiAgICogQHBhcmFtIHRhcmdldFN0YXRlIHRoZSBuYW1lIG9mIHRoZSBzdGF0ZSBldmVudCB0byBsaXN0ZW4gdG9cbiAgICogQHBhcmFtIGN1cnJlbnRTdGF0ZSB0aGUgbmFtZSBvZiB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGlzIG9iamVjdFxuICAgKi9cbiAgYXN5bmMgd2hlblN0YXRlKHRhcmdldFN0YXRlLCBjdXJyZW50U3RhdGUpIHtcbiAgICBpZiAodHlwZW9mIHRhcmdldFN0YXRlICE9PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBjdXJyZW50U3RhdGUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIndoZW5TdGF0ZSByZXF1aXJlcyBhIHZhbGlkIHN0YXRlIFN0cmluZyBhcmd1bWVudFwiKTtcbiAgICB9XG4gICAgaWYgKHRhcmdldFN0YXRlID09PSBjdXJyZW50U3RhdGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5vbmNlKHRhcmdldFN0YXRlKTtcbiAgICB9XG4gIH1cbn07XG52YXIgZXZlbnRlbWl0dGVyX2RlZmF1bHQgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIHNyYy9jb21tb24vbGliL3R5cGVzL3Byb3RvY29sbWVzc2FnZS50c1xudmFyIGFjdGlvbnMyID0ge1xuICBIRUFSVEJFQVQ6IDAsXG4gIEFDSzogMSxcbiAgTkFDSzogMixcbiAgQ09OTkVDVDogMyxcbiAgQ09OTkVDVEVEOiA0LFxuICBESVNDT05ORUNUOiA1LFxuICBESVNDT05ORUNURUQ6IDYsXG4gIENMT1NFOiA3LFxuICBDTE9TRUQ6IDgsXG4gIEVSUk9SOiA5LFxuICBBVFRBQ0g6IDEwLFxuICBBVFRBQ0hFRDogMTEsXG4gIERFVEFDSDogMTIsXG4gIERFVEFDSEVEOiAxMyxcbiAgUFJFU0VOQ0U6IDE0LFxuICBNRVNTQUdFOiAxNSxcbiAgU1lOQzogMTYsXG4gIEFVVEg6IDE3LFxuICBBQ1RJVkFURTogMThcbn07XG52YXIgQWN0aW9uTmFtZSA9IFtdO1xuT2JqZWN0LmtleXMoYWN0aW9uczIpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICBBY3Rpb25OYW1lW2FjdGlvbnMyW25hbWVdXSA9IG5hbWU7XG59KTtcbnZhciBmbGFncyA9IHtcbiAgLyogQ2hhbm5lbCBhdHRhY2ggc3RhdGUgZmxhZ3MgKi9cbiAgSEFTX1BSRVNFTkNFOiAxIDw8IDAsXG4gIEhBU19CQUNLTE9HOiAxIDw8IDEsXG4gIFJFU1VNRUQ6IDEgPDwgMixcbiAgVFJBTlNJRU5UOiAxIDw8IDQsXG4gIEFUVEFDSF9SRVNVTUU6IDEgPDwgNSxcbiAgLyogQ2hhbm5lbCBtb2RlIGZsYWdzICovXG4gIFBSRVNFTkNFOiAxIDw8IDE2LFxuICBQVUJMSVNIOiAxIDw8IDE3LFxuICBTVUJTQ1JJQkU6IDEgPDwgMTgsXG4gIFBSRVNFTkNFX1NVQlNDUklCRTogMSA8PCAxOVxufTtcbnZhciBmbGFnTmFtZXMgPSBPYmplY3Qua2V5cyhmbGFncyk7XG5mbGFncy5NT0RFX0FMTCA9IGZsYWdzLlBSRVNFTkNFIHwgZmxhZ3MuUFVCTElTSCB8IGZsYWdzLlNVQlNDUklCRSB8IGZsYWdzLlBSRVNFTkNFX1NVQlNDUklCRTtcbmZ1bmN0aW9uIHRvU3RyaW5nQXJyYXkoYXJyYXkpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGlmIChhcnJheSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdC5wdXNoKGFycmF5W2ldLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gXCJbIFwiICsgcmVzdWx0LmpvaW4oXCIsIFwiKSArIFwiIF1cIjtcbn1cbnZhciBjaGFubmVsTW9kZXMgPSBbXCJQUkVTRU5DRVwiLCBcIlBVQkxJU0hcIiwgXCJTVUJTQ1JJQkVcIiwgXCJQUkVTRU5DRV9TVUJTQ1JJQkVcIl07XG52YXIgc2VyaWFsaXplMiA9IGVuY29kZUJvZHk7XG5mdW5jdGlvbiBkZXNlcmlhbGl6ZShzZXJpYWxpemVkLCBNc2dQYWNrLCBwcmVzZW5jZU1lc3NhZ2VQbHVnaW4sIGZvcm1hdCkge1xuICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZWNvZGVCb2R5KHNlcmlhbGl6ZWQsIE1zZ1BhY2ssIGZvcm1hdCk7XG4gIHJldHVybiBmcm9tRGVzZXJpYWxpemVkKGRlc2VyaWFsaXplZCwgcHJlc2VuY2VNZXNzYWdlUGx1Z2luKTtcbn1cbmZ1bmN0aW9uIGZyb21EZXNlcmlhbGl6ZWQoZGVzZXJpYWxpemVkLCBwcmVzZW5jZU1lc3NhZ2VQbHVnaW4pIHtcbiAgY29uc3QgZXJyb3IgPSBkZXNlcmlhbGl6ZWQuZXJyb3I7XG4gIGlmIChlcnJvcikge1xuICAgIGRlc2VyaWFsaXplZC5lcnJvciA9IEVycm9ySW5mby5mcm9tVmFsdWVzKGVycm9yKTtcbiAgfVxuICBsZXQgbWVzc2FnZXM7XG4gIGlmIChkZXNlcmlhbGl6ZWQubWVzc2FnZXMpIHtcbiAgICBjb25zdCBkbSA9IGRlc2VyaWFsaXplZC5tZXNzYWdlcztcbiAgICBtZXNzYWdlcyA9IGRtLm1hcCgobSkgPT4gZnJvbVdpcmVQcm90b2NvbChtKSk7XG4gIH1cbiAgbGV0IHByZXNlbmNlO1xuICBpZiAocHJlc2VuY2VNZXNzYWdlUGx1Z2luICYmIGRlc2VyaWFsaXplZC5wcmVzZW5jZSkge1xuICAgIGNvbnN0IGRwID0gZGVzZXJpYWxpemVkLnByZXNlbmNlO1xuICAgIHByZXNlbmNlID0gZHAubWFwKChwbSkgPT4gcHJlc2VuY2VNZXNzYWdlUGx1Z2luLnByZXNlbmNlTWVzc2FnZUZyb21XaXJlUHJvdG9jb2wocG0pKTtcbiAgfVxuICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgUHJvdG9jb2xNZXNzYWdlKCksIF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIGRlc2VyaWFsaXplZCksIHsgcHJlc2VuY2UsIG1lc3NhZ2VzIH0pKTtcbn1cbmZ1bmN0aW9uIGZyb21EZXNlcmlhbGl6ZWRJbmNsdWRpbmdEZXBlbmRlbmNpZXMoZGVzZXJpYWxpemVkKSB7XG4gIHJldHVybiBmcm9tRGVzZXJpYWxpemVkKGRlc2VyaWFsaXplZCwge1xuICAgIHByZXNlbmNlTWVzc2FnZUZyb21WYWx1ZXM6IGZyb21WYWx1ZXMyLFxuICAgIHByZXNlbmNlTWVzc2FnZXNGcm9tVmFsdWVzQXJyYXk6IGZyb21WYWx1ZXNBcnJheTIsXG4gICAgcHJlc2VuY2VNZXNzYWdlRnJvbVdpcmVQcm90b2NvbDogZnJvbVdpcmVQcm90b2NvbDJcbiAgfSk7XG59XG5mdW5jdGlvbiBmcm9tVmFsdWVzMyh2YWx1ZXMpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IFByb3RvY29sTWVzc2FnZSgpLCB2YWx1ZXMpO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5KG1zZywgcHJlc2VuY2VNZXNzYWdlUGx1Z2luKSB7XG4gIGxldCByZXN1bHQgPSBcIltQcm90b2NvbE1lc3NhZ2VcIjtcbiAgaWYgKG1zZy5hY3Rpb24gIT09IHZvaWQgMClcbiAgICByZXN1bHQgKz0gXCI7IGFjdGlvbj1cIiArIEFjdGlvbk5hbWVbbXNnLmFjdGlvbl0gfHwgbXNnLmFjdGlvbjtcbiAgY29uc3Qgc2ltcGxlQXR0cmlidXRlcyA9IFtcImlkXCIsIFwiY2hhbm5lbFwiLCBcImNoYW5uZWxTZXJpYWxcIiwgXCJjb25uZWN0aW9uSWRcIiwgXCJjb3VudFwiLCBcIm1zZ1NlcmlhbFwiLCBcInRpbWVzdGFtcFwiXTtcbiAgbGV0IGF0dHJpYnV0ZTtcbiAgZm9yIChsZXQgYXR0cmliSW5kZXggPSAwOyBhdHRyaWJJbmRleCA8IHNpbXBsZUF0dHJpYnV0ZXMubGVuZ3RoOyBhdHRyaWJJbmRleCsrKSB7XG4gICAgYXR0cmlidXRlID0gc2ltcGxlQXR0cmlidXRlc1thdHRyaWJJbmRleF07XG4gICAgaWYgKG1zZ1thdHRyaWJ1dGVdICE9PSB2b2lkIDApXG4gICAgICByZXN1bHQgKz0gXCI7IFwiICsgYXR0cmlidXRlICsgXCI9XCIgKyBtc2dbYXR0cmlidXRlXTtcbiAgfVxuICBpZiAobXNnLm1lc3NhZ2VzKVxuICAgIHJlc3VsdCArPSBcIjsgbWVzc2FnZXM9XCIgKyB0b1N0cmluZ0FycmF5KGZyb21WYWx1ZXNBcnJheShtc2cubWVzc2FnZXMpKTtcbiAgaWYgKG1zZy5wcmVzZW5jZSAmJiBwcmVzZW5jZU1lc3NhZ2VQbHVnaW4pXG4gICAgcmVzdWx0ICs9IFwiOyBwcmVzZW5jZT1cIiArIHRvU3RyaW5nQXJyYXkocHJlc2VuY2VNZXNzYWdlUGx1Z2luLnByZXNlbmNlTWVzc2FnZXNGcm9tVmFsdWVzQXJyYXkobXNnLnByZXNlbmNlKSk7XG4gIGlmIChtc2cuZXJyb3IpXG4gICAgcmVzdWx0ICs9IFwiOyBlcnJvcj1cIiArIEVycm9ySW5mby5mcm9tVmFsdWVzKG1zZy5lcnJvcikudG9TdHJpbmcoKTtcbiAgaWYgKG1zZy5hdXRoICYmIG1zZy5hdXRoLmFjY2Vzc1Rva2VuKVxuICAgIHJlc3VsdCArPSBcIjsgdG9rZW49XCIgKyBtc2cuYXV0aC5hY2Nlc3NUb2tlbjtcbiAgaWYgKG1zZy5mbGFncylcbiAgICByZXN1bHQgKz0gXCI7IGZsYWdzPVwiICsgZmxhZ05hbWVzLmZpbHRlcihtc2cuaGFzRmxhZykuam9pbihcIixcIik7XG4gIGlmIChtc2cucGFyYW1zKSB7XG4gICAgbGV0IHN0cmluZ2lmaWVkUGFyYW1zID0gXCJcIjtcbiAgICBmb3JJbk93bk5vbk51bGxQcm9wZXJ0aWVzKG1zZy5wYXJhbXMsIGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIGlmIChzdHJpbmdpZmllZFBhcmFtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHN0cmluZ2lmaWVkUGFyYW1zICs9IFwiOyBcIjtcbiAgICAgIH1cbiAgICAgIHN0cmluZ2lmaWVkUGFyYW1zICs9IHByb3AgKyBcIj1cIiArIG1zZy5wYXJhbXNbcHJvcF07XG4gICAgfSk7XG4gICAgaWYgKHN0cmluZ2lmaWVkUGFyYW1zLmxlbmd0aCA+IDApIHtcbiAgICAgIHJlc3VsdCArPSBcIjsgcGFyYW1zPVtcIiArIHN0cmluZ2lmaWVkUGFyYW1zICsgXCJdXCI7XG4gICAgfVxuICB9XG4gIHJlc3VsdCArPSBcIl1cIjtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbnZhciBQcm90b2NvbE1lc3NhZ2UgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaGFzRmxhZyA9IChmbGFnKSA9PiB7XG4gICAgICByZXR1cm4gKHRoaXMuZmxhZ3MgJiBmbGFnc1tmbGFnXSkgPiAwO1xuICAgIH07XG4gIH1cbiAgc2V0RmxhZyhmbGFnKSB7XG4gICAgcmV0dXJuIHRoaXMuZmxhZ3MgPSB0aGlzLmZsYWdzIHwgZmxhZ3NbZmxhZ107XG4gIH1cbiAgZ2V0TW9kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5mbGFncyAmJiB0aGlzLmZsYWdzICYgZmxhZ3MuTU9ERV9BTEw7XG4gIH1cbiAgZW5jb2RlTW9kZXNUb0ZsYWdzKG1vZGVzKSB7XG4gICAgbW9kZXMuZm9yRWFjaCgobW9kZSkgPT4gdGhpcy5zZXRGbGFnKG1vZGUpKTtcbiAgfVxuICBkZWNvZGVNb2Rlc0Zyb21GbGFncygpIHtcbiAgICBjb25zdCBtb2RlcyA9IFtdO1xuICAgIGNoYW5uZWxNb2Rlcy5mb3JFYWNoKChtb2RlKSA9PiB7XG4gICAgICBpZiAodGhpcy5oYXNGbGFnKG1vZGUpKSB7XG4gICAgICAgIG1vZGVzLnB1c2gobW9kZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1vZGVzLmxlbmd0aCA+IDAgPyBtb2RlcyA6IHZvaWQgMDtcbiAgfVxufTtcbnZhciBwcm90b2NvbG1lc3NhZ2VfZGVmYXVsdCA9IFByb3RvY29sTWVzc2FnZTtcblxuLy8gc3JjL2NvbW1vbi9saWIvdHJhbnNwb3J0L21lc3NhZ2VxdWV1ZS50c1xudmFyIE1lc3NhZ2VRdWV1ZSA9IGNsYXNzIGV4dGVuZHMgZXZlbnRlbWl0dGVyX2RlZmF1bHQge1xuICBjb25zdHJ1Y3Rvcihsb2dnZXIpIHtcbiAgICBzdXBlcihsb2dnZXIpO1xuICAgIHRoaXMubWVzc2FnZXMgPSBbXTtcbiAgfVxuICBjb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlcy5sZW5ndGg7XG4gIH1cbiAgcHVzaChtZXNzYWdlKSB7XG4gICAgdGhpcy5tZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xuICB9XG4gIHNoaWZ0KCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VzLnNoaWZ0KCk7XG4gIH1cbiAgbGFzdCgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlc1t0aGlzLm1lc3NhZ2VzLmxlbmd0aCAtIDFdO1xuICB9XG4gIGNvcHlBbGwoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZXMuc2xpY2UoKTtcbiAgfVxuICBhcHBlbmQobWVzc2FnZXMpIHtcbiAgICB0aGlzLm1lc3NhZ2VzLnB1c2guYXBwbHkodGhpcy5tZXNzYWdlcywgbWVzc2FnZXMpO1xuICB9XG4gIHByZXBlbmQobWVzc2FnZXMpIHtcbiAgICB0aGlzLm1lc3NhZ2VzLnVuc2hpZnQuYXBwbHkodGhpcy5tZXNzYWdlcywgbWVzc2FnZXMpO1xuICB9XG4gIGNvbXBsZXRlTWVzc2FnZXMoc2VyaWFsLCBjb3VudCwgZXJyKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICBcIk1lc3NhZ2VRdWV1ZS5jb21wbGV0ZU1lc3NhZ2VzKClcIixcbiAgICAgIFwic2VyaWFsID0gXCIgKyBzZXJpYWwgKyBcIjsgY291bnQgPSBcIiArIGNvdW50XG4gICAgKTtcbiAgICBlcnIgPSBlcnIgfHwgbnVsbDtcbiAgICBjb25zdCBtZXNzYWdlcyA9IHRoaXMubWVzc2FnZXM7XG4gICAgaWYgKG1lc3NhZ2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWVzc2FnZVF1ZXVlLmNvbXBsZXRlTWVzc2FnZXMoKTogY29tcGxldGVNZXNzYWdlcyBjYWxsZWQgb24gYW55IGVtcHR5IE1lc3NhZ2VRdWV1ZVwiKTtcbiAgICB9XG4gICAgY29uc3QgZmlyc3QgPSBtZXNzYWdlc1swXTtcbiAgICBpZiAoZmlyc3QpIHtcbiAgICAgIGNvbnN0IHN0YXJ0U2VyaWFsID0gZmlyc3QubWVzc2FnZS5tc2dTZXJpYWw7XG4gICAgICBjb25zdCBlbmRTZXJpYWwgPSBzZXJpYWwgKyBjb3VudDtcbiAgICAgIGlmIChlbmRTZXJpYWwgPiBzdGFydFNlcmlhbCkge1xuICAgICAgICBjb25zdCBjb21wbGV0ZU1lc3NhZ2VzID0gbWVzc2FnZXMuc3BsaWNlKDAsIGVuZFNlcmlhbCAtIHN0YXJ0U2VyaWFsKTtcbiAgICAgICAgZm9yIChjb25zdCBtZXNzYWdlIG9mIGNvbXBsZXRlTWVzc2FnZXMpIHtcbiAgICAgICAgICBtZXNzYWdlLmNhbGxiYWNrKGVycik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZXNzYWdlcy5sZW5ndGggPT0gMClcbiAgICAgICAgdGhpcy5lbWl0KFwiaWRsZVwiKTtcbiAgICB9XG4gIH1cbiAgY29tcGxldGVBbGxNZXNzYWdlcyhlcnIpIHtcbiAgICB0aGlzLmNvbXBsZXRlTWVzc2FnZXMoMCwgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgfHwgTnVtYmVyLk1BWF9WQUxVRSwgZXJyKTtcbiAgfVxuICByZXNldFNlbmRBdHRlbXB0ZWQoKSB7XG4gICAgZm9yIChsZXQgbXNnIG9mIHRoaXMubWVzc2FnZXMpIHtcbiAgICAgIG1zZy5zZW5kQXR0ZW1wdGVkID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGNsZWFyKCkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgXCJNZXNzYWdlUXVldWUuY2xlYXIoKVwiLFxuICAgICAgXCJjbGVhcmluZyBcIiArIHRoaXMubWVzc2FnZXMubGVuZ3RoICsgXCIgbWVzc2FnZXNcIlxuICAgICk7XG4gICAgdGhpcy5tZXNzYWdlcyA9IFtdO1xuICAgIHRoaXMuZW1pdChcImlkbGVcIik7XG4gIH1cbn07XG52YXIgbWVzc2FnZXF1ZXVlX2RlZmF1bHQgPSBNZXNzYWdlUXVldWU7XG5cbi8vIHNyYy9jb21tb24vbGliL3RyYW5zcG9ydC9wcm90b2NvbC50c1xudmFyIFBlbmRpbmdNZXNzYWdlID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBjYWxsYmFjaykge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMubWVyZ2VkID0gZmFsc2U7XG4gICAgY29uc3QgYWN0aW9uID0gbWVzc2FnZS5hY3Rpb247XG4gICAgdGhpcy5zZW5kQXR0ZW1wdGVkID0gZmFsc2U7XG4gICAgdGhpcy5hY2tSZXF1aXJlZCA9IGFjdGlvbiA9PSBhY3Rpb25zMi5NRVNTQUdFIHx8IGFjdGlvbiA9PSBhY3Rpb25zMi5QUkVTRU5DRTtcbiAgfVxufTtcbnZhciBQcm90b2NvbCA9IGNsYXNzIGV4dGVuZHMgZXZlbnRlbWl0dGVyX2RlZmF1bHQge1xuICBjb25zdHJ1Y3Rvcih0cmFuc3BvcnQpIHtcbiAgICBzdXBlcih0cmFuc3BvcnQubG9nZ2VyKTtcbiAgICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcbiAgICB0aGlzLm1lc3NhZ2VRdWV1ZSA9IG5ldyBtZXNzYWdlcXVldWVfZGVmYXVsdCh0aGlzLmxvZ2dlcik7XG4gICAgdHJhbnNwb3J0Lm9uKFwiYWNrXCIsIChzZXJpYWwsIGNvdW50KSA9PiB7XG4gICAgICB0aGlzLm9uQWNrKHNlcmlhbCwgY291bnQpO1xuICAgIH0pO1xuICAgIHRyYW5zcG9ydC5vbihcIm5hY2tcIiwgKHNlcmlhbCwgY291bnQsIGVycikgPT4ge1xuICAgICAgdGhpcy5vbk5hY2soc2VyaWFsLCBjb3VudCwgZXJyKTtcbiAgICB9KTtcbiAgfVxuICBvbkFjayhzZXJpYWwsIGNvdW50KSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sIFwiUHJvdG9jb2wub25BY2soKVwiLCBcInNlcmlhbCA9IFwiICsgc2VyaWFsICsgXCI7IGNvdW50ID0gXCIgKyBjb3VudCk7XG4gICAgdGhpcy5tZXNzYWdlUXVldWUuY29tcGxldGVNZXNzYWdlcyhzZXJpYWwsIGNvdW50KTtcbiAgfVxuICBvbk5hY2soc2VyaWFsLCBjb3VudCwgZXJyKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICBcIlByb3RvY29sLm9uTmFjaygpXCIsXG4gICAgICBcInNlcmlhbCA9IFwiICsgc2VyaWFsICsgXCI7IGNvdW50ID0gXCIgKyBjb3VudCArIFwiOyBlcnIgPSBcIiArIGluc3BlY3RFcnJvcihlcnIpXG4gICAgKTtcbiAgICBpZiAoIWVycikge1xuICAgICAgZXJyID0gbmV3IEVycm9ySW5mbyhcIlVuYWJsZSB0byBzZW5kIG1lc3NhZ2U7IGNoYW5uZWwgbm90IHJlc3BvbmRpbmdcIiwgNTAwMDEsIDUwMCk7XG4gICAgfVxuICAgIHRoaXMubWVzc2FnZVF1ZXVlLmNvbXBsZXRlTWVzc2FnZXMoc2VyaWFsLCBjb3VudCwgZXJyKTtcbiAgfVxuICBvbmNlSWRsZShsaXN0ZW5lcikge1xuICAgIGNvbnN0IG1lc3NhZ2VRdWV1ZSA9IHRoaXMubWVzc2FnZVF1ZXVlO1xuICAgIGlmIChtZXNzYWdlUXVldWUuY291bnQoKSA9PT0gMCkge1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbWVzc2FnZVF1ZXVlLm9uY2UoXCJpZGxlXCIsIGxpc3RlbmVyKTtcbiAgfVxuICBzZW5kKHBlbmRpbmdNZXNzYWdlKSB7XG4gICAgaWYgKHBlbmRpbmdNZXNzYWdlLmFja1JlcXVpcmVkKSB7XG4gICAgICB0aGlzLm1lc3NhZ2VRdWV1ZS5wdXNoKHBlbmRpbmdNZXNzYWdlKTtcbiAgICB9XG4gICAgaWYgKHRoaXMubG9nZ2VyLnNob3VsZExvZyhsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8pKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb25Ob1N0cmlwKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgICBcIlByb3RvY29sLnNlbmQoKVwiLFxuICAgICAgICBcInNlbmRpbmcgbXNnOyBcIiArIHN0cmluZ2lmeShwZW5kaW5nTWVzc2FnZS5tZXNzYWdlLCB0aGlzLnRyYW5zcG9ydC5jb25uZWN0aW9uTWFuYWdlci5yZWFsdGltZS5fUmVhbHRpbWVQcmVzZW5jZSlcbiAgICAgICk7XG4gICAgfVxuICAgIHBlbmRpbmdNZXNzYWdlLnNlbmRBdHRlbXB0ZWQgPSB0cnVlO1xuICAgIHRoaXMudHJhbnNwb3J0LnNlbmQocGVuZGluZ01lc3NhZ2UubWVzc2FnZSk7XG4gIH1cbiAgZ2V0VHJhbnNwb3J0KCkge1xuICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydDtcbiAgfVxuICBnZXRQZW5kaW5nTWVzc2FnZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZVF1ZXVlLmNvcHlBbGwoKTtcbiAgfVxuICBjbGVhclBlbmRpbmdNZXNzYWdlcygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlUXVldWUuY2xlYXIoKTtcbiAgfVxuICBmaW5pc2goKSB7XG4gICAgY29uc3QgdHJhbnNwb3J0ID0gdGhpcy50cmFuc3BvcnQ7XG4gICAgdGhpcy5vbmNlSWRsZShmdW5jdGlvbigpIHtcbiAgICAgIHRyYW5zcG9ydC5kaXNjb25uZWN0KCk7XG4gICAgfSk7XG4gIH1cbn07XG52YXIgcHJvdG9jb2xfZGVmYXVsdCA9IFByb3RvY29sO1xuXG4vLyBzcmMvY29tbW9uL2xpYi9jbGllbnQvY29ubmVjdGlvbnN0YXRlY2hhbmdlLnRzXG52YXIgQ29ubmVjdGlvblN0YXRlQ2hhbmdlID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihwcmV2aW91cywgY3VycmVudCwgcmV0cnlJbiwgcmVhc29uKSB7XG4gICAgdGhpcy5wcmV2aW91cyA9IHByZXZpb3VzO1xuICAgIHRoaXMuY3VycmVudCA9IGN1cnJlbnQ7XG4gICAgaWYgKHJldHJ5SW4pXG4gICAgICB0aGlzLnJldHJ5SW4gPSByZXRyeUluO1xuICAgIGlmIChyZWFzb24pXG4gICAgICB0aGlzLnJlYXNvbiA9IHJlYXNvbjtcbiAgfVxufTtcbnZhciBjb25uZWN0aW9uc3RhdGVjaGFuZ2VfZGVmYXVsdCA9IENvbm5lY3Rpb25TdGF0ZUNoYW5nZTtcblxuLy8gc3JjL2NvbW1vbi9saWIvdHJhbnNwb3J0L2Nvbm5lY3Rpb25lcnJvcnMudHNcbnZhciBDb25uZWN0aW9uRXJyb3JDb2RlcyA9IHtcbiAgRElTQ09OTkVDVEVEOiA4MDAwMyxcbiAgU1VTUEVOREVEOiA4MDAwMixcbiAgRkFJTEVEOiA4ZTQsXG4gIENMT1NJTkc6IDgwMDE3LFxuICBDTE9TRUQ6IDgwMDE3LFxuICBVTktOT1dOX0NPTk5FQ1RJT05fRVJSOiA1MDAwMixcbiAgVU5LTk9XTl9DSEFOTkVMX0VSUjogNTAwMDFcbn07XG52YXIgQ29ubmVjdGlvbkVycm9ycyA9IHtcbiAgZGlzY29ubmVjdGVkOiAoKSA9PiBFcnJvckluZm8uZnJvbVZhbHVlcyh7XG4gICAgc3RhdHVzQ29kZTogNDAwLFxuICAgIGNvZGU6IENvbm5lY3Rpb25FcnJvckNvZGVzLkRJU0NPTk5FQ1RFRCxcbiAgICBtZXNzYWdlOiBcIkNvbm5lY3Rpb24gdG8gc2VydmVyIHRlbXBvcmFyaWx5IHVuYXZhaWxhYmxlXCJcbiAgfSksXG4gIHN1c3BlbmRlZDogKCkgPT4gRXJyb3JJbmZvLmZyb21WYWx1ZXMoe1xuICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICBjb2RlOiBDb25uZWN0aW9uRXJyb3JDb2Rlcy5TVVNQRU5ERUQsXG4gICAgbWVzc2FnZTogXCJDb25uZWN0aW9uIHRvIHNlcnZlciB1bmF2YWlsYWJsZVwiXG4gIH0pLFxuICBmYWlsZWQ6ICgpID0+IEVycm9ySW5mby5mcm9tVmFsdWVzKHtcbiAgICBzdGF0dXNDb2RlOiA0MDAsXG4gICAgY29kZTogQ29ubmVjdGlvbkVycm9yQ29kZXMuRkFJTEVELFxuICAgIG1lc3NhZ2U6IFwiQ29ubmVjdGlvbiBmYWlsZWQgb3IgZGlzY29ubmVjdGVkIGJ5IHNlcnZlclwiXG4gIH0pLFxuICBjbG9zaW5nOiAoKSA9PiBFcnJvckluZm8uZnJvbVZhbHVlcyh7XG4gICAgc3RhdHVzQ29kZTogNDAwLFxuICAgIGNvZGU6IENvbm5lY3Rpb25FcnJvckNvZGVzLkNMT1NJTkcsXG4gICAgbWVzc2FnZTogXCJDb25uZWN0aW9uIGNsb3NpbmdcIlxuICB9KSxcbiAgY2xvc2VkOiAoKSA9PiBFcnJvckluZm8uZnJvbVZhbHVlcyh7XG4gICAgc3RhdHVzQ29kZTogNDAwLFxuICAgIGNvZGU6IENvbm5lY3Rpb25FcnJvckNvZGVzLkNMT1NFRCxcbiAgICBtZXNzYWdlOiBcIkNvbm5lY3Rpb24gY2xvc2VkXCJcbiAgfSksXG4gIHVua25vd25Db25uZWN0aW9uRXJyOiAoKSA9PiBFcnJvckluZm8uZnJvbVZhbHVlcyh7XG4gICAgc3RhdHVzQ29kZTogNTAwLFxuICAgIGNvZGU6IENvbm5lY3Rpb25FcnJvckNvZGVzLlVOS05PV05fQ09OTkVDVElPTl9FUlIsXG4gICAgbWVzc2FnZTogXCJJbnRlcm5hbCBjb25uZWN0aW9uIGVycm9yXCJcbiAgfSksXG4gIHVua25vd25DaGFubmVsRXJyOiAoKSA9PiBFcnJvckluZm8uZnJvbVZhbHVlcyh7XG4gICAgc3RhdHVzQ29kZTogNTAwLFxuICAgIGNvZGU6IENvbm5lY3Rpb25FcnJvckNvZGVzLlVOS05PV05fQ09OTkVDVElPTl9FUlIsXG4gICAgbWVzc2FnZTogXCJJbnRlcm5hbCBjaGFubmVsIGVycm9yXCJcbiAgfSlcbn07XG5mdW5jdGlvbiBpc1JldHJpYWJsZShlcnIpIHtcbiAgaWYgKCFlcnIuc3RhdHVzQ29kZSB8fCAhZXJyLmNvZGUgfHwgZXJyLnN0YXR1c0NvZGUgPj0gNTAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIE9iamVjdC52YWx1ZXMoQ29ubmVjdGlvbkVycm9yQ29kZXMpLmluY2x1ZGVzKGVyci5jb2RlKTtcbn1cbnZhciBjb25uZWN0aW9uZXJyb3JzX2RlZmF1bHQgPSBDb25uZWN0aW9uRXJyb3JzO1xuXG4vLyBzcmMvY29tbW9uL2xpYi90cmFuc3BvcnQvdHJhbnNwb3J0LnRzXG52YXIgY2xvc2VNZXNzYWdlID0gZnJvbVZhbHVlczMoeyBhY3Rpb246IGFjdGlvbnMyLkNMT1NFIH0pO1xudmFyIGRpc2Nvbm5lY3RNZXNzYWdlID0gZnJvbVZhbHVlczMoeyBhY3Rpb246IGFjdGlvbnMyLkRJU0NPTk5FQ1QgfSk7XG52YXIgVHJhbnNwb3J0ID0gY2xhc3MgZXh0ZW5kcyBldmVudGVtaXR0ZXJfZGVmYXVsdCB7XG4gIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb25NYW5hZ2VyLCBhdXRoLCBwYXJhbXMsIGZvcmNlSnNvblByb3RvY29sKSB7XG4gICAgc3VwZXIoY29ubmVjdGlvbk1hbmFnZXIubG9nZ2VyKTtcbiAgICBpZiAoZm9yY2VKc29uUHJvdG9jb2wpIHtcbiAgICAgIHBhcmFtcy5mb3JtYXQgPSB2b2lkIDA7XG4gICAgICBwYXJhbXMuaGVhcnRiZWF0cyA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIgPSBjb25uZWN0aW9uTWFuYWdlcjtcbiAgICB0aGlzLmF1dGggPSBhdXRoO1xuICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xuICAgIHRoaXMudGltZW91dHMgPSBwYXJhbXMub3B0aW9ucy50aW1lb3V0cztcbiAgICB0aGlzLmZvcm1hdCA9IHBhcmFtcy5mb3JtYXQ7XG4gICAgdGhpcy5pc0Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMuaXNGaW5pc2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuaXNEaXNwb3NlZCA9IGZhbHNlO1xuICAgIHRoaXMubWF4SWRsZUludGVydmFsID0gbnVsbDtcbiAgICB0aGlzLmlkbGVUaW1lciA9IG51bGw7XG4gICAgdGhpcy5sYXN0QWN0aXZpdHkgPSBudWxsO1xuICB9XG4gIGNvbm5lY3QoKSB7XG4gIH1cbiAgY2xvc2UoKSB7XG4gICAgaWYgKHRoaXMuaXNDb25uZWN0ZWQpIHtcbiAgICAgIHRoaXMucmVxdWVzdENsb3NlKCk7XG4gICAgfVxuICAgIHRoaXMuZmluaXNoKFwiY2xvc2VkXCIsIGNvbm5lY3Rpb25lcnJvcnNfZGVmYXVsdC5jbG9zZWQoKSk7XG4gIH1cbiAgZGlzY29ubmVjdChlcnIpIHtcbiAgICBpZiAodGhpcy5pc0Nvbm5lY3RlZCkge1xuICAgICAgdGhpcy5yZXF1ZXN0RGlzY29ubmVjdCgpO1xuICAgIH1cbiAgICB0aGlzLmZpbmlzaChcImRpc2Nvbm5lY3RlZFwiLCBlcnIgfHwgY29ubmVjdGlvbmVycm9yc19kZWZhdWx0LmRpc2Nvbm5lY3RlZCgpKTtcbiAgfVxuICBmYWlsKGVycikge1xuICAgIGlmICh0aGlzLmlzQ29ubmVjdGVkKSB7XG4gICAgICB0aGlzLnJlcXVlc3REaXNjb25uZWN0KCk7XG4gICAgfVxuICAgIHRoaXMuZmluaXNoKFwiZmFpbGVkXCIsIGVyciB8fCBjb25uZWN0aW9uZXJyb3JzX2RlZmF1bHQuZmFpbGVkKCkpO1xuICB9XG4gIGZpbmlzaChldmVudCwgZXJyKSB7XG4gICAgdmFyIF9hMjtcbiAgICBpZiAodGhpcy5pc0ZpbmlzaGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuaXNGaW5pc2hlZCA9IHRydWU7XG4gICAgdGhpcy5pc0Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMubWF4SWRsZUludGVydmFsID0gbnVsbDtcbiAgICBjbGVhclRpbWVvdXQoKF9hMiA9IHRoaXMuaWRsZVRpbWVyKSAhPSBudWxsID8gX2EyIDogdm9pZCAwKTtcbiAgICB0aGlzLmlkbGVUaW1lciA9IG51bGw7XG4gICAgdGhpcy5lbWl0KGV2ZW50LCBlcnIpO1xuICAgIHRoaXMuZGlzcG9zZSgpO1xuICB9XG4gIG9uUHJvdG9jb2xNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICBpZiAodGhpcy5sb2dnZXIuc2hvdWxkTG9nKGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTykpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbk5vU3RyaXAoXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgIFwiVHJhbnNwb3J0Lm9uUHJvdG9jb2xNZXNzYWdlKClcIixcbiAgICAgICAgXCJyZWNlaXZlZCBvbiBcIiArIHRoaXMuc2hvcnROYW1lICsgXCI6IFwiICsgc3RyaW5naWZ5KG1lc3NhZ2UsIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIucmVhbHRpbWUuX1JlYWx0aW1lUHJlc2VuY2UpICsgXCI7IGNvbm5lY3Rpb25JZCA9IFwiICsgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5jb25uZWN0aW9uSWRcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMub25BY3Rpdml0eSgpO1xuICAgIHN3aXRjaCAobWVzc2FnZS5hY3Rpb24pIHtcbiAgICAgIGNhc2UgYWN0aW9uczIuSEVBUlRCRUFUOlxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb25Ob1N0cmlwKFxuICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTyxcbiAgICAgICAgICBcIlRyYW5zcG9ydC5vblByb3RvY29sTWVzc2FnZSgpXCIsXG4gICAgICAgICAgdGhpcy5zaG9ydE5hbWUgKyBcIiBoZWFydGJlYXQ7IGNvbm5lY3Rpb25JZCA9IFwiICsgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5jb25uZWN0aW9uSWRcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5lbWl0KFwiaGVhcnRiZWF0XCIsIG1lc3NhZ2UuaWQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgYWN0aW9uczIuQ09OTkVDVEVEOlxuICAgICAgICB0aGlzLm9uQ29ubmVjdChtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5lbWl0KFwiY29ubmVjdGVkXCIsIG1lc3NhZ2UuZXJyb3IsIG1lc3NhZ2UuY29ubmVjdGlvbklkLCBtZXNzYWdlLmNvbm5lY3Rpb25EZXRhaWxzLCBtZXNzYWdlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGFjdGlvbnMyLkNMT1NFRDpcbiAgICAgICAgdGhpcy5vbkNsb3NlKG1lc3NhZ2UpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgYWN0aW9uczIuRElTQ09OTkVDVEVEOlxuICAgICAgICB0aGlzLm9uRGlzY29ubmVjdChtZXNzYWdlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGFjdGlvbnMyLkFDSzpcbiAgICAgICAgdGhpcy5lbWl0KFwiYWNrXCIsIG1lc3NhZ2UubXNnU2VyaWFsLCBtZXNzYWdlLmNvdW50KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGFjdGlvbnMyLk5BQ0s6XG4gICAgICAgIHRoaXMuZW1pdChcIm5hY2tcIiwgbWVzc2FnZS5tc2dTZXJpYWwsIG1lc3NhZ2UuY291bnQsIG1lc3NhZ2UuZXJyb3IpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgYWN0aW9uczIuU1lOQzpcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5vbkNoYW5uZWxNZXNzYWdlKG1lc3NhZ2UsIHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgYWN0aW9uczIuQUNUSVZBVEU6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBhY3Rpb25zMi5BVVRIOlxuICAgICAgICB3aGVuUHJvbWlzZVNldHRsZXModGhpcy5hdXRoLmF1dGhvcml6ZSgpLCAoZXJyKSA9PiB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLFxuICAgICAgICAgICAgICBcIlRyYW5zcG9ydC5vblByb3RvY29sTWVzc2FnZSgpXCIsXG4gICAgICAgICAgICAgIFwiQWJseSByZXF1ZXN0ZWQgcmUtYXV0aGVudGljYXRpb24sIGJ1dCB1bmFibGUgdG8gb2J0YWluIGEgbmV3IHRva2VuOiBcIiArIGluc3BlY3RFcnJvcihlcnIpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBhY3Rpb25zMi5FUlJPUjpcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgICAgICBcIlRyYW5zcG9ydC5vblByb3RvY29sTWVzc2FnZSgpXCIsXG4gICAgICAgICAgXCJyZWNlaXZlZCBlcnJvciBhY3Rpb247IGNvbm5lY3Rpb25JZCA9IFwiICsgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5jb25uZWN0aW9uSWQgKyBcIjsgZXJyID0gXCIgKyBQbGF0Zm9ybS5Db25maWcuaW5zcGVjdChtZXNzYWdlLmVycm9yKSArIChtZXNzYWdlLmNoYW5uZWwgPyBcIiwgY2hhbm5lbDogXCIgKyBtZXNzYWdlLmNoYW5uZWwgOiBcIlwiKVxuICAgICAgICApO1xuICAgICAgICBpZiAobWVzc2FnZS5jaGFubmVsID09PSB2b2lkIDApIHtcbiAgICAgICAgICB0aGlzLm9uRmF0YWxFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLm9uQ2hhbm5lbE1lc3NhZ2UobWVzc2FnZSwgdGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5vbkNoYW5uZWxNZXNzYWdlKG1lc3NhZ2UsIHRoaXMpO1xuICAgIH1cbiAgfVxuICBvbkNvbm5lY3QobWVzc2FnZSkge1xuICAgIHRoaXMuaXNDb25uZWN0ZWQgPSB0cnVlO1xuICAgIGlmICghbWVzc2FnZS5jb25uZWN0aW9uRGV0YWlscykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVHJhbnNwb3J0Lm9uQ29ubmVjdCgpOiBDb25uZWN0IG1lc3NhZ2UgcmVjaWV2ZWQgd2l0aG91dCBjb25uZWN0aW9uRGV0YWlsc1wiKTtcbiAgICB9XG4gICAgY29uc3QgbWF4UHJvbWlzZWRJZGxlID0gbWVzc2FnZS5jb25uZWN0aW9uRGV0YWlscy5tYXhJZGxlSW50ZXJ2YWw7XG4gICAgaWYgKG1heFByb21pc2VkSWRsZSkge1xuICAgICAgdGhpcy5tYXhJZGxlSW50ZXJ2YWwgPSBtYXhQcm9taXNlZElkbGUgKyB0aGlzLnRpbWVvdXRzLnJlYWx0aW1lUmVxdWVzdFRpbWVvdXQ7XG4gICAgICB0aGlzLm9uQWN0aXZpdHkoKTtcbiAgICB9XG4gIH1cbiAgb25EaXNjb25uZWN0KG1lc3NhZ2UpIHtcbiAgICBjb25zdCBlcnIgPSBtZXNzYWdlICYmIG1lc3NhZ2UuZXJyb3I7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiVHJhbnNwb3J0Lm9uRGlzY29ubmVjdCgpXCIsIFwiZXJyID0gXCIgKyBpbnNwZWN0RXJyb3IoZXJyKSk7XG4gICAgdGhpcy5maW5pc2goXCJkaXNjb25uZWN0ZWRcIiwgZXJyKTtcbiAgfVxuICBvbkZhdGFsRXJyb3IobWVzc2FnZSkge1xuICAgIGNvbnN0IGVyciA9IG1lc3NhZ2UgJiYgbWVzc2FnZS5lcnJvcjtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJUcmFuc3BvcnQub25GYXRhbEVycm9yKClcIiwgXCJlcnIgPSBcIiArIGluc3BlY3RFcnJvcihlcnIpKTtcbiAgICB0aGlzLmZpbmlzaChcImZhaWxlZFwiLCBlcnIpO1xuICB9XG4gIG9uQ2xvc2UobWVzc2FnZSkge1xuICAgIGNvbnN0IGVyciA9IG1lc3NhZ2UgJiYgbWVzc2FnZS5lcnJvcjtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJUcmFuc3BvcnQub25DbG9zZSgpXCIsIFwiZXJyID0gXCIgKyBpbnNwZWN0RXJyb3IoZXJyKSk7XG4gICAgdGhpcy5maW5pc2goXCJjbG9zZWRcIiwgZXJyKTtcbiAgfVxuICByZXF1ZXN0Q2xvc2UoKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiVHJhbnNwb3J0LnJlcXVlc3RDbG9zZSgpXCIsIFwiXCIpO1xuICAgIHRoaXMuc2VuZChjbG9zZU1lc3NhZ2UpO1xuICB9XG4gIHJlcXVlc3REaXNjb25uZWN0KCkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIlRyYW5zcG9ydC5yZXF1ZXN0RGlzY29ubmVjdCgpXCIsIFwiXCIpO1xuICAgIHRoaXMuc2VuZChkaXNjb25uZWN0TWVzc2FnZSk7XG4gIH1cbiAgcGluZyhpZCkge1xuICAgIGNvbnN0IG1zZyA9IHsgYWN0aW9uOiBhY3Rpb25zMi5IRUFSVEJFQVQgfTtcbiAgICBpZiAoaWQpXG4gICAgICBtc2cuaWQgPSBpZDtcbiAgICB0aGlzLnNlbmQoZnJvbVZhbHVlczMobXNnKSk7XG4gIH1cbiAgZGlzcG9zZSgpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJUcmFuc3BvcnQuZGlzcG9zZSgpXCIsIFwiXCIpO1xuICAgIHRoaXMuaXNEaXNwb3NlZCA9IHRydWU7XG4gICAgdGhpcy5vZmYoKTtcbiAgfVxuICBvbkFjdGl2aXR5KCkge1xuICAgIGlmICghdGhpcy5tYXhJZGxlSW50ZXJ2YWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5sYXN0QWN0aXZpdHkgPSB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLmxhc3RBY3Rpdml0eSA9IERhdGUubm93KCk7XG4gICAgdGhpcy5zZXRJZGxlVGltZXIodGhpcy5tYXhJZGxlSW50ZXJ2YWwgKyAxMDApO1xuICB9XG4gIHNldElkbGVUaW1lcih0aW1lb3V0KSB7XG4gICAgaWYgKCF0aGlzLmlkbGVUaW1lcikge1xuICAgICAgdGhpcy5pZGxlVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5vbklkbGVUaW1lckV4cGlyZSgpO1xuICAgICAgfSwgdGltZW91dCk7XG4gICAgfVxuICB9XG4gIG9uSWRsZVRpbWVyRXhwaXJlKCkge1xuICAgIGlmICghdGhpcy5sYXN0QWN0aXZpdHkgfHwgIXRoaXMubWF4SWRsZUludGVydmFsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcmFuc3BvcnQub25JZGxlVGltZXJFeHBpcmUoKTogbGFzdEFjdGl2aXR5L21heElkbGVJbnRlcnZhbCBub3Qgc2V0XCIpO1xuICAgIH1cbiAgICB0aGlzLmlkbGVUaW1lciA9IG51bGw7XG4gICAgY29uc3Qgc2luY2VMYXN0ID0gRGF0ZS5ub3coKSAtIHRoaXMubGFzdEFjdGl2aXR5O1xuICAgIGNvbnN0IHRpbWVSZW1haW5pbmcgPSB0aGlzLm1heElkbGVJbnRlcnZhbCAtIHNpbmNlTGFzdDtcbiAgICBpZiAodGltZVJlbWFpbmluZyA8PSAwKSB7XG4gICAgICBjb25zdCBtc2cgPSBcIk5vIGFjdGl2aXR5IHNlZW4gZnJvbSByZWFsdGltZSBpbiBcIiArIHNpbmNlTGFzdCArIFwibXM7IGFzc3VtaW5nIGNvbm5lY3Rpb24gaGFzIGRyb3BwZWRcIjtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLCBcIlRyYW5zcG9ydC5vbklkbGVUaW1lckV4cGlyZSgpXCIsIG1zZyk7XG4gICAgICB0aGlzLmRpc2Nvbm5lY3QobmV3IEVycm9ySW5mbyhtc2csIDgwMDAzLCA0MDgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRJZGxlVGltZXIodGltZVJlbWFpbmluZyArIDEwMCk7XG4gICAgfVxuICB9XG4gIHN0YXRpYyB0cnlDb25uZWN0KHRyYW5zcG9ydEN0b3IsIGNvbm5lY3Rpb25NYW5hZ2VyLCBhdXRoLCB0cmFuc3BvcnRQYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgdHJhbnNwb3J0ID0gbmV3IHRyYW5zcG9ydEN0b3IoY29ubmVjdGlvbk1hbmFnZXIsIGF1dGgsIHRyYW5zcG9ydFBhcmFtcyk7XG4gICAgbGV0IHRyYW5zcG9ydEF0dGVtcHRUaW1lcjtcbiAgICBjb25zdCBlcnJvckNiID0gZnVuY3Rpb24oZXJyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodHJhbnNwb3J0QXR0ZW1wdFRpbWVyKTtcbiAgICAgIGNhbGxiYWNrKHsgZXZlbnQ6IHRoaXMuZXZlbnQsIGVycm9yOiBlcnIgfSk7XG4gICAgfTtcbiAgICBjb25zdCByZWFsdGltZVJlcXVlc3RUaW1lb3V0ID0gY29ubmVjdGlvbk1hbmFnZXIub3B0aW9ucy50aW1lb3V0cy5yZWFsdGltZVJlcXVlc3RUaW1lb3V0O1xuICAgIHRyYW5zcG9ydEF0dGVtcHRUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdHJhbnNwb3J0Lm9mZihbXCJwcmVjb25uZWN0XCIsIFwiZGlzY29ubmVjdGVkXCIsIFwiZmFpbGVkXCJdKTtcbiAgICAgIHRyYW5zcG9ydC5kaXNwb3NlKCk7XG4gICAgICBlcnJvckNiLmNhbGwoXG4gICAgICAgIHsgZXZlbnQ6IFwiZGlzY29ubmVjdGVkXCIgfSxcbiAgICAgICAgbmV3IEVycm9ySW5mbyhcIlRpbWVvdXQgd2FpdGluZyBmb3IgdHJhbnNwb3J0IHRvIGluZGljYXRlIGl0c2VsZiB2aWFibGVcIiwgNWU0LCA1MDApXG4gICAgICApO1xuICAgIH0sIHJlYWx0aW1lUmVxdWVzdFRpbWVvdXQpO1xuICAgIHRyYW5zcG9ydC5vbihbXCJmYWlsZWRcIiwgXCJkaXNjb25uZWN0ZWRcIl0sIGVycm9yQ2IpO1xuICAgIHRyYW5zcG9ydC5vbihcInByZWNvbm5lY3RcIiwgZnVuY3Rpb24oKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIGNvbm5lY3Rpb25NYW5hZ2VyLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgICBcIlRyYW5zcG9ydC50cnlDb25uZWN0KClcIixcbiAgICAgICAgXCJ2aWFibGUgdHJhbnNwb3J0IFwiICsgdHJhbnNwb3J0XG4gICAgICApO1xuICAgICAgY2xlYXJUaW1lb3V0KHRyYW5zcG9ydEF0dGVtcHRUaW1lcik7XG4gICAgICB0cmFuc3BvcnQub2ZmKFtcImZhaWxlZFwiLCBcImRpc2Nvbm5lY3RlZFwiXSwgZXJyb3JDYik7XG4gICAgICBjYWxsYmFjayhudWxsLCB0cmFuc3BvcnQpO1xuICAgIH0pO1xuICAgIHRyYW5zcG9ydC5jb25uZWN0KCk7XG4gICAgcmV0dXJuIHRyYW5zcG9ydDtcbiAgfVxuICBzdGF0aWMgaXNBdmFpbGFibGUoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcImlzQXZhaWxhYmxlIG5vdCBpbXBsZW1lbnRlZCBmb3IgdHJhbnNwb3J0XCIsIDVlNCwgNTAwKTtcbiAgfVxufTtcbnZhciB0cmFuc3BvcnRfZGVmYXVsdCA9IFRyYW5zcG9ydDtcblxuLy8gc3JjL2NvbW1vbi9jb25zdGFudHMvVHJhbnNwb3J0TmFtZS50c1xudmFyIFRyYW5zcG9ydE5hbWVzO1xuKChUcmFuc3BvcnROYW1lczIpID0+IHtcbiAgVHJhbnNwb3J0TmFtZXMyLldlYlNvY2tldCA9IFwid2ViX3NvY2tldFwiO1xuICBUcmFuc3BvcnROYW1lczIuQ29tZXQgPSBcImNvbWV0XCI7XG4gIFRyYW5zcG9ydE5hbWVzMi5YaHJQb2xsaW5nID0gXCJ4aHJfcG9sbGluZ1wiO1xufSkoVHJhbnNwb3J0TmFtZXMgfHwgKFRyYW5zcG9ydE5hbWVzID0ge30pKTtcblxuLy8gc3JjL2NvbW1vbi9saWIvdHJhbnNwb3J0L2Nvbm5lY3Rpb25tYW5hZ2VyLnRzXG52YXIgZ2xvYmFsT2JqZWN0MiA9IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogc2VsZjtcbnZhciBoYXZlV2ViU3RvcmFnZSA9ICgpID0+IHtcbiAgdmFyIF9hMjtcbiAgcmV0dXJuIHR5cGVvZiBQbGF0Zm9ybS5XZWJTdG9yYWdlICE9PSBcInVuZGVmaW5lZFwiICYmICgoX2EyID0gUGxhdGZvcm0uV2ViU3RvcmFnZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5sb2NhbFN1cHBvcnRlZCk7XG59O1xudmFyIGhhdmVTZXNzaW9uU3RvcmFnZSA9ICgpID0+IHtcbiAgdmFyIF9hMjtcbiAgcmV0dXJuIHR5cGVvZiBQbGF0Zm9ybS5XZWJTdG9yYWdlICE9PSBcInVuZGVmaW5lZFwiICYmICgoX2EyID0gUGxhdGZvcm0uV2ViU3RvcmFnZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5zZXNzaW9uU3VwcG9ydGVkKTtcbn07XG52YXIgbm9vcCA9IGZ1bmN0aW9uKCkge1xufTtcbnZhciB0cmFuc3BvcnRQcmVmZXJlbmNlTmFtZSA9IFwiYWJseS10cmFuc3BvcnQtcHJlZmVyZW5jZVwiO1xuZnVuY3Rpb24gYnVuZGxlV2l0aChkZXN0LCBzcmMsIG1heFNpemUpIHtcbiAgbGV0IGFjdGlvbjtcbiAgaWYgKGRlc3QuY2hhbm5lbCAhPT0gc3JjLmNoYW5uZWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKChhY3Rpb24gPSBkZXN0LmFjdGlvbikgIT09IGFjdGlvbnMyLlBSRVNFTkNFICYmIGFjdGlvbiAhPT0gYWN0aW9uczIuTUVTU0FHRSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoYWN0aW9uICE9PSBzcmMuYWN0aW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGtpbmQgPSBhY3Rpb24gPT09IGFjdGlvbnMyLlBSRVNFTkNFID8gXCJwcmVzZW5jZVwiIDogXCJtZXNzYWdlc1wiLCBwcm9wb3NlZCA9IGRlc3Rba2luZF0uY29uY2F0KHNyY1traW5kXSksIHNpemUgPSBnZXRNZXNzYWdlc1NpemUocHJvcG9zZWQpO1xuICBpZiAoc2l6ZSA+IG1heFNpemUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKCFhbGxTYW1lKHByb3Bvc2VkLCBcImNsaWVudElkXCIpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICghcHJvcG9zZWQuZXZlcnkoZnVuY3Rpb24obXNnKSB7XG4gICAgcmV0dXJuICFtc2cuaWQ7XG4gIH0pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGRlc3Rba2luZF0gPSBwcm9wb3NlZDtcbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBkZWNvZGVSZWNvdmVyeUtleShyZWNvdmVyeUtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHJlY292ZXJ5S2V5KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG52YXIgVHJhbnNwb3J0UGFyYW1zID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zLCBob3N0LCBtb2RlLCBjb25uZWN0aW9uS2V5KSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmhvc3QgPSBob3N0O1xuICAgIHRoaXMubW9kZSA9IG1vZGU7XG4gICAgdGhpcy5jb25uZWN0aW9uS2V5ID0gY29ubmVjdGlvbktleTtcbiAgICB0aGlzLmZvcm1hdCA9IG9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBcIm1zZ3BhY2tcIiAvKiBtc2dwYWNrICovIDogXCJqc29uXCIgLyoganNvbiAqLztcbiAgfVxuICBnZXRDb25uZWN0UGFyYW1zKGF1dGhQYXJhbXMpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBhdXRoUGFyYW1zID8gY29weShhdXRoUGFyYW1zKSA6IHt9O1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgc3dpdGNoICh0aGlzLm1vZGUpIHtcbiAgICAgIGNhc2UgXCJyZXN1bWVcIjpcbiAgICAgICAgcGFyYW1zLnJlc3VtZSA9IHRoaXMuY29ubmVjdGlvbktleTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwicmVjb3ZlclwiOiB7XG4gICAgICAgIGNvbnN0IHJlY292ZXJ5Q29udGV4dCA9IGRlY29kZVJlY292ZXJ5S2V5KG9wdGlvbnMucmVjb3Zlcik7XG4gICAgICAgIGlmIChyZWNvdmVyeUNvbnRleHQpIHtcbiAgICAgICAgICBwYXJhbXMucmVjb3ZlciA9IHJlY292ZXJ5Q29udGV4dC5jb25uZWN0aW9uS2V5O1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuY2xpZW50SWQgIT09IHZvaWQgMCkge1xuICAgICAgcGFyYW1zLmNsaWVudElkID0gb3B0aW9ucy5jbGllbnRJZDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuZWNob01lc3NhZ2VzID09PSBmYWxzZSkge1xuICAgICAgcGFyYW1zLmVjaG8gPSBcImZhbHNlXCI7XG4gICAgfVxuICAgIGlmICh0aGlzLmZvcm1hdCAhPT0gdm9pZCAwKSB7XG4gICAgICBwYXJhbXMuZm9ybWF0ID0gdGhpcy5mb3JtYXQ7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0cmVhbSAhPT0gdm9pZCAwKSB7XG4gICAgICBwYXJhbXMuc3RyZWFtID0gdGhpcy5zdHJlYW07XG4gICAgfVxuICAgIGlmICh0aGlzLmhlYXJ0YmVhdHMgIT09IHZvaWQgMCkge1xuICAgICAgcGFyYW1zLmhlYXJ0YmVhdHMgPSB0aGlzLmhlYXJ0YmVhdHM7XG4gICAgfVxuICAgIHBhcmFtcy52ID0gZGVmYXVsdHNfZGVmYXVsdC5wcm90b2NvbFZlcnNpb247XG4gICAgcGFyYW1zLmFnZW50ID0gZ2V0QWdlbnRTdHJpbmcodGhpcy5vcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy50cmFuc3BvcnRQYXJhbXMgIT09IHZvaWQgMCkge1xuICAgICAgbWl4aW4ocGFyYW1zLCBvcHRpb25zLnRyYW5zcG9ydFBhcmFtcyk7XG4gICAgfVxuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IHJlc3VsdCA9IFwiW21vZGU9XCIgKyB0aGlzLm1vZGU7XG4gICAgaWYgKHRoaXMuaG9zdCkge1xuICAgICAgcmVzdWx0ICs9IFwiLGhvc3Q9XCIgKyB0aGlzLmhvc3Q7XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbm5lY3Rpb25LZXkpIHtcbiAgICAgIHJlc3VsdCArPSBcIixjb25uZWN0aW9uS2V5PVwiICsgdGhpcy5jb25uZWN0aW9uS2V5O1xuICAgIH1cbiAgICBpZiAodGhpcy5mb3JtYXQpIHtcbiAgICAgIHJlc3VsdCArPSBcIixmb3JtYXQ9XCIgKyB0aGlzLmZvcm1hdDtcbiAgICB9XG4gICAgcmVzdWx0ICs9IFwiXVwiO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG52YXIgQ29ubmVjdGlvbk1hbmFnZXIgPSBjbGFzcyBfQ29ubmVjdGlvbk1hbmFnZXIgZXh0ZW5kcyBldmVudGVtaXR0ZXJfZGVmYXVsdCB7XG4gIGNvbnN0cnVjdG9yKHJlYWx0aW1lLCBvcHRpb25zKSB7XG4gICAgc3VwZXIocmVhbHRpbWUubG9nZ2VyKTtcbiAgICB0aGlzLnN1cHBvcnRlZFRyYW5zcG9ydHMgPSB7fTtcbiAgICB0aGlzLmRpc2Nvbm5lY3RlZFJldHJ5Q291bnQgPSAwO1xuICAgIHRoaXMucGVuZGluZ0NoYW5uZWxNZXNzYWdlc1N0YXRlID0geyBpc1Byb2Nlc3Npbmc6IGZhbHNlLCBxdWV1ZTogW10gfTtcbiAgICB0aGlzLnJlYWx0aW1lID0gcmVhbHRpbWU7XG4gICAgdGhpcy5pbml0VHJhbnNwb3J0cygpO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgY29uc3QgdGltZW91dHMgPSBvcHRpb25zLnRpbWVvdXRzO1xuICAgIGNvbnN0IGNvbm5lY3RpbmdUaW1lb3V0ID0gdGltZW91dHMud2ViU29ja2V0Q29ubmVjdFRpbWVvdXQgKyB0aW1lb3V0cy5yZWFsdGltZVJlcXVlc3RUaW1lb3V0O1xuICAgIHRoaXMuc3RhdGVzID0ge1xuICAgICAgaW5pdGlhbGl6ZWQ6IHtcbiAgICAgICAgc3RhdGU6IFwiaW5pdGlhbGl6ZWRcIixcbiAgICAgICAgdGVybWluYWw6IGZhbHNlLFxuICAgICAgICBxdWV1ZUV2ZW50czogdHJ1ZSxcbiAgICAgICAgc2VuZEV2ZW50czogZmFsc2UsXG4gICAgICAgIGZhaWxTdGF0ZTogXCJkaXNjb25uZWN0ZWRcIlxuICAgICAgfSxcbiAgICAgIGNvbm5lY3Rpbmc6IHtcbiAgICAgICAgc3RhdGU6IFwiY29ubmVjdGluZ1wiLFxuICAgICAgICB0ZXJtaW5hbDogZmFsc2UsXG4gICAgICAgIHF1ZXVlRXZlbnRzOiB0cnVlLFxuICAgICAgICBzZW5kRXZlbnRzOiBmYWxzZSxcbiAgICAgICAgcmV0cnlEZWxheTogY29ubmVjdGluZ1RpbWVvdXQsXG4gICAgICAgIGZhaWxTdGF0ZTogXCJkaXNjb25uZWN0ZWRcIlxuICAgICAgfSxcbiAgICAgIGNvbm5lY3RlZDoge1xuICAgICAgICBzdGF0ZTogXCJjb25uZWN0ZWRcIixcbiAgICAgICAgdGVybWluYWw6IGZhbHNlLFxuICAgICAgICBxdWV1ZUV2ZW50czogZmFsc2UsXG4gICAgICAgIHNlbmRFdmVudHM6IHRydWUsXG4gICAgICAgIGZhaWxTdGF0ZTogXCJkaXNjb25uZWN0ZWRcIlxuICAgICAgfSxcbiAgICAgIGRpc2Nvbm5lY3RlZDoge1xuICAgICAgICBzdGF0ZTogXCJkaXNjb25uZWN0ZWRcIixcbiAgICAgICAgdGVybWluYWw6IGZhbHNlLFxuICAgICAgICBxdWV1ZUV2ZW50czogdHJ1ZSxcbiAgICAgICAgc2VuZEV2ZW50czogZmFsc2UsXG4gICAgICAgIHJldHJ5RGVsYXk6IHRpbWVvdXRzLmRpc2Nvbm5lY3RlZFJldHJ5VGltZW91dCxcbiAgICAgICAgZmFpbFN0YXRlOiBcImRpc2Nvbm5lY3RlZFwiXG4gICAgICB9LFxuICAgICAgc3VzcGVuZGVkOiB7XG4gICAgICAgIHN0YXRlOiBcInN1c3BlbmRlZFwiLFxuICAgICAgICB0ZXJtaW5hbDogZmFsc2UsXG4gICAgICAgIHF1ZXVlRXZlbnRzOiBmYWxzZSxcbiAgICAgICAgc2VuZEV2ZW50czogZmFsc2UsXG4gICAgICAgIHJldHJ5RGVsYXk6IHRpbWVvdXRzLnN1c3BlbmRlZFJldHJ5VGltZW91dCxcbiAgICAgICAgZmFpbFN0YXRlOiBcInN1c3BlbmRlZFwiXG4gICAgICB9LFxuICAgICAgY2xvc2luZzoge1xuICAgICAgICBzdGF0ZTogXCJjbG9zaW5nXCIsXG4gICAgICAgIHRlcm1pbmFsOiBmYWxzZSxcbiAgICAgICAgcXVldWVFdmVudHM6IGZhbHNlLFxuICAgICAgICBzZW5kRXZlbnRzOiBmYWxzZSxcbiAgICAgICAgcmV0cnlEZWxheTogdGltZW91dHMucmVhbHRpbWVSZXF1ZXN0VGltZW91dCxcbiAgICAgICAgZmFpbFN0YXRlOiBcImNsb3NlZFwiXG4gICAgICB9LFxuICAgICAgY2xvc2VkOiB7IHN0YXRlOiBcImNsb3NlZFwiLCB0ZXJtaW5hbDogdHJ1ZSwgcXVldWVFdmVudHM6IGZhbHNlLCBzZW5kRXZlbnRzOiBmYWxzZSwgZmFpbFN0YXRlOiBcImNsb3NlZFwiIH0sXG4gICAgICBmYWlsZWQ6IHsgc3RhdGU6IFwiZmFpbGVkXCIsIHRlcm1pbmFsOiB0cnVlLCBxdWV1ZUV2ZW50czogZmFsc2UsIHNlbmRFdmVudHM6IGZhbHNlLCBmYWlsU3RhdGU6IFwiZmFpbGVkXCIgfVxuICAgIH07XG4gICAgdGhpcy5zdGF0ZSA9IHRoaXMuc3RhdGVzLmluaXRpYWxpemVkO1xuICAgIHRoaXMuZXJyb3JSZWFzb24gPSBudWxsO1xuICAgIHRoaXMucXVldWVkTWVzc2FnZXMgPSBuZXcgbWVzc2FnZXF1ZXVlX2RlZmF1bHQodGhpcy5sb2dnZXIpO1xuICAgIHRoaXMubXNnU2VyaWFsID0gMDtcbiAgICB0aGlzLmNvbm5lY3Rpb25EZXRhaWxzID0gdm9pZCAwO1xuICAgIHRoaXMuY29ubmVjdGlvbklkID0gdm9pZCAwO1xuICAgIHRoaXMuY29ubmVjdGlvbktleSA9IHZvaWQgMDtcbiAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZVR0bCA9IHRpbWVvdXRzLmNvbm5lY3Rpb25TdGF0ZVR0bDtcbiAgICB0aGlzLm1heElkbGVJbnRlcnZhbCA9IG51bGw7XG4gICAgdGhpcy50cmFuc3BvcnRzID0gaW50ZXJzZWN0KG9wdGlvbnMudHJhbnNwb3J0cyB8fCBkZWZhdWx0c19kZWZhdWx0LmRlZmF1bHRUcmFuc3BvcnRzLCB0aGlzLnN1cHBvcnRlZFRyYW5zcG9ydHMpO1xuICAgIHRoaXMudHJhbnNwb3J0UHJlZmVyZW5jZSA9IG51bGw7XG4gICAgaWYgKHRoaXMudHJhbnNwb3J0cy5pbmNsdWRlcyhUcmFuc3BvcnROYW1lcy5XZWJTb2NrZXQpKSB7XG4gICAgICB0aGlzLndlYlNvY2tldFRyYW5zcG9ydEF2YWlsYWJsZSA9IHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnRyYW5zcG9ydHMuaW5jbHVkZXMoVHJhbnNwb3J0TmFtZXMuWGhyUG9sbGluZykpIHtcbiAgICAgIHRoaXMuYmFzZVRyYW5zcG9ydCA9IFRyYW5zcG9ydE5hbWVzLlhoclBvbGxpbmc7XG4gICAgfSBlbHNlIGlmICh0aGlzLnRyYW5zcG9ydHMuaW5jbHVkZXMoVHJhbnNwb3J0TmFtZXMuQ29tZXQpKSB7XG4gICAgICB0aGlzLmJhc2VUcmFuc3BvcnQgPSBUcmFuc3BvcnROYW1lcy5Db21ldDtcbiAgICB9XG4gICAgdGhpcy5odHRwSG9zdHMgPSBkZWZhdWx0c19kZWZhdWx0LmdldEhvc3RzKG9wdGlvbnMpO1xuICAgIHRoaXMud3NIb3N0cyA9IGRlZmF1bHRzX2RlZmF1bHQuZ2V0SG9zdHMob3B0aW9ucywgdHJ1ZSk7XG4gICAgdGhpcy5hY3RpdmVQcm90b2NvbCA9IG51bGw7XG4gICAgdGhpcy5ob3N0ID0gbnVsbDtcbiAgICB0aGlzLmxhc3RBdXRvUmVjb25uZWN0QXR0ZW1wdCA9IG51bGw7XG4gICAgdGhpcy5sYXN0QWN0aXZpdHkgPSBudWxsO1xuICAgIHRoaXMuZm9yY2VGYWxsYmFja0hvc3QgPSBmYWxzZTtcbiAgICB0aGlzLmNvbm5lY3RDb3VudGVyID0gMDtcbiAgICB0aGlzLndzQ2hlY2tSZXN1bHQgPSBudWxsO1xuICAgIHRoaXMud2ViU29ja2V0U2xvd1RpbWVyID0gbnVsbDtcbiAgICB0aGlzLndlYlNvY2tldEdpdmVVcFRpbWVyID0gbnVsbDtcbiAgICB0aGlzLmFiYW5kb25lZFdlYlNvY2tldCA9IGZhbHNlO1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIlJlYWx0aW1lLkNvbm5lY3Rpb25NYW5hZ2VyKClcIiwgXCJzdGFydGVkXCIpO1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgXCJSZWFsdGltZS5Db25uZWN0aW9uTWFuYWdlcigpXCIsXG4gICAgICBcInJlcXVlc3RlZCB0cmFuc3BvcnRzID0gW1wiICsgKG9wdGlvbnMudHJhbnNwb3J0cyB8fCBkZWZhdWx0c19kZWZhdWx0LmRlZmF1bHRUcmFuc3BvcnRzKSArIFwiXVwiXG4gICAgKTtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICB0aGlzLmxvZ2dlcixcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTyxcbiAgICAgIFwiUmVhbHRpbWUuQ29ubmVjdGlvbk1hbmFnZXIoKVwiLFxuICAgICAgXCJhdmFpbGFibGUgdHJhbnNwb3J0cyA9IFtcIiArIHRoaXMudHJhbnNwb3J0cyArIFwiXVwiXG4gICAgKTtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICB0aGlzLmxvZ2dlcixcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTyxcbiAgICAgIFwiUmVhbHRpbWUuQ29ubmVjdGlvbk1hbmFnZXIoKVwiLFxuICAgICAgXCJodHRwIGhvc3RzID0gW1wiICsgdGhpcy5odHRwSG9zdHMgKyBcIl1cIlxuICAgICk7XG4gICAgaWYgKCF0aGlzLnRyYW5zcG9ydHMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBtc2cgPSBcIm5vIHJlcXVlc3RlZCB0cmFuc3BvcnRzIGF2YWlsYWJsZVwiO1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIFwicmVhbHRpbWUuQ29ubmVjdGlvbk1hbmFnZXIoKVwiLCBtc2cpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxuICAgIGNvbnN0IGFkZEV2ZW50TGlzdGVuZXIgPSBQbGF0Zm9ybS5Db25maWcuYWRkRXZlbnRMaXN0ZW5lcjtcbiAgICBpZiAoYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgaWYgKGhhdmVTZXNzaW9uU3RvcmFnZSgpICYmIHR5cGVvZiBvcHRpb25zLnJlY292ZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBhZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIHRoaXMucGVyc2lzdENvbm5lY3Rpb24uYmluZCh0aGlzKSk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5jbG9zZU9uVW5sb2FkID09PSB0cnVlKSB7XG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgKCkgPT4ge1xuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01BSk9SLFxuICAgICAgICAgICAgXCJSZWFsdGltZS5Db25uZWN0aW9uTWFuYWdlcigpXCIsXG4gICAgICAgICAgICBcImJlZm9yZXVubG9hZCBldmVudCBoYXMgdHJpZ2dlcmVkIHRoZSBjb25uZWN0aW9uIHRvIGNsb3NlIGFzIGNsb3NlT25VbmxvYWQgaXMgdHJ1ZVwiXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLnJlcXVlc3RTdGF0ZSh7IHN0YXRlOiBcImNsb3NpbmdcIiB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBhZGRFdmVudExpc3RlbmVyKFwib25saW5lXCIsICgpID0+IHtcbiAgICAgICAgdmFyIF9hMjtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT0gdGhpcy5zdGF0ZXMuZGlzY29ubmVjdGVkIHx8IHRoaXMuc3RhdGUgPT0gdGhpcy5zdGF0ZXMuc3VzcGVuZGVkKSB7XG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyIGNhdWdodCBicm93c2VyIFxcdTIwMThvbmxpbmVcXHUyMDE5IGV2ZW50XCIsXG4gICAgICAgICAgICBcInJlYXR0ZW1wdGluZyBjb25uZWN0aW9uXCJcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMucmVxdWVzdFN0YXRlKHsgc3RhdGU6IFwiY29ubmVjdGluZ1wiIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgPT0gdGhpcy5zdGF0ZXMuY29ubmVjdGluZykge1xuICAgICAgICAgIChfYTIgPSB0aGlzLnBlbmRpbmdUcmFuc3BvcnQpID09IG51bGwgPyB2b2lkIDAgOiBfYTIub2ZmKCk7XG4gICAgICAgICAgdGhpcy5kaXNjb25uZWN0QWxsVHJhbnNwb3J0cygpO1xuICAgICAgICAgIHRoaXMuc3RhcnRDb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIiwgKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PSB0aGlzLnN0YXRlcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIgY2F1Z2h0IGJyb3dzZXIgXFx1MjAxOG9mZmxpbmVcXHUyMDE5IGV2ZW50XCIsXG4gICAgICAgICAgICBcImRpc2Nvbm5lY3RpbmcgYWN0aXZlIHRyYW5zcG9ydFwiXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3RBbGxUcmFuc3BvcnRzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvKioqKioqKioqKioqKioqKioqKioqXG4gICAqIHRyYW5zcG9ydCBtYW5hZ2VtZW50XG4gICAqKioqKioqKioqKioqKioqKioqKiovXG4gIC8vIFVzZWQgYnkgdGVzdHNcbiAgc3RhdGljIHN1cHBvcnRlZFRyYW5zcG9ydHMoYWRkaXRpb25hbEltcGxlbWVudGF0aW9ucykge1xuICAgIGNvbnN0IHN0b3JhZ2UgPSB7IHN1cHBvcnRlZFRyYW5zcG9ydHM6IHt9IH07XG4gICAgdGhpcy5pbml0VHJhbnNwb3J0cyhhZGRpdGlvbmFsSW1wbGVtZW50YXRpb25zLCBzdG9yYWdlKTtcbiAgICByZXR1cm4gc3RvcmFnZS5zdXBwb3J0ZWRUcmFuc3BvcnRzO1xuICB9XG4gIHN0YXRpYyBpbml0VHJhbnNwb3J0cyhhZGRpdGlvbmFsSW1wbGVtZW50YXRpb25zLCBzdG9yYWdlKSB7XG4gICAgY29uc3QgaW1wbGVtZW50YXRpb25zID0gX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe30sIFBsYXRmb3JtLlRyYW5zcG9ydHMuYnVuZGxlZEltcGxlbWVudGF0aW9ucyksIGFkZGl0aW9uYWxJbXBsZW1lbnRhdGlvbnMpO1xuICAgIFtUcmFuc3BvcnROYW1lcy5XZWJTb2NrZXQsIC4uLlBsYXRmb3JtLlRyYW5zcG9ydHMub3JkZXJdLmZvckVhY2goKHRyYW5zcG9ydE5hbWUpID0+IHtcbiAgICAgIGNvbnN0IHRyYW5zcG9ydCA9IGltcGxlbWVudGF0aW9uc1t0cmFuc3BvcnROYW1lXTtcbiAgICAgIGlmICh0cmFuc3BvcnQgJiYgdHJhbnNwb3J0LmlzQXZhaWxhYmxlKCkpIHtcbiAgICAgICAgc3RvcmFnZS5zdXBwb3J0ZWRUcmFuc3BvcnRzW3RyYW5zcG9ydE5hbWVdID0gdHJhbnNwb3J0O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGluaXRUcmFuc3BvcnRzKCkge1xuICAgIF9Db25uZWN0aW9uTWFuYWdlci5pbml0VHJhbnNwb3J0cyh0aGlzLnJlYWx0aW1lLl9hZGRpdGlvbmFsVHJhbnNwb3J0SW1wbGVtZW50YXRpb25zLCB0aGlzKTtcbiAgfVxuICBjcmVhdGVUcmFuc3BvcnRQYXJhbXMoaG9zdCwgbW9kZSkge1xuICAgIHJldHVybiBuZXcgVHJhbnNwb3J0UGFyYW1zKHRoaXMub3B0aW9ucywgaG9zdCwgbW9kZSwgdGhpcy5jb25uZWN0aW9uS2V5KTtcbiAgfVxuICBnZXRUcmFuc3BvcnRQYXJhbXMoY2FsbGJhY2spIHtcbiAgICBjb25zdCBkZWNpZGVNb2RlID0gKG1vZGVDYikgPT4ge1xuICAgICAgaWYgKHRoaXMuY29ubmVjdGlvbktleSkge1xuICAgICAgICBtb2RlQ2IoXCJyZXN1bWVcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLnJlY292ZXIgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgbW9kZUNiKFwicmVjb3ZlclwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVjb3ZlckZuID0gdGhpcy5vcHRpb25zLnJlY292ZXIsIGxhc3RTZXNzaW9uRGF0YSA9IHRoaXMuZ2V0U2Vzc2lvblJlY292ZXJEYXRhKCksIHNlc3Npb25SZWNvdmVyeU5hbWUgPSB0aGlzLnNlc3Npb25SZWNvdmVyeU5hbWUoKTtcbiAgICAgIGlmIChsYXN0U2Vzc2lvbkRhdGEgJiYgdHlwZW9mIHJlY292ZXJGbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5nZXRUcmFuc3BvcnRQYXJhbXMoKVwiLFxuICAgICAgICAgIFwiQ2FsbGluZyBjbGllbnRPcHRpb25zLXByb3ZpZGVkIHJlY292ZXIgZnVuY3Rpb24gd2l0aCBsYXN0IHNlc3Npb24gZGF0YSAocmVjb3Zlcnkgc2NvcGU6IFwiICsgc2Vzc2lvblJlY292ZXJ5TmFtZSArIFwiKVwiXG4gICAgICAgICk7XG4gICAgICAgIHJlY292ZXJGbihsYXN0U2Vzc2lvbkRhdGEsIChzaG91bGRSZWNvdmVyKSA9PiB7XG4gICAgICAgICAgaWYgKHNob3VsZFJlY292ZXIpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5yZWNvdmVyID0gbGFzdFNlc3Npb25EYXRhLnJlY292ZXJ5S2V5O1xuICAgICAgICAgICAgbW9kZUNiKFwicmVjb3ZlclwiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kZUNiKFwiY2xlYW5cIik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbW9kZUNiKFwiY2xlYW5cIik7XG4gICAgfTtcbiAgICBkZWNpZGVNb2RlKChtb2RlKSA9PiB7XG4gICAgICBjb25zdCB0cmFuc3BvcnRQYXJhbXMgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydFBhcmFtcyhudWxsLCBtb2RlKTtcbiAgICAgIGlmIChtb2RlID09PSBcInJlY292ZXJcIikge1xuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuZ2V0VHJhbnNwb3J0UGFyYW1zKClcIixcbiAgICAgICAgICBcIlRyYW5zcG9ydCByZWNvdmVyeSBtb2RlID0gcmVjb3ZlcjsgcmVjb3ZlcnlLZXkgPSBcIiArIHRoaXMub3B0aW9ucy5yZWNvdmVyXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHJlY292ZXJ5Q29udGV4dCA9IGRlY29kZVJlY292ZXJ5S2V5KHRoaXMub3B0aW9ucy5yZWNvdmVyKTtcbiAgICAgICAgaWYgKHJlY292ZXJ5Q29udGV4dCkge1xuICAgICAgICAgIHRoaXMubXNnU2VyaWFsID0gcmVjb3ZlcnlDb250ZXh0Lm1zZ1NlcmlhbDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLmdldFRyYW5zcG9ydFBhcmFtcygpXCIsXG4gICAgICAgICAgXCJUcmFuc3BvcnQgcGFyYW1zID0gXCIgKyB0cmFuc3BvcnRQYXJhbXMudG9TdHJpbmcoKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY2FsbGJhY2sodHJhbnNwb3J0UGFyYW1zKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQXR0ZW1wdCB0byBjb25uZWN0IHVzaW5nIGEgZ2l2ZW4gdHJhbnNwb3J0XG4gICAqIEBwYXJhbSB0cmFuc3BvcnRQYXJhbXNcbiAgICogQHBhcmFtIGNhbmRpZGF0ZSwgdGhlIHRyYW5zcG9ydCB0byB0cnlcbiAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAqL1xuICB0cnlBVHJhbnNwb3J0KHRyYW5zcG9ydFBhcmFtcywgY2FuZGlkYXRlLCBjYWxsYmFjaykge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLCBcIkNvbm5lY3Rpb25NYW5hZ2VyLnRyeUFUcmFuc3BvcnQoKVwiLCBcInRyeWluZyBcIiArIGNhbmRpZGF0ZSk7XG4gICAgdGhpcy5wcm9wb3NlZFRyYW5zcG9ydCA9IHRyYW5zcG9ydF9kZWZhdWx0LnRyeUNvbm5lY3QoXG4gICAgICB0aGlzLnN1cHBvcnRlZFRyYW5zcG9ydHNbY2FuZGlkYXRlXSxcbiAgICAgIHRoaXMsXG4gICAgICB0aGlzLnJlYWx0aW1lLmF1dGgsXG4gICAgICB0cmFuc3BvcnRQYXJhbXMsXG4gICAgICAod3JhcHBlZEVyciwgdHJhbnNwb3J0KSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgaWYgKHN0YXRlID09IHRoaXMuc3RhdGVzLmNsb3NpbmcgfHwgc3RhdGUgPT0gdGhpcy5zdGF0ZXMuY2xvc2VkIHx8IHN0YXRlID09IHRoaXMuc3RhdGVzLmZhaWxlZCkge1xuICAgICAgICAgIGlmICh0cmFuc3BvcnQpIHtcbiAgICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgICAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci50cnlBVHJhbnNwb3J0KClcIixcbiAgICAgICAgICAgICAgXCJjb25uZWN0aW9uIFwiICsgc3RhdGUuc3RhdGUgKyBcIiB3aGlsZSB3ZSB3ZXJlIGF0dGVtcHRpbmcgdGhlIHRyYW5zcG9ydDsgY2xvc2luZyBcIiArIHRyYW5zcG9ydFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRyYW5zcG9ydC5jbG9zZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdyYXBwZWRFcnIpIHtcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIudHJ5QVRyYW5zcG9ydCgpXCIsXG4gICAgICAgICAgICBcInRyYW5zcG9ydCBcIiArIGNhbmRpZGF0ZSArIFwiIFwiICsgd3JhcHBlZEVyci5ldmVudCArIFwiLCBlcnI6IFwiICsgd3JhcHBlZEVyci5lcnJvci50b1N0cmluZygpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoYXV0aF9kZWZhdWx0LmlzVG9rZW5FcnIod3JhcHBlZEVyci5lcnJvcikgJiYgISh0aGlzLmVycm9yUmVhc29uICYmIGF1dGhfZGVmYXVsdC5pc1Rva2VuRXJyKHRoaXMuZXJyb3JSZWFzb24pKSkge1xuICAgICAgICAgICAgdGhpcy5lcnJvclJlYXNvbiA9IHdyYXBwZWRFcnIuZXJyb3I7XG4gICAgICAgICAgICB3aGVuUHJvbWlzZVNldHRsZXModGhpcy5yZWFsdGltZS5hdXRoLl9mb3JjZU5ld1Rva2VuKG51bGwsIG51bGwpLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdE9uRXJyb3JGcm9tQXV0aG9yaXplKGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRoaXMudHJ5QVRyYW5zcG9ydCh0cmFuc3BvcnRQYXJhbXMsIGNhbmRpZGF0ZSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh3cmFwcGVkRXJyLmV2ZW50ID09PSBcImZhaWxlZFwiKSB7XG4gICAgICAgICAgICB0aGlzLm5vdGlmeVN0YXRlKHsgc3RhdGU6IFwiZmFpbGVkXCIsIGVycm9yOiB3cmFwcGVkRXJyLmVycm9yIH0pO1xuICAgICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh3cmFwcGVkRXJyLmV2ZW50ID09PSBcImRpc2Nvbm5lY3RlZFwiKSB7XG4gICAgICAgICAgICBpZiAoIWlzUmV0cmlhYmxlKHdyYXBwZWRFcnIuZXJyb3IpKSB7XG4gICAgICAgICAgICAgIHRoaXMubm90aWZ5U3RhdGUoeyBzdGF0ZTogdGhpcy5zdGF0ZXMuY29ubmVjdGluZy5mYWlsU3RhdGUsIGVycm9yOiB3cmFwcGVkRXJyLmVycm9yIH0pO1xuICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci50cnlBVHJhbnNwb3J0KClcIixcbiAgICAgICAgICBcInZpYWJsZSB0cmFuc3BvcnQgXCIgKyBjYW5kaWRhdGUgKyBcIjsgc2V0dGluZyBwZW5kaW5nXCJcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zZXRUcmFuc3BvcnRQZW5kaW5nKHRyYW5zcG9ydCwgdHJhbnNwb3J0UGFyYW1zKTtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgdHJhbnNwb3J0KTtcbiAgICAgIH1cbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhIHRyYW5zcG9ydCBpcyBpbmRpY2F0ZWQgdG8gYmUgdmlhYmxlLCBhbmQgdGhlIENvbm5lY3Rpb25NYW5hZ2VyXG4gICAqIGV4cGVjdHMgdG8gYWN0aXZhdGUgdGhpcyB0cmFuc3BvcnQgYXMgc29vbiBhcyBpdCBpcyBjb25uZWN0ZWQuXG4gICAqIEBwYXJhbSB0cmFuc3BvcnRcbiAgICogQHBhcmFtIHRyYW5zcG9ydFBhcmFtc1xuICAgKi9cbiAgc2V0VHJhbnNwb3J0UGVuZGluZyh0cmFuc3BvcnQsIHRyYW5zcG9ydFBhcmFtcykge1xuICAgIGNvbnN0IG1vZGUgPSB0cmFuc3BvcnRQYXJhbXMubW9kZTtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICB0aGlzLmxvZ2dlcixcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuc2V0VHJhbnNwb3J0UGVuZGluZygpXCIsXG4gICAgICBcInRyYW5zcG9ydCA9IFwiICsgdHJhbnNwb3J0ICsgXCI7IG1vZGUgPSBcIiArIG1vZGVcbiAgICApO1xuICAgIHRoaXMucGVuZGluZ1RyYW5zcG9ydCA9IHRyYW5zcG9ydDtcbiAgICB0aGlzLmNhbmNlbFdlYlNvY2tldFNsb3dUaW1lcigpO1xuICAgIHRoaXMuY2FuY2VsV2ViU29ja2V0R2l2ZVVwVGltZXIoKTtcbiAgICB0cmFuc3BvcnQub25jZShcImNvbm5lY3RlZFwiLCAoZXJyb3IsIGNvbm5lY3Rpb25JZCwgY29ubmVjdGlvbkRldGFpbHMpID0+IHtcbiAgICAgIHRoaXMuYWN0aXZhdGVUcmFuc3BvcnQoZXJyb3IsIHRyYW5zcG9ydCwgY29ubmVjdGlvbklkLCBjb25uZWN0aW9uRGV0YWlscyk7XG4gICAgICBpZiAobW9kZSA9PT0gXCJyZWNvdmVyXCIgJiYgdGhpcy5vcHRpb25zLnJlY292ZXIpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMub3B0aW9ucy5yZWNvdmVyO1xuICAgICAgICB0aGlzLnVucGVyc2lzdENvbm5lY3Rpb24oKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBzZWxmMiA9IHRoaXM7XG4gICAgdHJhbnNwb3J0Lm9uKFtcImRpc2Nvbm5lY3RlZFwiLCBcImNsb3NlZFwiLCBcImZhaWxlZFwiXSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgIHNlbGYyLmRlYWN0aXZhdGVUcmFuc3BvcnQodHJhbnNwb3J0LCB0aGlzLmV2ZW50LCBlcnJvcik7XG4gICAgfSk7XG4gICAgdGhpcy5lbWl0KFwidHJhbnNwb3J0LnBlbmRpbmdcIiwgdHJhbnNwb3J0KTtcbiAgfVxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gYSB0cmFuc3BvcnQgaXMgY29ubmVjdGVkLCBhbmQgdGhlIGNvbm5lY3Rpb25tYW5hZ2VyIGRlY2lkZXMgdGhhdFxuICAgKiBpdCB3aWxsIG5vdyBiZSB0aGUgYWN0aXZlIHRyYW5zcG9ydC4gUmV0dXJucyB3aGV0aGVyIG9yIG5vdCBpdCBhY3RpdmF0ZWRcbiAgICogdGhlIHRyYW5zcG9ydCAoaWYgdGhlIGNvbm5lY3Rpb24gaXMgY2xvc2luZy9jbG9zZWQgaXQgd2lsbCBjaG9vc2Ugbm90IHRvKS5cbiAgICogQHBhcmFtIHRyYW5zcG9ydCB0aGUgdHJhbnNwb3J0IGluc3RhbmNlXG4gICAqIEBwYXJhbSBjb25uZWN0aW9uSWQgdGhlIGlkIG9mIHRoZSBuZXcgYWN0aXZlIGNvbm5lY3Rpb25cbiAgICogQHBhcmFtIGNvbm5lY3Rpb25EZXRhaWxzIHRoZSBkZXRhaWxzIG9mIHRoZSBuZXcgYWN0aXZlIGNvbm5lY3Rpb25cbiAgICovXG4gIGFjdGl2YXRlVHJhbnNwb3J0KGVycm9yLCB0cmFuc3BvcnQsIGNvbm5lY3Rpb25JZCwgY29ubmVjdGlvbkRldGFpbHMpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICB0aGlzLmxvZ2dlcixcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuYWN0aXZhdGVUcmFuc3BvcnQoKVwiLFxuICAgICAgXCJ0cmFuc3BvcnQgPSBcIiArIHRyYW5zcG9ydFxuICAgICk7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUiwgXCJDb25uZWN0aW9uTWFuYWdlci5hY3RpdmF0ZVRyYW5zcG9ydCgpXCIsIFwiZXJyb3IgPSBcIiArIGVycm9yKTtcbiAgICB9XG4gICAgaWYgKGNvbm5lY3Rpb25JZCkge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLmFjdGl2YXRlVHJhbnNwb3J0KClcIixcbiAgICAgICAgXCJjb25uZWN0aW9uSWQgPSAgXCIgKyBjb25uZWN0aW9uSWRcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChjb25uZWN0aW9uRGV0YWlscykge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLmFjdGl2YXRlVHJhbnNwb3J0KClcIixcbiAgICAgICAgXCJjb25uZWN0aW9uRGV0YWlscyA9ICBcIiArIEpTT04uc3RyaW5naWZ5KGNvbm5lY3Rpb25EZXRhaWxzKVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5wZXJzaXN0VHJhbnNwb3J0UHJlZmVyZW5jZSh0cmFuc3BvcnQpO1xuICAgIGNvbnN0IGV4aXN0aW5nU3RhdGUgPSB0aGlzLnN0YXRlLCBjb25uZWN0ZWRTdGF0ZSA9IHRoaXMuc3RhdGVzLmNvbm5lY3RlZC5zdGF0ZTtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICB0aGlzLmxvZ2dlcixcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuYWN0aXZhdGVUcmFuc3BvcnQoKVwiLFxuICAgICAgXCJjdXJyZW50IHN0YXRlID0gXCIgKyBleGlzdGluZ1N0YXRlLnN0YXRlXG4gICAgKTtcbiAgICBpZiAoZXhpc3RpbmdTdGF0ZS5zdGF0ZSA9PSB0aGlzLnN0YXRlcy5jbG9zaW5nLnN0YXRlIHx8IGV4aXN0aW5nU3RhdGUuc3RhdGUgPT0gdGhpcy5zdGF0ZXMuY2xvc2VkLnN0YXRlIHx8IGV4aXN0aW5nU3RhdGUuc3RhdGUgPT0gdGhpcy5zdGF0ZXMuZmFpbGVkLnN0YXRlKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuYWN0aXZhdGVUcmFuc3BvcnQoKVwiLFxuICAgICAgICBcIkRpc2Nvbm5lY3RpbmcgdHJhbnNwb3J0IGFuZCBhYmFuZG9uaW5nXCJcbiAgICAgICk7XG4gICAgICB0cmFuc3BvcnQuZGlzY29ubmVjdCgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBkZWxldGUgdGhpcy5wZW5kaW5nVHJhbnNwb3J0O1xuICAgIGlmICghdHJhbnNwb3J0LmlzQ29ubmVjdGVkKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuYWN0aXZhdGVUcmFuc3BvcnQoKVwiLFxuICAgICAgICBcIkRlY2xpbmluZyB0byBhY3RpdmF0ZSB0cmFuc3BvcnQgXCIgKyB0cmFuc3BvcnQgKyBcIiBzaW5jZSBpdCBhcHBlYXJzIHRvIG5vIGxvbmdlciBiZSBjb25uZWN0ZWRcIlxuICAgICAgKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgZXhpc3RpbmdBY3RpdmVQcm90b2NvbCA9IHRoaXMuYWN0aXZlUHJvdG9jb2w7XG4gICAgdGhpcy5hY3RpdmVQcm90b2NvbCA9IG5ldyBwcm90b2NvbF9kZWZhdWx0KHRyYW5zcG9ydCk7XG4gICAgdGhpcy5ob3N0ID0gdHJhbnNwb3J0LnBhcmFtcy5ob3N0O1xuICAgIGNvbnN0IGNvbm5lY3Rpb25LZXkgPSBjb25uZWN0aW9uRGV0YWlscy5jb25uZWN0aW9uS2V5O1xuICAgIGlmIChjb25uZWN0aW9uS2V5ICYmIHRoaXMuY29ubmVjdGlvbktleSAhPSBjb25uZWN0aW9uS2V5KSB7XG4gICAgICB0aGlzLnNldENvbm5lY3Rpb24oY29ubmVjdGlvbklkLCBjb25uZWN0aW9uRGV0YWlscywgISFlcnJvcik7XG4gICAgfVxuICAgIHRoaXMub25Db25uZWN0aW9uRGV0YWlsc1VwZGF0ZShjb25uZWN0aW9uRGV0YWlscywgdHJhbnNwb3J0KTtcbiAgICBQbGF0Zm9ybS5Db25maWcubmV4dFRpY2soKCkgPT4ge1xuICAgICAgdHJhbnNwb3J0Lm9uKFxuICAgICAgICBcImNvbm5lY3RlZFwiLFxuICAgICAgICAoY29ubmVjdGVkRXJyLCBfY29ubmVjdGlvbklkLCBjb25uZWN0aW9uRGV0YWlsczIpID0+IHtcbiAgICAgICAgICB0aGlzLm9uQ29ubmVjdGlvbkRldGFpbHNVcGRhdGUoY29ubmVjdGlvbkRldGFpbHMyLCB0cmFuc3BvcnQpO1xuICAgICAgICAgIHRoaXMuZW1pdChcInVwZGF0ZVwiLCBuZXcgY29ubmVjdGlvbnN0YXRlY2hhbmdlX2RlZmF1bHQoY29ubmVjdGVkU3RhdGUsIGNvbm5lY3RlZFN0YXRlLCBudWxsLCBjb25uZWN0ZWRFcnIpKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgICBpZiAoZXhpc3RpbmdTdGF0ZS5zdGF0ZSA9PT0gdGhpcy5zdGF0ZXMuY29ubmVjdGVkLnN0YXRlKSB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5lcnJvclJlYXNvbiA9IHRoaXMucmVhbHRpbWUuY29ubmVjdGlvbi5lcnJvclJlYXNvbiA9IGVycm9yO1xuICAgICAgICB0aGlzLmVtaXQoXCJ1cGRhdGVcIiwgbmV3IGNvbm5lY3Rpb25zdGF0ZWNoYW5nZV9kZWZhdWx0KGNvbm5lY3RlZFN0YXRlLCBjb25uZWN0ZWRTdGF0ZSwgbnVsbCwgZXJyb3IpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ub3RpZnlTdGF0ZSh7IHN0YXRlOiBcImNvbm5lY3RlZFwiLCBlcnJvciB9KTtcbiAgICAgIHRoaXMuZXJyb3JSZWFzb24gPSB0aGlzLnJlYWx0aW1lLmNvbm5lY3Rpb24uZXJyb3JSZWFzb24gPSBlcnJvciB8fCBudWxsO1xuICAgIH1cbiAgICB0aGlzLmVtaXQoXCJ0cmFuc3BvcnQuYWN0aXZlXCIsIHRyYW5zcG9ydCk7XG4gICAgaWYgKGV4aXN0aW5nQWN0aXZlUHJvdG9jb2wpIHtcbiAgICAgIGlmIChleGlzdGluZ0FjdGl2ZVByb3RvY29sLm1lc3NhZ2VRdWV1ZS5jb3VudCgpID4gMCkge1xuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLFxuICAgICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuYWN0aXZhdGVUcmFuc3BvcnQoKVwiLFxuICAgICAgICAgIFwiUHJldmlvdXMgYWN0aXZlIHByb3RvY29sIChmb3IgdHJhbnNwb3J0IFwiICsgZXhpc3RpbmdBY3RpdmVQcm90b2NvbC50cmFuc3BvcnQuc2hvcnROYW1lICsgXCIsIG5ldyBvbmUgaXMgXCIgKyB0cmFuc3BvcnQuc2hvcnROYW1lICsgXCIpIGZpbmlzaGluZyB3aXRoIFwiICsgZXhpc3RpbmdBY3RpdmVQcm90b2NvbC5tZXNzYWdlUXVldWUuY291bnQoKSArIFwiIG1lc3NhZ2VzIHN0aWxsIHBlbmRpbmdcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGV4aXN0aW5nQWN0aXZlUHJvdG9jb2wudHJhbnNwb3J0ID09PSB0cmFuc3BvcnQpIHtcbiAgICAgICAgY29uc3QgbXNnID0gXCJBc3N1bXB0aW9uIHZpb2xhdGVkOiBhY3RpdmF0aW5nIGEgdHJhbnNwb3J0IHRoYXQgd2FzIGFsc28gdGhlIHRyYW5zcG9ydCBmb3IgdGhlIHByZXZpb3VzIGFjdGl2ZSBwcm90b2NvbDsgdHJhbnNwb3J0ID0gXCIgKyB0cmFuc3BvcnQuc2hvcnROYW1lICsgXCI7IHN0YWNrID0gXCIgKyBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIFwiQ29ubmVjdGlvbk1hbmFnZXIuYWN0aXZhdGVUcmFuc3BvcnQoKVwiLCBtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhpc3RpbmdBY3RpdmVQcm90b2NvbC5maW5pc2goKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGEgdHJhbnNwb3J0IGlzIG5vIGxvbmdlciB0aGUgYWN0aXZlIHRyYW5zcG9ydC4gVGhpcyBjYW4gb2NjdXJcbiAgICogaW4gYW55IHRyYW5zcG9ydCBjb25uZWN0aW9uIHN0YXRlLlxuICAgKiBAcGFyYW0gdHJhbnNwb3J0XG4gICAqL1xuICBkZWFjdGl2YXRlVHJhbnNwb3J0KHRyYW5zcG9ydCwgc3RhdGUsIGVycm9yKSB7XG4gICAgY29uc3QgY3VycmVudFByb3RvY29sID0gdGhpcy5hY3RpdmVQcm90b2NvbCwgd2FzQWN0aXZlID0gY3VycmVudFByb3RvY29sICYmIGN1cnJlbnRQcm90b2NvbC5nZXRUcmFuc3BvcnQoKSA9PT0gdHJhbnNwb3J0LCB3YXNQZW5kaW5nID0gdHJhbnNwb3J0ID09PSB0aGlzLnBlbmRpbmdUcmFuc3BvcnQsIG5vVHJhbnNwb3J0c1NjaGVkdWxlZEZvckFjdGl2YXRpb24gPSB0aGlzLm5vVHJhbnNwb3J0c1NjaGVkdWxlZEZvckFjdGl2YXRpb24oKTtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICB0aGlzLmxvZ2dlcixcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuZGVhY3RpdmF0ZVRyYW5zcG9ydCgpXCIsXG4gICAgICBcInRyYW5zcG9ydCA9IFwiICsgdHJhbnNwb3J0XG4gICAgKTtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICB0aGlzLmxvZ2dlcixcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuZGVhY3RpdmF0ZVRyYW5zcG9ydCgpXCIsXG4gICAgICBcInN0YXRlID0gXCIgKyBzdGF0ZSArICh3YXNBY3RpdmUgPyBcIjsgd2FzIGFjdGl2ZVwiIDogd2FzUGVuZGluZyA/IFwiOyB3YXMgcGVuZGluZ1wiIDogXCJcIikgKyAobm9UcmFuc3BvcnRzU2NoZWR1bGVkRm9yQWN0aXZhdGlvbiA/IFwiXCIgOiBcIjsgYW5vdGhlciB0cmFuc3BvcnQgaXMgc2NoZWR1bGVkIGZvciBhY3RpdmF0aW9uXCIpXG4gICAgKTtcbiAgICBpZiAoZXJyb3IgJiYgZXJyb3IubWVzc2FnZSlcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTyxcbiAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5kZWFjdGl2YXRlVHJhbnNwb3J0KClcIixcbiAgICAgICAgXCJyZWFzb24gPSAgXCIgKyBlcnJvci5tZXNzYWdlXG4gICAgICApO1xuICAgIGlmICh3YXNBY3RpdmUpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTyxcbiAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5kZWFjdGl2YXRlVHJhbnNwb3J0KClcIixcbiAgICAgICAgXCJHZXR0aW5nLCBjbGVhcmluZywgYW5kIHJlcXVldWluZyBcIiArIHRoaXMuYWN0aXZlUHJvdG9jb2wubWVzc2FnZVF1ZXVlLmNvdW50KCkgKyBcIiBwZW5kaW5nIG1lc3NhZ2VzXCJcbiAgICAgICk7XG4gICAgICB0aGlzLnF1ZXVlUGVuZGluZ01lc3NhZ2VzKGN1cnJlbnRQcm90b2NvbC5nZXRQZW5kaW5nTWVzc2FnZXMoKSk7XG4gICAgICBjdXJyZW50UHJvdG9jb2wuY2xlYXJQZW5kaW5nTWVzc2FnZXMoKTtcbiAgICAgIHRoaXMuYWN0aXZlUHJvdG9jb2wgPSB0aGlzLmhvc3QgPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLmVtaXQoXCJ0cmFuc3BvcnQuaW5hY3RpdmVcIiwgdHJhbnNwb3J0KTtcbiAgICBpZiAod2FzQWN0aXZlICYmIG5vVHJhbnNwb3J0c1NjaGVkdWxlZEZvckFjdGl2YXRpb24gfHwgd2FzQWN0aXZlICYmIHN0YXRlID09PSBcImZhaWxlZFwiIHx8IHN0YXRlID09PSBcImNsb3NlZFwiIHx8IGN1cnJlbnRQcm90b2NvbCA9PT0gbnVsbCAmJiB3YXNQZW5kaW5nKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IFwiZGlzY29ubmVjdGVkXCIgJiYgZXJyb3IgJiYgZXJyb3Iuc3RhdHVzQ29kZSA+IDUwMCAmJiB0aGlzLmh0dHBIb3N0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRoaXMudW5wZXJzaXN0VHJhbnNwb3J0UHJlZmVyZW5jZSgpO1xuICAgICAgICB0aGlzLmZvcmNlRmFsbGJhY2tIb3N0ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5ub3RpZnlTdGF0ZSh7IHN0YXRlLCBlcnJvciwgcmV0cnlJbW1lZGlhdGVseTogdHJ1ZSB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgbmV3Q29ubmVjdGlvblN0YXRlID0gc3RhdGUgPT09IFwiZmFpbGVkXCIgJiYgYXV0aF9kZWZhdWx0LmlzVG9rZW5FcnIoZXJyb3IpID8gXCJkaXNjb25uZWN0ZWRcIiA6IHN0YXRlO1xuICAgICAgdGhpcy5ub3RpZnlTdGF0ZSh7IHN0YXRlOiBuZXdDb25uZWN0aW9uU3RhdGUsIGVycm9yIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICAvKiBIZWxwZXIgdGhhdCByZXR1cm5zIHRydWUgaWYgdGhlcmUgYXJlIG5vIHRyYW5zcG9ydHMgd2hpY2ggYXJlIHBlbmRpbmcsXG4gICAqIGhhdmUgYmVlbiBjb25uZWN0ZWQsIGFuZCBhcmUganVzdCB3YWl0aW5nIGZvciBvbmNlTm9QZW5kaW5nIHRvIGZpcmUgYmVmb3JlXG4gICAqIGJlaW5nIGFjdGl2YXRlZCAqL1xuICBub1RyYW5zcG9ydHNTY2hlZHVsZWRGb3JBY3RpdmF0aW9uKCkge1xuICAgIHJldHVybiAhdGhpcy5wZW5kaW5nVHJhbnNwb3J0IHx8ICF0aGlzLnBlbmRpbmdUcmFuc3BvcnQuaXNDb25uZWN0ZWQ7XG4gIH1cbiAgc2V0Q29ubmVjdGlvbihjb25uZWN0aW9uSWQsIGNvbm5lY3Rpb25EZXRhaWxzLCBoYXNDb25uZWN0aW9uRXJyb3IpIHtcbiAgICBjb25zdCBwcmV2Q29ubklkID0gdGhpcy5jb25uZWN0aW9uSWQsIGNvbm5JZENoYW5nZWQgPSBwcmV2Q29ubklkICYmIHByZXZDb25uSWQgIT09IGNvbm5lY3Rpb25JZCwgcmVjb3ZlckZhaWx1cmUgPSAhcHJldkNvbm5JZCAmJiBoYXNDb25uZWN0aW9uRXJyb3I7XG4gICAgaWYgKGNvbm5JZENoYW5nZWQgfHwgcmVjb3ZlckZhaWx1cmUpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIkNvbm5lY3Rpb25NYW5hZ2VyLnNldENvbm5lY3Rpb24oKVwiLCBcIlJlc2V0dGluZyBtc2dTZXJpYWxcIik7XG4gICAgICB0aGlzLm1zZ1NlcmlhbCA9IDA7XG4gICAgICB0aGlzLnF1ZXVlZE1lc3NhZ2VzLnJlc2V0U2VuZEF0dGVtcHRlZCgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5jb25uZWN0aW9uSWQgIT09IGNvbm5lY3Rpb25JZCkge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLnNldENvbm5lY3Rpb24oKVwiLFxuICAgICAgICBcIk5ldyBjb25uZWN0aW9uSWQ7IHJlYXR0YWNoaW5nIGFueSBhdHRhY2hlZCBjaGFubmVsc1wiXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLnJlYWx0aW1lLmNvbm5lY3Rpb24uaWQgPSB0aGlzLmNvbm5lY3Rpb25JZCA9IGNvbm5lY3Rpb25JZDtcbiAgICB0aGlzLnJlYWx0aW1lLmNvbm5lY3Rpb24ua2V5ID0gdGhpcy5jb25uZWN0aW9uS2V5ID0gY29ubmVjdGlvbkRldGFpbHMuY29ubmVjdGlvbktleTtcbiAgfVxuICBjbGVhckNvbm5lY3Rpb24oKSB7XG4gICAgdGhpcy5yZWFsdGltZS5jb25uZWN0aW9uLmlkID0gdGhpcy5jb25uZWN0aW9uSWQgPSB2b2lkIDA7XG4gICAgdGhpcy5yZWFsdGltZS5jb25uZWN0aW9uLmtleSA9IHRoaXMuY29ubmVjdGlvbktleSA9IHZvaWQgMDtcbiAgICB0aGlzLm1zZ1NlcmlhbCA9IDA7XG4gICAgdGhpcy51bnBlcnNpc3RDb25uZWN0aW9uKCk7XG4gIH1cbiAgY3JlYXRlUmVjb3ZlcnlLZXkoKSB7XG4gICAgaWYgKCF0aGlzLmNvbm5lY3Rpb25LZXkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgY29ubmVjdGlvbktleTogdGhpcy5jb25uZWN0aW9uS2V5LFxuICAgICAgbXNnU2VyaWFsOiB0aGlzLm1zZ1NlcmlhbCxcbiAgICAgIGNoYW5uZWxTZXJpYWxzOiB0aGlzLnJlYWx0aW1lLmNoYW5uZWxzLmNoYW5uZWxTZXJpYWxzKClcbiAgICB9KTtcbiAgfVxuICBjaGVja0Nvbm5lY3Rpb25TdGF0ZUZyZXNobmVzcygpIHtcbiAgICBpZiAoIXRoaXMubGFzdEFjdGl2aXR5IHx8ICF0aGlzLmNvbm5lY3Rpb25JZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzaW5jZUxhc3QgPSBEYXRlLm5vdygpIC0gdGhpcy5sYXN0QWN0aXZpdHk7XG4gICAgaWYgKHNpbmNlTGFzdCA+IHRoaXMuY29ubmVjdGlvblN0YXRlVHRsICsgdGhpcy5tYXhJZGxlSW50ZXJ2YWwpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5jaGVja0Nvbm5lY3Rpb25TdGF0ZUZyZXNobmVzcygpXCIsXG4gICAgICAgIFwiTGFzdCBrbm93biBhY3Rpdml0eSBmcm9tIHJlYWx0aW1lIHdhcyBcIiArIHNpbmNlTGFzdCArIFwibXMgYWdvOyBkaXNjYXJkaW5nIGNvbm5lY3Rpb24gc3RhdGVcIlxuICAgICAgKTtcbiAgICAgIHRoaXMuY2xlYXJDb25uZWN0aW9uKCk7XG4gICAgICB0aGlzLnN0YXRlcy5jb25uZWN0aW5nLmZhaWxTdGF0ZSA9IFwic3VzcGVuZGVkXCI7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgY29ubmVjdGlvbm1hbmFnZXIgd2FudHMgdG8gcGVyc2lzdCB0cmFuc3BvcnRcbiAgICogc3RhdGUgZm9yIGxhdGVyIHJlY292ZXJ5LiBPbmx5IGFwcGxpY2FibGUgaW4gdGhlIGJyb3dzZXIgY29udGV4dC5cbiAgICovXG4gIHBlcnNpc3RDb25uZWN0aW9uKCkge1xuICAgIGlmIChoYXZlU2Vzc2lvblN0b3JhZ2UoKSkge1xuICAgICAgY29uc3QgcmVjb3ZlcnlLZXkgPSB0aGlzLmNyZWF0ZVJlY292ZXJ5S2V5KCk7XG4gICAgICBpZiAocmVjb3ZlcnlLZXkpIHtcbiAgICAgICAgdGhpcy5zZXRTZXNzaW9uUmVjb3ZlckRhdGEoe1xuICAgICAgICAgIHJlY292ZXJ5S2V5LFxuICAgICAgICAgIGRpc2Nvbm5lY3RlZEF0OiBEYXRlLm5vdygpLFxuICAgICAgICAgIGxvY2F0aW9uOiBnbG9iYWxPYmplY3QyLmxvY2F0aW9uLFxuICAgICAgICAgIGNsaWVudElkOiB0aGlzLnJlYWx0aW1lLmF1dGguY2xpZW50SWRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgY29ubmVjdGlvbm1hbmFnZXIgd2FudHMgdG8gcGVyc2lzdCB0cmFuc3BvcnRcbiAgICogc3RhdGUgZm9yIGxhdGVyIHJlY292ZXJ5LiBPbmx5IGFwcGxpY2FibGUgaW4gdGhlIGJyb3dzZXIgY29udGV4dC5cbiAgICovXG4gIHVucGVyc2lzdENvbm5lY3Rpb24oKSB7XG4gICAgdGhpcy5jbGVhclNlc3Npb25SZWNvdmVyRGF0YSgpO1xuICB9XG4gIC8qKioqKioqKioqKioqKioqKioqKipcbiAgICogc3RhdGUgbWFuYWdlbWVudFxuICAgKioqKioqKioqKioqKioqKioqKioqL1xuICBnZXRFcnJvcigpIHtcbiAgICBpZiAodGhpcy5lcnJvclJlYXNvbikge1xuICAgICAgY29uc3QgbmV3RXJyb3IgPSBQYXJ0aWFsRXJyb3JJbmZvLmZyb21WYWx1ZXModGhpcy5lcnJvclJlYXNvbik7XG4gICAgICBuZXdFcnJvci5jYXVzZSA9IHRoaXMuZXJyb3JSZWFzb247XG4gICAgICByZXR1cm4gbmV3RXJyb3I7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldFN0YXRlRXJyb3IoKTtcbiAgfVxuICBnZXRTdGF0ZUVycm9yKCkge1xuICAgIHZhciBfYTIsIF9iO1xuICAgIHJldHVybiAoX2IgPSAoX2EyID0gY29ubmVjdGlvbmVycm9yc19kZWZhdWx0KVt0aGlzLnN0YXRlLnN0YXRlXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EyKTtcbiAgfVxuICBhY3RpdmVTdGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5xdWV1ZUV2ZW50cyB8fCB0aGlzLnN0YXRlLnNlbmRFdmVudHM7XG4gIH1cbiAgZW5hY3RTdGF0ZUNoYW5nZShzdGF0ZUNoYW5nZSkge1xuICAgIGNvbnN0IGFjdGlvbiA9IFwiQ29ubmVjdGlvbiBzdGF0ZVwiO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBzdGF0ZUNoYW5nZS5jdXJyZW50ICsgKHN0YXRlQ2hhbmdlLnJlYXNvbiA/IFwiOyByZWFzb246IFwiICsgc3RhdGVDaGFuZ2UucmVhc29uIDogXCJcIik7XG4gICAgaWYgKHN0YXRlQ2hhbmdlLmN1cnJlbnQgPT09IFwiZmFpbGVkXCIpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLCBhY3Rpb24sIG1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NQUpPUiwgYWN0aW9uLCBtZXNzYWdlKTtcbiAgICB9XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLmVuYWN0U3RhdGVDaGFuZ2VcIixcbiAgICAgIFwic2V0dGluZyBuZXcgc3RhdGU6IFwiICsgc3RhdGVDaGFuZ2UuY3VycmVudCArIFwiOyByZWFzb24gPSBcIiArIChzdGF0ZUNoYW5nZS5yZWFzb24gJiYgc3RhdGVDaGFuZ2UucmVhc29uLm1lc3NhZ2UpXG4gICAgKTtcbiAgICBjb25zdCBuZXdTdGF0ZSA9IHRoaXMuc3RhdGUgPSB0aGlzLnN0YXRlc1tzdGF0ZUNoYW5nZS5jdXJyZW50XTtcbiAgICBpZiAoc3RhdGVDaGFuZ2UucmVhc29uKSB7XG4gICAgICB0aGlzLmVycm9yUmVhc29uID0gc3RhdGVDaGFuZ2UucmVhc29uO1xuICAgICAgdGhpcy5yZWFsdGltZS5jb25uZWN0aW9uLmVycm9yUmVhc29uID0gc3RhdGVDaGFuZ2UucmVhc29uO1xuICAgIH1cbiAgICBpZiAobmV3U3RhdGUudGVybWluYWwgfHwgbmV3U3RhdGUuc3RhdGUgPT09IFwic3VzcGVuZGVkXCIpIHtcbiAgICAgIHRoaXMuY2xlYXJDb25uZWN0aW9uKCk7XG4gICAgfVxuICAgIHRoaXMuZW1pdChcImNvbm5lY3Rpb25zdGF0ZVwiLCBzdGF0ZUNoYW5nZSk7XG4gIH1cbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICogQ29ubmVjdGlvbk1hbmFnZXIgY29ubmVjdGlvbiBsaWZlY3ljbGVcbiAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gIHN0YXJ0VHJhbnNpdGlvblRpbWVyKHRyYW5zaXRpb25TdGF0ZSkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5zdGFydFRyYW5zaXRpb25UaW1lcigpXCIsXG4gICAgICBcInRyYW5zaXRpb25TdGF0ZTogXCIgKyB0cmFuc2l0aW9uU3RhdGUuc3RhdGVcbiAgICApO1xuICAgIGlmICh0aGlzLnRyYW5zaXRpb25UaW1lcikge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLnN0YXJ0VHJhbnNpdGlvblRpbWVyKClcIixcbiAgICAgICAgXCJjbGVhcmluZyBhbHJlYWR5LXJ1bm5pbmcgdGltZXJcIlxuICAgICAgKTtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRyYW5zaXRpb25UaW1lcik7XG4gICAgfVxuICAgIHRoaXMudHJhbnNpdGlvblRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy50cmFuc2l0aW9uVGltZXIpIHtcbiAgICAgICAgdGhpcy50cmFuc2l0aW9uVGltZXIgPSBudWxsO1xuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIgXCIgKyB0cmFuc2l0aW9uU3RhdGUuc3RhdGUgKyBcIiB0aW1lciBleHBpcmVkXCIsXG4gICAgICAgICAgXCJyZXF1ZXN0aW5nIG5ldyBzdGF0ZTogXCIgKyB0cmFuc2l0aW9uU3RhdGUuZmFpbFN0YXRlXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMubm90aWZ5U3RhdGUoeyBzdGF0ZTogdHJhbnNpdGlvblN0YXRlLmZhaWxTdGF0ZSB9KTtcbiAgICAgIH1cbiAgICB9LCB0cmFuc2l0aW9uU3RhdGUucmV0cnlEZWxheSk7XG4gIH1cbiAgY2FuY2VsVHJhbnNpdGlvblRpbWVyKCkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIkNvbm5lY3Rpb25NYW5hZ2VyLmNhbmNlbFRyYW5zaXRpb25UaW1lcigpXCIsIFwiXCIpO1xuICAgIGlmICh0aGlzLnRyYW5zaXRpb25UaW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudHJhbnNpdGlvblRpbWVyKTtcbiAgICAgIHRoaXMudHJhbnNpdGlvblRpbWVyID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgc3RhcnRTdXNwZW5kVGltZXIoKSB7XG4gICAgaWYgKHRoaXMuc3VzcGVuZFRpbWVyKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuc3VzcGVuZFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5zdXNwZW5kVGltZXIpIHtcbiAgICAgICAgdGhpcy5zdXNwZW5kVGltZXIgPSBudWxsO1xuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIgc3VzcGVuZCB0aW1lciBleHBpcmVkXCIsXG4gICAgICAgICAgXCJyZXF1ZXN0aW5nIG5ldyBzdGF0ZTogc3VzcGVuZGVkXCJcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdGF0ZXMuY29ubmVjdGluZy5mYWlsU3RhdGUgPSBcInN1c3BlbmRlZFwiO1xuICAgICAgICB0aGlzLm5vdGlmeVN0YXRlKHsgc3RhdGU6IFwic3VzcGVuZGVkXCIgfSk7XG4gICAgICB9XG4gICAgfSwgdGhpcy5jb25uZWN0aW9uU3RhdGVUdGwpO1xuICB9XG4gIGNoZWNrU3VzcGVuZFRpbWVyKHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlICE9PSBcImRpc2Nvbm5lY3RlZFwiICYmIHN0YXRlICE9PSBcInN1c3BlbmRlZFwiICYmIHN0YXRlICE9PSBcImNvbm5lY3RpbmdcIilcbiAgICAgIHRoaXMuY2FuY2VsU3VzcGVuZFRpbWVyKCk7XG4gIH1cbiAgY2FuY2VsU3VzcGVuZFRpbWVyKCkge1xuICAgIHRoaXMuc3RhdGVzLmNvbm5lY3RpbmcuZmFpbFN0YXRlID0gXCJkaXNjb25uZWN0ZWRcIjtcbiAgICBpZiAodGhpcy5zdXNwZW5kVGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnN1c3BlbmRUaW1lcik7XG4gICAgICB0aGlzLnN1c3BlbmRUaW1lciA9IG51bGw7XG4gICAgfVxuICB9XG4gIHN0YXJ0UmV0cnlUaW1lcihpbnRlcnZhbCkge1xuICAgIHRoaXMucmV0cnlUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiQ29ubmVjdGlvbk1hbmFnZXIgcmV0cnkgdGltZXIgZXhwaXJlZFwiLCBcInJldHJ5aW5nXCIpO1xuICAgICAgdGhpcy5yZXRyeVRpbWVyID0gbnVsbDtcbiAgICAgIHRoaXMucmVxdWVzdFN0YXRlKHsgc3RhdGU6IFwiY29ubmVjdGluZ1wiIH0pO1xuICAgIH0sIGludGVydmFsKTtcbiAgfVxuICBjYW5jZWxSZXRyeVRpbWVyKCkge1xuICAgIGlmICh0aGlzLnJldHJ5VGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnJldHJ5VGltZXIpO1xuICAgICAgdGhpcy5yZXRyeVRpbWVyID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgc3RhcnRXZWJTb2NrZXRTbG93VGltZXIoKSB7XG4gICAgdGhpcy53ZWJTb2NrZXRTbG93VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlciBXZWJTb2NrZXQgc2xvdyB0aW1lclwiLFxuICAgICAgICBcImNoZWNraW5nIGNvbm5lY3Rpdml0eVwiXG4gICAgICApO1xuICAgICAgdGhpcy5jaGVja1dzQ29ubmVjdGl2aXR5KCkudGhlbigoKSA9PiB7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlciBXZWJTb2NrZXQgc2xvdyB0aW1lclwiLFxuICAgICAgICAgIFwid3MgY29ubmVjdGl2aXR5IGNoZWNrIHN1Y2NlZWRlZFwiXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMud3NDaGVja1Jlc3VsdCA9IHRydWU7XG4gICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUFKT1IsXG4gICAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlciBXZWJTb2NrZXQgc2xvdyB0aW1lclwiLFxuICAgICAgICAgIFwid3MgY29ubmVjdGl2aXR5IGNoZWNrIGZhaWxlZFwiXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMud3NDaGVja1Jlc3VsdCA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5yZWFsdGltZS5odHRwLmNoZWNrQ29ubmVjdGl2aXR5KSB7XG4gICAgICAgIHdoZW5Qcm9taXNlU2V0dGxlcyh0aGlzLnJlYWx0aW1lLmh0dHAuY2hlY2tDb25uZWN0aXZpdHkoKSwgKGVyciwgY29ubmVjdGl2aXR5KSA9PiB7XG4gICAgICAgICAgaWYgKGVyciB8fCAhY29ubmVjdGl2aXR5KSB7XG4gICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUFKT1IsXG4gICAgICAgICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIgV2ViU29ja2V0IHNsb3cgdGltZXJcIixcbiAgICAgICAgICAgICAgXCJodHRwIGNvbm5lY3Rpdml0eSBjaGVjayBmYWlsZWRcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsV2ViU29ja2V0R2l2ZVVwVGltZXIoKTtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5U3RhdGUoe1xuICAgICAgICAgICAgICBzdGF0ZTogXCJkaXNjb25uZWN0ZWRcIixcbiAgICAgICAgICAgICAgZXJyb3I6IG5ldyBFcnJvckluZm8oXCJVbmFibGUgdG8gY29ubmVjdCAobmV0d29yayB1bnJlYWNoYWJsZSlcIiwgODAwMDMsIDQwNClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIgV2ViU29ja2V0IHNsb3cgdGltZXJcIixcbiAgICAgICAgICAgICAgXCJodHRwIGNvbm5lY3Rpdml0eSBjaGVjayBzdWNjZWVkZWRcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHRoaXMub3B0aW9ucy50aW1lb3V0cy53ZWJTb2NrZXRTbG93VGltZW91dCk7XG4gIH1cbiAgY2FuY2VsV2ViU29ja2V0U2xvd1RpbWVyKCkge1xuICAgIGlmICh0aGlzLndlYlNvY2tldFNsb3dUaW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMud2ViU29ja2V0U2xvd1RpbWVyKTtcbiAgICAgIHRoaXMud2ViU29ja2V0U2xvd1RpbWVyID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgc3RhcnRXZWJTb2NrZXRHaXZlVXBUaW1lcih0cmFuc3BvcnRQYXJhbXMpIHtcbiAgICB0aGlzLndlYlNvY2tldEdpdmVVcFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB2YXIgX2EyLCBfYjtcbiAgICAgIGlmICghdGhpcy53c0NoZWNrUmVzdWx0KSB7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlciBXZWJTb2NrZXQgZ2l2ZSB1cCB0aW1lclwiLFxuICAgICAgICAgIFwid2Vic29ja2V0IGNvbm5lY3Rpb24gdG9vayBtb3JlIHRoYW4gMTBzOyBcIiArICh0aGlzLmJhc2VUcmFuc3BvcnQgPyBcInRyeWluZyBiYXNlIHRyYW5zcG9ydFwiIDogXCJcIilcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHRoaXMuYmFzZVRyYW5zcG9ydCkge1xuICAgICAgICAgIHRoaXMuYWJhbmRvbmVkV2ViU29ja2V0ID0gdHJ1ZTtcbiAgICAgICAgICAoX2EyID0gdGhpcy5wcm9wb3NlZFRyYW5zcG9ydCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5kaXNwb3NlKCk7XG4gICAgICAgICAgKF9iID0gdGhpcy5wZW5kaW5nVHJhbnNwb3J0KSA9PSBudWxsID8gdm9pZCAwIDogX2IuZGlzcG9zZSgpO1xuICAgICAgICAgIHRoaXMuY29ubmVjdEJhc2UodHJhbnNwb3J0UGFyYW1zLCArK3RoaXMuY29ubmVjdENvdW50ZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01BSk9SLFxuICAgICAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlciBXZWJTb2NrZXQgZ2l2ZSB1cCB0aW1lclwiLFxuICAgICAgICAgICAgXCJ3ZWJzb2NrZXQgY29ubmVjdGl2aXR5IGFwcGVhcnMgdG8gYmUgdW5hdmFpbGFibGUgYnV0IG5vIG90aGVyIHRyYW5zcG9ydHMgdG8gdHJ5XCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgdGhpcy5vcHRpb25zLnRpbWVvdXRzLndlYlNvY2tldENvbm5lY3RUaW1lb3V0KTtcbiAgfVxuICBjYW5jZWxXZWJTb2NrZXRHaXZlVXBUaW1lcigpIHtcbiAgICBpZiAodGhpcy53ZWJTb2NrZXRHaXZlVXBUaW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMud2ViU29ja2V0R2l2ZVVwVGltZXIpO1xuICAgICAgdGhpcy53ZWJTb2NrZXRHaXZlVXBUaW1lciA9IG51bGw7XG4gICAgfVxuICB9XG4gIG5vdGlmeVN0YXRlKGluZGljYXRlZCkge1xuICAgIHZhciBfYTIsIF9iO1xuICAgIGNvbnN0IHN0YXRlID0gaW5kaWNhdGVkLnN0YXRlO1xuICAgIGNvbnN0IHJldHJ5SW1tZWRpYXRlbHkgPSBzdGF0ZSA9PT0gXCJkaXNjb25uZWN0ZWRcIiAmJiAodGhpcy5zdGF0ZSA9PT0gdGhpcy5zdGF0ZXMuY29ubmVjdGVkIHx8IGluZGljYXRlZC5yZXRyeUltbWVkaWF0ZWx5IHx8IHRoaXMuc3RhdGUgPT09IHRoaXMuc3RhdGVzLmNvbm5lY3RpbmcgJiYgaW5kaWNhdGVkLmVycm9yICYmIGF1dGhfZGVmYXVsdC5pc1Rva2VuRXJyKGluZGljYXRlZC5lcnJvcikgJiYgISh0aGlzLmVycm9yUmVhc29uICYmIGF1dGhfZGVmYXVsdC5pc1Rva2VuRXJyKHRoaXMuZXJyb3JSZWFzb24pKSk7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLm5vdGlmeVN0YXRlKClcIixcbiAgICAgIFwibmV3IHN0YXRlOiBcIiArIHN0YXRlICsgKHJldHJ5SW1tZWRpYXRlbHkgPyBcIjsgd2lsbCByZXRyeSBjb25uZWN0aW9uIGltbWVkaWF0ZWx5XCIgOiBcIlwiKVxuICAgICk7XG4gICAgaWYgKHN0YXRlID09IHRoaXMuc3RhdGUuc3RhdGUpXG4gICAgICByZXR1cm47XG4gICAgdGhpcy5jYW5jZWxUcmFuc2l0aW9uVGltZXIoKTtcbiAgICB0aGlzLmNhbmNlbFJldHJ5VGltZXIoKTtcbiAgICB0aGlzLmNhbmNlbFdlYlNvY2tldFNsb3dUaW1lcigpO1xuICAgIHRoaXMuY2FuY2VsV2ViU29ja2V0R2l2ZVVwVGltZXIoKTtcbiAgICB0aGlzLmNoZWNrU3VzcGVuZFRpbWVyKGluZGljYXRlZC5zdGF0ZSk7XG4gICAgaWYgKHN0YXRlID09PSBcInN1c3BlbmRlZFwiIHx8IHN0YXRlID09PSBcImNvbm5lY3RlZFwiKSB7XG4gICAgICB0aGlzLmRpc2Nvbm5lY3RlZFJldHJ5Q291bnQgPSAwO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdGF0ZS50ZXJtaW5hbClcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBuZXdTdGF0ZSA9IHRoaXMuc3RhdGVzW2luZGljYXRlZC5zdGF0ZV07XG4gICAgbGV0IHJldHJ5RGVsYXkgPSBuZXdTdGF0ZS5yZXRyeURlbGF5O1xuICAgIGlmIChuZXdTdGF0ZS5zdGF0ZSA9PT0gXCJkaXNjb25uZWN0ZWRcIikge1xuICAgICAgdGhpcy5kaXNjb25uZWN0ZWRSZXRyeUNvdW50Kys7XG4gICAgICByZXRyeURlbGF5ID0gZ2V0UmV0cnlUaW1lKG5ld1N0YXRlLnJldHJ5RGVsYXksIHRoaXMuZGlzY29ubmVjdGVkUmV0cnlDb3VudCk7XG4gICAgfVxuICAgIGNvbnN0IGNoYW5nZSA9IG5ldyBjb25uZWN0aW9uc3RhdGVjaGFuZ2VfZGVmYXVsdChcbiAgICAgIHRoaXMuc3RhdGUuc3RhdGUsXG4gICAgICBuZXdTdGF0ZS5zdGF0ZSxcbiAgICAgIHJldHJ5RGVsYXksXG4gICAgICBpbmRpY2F0ZWQuZXJyb3IgfHwgKChfYiA9IChfYTIgPSBjb25uZWN0aW9uZXJyb3JzX2RlZmF1bHQpW25ld1N0YXRlLnN0YXRlXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EyKSlcbiAgICApO1xuICAgIGlmIChyZXRyeUltbWVkaWF0ZWx5KSB7XG4gICAgICBjb25zdCBhdXRvUmVjb25uZWN0ID0gKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gdGhpcy5zdGF0ZXMuZGlzY29ubmVjdGVkKSB7XG4gICAgICAgICAgdGhpcy5sYXN0QXV0b1JlY29ubmVjdEF0dGVtcHQgPSBEYXRlLm5vdygpO1xuICAgICAgICAgIHRoaXMucmVxdWVzdFN0YXRlKHsgc3RhdGU6IFwiY29ubmVjdGluZ1wiIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3Qgc2luY2VMYXN0ID0gdGhpcy5sYXN0QXV0b1JlY29ubmVjdEF0dGVtcHQgJiYgRGF0ZS5ub3coKSAtIHRoaXMubGFzdEF1dG9SZWNvbm5lY3RBdHRlbXB0ICsgMTtcbiAgICAgIGlmIChzaW5jZUxhc3QgJiYgc2luY2VMYXN0IDwgMWUzKSB7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5ub3RpZnlTdGF0ZSgpXCIsXG4gICAgICAgICAgXCJMYXN0IHJlY29ubmVjdCBhdHRlbXB0IHdhcyBvbmx5IFwiICsgc2luY2VMYXN0ICsgXCJtcyBhZ28sIHdhaXRpbmcgYW5vdGhlciBcIiArICgxZTMgLSBzaW5jZUxhc3QpICsgXCJtcyBiZWZvcmUgdHJ5aW5nIGFnYWluXCJcbiAgICAgICAgKTtcbiAgICAgICAgc2V0VGltZW91dChhdXRvUmVjb25uZWN0LCAxZTMgLSBzaW5jZUxhc3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgUGxhdGZvcm0uQ29uZmlnLm5leHRUaWNrKGF1dG9SZWNvbm5lY3QpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09IFwiZGlzY29ubmVjdGVkXCIgfHwgc3RhdGUgPT09IFwic3VzcGVuZGVkXCIpIHtcbiAgICAgIHRoaXMuc3RhcnRSZXRyeVRpbWVyKHJldHJ5RGVsYXkpO1xuICAgIH1cbiAgICBpZiAoc3RhdGUgPT09IFwiZGlzY29ubmVjdGVkXCIgJiYgIXJldHJ5SW1tZWRpYXRlbHkgfHwgc3RhdGUgPT09IFwic3VzcGVuZGVkXCIgfHwgbmV3U3RhdGUudGVybWluYWwpIHtcbiAgICAgIFBsYXRmb3JtLkNvbmZpZy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgIHRoaXMuZGlzY29ubmVjdEFsbFRyYW5zcG9ydHMoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoc3RhdGUgPT0gXCJjb25uZWN0ZWRcIiAmJiAhdGhpcy5hY3RpdmVQcm90b2NvbCkge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLFxuICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLm5vdGlmeVN0YXRlKClcIixcbiAgICAgICAgXCJCcm9rZW4gaW52YXJpYW50OiBhdHRlbXB0ZWQgdG8gZ28gaW50byBjb25uZWN0ZWQgc3RhdGUsIGJ1dCB0aGVyZSBpcyBubyBhY3RpdmUgcHJvdG9jb2xcIlxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5lbmFjdFN0YXRlQ2hhbmdlKGNoYW5nZSk7XG4gICAgaWYgKHRoaXMuc3RhdGUuc2VuZEV2ZW50cykge1xuICAgICAgdGhpcy5zZW5kUXVldWVkTWVzc2FnZXMoKTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLnN0YXRlLnF1ZXVlRXZlbnRzKSB7XG4gICAgICB0aGlzLnJlYWx0aW1lLmNoYW5uZWxzLnByb3BvZ2F0ZUNvbm5lY3Rpb25JbnRlcnJ1cHRpb24oc3RhdGUsIGNoYW5nZS5yZWFzb24pO1xuICAgICAgdGhpcy5mYWlsUXVldWVkTWVzc2FnZXMoY2hhbmdlLnJlYXNvbik7XG4gICAgfVxuICB9XG4gIHJlcXVlc3RTdGF0ZShyZXF1ZXN0KSB7XG4gICAgdmFyIF9hMiwgX2I7XG4gICAgY29uc3Qgc3RhdGUgPSByZXF1ZXN0LnN0YXRlO1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5yZXF1ZXN0U3RhdGUoKVwiLFxuICAgICAgXCJyZXF1ZXN0ZWQgc3RhdGU6IFwiICsgc3RhdGUgKyBcIjsgY3VycmVudCBzdGF0ZTogXCIgKyB0aGlzLnN0YXRlLnN0YXRlXG4gICAgKTtcbiAgICBpZiAoc3RhdGUgPT0gdGhpcy5zdGF0ZS5zdGF0ZSlcbiAgICAgIHJldHVybjtcbiAgICB0aGlzLmNhbmNlbFdlYlNvY2tldFNsb3dUaW1lcigpO1xuICAgIHRoaXMuY2FuY2VsV2ViU29ja2V0R2l2ZVVwVGltZXIoKTtcbiAgICB0aGlzLmNhbmNlbFRyYW5zaXRpb25UaW1lcigpO1xuICAgIHRoaXMuY2FuY2VsUmV0cnlUaW1lcigpO1xuICAgIHRoaXMuY2hlY2tTdXNwZW5kVGltZXIoc3RhdGUpO1xuICAgIGlmIChzdGF0ZSA9PSBcImNvbm5lY3RpbmdcIiAmJiB0aGlzLnN0YXRlLnN0YXRlID09IFwiY29ubmVjdGVkXCIpXG4gICAgICByZXR1cm47XG4gICAgaWYgKHN0YXRlID09IFwiY2xvc2luZ1wiICYmIHRoaXMuc3RhdGUuc3RhdGUgPT0gXCJjbG9zZWRcIilcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBuZXdTdGF0ZSA9IHRoaXMuc3RhdGVzW3N0YXRlXSwgY2hhbmdlID0gbmV3IGNvbm5lY3Rpb25zdGF0ZWNoYW5nZV9kZWZhdWx0KFxuICAgICAgdGhpcy5zdGF0ZS5zdGF0ZSxcbiAgICAgIG5ld1N0YXRlLnN0YXRlLFxuICAgICAgbnVsbCxcbiAgICAgIHJlcXVlc3QuZXJyb3IgfHwgKChfYiA9IChfYTIgPSBjb25uZWN0aW9uZXJyb3JzX2RlZmF1bHQpW25ld1N0YXRlLnN0YXRlXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EyKSlcbiAgICApO1xuICAgIHRoaXMuZW5hY3RTdGF0ZUNoYW5nZShjaGFuZ2UpO1xuICAgIGlmIChzdGF0ZSA9PSBcImNvbm5lY3RpbmdcIikge1xuICAgICAgUGxhdGZvcm0uQ29uZmlnLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgdGhpcy5zdGFydENvbm5lY3QoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoc3RhdGUgPT0gXCJjbG9zaW5nXCIpIHtcbiAgICAgIHRoaXMuY2xvc2VJbXBsKCk7XG4gICAgfVxuICB9XG4gIHN0YXJ0Q29ubmVjdCgpIHtcbiAgICBpZiAodGhpcy5zdGF0ZSAhPT0gdGhpcy5zdGF0ZXMuY29ubmVjdGluZykge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLnN0YXJ0Q29ubmVjdCgpXCIsXG4gICAgICAgIFwiTXVzdCBiZSBpbiBjb25uZWN0aW5nIHN0YXRlIHRvIGNvbm5lY3QsIGJ1dCB3YXMgXCIgKyB0aGlzLnN0YXRlLnN0YXRlXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBhdXRoID0gdGhpcy5yZWFsdGltZS5hdXRoO1xuICAgIGNvbnN0IGNvbm5lY3RDb3VudCA9ICsrdGhpcy5jb25uZWN0Q291bnRlcjtcbiAgICBjb25zdCBjb25uZWN0ID0gKCkgPT4ge1xuICAgICAgdGhpcy5jaGVja0Nvbm5lY3Rpb25TdGF0ZUZyZXNobmVzcygpO1xuICAgICAgdGhpcy5nZXRUcmFuc3BvcnRQYXJhbXMoKHRyYW5zcG9ydFBhcmFtcykgPT4ge1xuICAgICAgICBpZiAodHJhbnNwb3J0UGFyYW1zLm1vZGUgPT09IFwicmVjb3ZlclwiICYmIHRyYW5zcG9ydFBhcmFtcy5vcHRpb25zLnJlY292ZXIpIHtcbiAgICAgICAgICBjb25zdCByZWNvdmVyeUNvbnRleHQgPSBkZWNvZGVSZWNvdmVyeUtleSh0cmFuc3BvcnRQYXJhbXMub3B0aW9ucy5yZWNvdmVyKTtcbiAgICAgICAgICBpZiAocmVjb3ZlcnlDb250ZXh0KSB7XG4gICAgICAgICAgICB0aGlzLnJlYWx0aW1lLmNoYW5uZWxzLnJlY292ZXJDaGFubmVscyhyZWNvdmVyeUNvbnRleHQuY2hhbm5lbFNlcmlhbHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29ubmVjdENvdW50ICE9PSB0aGlzLmNvbm5lY3RDb3VudGVyKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29ubmVjdEltcGwodHJhbnNwb3J0UGFyYW1zLCBjb25uZWN0Q291bnQpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJDb25uZWN0aW9uTWFuYWdlci5zdGFydENvbm5lY3QoKVwiLCBcInN0YXJ0aW5nIGNvbm5lY3Rpb25cIik7XG4gICAgdGhpcy5zdGFydFN1c3BlbmRUaW1lcigpO1xuICAgIHRoaXMuc3RhcnRUcmFuc2l0aW9uVGltZXIodGhpcy5zdGF0ZXMuY29ubmVjdGluZyk7XG4gICAgaWYgKGF1dGgubWV0aG9kID09PSBcImJhc2ljXCIpIHtcbiAgICAgIGNvbm5lY3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYXV0aENiID0gKGVycikgPT4ge1xuICAgICAgICBpZiAoY29ubmVjdENvdW50ICE9PSB0aGlzLmNvbm5lY3RDb3VudGVyKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICB0aGlzLmFjdE9uRXJyb3JGcm9tQXV0aG9yaXplKGVycik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgaWYgKHRoaXMuZXJyb3JSZWFzb24gJiYgYXV0aF9kZWZhdWx0LmlzVG9rZW5FcnIodGhpcy5lcnJvclJlYXNvbikpIHtcbiAgICAgICAgd2hlblByb21pc2VTZXR0bGVzKGF1dGguX2ZvcmNlTmV3VG9rZW4obnVsbCwgbnVsbCksIGF1dGhDYik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aGVuUHJvbWlzZVNldHRsZXMoYXV0aC5fZW5zdXJlVmFsaWRBdXRoQ3JlZGVudGlhbHMoZmFsc2UpLCBhdXRoQ2IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKlxuICAgKiB0aGVyZSBhcmUsIGF0IG1vc3QsIHR3byB0cmFuc3BvcnRzIGF2YWlsYWJsZSB3aXRoIHdoaWNoIGEgY29ubmVjdGlvbiBtYXlcbiAgICogYmUgYXR0ZW1wdGVkOiB3ZWJfc29ja2V0IGFuZC9vciBhIGJhc2UgdHJhbnNwb3J0ICh4aHJfcG9sbGluZyBpbiBicm93c2VycyxcbiAgICogY29tZXQgaW4gbm9kZWpzKS4gd2ViX3NvY2tldCBpcyBhbHdheXMgcHJlZmVycmVkLCBhbmQgdGhlIGJhc2UgdHJhbnNwb3J0IGlzXG4gICAqIG9ubHkgdXNlZCBpbiBjYXNlIHdlYl9zb2NrZXQgY29ubmVjdGl2aXR5IGFwcGVhcnMgdG8gYmUgdW5hdmFpbGFibGUuXG4gICAqXG4gICAqIGNvbm5lY3RJbXBsIGJlZ2lucyB0aGUgdHJhbnNwb3J0IHNlbGVjdGlvbiBwcm9jZXNzIGJ5IGNoZWNraW5nIHdoaWNoIHRyYW5zcG9ydHNcbiAgICogYXJlIGF2YWlsYWJsZSwgYW5kIGlmIHRoZXJlIGlzIGEgY2FjaGVkIHByZWZlcmVuY2UuIEl0IHRoZW4gZGVmZXJzIHRvIHRoZVxuICAgKiB0cmFuc3BvcnQtc3BlY2lmaWMgY29ubmVjdCBtZXRob2RzOiBjb25uZWN0V3MgYW5kIGNvbm5lY3RCYXNlLlxuICAgKlxuICAgKiBJdCBpcyBhbHNvIHJlc3BvbnNpYmxlIGZvciBpbnZhbGlkYXRpbmcgdGhlIGNhY2hlIGluIHRoZSBjYXNlIHRoYXQgYSBiYXNlXG4gICAqIHRyYW5zcG9ydCBwcmVmZXJlbmNlIGlzIHN0b3JlZCBidXQgd2ViIHNvY2tldCBjb25uZWN0aXZpdHkgaXMgbm93IGF2YWlsYWJsZS5cbiAgICpcbiAgICogaGFuZGxpbmcgb2YgdGhlIGNhc2Ugd2hlcmUgd2UgbmVlZCB0byBmYWlsb3ZlciBmcm9tIHdlYl9zb2NrZXQgdG8gdGhlIGJhc2VcbiAgICogdHJhbnNwb3J0IGlzIGltcGxlbWVudGVkIGluIHRoZSBjb25uZWN0V3MgbWV0aG9kLlxuICAgKi9cbiAgY29ubmVjdEltcGwodHJhbnNwb3J0UGFyYW1zLCBjb25uZWN0Q291bnQpIHtcbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGUuc3RhdGU7XG4gICAgaWYgKHN0YXRlICE9PSB0aGlzLnN0YXRlcy5jb25uZWN0aW5nLnN0YXRlKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuY29ubmVjdEltcGwoKVwiLFxuICAgICAgICBcIk11c3QgYmUgaW4gY29ubmVjdGluZyBzdGF0ZSB0byBjb25uZWN0LCBidXQgd2FzIFwiICsgc3RhdGVcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRyYW5zcG9ydFByZWZlcmVuY2UgPSB0aGlzLmdldFRyYW5zcG9ydFByZWZlcmVuY2UoKTtcbiAgICBpZiAodHJhbnNwb3J0UHJlZmVyZW5jZSAmJiB0cmFuc3BvcnRQcmVmZXJlbmNlID09PSB0aGlzLmJhc2VUcmFuc3BvcnQgJiYgdGhpcy53ZWJTb2NrZXRUcmFuc3BvcnRBdmFpbGFibGUpIHtcbiAgICAgIHRoaXMuY2hlY2tXc0Nvbm5lY3Rpdml0eSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLnVucGVyc2lzdFRyYW5zcG9ydFByZWZlcmVuY2UoKTtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IHRoaXMuc3RhdGVzLmNvbm5lY3RpbmcpIHtcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuY29ubmVjdEltcGwoKTpcIixcbiAgICAgICAgICAgIFwid2ViIHNvY2tldCBjb25uZWN0aXZpdHkgYXZhaWxhYmxlLCBjYW5jZWxsaW5nIGNvbm5lY3Rpb24gYXR0ZW1wdCB3aXRoIFwiICsgdGhpcy5iYXNlVHJhbnNwb3J0XG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3RBbGxUcmFuc3BvcnRzKCk7XG4gICAgICAgICAgdGhpcy5jb25uZWN0V3ModHJhbnNwb3J0UGFyYW1zLCArK3RoaXMuY29ubmVjdENvdW50ZXIpO1xuICAgICAgICB9XG4gICAgICB9KS5jYXRjaChub29wKTtcbiAgICB9XG4gICAgaWYgKHRyYW5zcG9ydFByZWZlcmVuY2UgJiYgdHJhbnNwb3J0UHJlZmVyZW5jZSA9PT0gdGhpcy5iYXNlVHJhbnNwb3J0IHx8IHRoaXMuYmFzZVRyYW5zcG9ydCAmJiAhdGhpcy53ZWJTb2NrZXRUcmFuc3BvcnRBdmFpbGFibGUpIHtcbiAgICAgIHRoaXMuY29ubmVjdEJhc2UodHJhbnNwb3J0UGFyYW1zLCBjb25uZWN0Q291bnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbm5lY3RXcyh0cmFuc3BvcnRQYXJhbXMsIGNvbm5lY3RDb3VudCk7XG4gICAgfVxuICB9XG4gIC8qXG4gICAqIGNvbm5lY3RXcyBzdGFydHMgdHdvIHRpbWVycyB0byBtb25pdG9yIHRoZSBzdWNjZXNzIG9mIGEgd2ViX3NvY2tldCBjb25uZWN0aW9uIGF0dGVtcHQ6XG4gICAqIC0gd2ViU29ja2V0U2xvd1RpbWVyOiBpZiB0aGlzIHRpbWVyIGZpcmVzIGJlZm9yZSB0aGUgY29ubmVjdGlvbiBzdWNjZWVkcyxcbiAgICogICBjbSB3aWxsIHNpbXVsdGFuZW91c2x5IGNoZWNrIHdlYnNvY2tldCBhbmQgaHR0cC94aHIgY29ubmVjdGl2aXR5LiBpZiB0aGUgaHR0cFxuICAgKiAgIGNvbm5lY3Rpdml0eSBjaGVjayBmYWlscywgd2UgZ2l2ZSB1cCB0aGUgY29ubmVjdGlvbiBzZXF1ZW5jZSBlbnRpcmVseSBhbmRcbiAgICogICB0cmFuc2l0aW9uIHRvIGRpc2Nvbm5lY3RlZC4gaWYgdGhlIHdlYnNvY2tldCBjb25uZWN0aXZpdHkgY2hlY2sgZmFpbHMgdGhlblxuICAgKiAgIHdlIGFzc3VtZSBubyB3cyBjb25uZWN0aXZpdHkgYW5kIGZhaWxvdmVyIHRvIGJhc2UgdHJhbnNwb3J0LiBpbiB0aGUgY2FzZSB0aGF0XG4gICAqICAgdGhlIGNoZWNrcyBzdWNjZWVkLCB3ZSBjb250aW51ZSB3aXRoIHdlYnNvY2tldCBhbmQgd2FpdCBmb3IgaXQgdG8gdHJ5IGZhbGxiYWNrIGhvc3RzXG4gICAqICAgYW5kLCBpZiB1bnN1Y2Nlc3NmdWwsIHVsdGltYXRlbHkgdHJhbnNpdGlvbiB0byBkaXNjb25uZWN0ZWQuXG4gICAqIC0gd2ViU29ja2V0R2l2ZVVwVGltZXI6IGlmIHRoaXMgdGltZXIgZmlyZXMsIGFuZCB0aGUgcHJlY2VkaW5nIHdlYnNvY2tldFxuICAgKiAgIGNvbm5lY3Rpdml0eSBjaGVjayBpcyBzdGlsbCBwZW5kaW5nIHRoZW4gd2UgYXNzdW1lIHRoYXQgdGhlcmUgaXMgYW4gaXNzdWVcbiAgICogICB3aXRoIHRoZSB0cmFuc3BvcnQgYW5kIGZhbGxiYWNrIHRvIGJhc2UgdHJhbnNwb3J0LlxuICAgKi9cbiAgY29ubmVjdFdzKHRyYW5zcG9ydFBhcmFtcywgY29ubmVjdENvdW50KSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sIFwiQ29ubmVjdGlvbk1hbmFnZXIuY29ubmVjdFdzKClcIik7XG4gICAgdGhpcy53c0NoZWNrUmVzdWx0ID0gbnVsbDtcbiAgICB0aGlzLmFiYW5kb25lZFdlYlNvY2tldCA9IGZhbHNlO1xuICAgIHRoaXMuc3RhcnRXZWJTb2NrZXRTbG93VGltZXIoKTtcbiAgICB0aGlzLnN0YXJ0V2ViU29ja2V0R2l2ZVVwVGltZXIodHJhbnNwb3J0UGFyYW1zKTtcbiAgICB0aGlzLnRyeVRyYW5zcG9ydFdpdGhGYWxsYmFja3MoXCJ3ZWJfc29ja2V0XCIsIHRyYW5zcG9ydFBhcmFtcywgdHJ1ZSwgY29ubmVjdENvdW50LCAoKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy53c0NoZWNrUmVzdWx0ICE9PSBmYWxzZSAmJiAhdGhpcy5hYmFuZG9uZWRXZWJTb2NrZXQ7XG4gICAgfSk7XG4gIH1cbiAgY29ubmVjdEJhc2UodHJhbnNwb3J0UGFyYW1zLCBjb25uZWN0Q291bnQpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTywgXCJDb25uZWN0aW9uTWFuYWdlci5jb25uZWN0QmFzZSgpXCIpO1xuICAgIGlmICh0aGlzLmJhc2VUcmFuc3BvcnQpIHtcbiAgICAgIHRoaXMudHJ5VHJhbnNwb3J0V2l0aEZhbGxiYWNrcyh0aGlzLmJhc2VUcmFuc3BvcnQsIHRyYW5zcG9ydFBhcmFtcywgZmFsc2UsIGNvbm5lY3RDb3VudCwgKCkgPT4gdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubm90aWZ5U3RhdGUoe1xuICAgICAgICBzdGF0ZTogXCJkaXNjb25uZWN0ZWRcIixcbiAgICAgICAgZXJyb3I6IG5ldyBFcnJvckluZm8oXCJObyB0cmFuc3BvcnRzIGxlZnQgdG8gdHJ5XCIsIDhlNCwgNDA0KVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHRyeVRyYW5zcG9ydFdpdGhGYWxsYmFja3ModHJhbnNwb3J0TmFtZSwgdHJhbnNwb3J0UGFyYW1zLCB3cywgY29ubmVjdENvdW50LCBzaG91bGRDb250aW51ZSkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci50cnlUcmFuc3BvcnRXaXRoRmFsbGJhY2tzKClcIixcbiAgICAgIHRyYW5zcG9ydE5hbWVcbiAgICApO1xuICAgIGNvbnN0IGdpdmVVcCA9IChlcnIpID0+IHtcbiAgICAgIHRoaXMubm90aWZ5U3RhdGUoeyBzdGF0ZTogdGhpcy5zdGF0ZXMuY29ubmVjdGluZy5mYWlsU3RhdGUsIGVycm9yOiBlcnIgfSk7XG4gICAgfTtcbiAgICBjb25zdCBjYW5kaWRhdGVIb3N0cyA9IHdzID8gdGhpcy53c0hvc3RzLnNsaWNlKCkgOiB0aGlzLmh0dHBIb3N0cy5zbGljZSgpO1xuICAgIGNvbnN0IGhvc3RBdHRlbXB0Q2IgPSAoZmF0YWwsIHRyYW5zcG9ydCkgPT4ge1xuICAgICAgaWYgKGNvbm5lY3RDb3VudCAhPT0gdGhpcy5jb25uZWN0Q291bnRlcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIXNob3VsZENvbnRpbnVlKCkpIHtcbiAgICAgICAgaWYgKHRyYW5zcG9ydCkge1xuICAgICAgICAgIHRyYW5zcG9ydC5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCF0cmFuc3BvcnQgJiYgIWZhdGFsKSB7XG4gICAgICAgIHRyeUZhbGxiYWNrSG9zdHMoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGhvc3QgPSBjYW5kaWRhdGVIb3N0cy5zaGlmdCgpO1xuICAgIGlmICghaG9zdCkge1xuICAgICAgZ2l2ZVVwKG5ldyBFcnJvckluZm8oXCJVbmFibGUgdG8gY29ubmVjdCAobm8gYXZhaWxhYmxlIGhvc3QpXCIsIDgwMDAzLCA0MDQpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdHJhbnNwb3J0UGFyYW1zLmhvc3QgPSBob3N0O1xuICAgIGNvbnN0IHRyeUZhbGxiYWNrSG9zdHMgPSAoKSA9PiB7XG4gICAgICBpZiAoIWNhbmRpZGF0ZUhvc3RzLmxlbmd0aCkge1xuICAgICAgICBnaXZlVXAobmV3IEVycm9ySW5mbyhcIlVuYWJsZSB0byBjb25uZWN0IChhbmQgbm8gbW9yZSBmYWxsYmFjayBob3N0cyB0byB0cnkpXCIsIDgwMDAzLCA0MDQpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLnJlYWx0aW1lLmh0dHAuY2hlY2tDb25uZWN0aXZpdHkpIHtcbiAgICAgICAgZ2l2ZVVwKG5ldyBQYXJ0aWFsRXJyb3JJbmZvKFwiSW50ZXJuYWwgZXJyb3I6IEh0dHAuY2hlY2tDb25uZWN0aXZpdHkgbm90IHNldFwiLCBudWxsLCA1MDApKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgd2hlblByb21pc2VTZXR0bGVzKFxuICAgICAgICB0aGlzLnJlYWx0aW1lLmh0dHAuY2hlY2tDb25uZWN0aXZpdHkoKSxcbiAgICAgICAgKGVyciwgY29ubmVjdGl2aXR5KSA9PiB7XG4gICAgICAgICAgaWYgKGNvbm5lY3RDb3VudCAhPT0gdGhpcy5jb25uZWN0Q291bnRlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXNob3VsZENvbnRpbnVlKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgZ2l2ZVVwKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghY29ubmVjdGl2aXR5KSB7XG4gICAgICAgICAgICBnaXZlVXAobmV3IEVycm9ySW5mbyhcIlVuYWJsZSB0byBjb25uZWN0IChuZXR3b3JrIHVucmVhY2hhYmxlKVwiLCA4MDAwMywgNDA0KSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHRyYW5zcG9ydFBhcmFtcy5ob3N0ID0gYXJyUG9wUmFuZG9tRWxlbWVudChjYW5kaWRhdGVIb3N0cyk7XG4gICAgICAgICAgdGhpcy50cnlBVHJhbnNwb3J0KHRyYW5zcG9ydFBhcmFtcywgdHJhbnNwb3J0TmFtZSwgaG9zdEF0dGVtcHRDYik7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfTtcbiAgICBpZiAodGhpcy5mb3JjZUZhbGxiYWNrSG9zdCAmJiBjYW5kaWRhdGVIb3N0cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuZm9yY2VGYWxsYmFja0hvc3QgPSBmYWxzZTtcbiAgICAgIHRyeUZhbGxiYWNrSG9zdHMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy50cnlBVHJhbnNwb3J0KHRyYW5zcG9ydFBhcmFtcywgdHJhbnNwb3J0TmFtZSwgaG9zdEF0dGVtcHRDYik7XG4gIH1cbiAgY2xvc2VJbXBsKCkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIkNvbm5lY3Rpb25NYW5hZ2VyLmNsb3NlSW1wbCgpXCIsIFwiY2xvc2luZyBjb25uZWN0aW9uXCIpO1xuICAgIHRoaXMuY2FuY2VsU3VzcGVuZFRpbWVyKCk7XG4gICAgdGhpcy5zdGFydFRyYW5zaXRpb25UaW1lcih0aGlzLnN0YXRlcy5jbG9zaW5nKTtcbiAgICBpZiAodGhpcy5wZW5kaW5nVHJhbnNwb3J0KSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuY2xvc2VJbXBsKClcIixcbiAgICAgICAgXCJDbG9zaW5nIHBlbmRpbmcgdHJhbnNwb3J0OiBcIiArIHRoaXMucGVuZGluZ1RyYW5zcG9ydFxuICAgICAgKTtcbiAgICAgIHRoaXMucGVuZGluZ1RyYW5zcG9ydC5jbG9zZSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5hY3RpdmVQcm90b2NvbCkge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLmNsb3NlSW1wbCgpXCIsXG4gICAgICAgIFwiQ2xvc2luZyBhY3RpdmUgdHJhbnNwb3J0OiBcIiArIHRoaXMuYWN0aXZlUHJvdG9jb2wuZ2V0VHJhbnNwb3J0KClcbiAgICAgICk7XG4gICAgICB0aGlzLmFjdGl2ZVByb3RvY29sLmdldFRyYW5zcG9ydCgpLmNsb3NlKCk7XG4gICAgfVxuICAgIHRoaXMubm90aWZ5U3RhdGUoeyBzdGF0ZTogXCJjbG9zZWRcIiB9KTtcbiAgfVxuICBvbkF1dGhVcGRhdGVkKHRva2VuRGV0YWlscywgY2FsbGJhY2spIHtcbiAgICB2YXIgX2EyO1xuICAgIHN3aXRjaCAodGhpcy5zdGF0ZS5zdGF0ZSkge1xuICAgICAgY2FzZSBcImNvbm5lY3RlZFwiOiB7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5vbkF1dGhVcGRhdGVkKClcIixcbiAgICAgICAgICBcIlNlbmRpbmcgQVVUSCBtZXNzYWdlIG9uIGFjdGl2ZSB0cmFuc3BvcnRcIlxuICAgICAgICApO1xuICAgICAgICBjb25zdCBhY3RpdmVUcmFuc3BvcnQgPSAoX2EyID0gdGhpcy5hY3RpdmVQcm90b2NvbCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5nZXRUcmFuc3BvcnQoKTtcbiAgICAgICAgaWYgKGFjdGl2ZVRyYW5zcG9ydCAmJiBhY3RpdmVUcmFuc3BvcnQub25BdXRoVXBkYXRlZCkge1xuICAgICAgICAgIGFjdGl2ZVRyYW5zcG9ydC5vbkF1dGhVcGRhdGVkKHRva2VuRGV0YWlscyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXV0aE1zZyA9IGZyb21WYWx1ZXMzKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbnMyLkFVVEgsXG4gICAgICAgICAgYXV0aDoge1xuICAgICAgICAgICAgYWNjZXNzVG9rZW46IHRva2VuRGV0YWlscy50b2tlblxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2VuZChhdXRoTXNnKTtcbiAgICAgICAgY29uc3Qgc3VjY2Vzc0xpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMub2ZmKGZhaWx1cmVMaXN0ZW5lcik7XG4gICAgICAgICAgY2FsbGJhY2sobnVsbCwgdG9rZW5EZXRhaWxzKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZmFpbHVyZUxpc3RlbmVyID0gKHN0YXRlQ2hhbmdlKSA9PiB7XG4gICAgICAgICAgaWYgKHN0YXRlQ2hhbmdlLmN1cnJlbnQgPT09IFwiZmFpbGVkXCIpIHtcbiAgICAgICAgICAgIHRoaXMub2ZmKHN1Y2Nlc3NMaXN0ZW5lcik7XG4gICAgICAgICAgICB0aGlzLm9mZihmYWlsdXJlTGlzdGVuZXIpO1xuICAgICAgICAgICAgY2FsbGJhY2soc3RhdGVDaGFuZ2UucmVhc29uIHx8IHRoaXMuZ2V0U3RhdGVFcnJvcigpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25jZShcImNvbm5lY3Rpb25kZXRhaWxzXCIsIHN1Y2Nlc3NMaXN0ZW5lcik7XG4gICAgICAgIHRoaXMub24oXCJjb25uZWN0aW9uc3RhdGVcIiwgZmFpbHVyZUxpc3RlbmVyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwiY29ubmVjdGluZ1wiOlxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIub25BdXRoVXBkYXRlZCgpXCIsXG4gICAgICAgICAgXCJBYm9ydGluZyBjdXJyZW50IGNvbm5lY3Rpb24gYXR0ZW1wdHMgaW4gb3JkZXIgdG8gc3RhcnQgYWdhaW4gd2l0aCB0aGUgbmV3IGF1dGggZGV0YWlsc1wiXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZGlzY29ubmVjdEFsbFRyYW5zcG9ydHMoKTtcbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTyxcbiAgICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLm9uQXV0aFVwZGF0ZWQoKVwiLFxuICAgICAgICAgIFwiQ29ubmVjdGlvbiBzdGF0ZSBpcyBcIiArIHRoaXMuc3RhdGUuc3RhdGUgKyBcIjsgd2FpdGluZyB1bnRpbCBlaXRoZXIgY29ubmVjdGVkIG9yIGZhaWxlZFwiXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gKHN0YXRlQ2hhbmdlKSA9PiB7XG4gICAgICAgICAgc3dpdGNoIChzdGF0ZUNoYW5nZS5jdXJyZW50KSB7XG4gICAgICAgICAgICBjYXNlIFwiY29ubmVjdGVkXCI6XG4gICAgICAgICAgICAgIHRoaXMub2ZmKGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgdG9rZW5EZXRhaWxzKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZmFpbGVkXCI6XG4gICAgICAgICAgICBjYXNlIFwiY2xvc2VkXCI6XG4gICAgICAgICAgICBjYXNlIFwic3VzcGVuZGVkXCI6XG4gICAgICAgICAgICAgIHRoaXMub2ZmKGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgY2FsbGJhY2soc3RhdGVDaGFuZ2UucmVhc29uIHx8IHRoaXMuZ2V0U3RhdGVFcnJvcigpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub24oXCJjb25uZWN0aW9uc3RhdGVcIiwgbGlzdGVuZXIpO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5zdGF0ZSA9PT0gXCJjb25uZWN0aW5nXCIpIHtcbiAgICAgICAgICB0aGlzLnN0YXJ0Q29ubmVjdCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucmVxdWVzdFN0YXRlKHsgc3RhdGU6IFwiY29ubmVjdGluZ1wiIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGRpc2Nvbm5lY3RBbGxUcmFuc3BvcnRzKCkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5kaXNjb25uZWN0QWxsVHJhbnNwb3J0cygpXCIsXG4gICAgICBcIkRpc2Nvbm5lY3RpbmcgYWxsIHRyYW5zcG9ydHNcIlxuICAgICk7XG4gICAgdGhpcy5jb25uZWN0Q291bnRlcisrO1xuICAgIGlmICh0aGlzLnBlbmRpbmdUcmFuc3BvcnQpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTyxcbiAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5kaXNjb25uZWN0QWxsVHJhbnNwb3J0cygpXCIsXG4gICAgICAgIFwiRGlzY29ubmVjdGluZyBwZW5kaW5nIHRyYW5zcG9ydDogXCIgKyB0aGlzLnBlbmRpbmdUcmFuc3BvcnRcbiAgICAgICk7XG4gICAgICB0aGlzLnBlbmRpbmdUcmFuc3BvcnQuZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgICBkZWxldGUgdGhpcy5wZW5kaW5nVHJhbnNwb3J0O1xuICAgIGlmICh0aGlzLnByb3Bvc2VkVHJhbnNwb3J0KSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuZGlzY29ubmVjdEFsbFRyYW5zcG9ydHMoKVwiLFxuICAgICAgICBcIkRpc2Nvbm5lY3RpbmcgcHJvcG9zZWQgdHJhbnNwb3J0OiBcIiArIHRoaXMucGVuZGluZ1RyYW5zcG9ydFxuICAgICAgKTtcbiAgICAgIHRoaXMucHJvcG9zZWRUcmFuc3BvcnQuZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgICBkZWxldGUgdGhpcy5wZW5kaW5nVHJhbnNwb3J0O1xuICAgIGlmICh0aGlzLmFjdGl2ZVByb3RvY29sKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuZGlzY29ubmVjdEFsbFRyYW5zcG9ydHMoKVwiLFxuICAgICAgICBcIkRpc2Nvbm5lY3RpbmcgYWN0aXZlIHRyYW5zcG9ydDogXCIgKyB0aGlzLmFjdGl2ZVByb3RvY29sLmdldFRyYW5zcG9ydCgpXG4gICAgICApO1xuICAgICAgdGhpcy5hY3RpdmVQcm90b2NvbC5nZXRUcmFuc3BvcnQoKS5kaXNjb25uZWN0KCk7XG4gICAgfVxuICB9XG4gIC8qKioqKioqKioqKioqKioqKipcbiAgICogZXZlbnQgcXVldWVpbmdcbiAgICoqKioqKioqKioqKioqKioqKi9cbiAgc2VuZChtc2csIHF1ZXVlRXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBub29wO1xuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAoc3RhdGUuc2VuZEV2ZW50cykge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sIFwiQ29ubmVjdGlvbk1hbmFnZXIuc2VuZCgpXCIsIFwic2VuZGluZyBldmVudFwiKTtcbiAgICAgIHRoaXMuc2VuZEltcGwobmV3IFBlbmRpbmdNZXNzYWdlKG1zZywgY2FsbGJhY2spKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc2hvdWxkUXVldWUgPSBxdWV1ZUV2ZW50ICYmIHN0YXRlLnF1ZXVlRXZlbnRzO1xuICAgIGlmICghc2hvdWxkUXVldWUpIHtcbiAgICAgIGNvbnN0IGVyciA9IFwicmVqZWN0aW5nIGV2ZW50LCBxdWV1ZUV2ZW50IHdhcyBcIiArIHF1ZXVlRXZlbnQgKyBcIiwgc3RhdGUgd2FzIFwiICsgc3RhdGUuc3RhdGU7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTywgXCJDb25uZWN0aW9uTWFuYWdlci5zZW5kKClcIiwgZXJyKTtcbiAgICAgIGNhbGxiYWNrKHRoaXMuZXJyb3JSZWFzb24gfHwgbmV3IEVycm9ySW5mbyhlcnIsIDllNCwgNDAwKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLmxvZ2dlci5zaG91bGRMb2cobG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPKSkge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLnNlbmQoKVwiLFxuICAgICAgICBcInF1ZXVlaW5nIG1zZzsgXCIgKyBzdHJpbmdpZnkobXNnLCB0aGlzLnJlYWx0aW1lLl9SZWFsdGltZVByZXNlbmNlKVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5xdWV1ZShtc2csIGNhbGxiYWNrKTtcbiAgfVxuICBzZW5kSW1wbChwZW5kaW5nTWVzc2FnZSkge1xuICAgIGNvbnN0IG1zZyA9IHBlbmRpbmdNZXNzYWdlLm1lc3NhZ2U7XG4gICAgaWYgKHBlbmRpbmdNZXNzYWdlLmFja1JlcXVpcmVkICYmICFwZW5kaW5nTWVzc2FnZS5zZW5kQXR0ZW1wdGVkKSB7XG4gICAgICBtc2cubXNnU2VyaWFsID0gdGhpcy5tc2dTZXJpYWwrKztcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuYWN0aXZlUHJvdG9jb2wuc2VuZChwZW5kaW5nTWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLFxuICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLnNlbmRJbXBsKClcIixcbiAgICAgICAgXCJVbmV4cGVjdGVkIGV4Y2VwdGlvbiBpbiB0cmFuc3BvcnQuc2VuZCgpOiBcIiArIGUuc3RhY2tcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHF1ZXVlKG1zZywgY2FsbGJhY2spIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTywgXCJDb25uZWN0aW9uTWFuYWdlci5xdWV1ZSgpXCIsIFwicXVldWVpbmcgZXZlbnRcIik7XG4gICAgY29uc3QgbGFzdFF1ZXVlZCA9IHRoaXMucXVldWVkTWVzc2FnZXMubGFzdCgpO1xuICAgIGNvbnN0IG1heFNpemUgPSB0aGlzLm9wdGlvbnMubWF4TWVzc2FnZVNpemU7XG4gICAgaWYgKGxhc3RRdWV1ZWQgJiYgIWxhc3RRdWV1ZWQuc2VuZEF0dGVtcHRlZCAmJiBidW5kbGVXaXRoKGxhc3RRdWV1ZWQubWVzc2FnZSwgbXNnLCBtYXhTaXplKSkge1xuICAgICAgaWYgKCFsYXN0UXVldWVkLm1lcmdlZCkge1xuICAgICAgICBsYXN0UXVldWVkLmNhbGxiYWNrID0gbXVsdGljYXN0ZXJfZGVmYXVsdC5jcmVhdGUodGhpcy5sb2dnZXIsIFtsYXN0UXVldWVkLmNhbGxiYWNrXSk7XG4gICAgICAgIGxhc3RRdWV1ZWQubWVyZ2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGxhc3RRdWV1ZWQuY2FsbGJhY2sucHVzaChjYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucXVldWVkTWVzc2FnZXMucHVzaChuZXcgUGVuZGluZ01lc3NhZ2UobXNnLCBjYWxsYmFjaykpO1xuICAgIH1cbiAgfVxuICBzZW5kUXVldWVkTWVzc2FnZXMoKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLnNlbmRRdWV1ZWRNZXNzYWdlcygpXCIsXG4gICAgICBcInNlbmRpbmcgXCIgKyB0aGlzLnF1ZXVlZE1lc3NhZ2VzLmNvdW50KCkgKyBcIiBxdWV1ZWQgbWVzc2FnZXNcIlxuICAgICk7XG4gICAgbGV0IHBlbmRpbmdNZXNzYWdlO1xuICAgIHdoaWxlIChwZW5kaW5nTWVzc2FnZSA9IHRoaXMucXVldWVkTWVzc2FnZXMuc2hpZnQoKSlcbiAgICAgIHRoaXMuc2VuZEltcGwocGVuZGluZ01lc3NhZ2UpO1xuICB9XG4gIHF1ZXVlUGVuZGluZ01lc3NhZ2VzKHBlbmRpbmdNZXNzYWdlcykge1xuICAgIGlmIChwZW5kaW5nTWVzc2FnZXMgJiYgcGVuZGluZ01lc3NhZ2VzLmxlbmd0aCkge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLnF1ZXVlUGVuZGluZ01lc3NhZ2VzKClcIixcbiAgICAgICAgXCJxdWV1ZWluZyBcIiArIHBlbmRpbmdNZXNzYWdlcy5sZW5ndGggKyBcIiBwZW5kaW5nIG1lc3NhZ2VzXCJcbiAgICAgICk7XG4gICAgICB0aGlzLnF1ZXVlZE1lc3NhZ2VzLnByZXBlbmQocGVuZGluZ01lc3NhZ2VzKTtcbiAgICB9XG4gIH1cbiAgZmFpbFF1ZXVlZE1lc3NhZ2VzKGVycikge1xuICAgIGNvbnN0IG51bVF1ZXVlZCA9IHRoaXMucXVldWVkTWVzc2FnZXMuY291bnQoKTtcbiAgICBpZiAobnVtUXVldWVkID4gMCkge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLFxuICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLmZhaWxRdWV1ZWRNZXNzYWdlcygpXCIsXG4gICAgICAgIFwiZmFpbGluZyBcIiArIG51bVF1ZXVlZCArIFwiIHF1ZXVlZCBtZXNzYWdlcywgZXJyID0gXCIgKyBpbnNwZWN0RXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICAgIHRoaXMucXVldWVkTWVzc2FnZXMuY29tcGxldGVBbGxNZXNzYWdlcyhlcnIpO1xuICAgIH1cbiAgfVxuICBvbkNoYW5uZWxNZXNzYWdlKG1lc3NhZ2UsIHRyYW5zcG9ydCkge1xuICAgIHRoaXMucGVuZGluZ0NoYW5uZWxNZXNzYWdlc1N0YXRlLnF1ZXVlLnB1c2goeyBtZXNzYWdlLCB0cmFuc3BvcnQgfSk7XG4gICAgaWYgKCF0aGlzLnBlbmRpbmdDaGFubmVsTWVzc2FnZXNTdGF0ZS5pc1Byb2Nlc3NpbmcpIHtcbiAgICAgIHRoaXMucHJvY2Vzc05leHRQZW5kaW5nQ2hhbm5lbE1lc3NhZ2UoKTtcbiAgICB9XG4gIH1cbiAgcHJvY2Vzc05leHRQZW5kaW5nQ2hhbm5lbE1lc3NhZ2UoKSB7XG4gICAgaWYgKHRoaXMucGVuZGluZ0NoYW5uZWxNZXNzYWdlc1N0YXRlLnF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMucGVuZGluZ0NoYW5uZWxNZXNzYWdlc1N0YXRlLmlzUHJvY2Vzc2luZyA9IHRydWU7XG4gICAgICBjb25zdCBwZW5kaW5nQ2hhbm5lbE1lc3NhZ2UgPSB0aGlzLnBlbmRpbmdDaGFubmVsTWVzc2FnZXNTdGF0ZS5xdWV1ZS5zaGlmdCgpO1xuICAgICAgdGhpcy5wcm9jZXNzQ2hhbm5lbE1lc3NhZ2UocGVuZGluZ0NoYW5uZWxNZXNzYWdlLm1lc3NhZ2UpLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUixcbiAgICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLnByb2Nlc3NOZXh0UGVuZGluZ0NoYW5uZWxNZXNzYWdlKCkgcmVjZWl2ZWQgZXJyb3IgXCIsXG4gICAgICAgICAgZXJyXG4gICAgICAgICk7XG4gICAgICB9KS5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgdGhpcy5wZW5kaW5nQ2hhbm5lbE1lc3NhZ2VzU3RhdGUuaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJvY2Vzc05leHRQZW5kaW5nQ2hhbm5lbE1lc3NhZ2UoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBhc3luYyBwcm9jZXNzQ2hhbm5lbE1lc3NhZ2UobWVzc2FnZSkge1xuICAgIGF3YWl0IHRoaXMucmVhbHRpbWUuY2hhbm5lbHMucHJvY2Vzc0NoYW5uZWxNZXNzYWdlKG1lc3NhZ2UpO1xuICB9XG4gIGFzeW5jIHBpbmcoKSB7XG4gICAgdmFyIF9hMjtcbiAgICBpZiAodGhpcy5zdGF0ZS5zdGF0ZSAhPT0gXCJjb25uZWN0ZWRcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcIlVuYWJsZSB0byBwaW5nIHNlcnZpY2U7IG5vdCBjb25uZWN0ZWRcIiwgNGU0LCA0MDApO1xuICAgIH1cbiAgICBjb25zdCB0cmFuc3BvcnQgPSAoX2EyID0gdGhpcy5hY3RpdmVQcm90b2NvbCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5nZXRUcmFuc3BvcnQoKTtcbiAgICBpZiAoIXRyYW5zcG9ydCkge1xuICAgICAgdGhyb3cgdGhpcy5nZXRTdGF0ZUVycm9yKCk7XG4gICAgfVxuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIkNvbm5lY3Rpb25NYW5hZ2VyLnBpbmcoKVwiLCBcInRyYW5zcG9ydCA9IFwiICsgdHJhbnNwb3J0KTtcbiAgICBjb25zdCBwaW5nU3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IGlkID0gY2hlYXBSYW5kU3RyKCk7XG4gICAgcmV0dXJuIHdpdGhUaW1lb3V0QXN5bmMoXG4gICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBjb25zdCBvbkhlYXJ0YmVhdCA9IChyZXNwb25zZUlkKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlSWQgPT09IGlkKSB7XG4gICAgICAgICAgICB0cmFuc3BvcnQub2ZmKFwiaGVhcnRiZWF0XCIsIG9uSGVhcnRiZWF0KTtcbiAgICAgICAgICAgIHJlc29sdmUoRGF0ZS5ub3coKSAtIHBpbmdTdGFydCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0cmFuc3BvcnQub24oXCJoZWFydGJlYXRcIiwgb25IZWFydGJlYXQpO1xuICAgICAgICB0cmFuc3BvcnQucGluZyhpZCk7XG4gICAgICB9KSxcbiAgICAgIHRoaXMub3B0aW9ucy50aW1lb3V0cy5yZWFsdGltZVJlcXVlc3RUaW1lb3V0LFxuICAgICAgXCJUaW1lb3V0IHdhaXRpbmcgZm9yIGhlYXJ0YmVhdCByZXNwb25zZVwiXG4gICAgKTtcbiAgfVxuICBhYm9ydChlcnJvcikge1xuICAgIHRoaXMuYWN0aXZlUHJvdG9jb2wuZ2V0VHJhbnNwb3J0KCkuZmFpbChlcnJvcik7XG4gIH1cbiAgZ2V0VHJhbnNwb3J0UHJlZmVyZW5jZSgpIHtcbiAgICB2YXIgX2EyLCBfYjtcbiAgICByZXR1cm4gdGhpcy50cmFuc3BvcnRQcmVmZXJlbmNlIHx8IGhhdmVXZWJTdG9yYWdlKCkgJiYgKChfYiA9IChfYTIgPSBQbGF0Zm9ybS5XZWJTdG9yYWdlKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLmdldCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EyLCB0cmFuc3BvcnRQcmVmZXJlbmNlTmFtZSkpO1xuICB9XG4gIHBlcnNpc3RUcmFuc3BvcnRQcmVmZXJlbmNlKHRyYW5zcG9ydCkge1xuICAgIHZhciBfYTIsIF9iO1xuICAgIHRoaXMudHJhbnNwb3J0UHJlZmVyZW5jZSA9IHRyYW5zcG9ydC5zaG9ydE5hbWU7XG4gICAgaWYgKGhhdmVXZWJTdG9yYWdlKCkpIHtcbiAgICAgIChfYiA9IChfYTIgPSBQbGF0Zm9ybS5XZWJTdG9yYWdlKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLnNldCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EyLCB0cmFuc3BvcnRQcmVmZXJlbmNlTmFtZSwgdHJhbnNwb3J0LnNob3J0TmFtZSk7XG4gICAgfVxuICB9XG4gIHVucGVyc2lzdFRyYW5zcG9ydFByZWZlcmVuY2UoKSB7XG4gICAgdmFyIF9hMiwgX2I7XG4gICAgdGhpcy50cmFuc3BvcnRQcmVmZXJlbmNlID0gbnVsbDtcbiAgICBpZiAoaGF2ZVdlYlN0b3JhZ2UoKSkge1xuICAgICAgKF9iID0gKF9hMiA9IFBsYXRmb3JtLldlYlN0b3JhZ2UpID09IG51bGwgPyB2b2lkIDAgOiBfYTIucmVtb3ZlKSA9PSBudWxsID8gdm9pZCAwIDogX2IuY2FsbChfYTIsIHRyYW5zcG9ydFByZWZlcmVuY2VOYW1lKTtcbiAgICB9XG4gIH1cbiAgLyogVGhpcyBtZXRob2QgaXMgb25seSB1c2VkIGR1cmluZyBjb25uZWN0aW9uIGF0dGVtcHRzLCBzbyBpbXBsZW1lbnRzIFJTQTRjMSwgUlNBNGMyLFxuICAgKiBhbmQgUlNBNGQuIEl0IGlzIGdlbmVyYWxseSBub3QgaW52b2tlZCBmb3Igc2VydmVyc2lkZS10cmlnZ2VyZWQgcmVhdXRocyBvciBtYW51YWxcbiAgICogcmVhdXRocywgc28gUlNBNGMzIGRvZXMgbm90IGFwcGx5LCBleGNlcHQgKHBlciBwZXIgUlNBNGQxKSBpbiB0aGUgY2FzZSB0aGF0IHRoZSBhdXRoXG4gICAqIHNlcnZlciByZXR1cm5zIDQwMy4gKi9cbiAgYWN0T25FcnJvckZyb21BdXRob3JpemUoZXJyKSB7XG4gICAgaWYgKGVyci5jb2RlID09PSA0MDE3MSkge1xuICAgICAgdGhpcy5ub3RpZnlTdGF0ZSh7IHN0YXRlOiBcImZhaWxlZFwiLCBlcnJvcjogZXJyIH0pO1xuICAgIH0gZWxzZSBpZiAoZXJyLmNvZGUgPT09IDQwMTAyKSB7XG4gICAgICB0aGlzLm5vdGlmeVN0YXRlKHsgc3RhdGU6IFwiZmFpbGVkXCIsIGVycm9yOiBlcnIgfSk7XG4gICAgfSBlbHNlIGlmIChlcnIuc3RhdHVzQ29kZSA9PT0gSHR0cFN0YXR1c0NvZGVzX2RlZmF1bHQuRm9yYmlkZGVuKSB7XG4gICAgICBjb25zdCBtc2cgPSBcIkNsaWVudCBjb25maWd1cmVkIGF1dGhlbnRpY2F0aW9uIHByb3ZpZGVyIHJldHVybmVkIDQwMzsgZmFpbGluZyB0aGUgY29ubmVjdGlvblwiO1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIFwiQ29ubmVjdGlvbk1hbmFnZXIuYWN0T25FcnJvckZyb21BdXRob3JpemUoKVwiLCBtc2cpO1xuICAgICAgdGhpcy5ub3RpZnlTdGF0ZSh7IHN0YXRlOiBcImZhaWxlZFwiLCBlcnJvcjogbmV3IEVycm9ySW5mbyhtc2csIDgwMDE5LCA0MDMsIGVycikgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG1zZyA9IFwiQ2xpZW50IGNvbmZpZ3VyZWQgYXV0aGVudGljYXRpb24gcHJvdmlkZXIgcmVxdWVzdCBmYWlsZWRcIjtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIkNvbm5lY3Rpb25NYW5hZ2VyLmFjdE9uRXJyb3JGcm9tQXV0aG9yaXplXCIsIG1zZyk7XG4gICAgICB0aGlzLm5vdGlmeVN0YXRlKHsgc3RhdGU6IHRoaXMuc3RhdGUuZmFpbFN0YXRlLCBlcnJvcjogbmV3IEVycm9ySW5mbyhtc2csIDgwMDE5LCA0MDEsIGVycikgfSk7XG4gICAgfVxuICB9XG4gIG9uQ29ubmVjdGlvbkRldGFpbHNVcGRhdGUoY29ubmVjdGlvbkRldGFpbHMsIHRyYW5zcG9ydCkge1xuICAgIGlmICghY29ubmVjdGlvbkRldGFpbHMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5jb25uZWN0aW9uRGV0YWlscyA9IGNvbm5lY3Rpb25EZXRhaWxzO1xuICAgIGlmIChjb25uZWN0aW9uRGV0YWlscy5tYXhNZXNzYWdlU2l6ZSkge1xuICAgICAgdGhpcy5vcHRpb25zLm1heE1lc3NhZ2VTaXplID0gY29ubmVjdGlvbkRldGFpbHMubWF4TWVzc2FnZVNpemU7XG4gICAgfVxuICAgIGNvbnN0IGNsaWVudElkID0gY29ubmVjdGlvbkRldGFpbHMuY2xpZW50SWQ7XG4gICAgaWYgKGNsaWVudElkKSB7XG4gICAgICBjb25zdCBlcnIgPSB0aGlzLnJlYWx0aW1lLmF1dGguX3VuY2hlY2tlZFNldENsaWVudElkKGNsaWVudElkKTtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIFwiQ29ubmVjdGlvbk1hbmFnZXIub25Db25uZWN0aW9uRGV0YWlsc1VwZGF0ZSgpXCIsIGVyci5tZXNzYWdlKTtcbiAgICAgICAgdHJhbnNwb3J0LmZhaWwoZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBjb25uZWN0aW9uU3RhdGVUdGwgPSBjb25uZWN0aW9uRGV0YWlscy5jb25uZWN0aW9uU3RhdGVUdGw7XG4gICAgaWYgKGNvbm5lY3Rpb25TdGF0ZVR0bCkge1xuICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGVUdGwgPSBjb25uZWN0aW9uU3RhdGVUdGw7XG4gICAgfVxuICAgIHRoaXMubWF4SWRsZUludGVydmFsID0gY29ubmVjdGlvbkRldGFpbHMubWF4SWRsZUludGVydmFsO1xuICAgIHRoaXMuZW1pdChcImNvbm5lY3Rpb25kZXRhaWxzXCIsIGNvbm5lY3Rpb25EZXRhaWxzKTtcbiAgfVxuICBjaGVja1dzQ29ubmVjdGl2aXR5KCkge1xuICAgIGNvbnN0IHdzQ29ubmVjdGl2aXR5Q2hlY2tVcmwgPSB0aGlzLm9wdGlvbnMud3NDb25uZWN0aXZpdHlDaGVja1VybCB8fCBkZWZhdWx0c19kZWZhdWx0LndzQ29ubmVjdGl2aXR5Q2hlY2tVcmw7XG4gICAgY29uc3Qgd3MgPSBuZXcgUGxhdGZvcm0uQ29uZmlnLldlYlNvY2tldCh3c0Nvbm5lY3Rpdml0eUNoZWNrVXJsKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IGZpbmlzaGVkID0gZmFsc2U7XG4gICAgICB3cy5vbm9wZW4gPSAoKSA9PiB7XG4gICAgICAgIGlmICghZmluaXNoZWQpIHtcbiAgICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIHdzLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB3cy5vbmNsb3NlID0gd3Mub25lcnJvciA9ICgpID0+IHtcbiAgICAgICAgaWYgKCFmaW5pc2hlZCkge1xuICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuICBzZXNzaW9uUmVjb3ZlcnlOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMucmVjb3ZlcnlLZXlTdG9yYWdlTmFtZSB8fCBcImFibHktY29ubmVjdGlvbi1yZWNvdmVyeVwiO1xuICB9XG4gIGdldFNlc3Npb25SZWNvdmVyRGF0YSgpIHtcbiAgICB2YXIgX2EyLCBfYjtcbiAgICByZXR1cm4gaGF2ZVNlc3Npb25TdG9yYWdlKCkgJiYgKChfYiA9IChfYTIgPSBQbGF0Zm9ybS5XZWJTdG9yYWdlKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLmdldFNlc3Npb24pID09IG51bGwgPyB2b2lkIDAgOiBfYi5jYWxsKF9hMiwgdGhpcy5zZXNzaW9uUmVjb3ZlcnlOYW1lKCkpKTtcbiAgfVxuICBzZXRTZXNzaW9uUmVjb3ZlckRhdGEodmFsdWUpIHtcbiAgICB2YXIgX2EyLCBfYjtcbiAgICByZXR1cm4gaGF2ZVNlc3Npb25TdG9yYWdlKCkgJiYgKChfYiA9IChfYTIgPSBQbGF0Zm9ybS5XZWJTdG9yYWdlKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLnNldFNlc3Npb24pID09IG51bGwgPyB2b2lkIDAgOiBfYi5jYWxsKF9hMiwgdGhpcy5zZXNzaW9uUmVjb3ZlcnlOYW1lKCksIHZhbHVlKSk7XG4gIH1cbiAgY2xlYXJTZXNzaW9uUmVjb3ZlckRhdGEoKSB7XG4gICAgdmFyIF9hMiwgX2I7XG4gICAgcmV0dXJuIGhhdmVTZXNzaW9uU3RvcmFnZSgpICYmICgoX2IgPSAoX2EyID0gUGxhdGZvcm0uV2ViU3RvcmFnZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5yZW1vdmVTZXNzaW9uKSA9PSBudWxsID8gdm9pZCAwIDogX2IuY2FsbChfYTIsIHRoaXMuc2Vzc2lvblJlY292ZXJ5TmFtZSgpKSk7XG4gIH1cbn07XG52YXIgY29ubmVjdGlvbm1hbmFnZXJfZGVmYXVsdCA9IENvbm5lY3Rpb25NYW5hZ2VyO1xuXG4vLyBzcmMvY29tbW9uL2xpYi9jbGllbnQvY29ubmVjdGlvbi50c1xudmFyIENvbm5lY3Rpb24gPSBjbGFzcyBleHRlbmRzIGV2ZW50ZW1pdHRlcl9kZWZhdWx0IHtcbiAgY29uc3RydWN0b3IoYWJseSwgb3B0aW9ucykge1xuICAgIHN1cGVyKGFibHkubG9nZ2VyKTtcbiAgICB0aGlzLndoZW5TdGF0ZSA9IChzdGF0ZSkgPT4ge1xuICAgICAgcmV0dXJuIGV2ZW50ZW1pdHRlcl9kZWZhdWx0LnByb3RvdHlwZS53aGVuU3RhdGUuY2FsbCh0aGlzLCBzdGF0ZSwgdGhpcy5zdGF0ZSk7XG4gICAgfTtcbiAgICB0aGlzLmFibHkgPSBhYmx5O1xuICAgIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIgPSBuZXcgY29ubmVjdGlvbm1hbmFnZXJfZGVmYXVsdChhYmx5LCBvcHRpb25zKTtcbiAgICB0aGlzLnN0YXRlID0gdGhpcy5jb25uZWN0aW9uTWFuYWdlci5zdGF0ZS5zdGF0ZTtcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmlkID0gdm9pZCAwO1xuICAgIHRoaXMuZXJyb3JSZWFzb24gPSBudWxsO1xuICAgIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIub24oXCJjb25uZWN0aW9uc3RhdGVcIiwgKHN0YXRlQ2hhbmdlKSA9PiB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGUgPSBzdGF0ZUNoYW5nZS5jdXJyZW50O1xuICAgICAgUGxhdGZvcm0uQ29uZmlnLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgdGhpcy5lbWl0KHN0YXRlLCBzdGF0ZUNoYW5nZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLm9uKFwidXBkYXRlXCIsIChzdGF0ZUNoYW5nZSkgPT4ge1xuICAgICAgUGxhdGZvcm0uQ29uZmlnLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgdGhpcy5lbWl0KFwidXBkYXRlXCIsIHN0YXRlQ2hhbmdlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGNvbm5lY3QoKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiQ29ubmVjdGlvbi5jb25uZWN0KClcIiwgXCJcIik7XG4gICAgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5yZXF1ZXN0U3RhdGUoeyBzdGF0ZTogXCJjb25uZWN0aW5nXCIgfSk7XG4gIH1cbiAgYXN5bmMgcGluZygpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJDb25uZWN0aW9uLnBpbmcoKVwiLCBcIlwiKTtcbiAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uTWFuYWdlci5waW5nKCk7XG4gIH1cbiAgY2xvc2UoKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiQ29ubmVjdGlvbi5jbG9zZSgpXCIsIFwiY29ubmVjdGlvbktleSA9IFwiICsgdGhpcy5rZXkpO1xuICAgIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIucmVxdWVzdFN0YXRlKHsgc3RhdGU6IFwiY2xvc2luZ1wiIH0pO1xuICB9XG4gIGdldCByZWNvdmVyeUtleSgpIHtcbiAgICB0aGlzLmxvZ2dlci5kZXByZWNhdGlvbldhcm5pbmcoXG4gICAgICBcIlRoZSBgQ29ubmVjdGlvbi5yZWNvdmVyeUtleWAgYXR0cmlidXRlIGhhcyBiZWVuIHJlcGxhY2VkIGJ5IHRoZSBgQ29ubmVjdGlvbi5jcmVhdGVSZWNvdmVyeUtleSgpYCBtZXRob2QuIFJlcGxhY2UgeW91ciB1c2FnZSBvZiBgcmVjb3ZlcnlLZXlgIHdpdGggdGhlIHJldHVybiB2YWx1ZSBvZiBgY3JlYXRlUmVjb3ZlcnlLZXkoKWAuIGByZWNvdmVyeUtleWAgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHZlcnNpb24uXCJcbiAgICApO1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZVJlY292ZXJ5S2V5KCk7XG4gIH1cbiAgY3JlYXRlUmVjb3ZlcnlLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIuY3JlYXRlUmVjb3ZlcnlLZXkoKTtcbiAgfVxufTtcbnZhciBjb25uZWN0aW9uX2RlZmF1bHQgPSBDb25uZWN0aW9uO1xuXG4vLyBzcmMvY29tbW9uL2xpYi9jbGllbnQvY2hhbm5lbHN0YXRlY2hhbmdlLnRzXG52YXIgQ2hhbm5lbFN0YXRlQ2hhbmdlID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihwcmV2aW91cywgY3VycmVudCwgcmVzdW1lZCwgaGFzQmFja2xvZywgcmVhc29uKSB7XG4gICAgdGhpcy5wcmV2aW91cyA9IHByZXZpb3VzO1xuICAgIHRoaXMuY3VycmVudCA9IGN1cnJlbnQ7XG4gICAgaWYgKGN1cnJlbnQgPT09IFwiYXR0YWNoZWRcIikge1xuICAgICAgdGhpcy5yZXN1bWVkID0gcmVzdW1lZDtcbiAgICAgIHRoaXMuaGFzQmFja2xvZyA9IGhhc0JhY2tsb2c7XG4gICAgfVxuICAgIGlmIChyZWFzb24pXG4gICAgICB0aGlzLnJlYXNvbiA9IHJlYXNvbjtcbiAgfVxufTtcbnZhciBjaGFubmVsc3RhdGVjaGFuZ2VfZGVmYXVsdCA9IENoYW5uZWxTdGF0ZUNoYW5nZTtcblxuLy8gc3JjL2NvbW1vbi9saWIvY2xpZW50L3JlYWx0aW1lY2hhbm5lbC50c1xudmFyIG5vb3AyID0gZnVuY3Rpb24oKSB7XG59O1xuZnVuY3Rpb24gdmFsaWRhdGVDaGFubmVsT3B0aW9ucyhvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zICYmIFwicGFyYW1zXCIgaW4gb3B0aW9ucyAmJiAhaXNPYmplY3Qob3B0aW9ucy5wYXJhbXMpKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvckluZm8oXCJvcHRpb25zLnBhcmFtcyBtdXN0IGJlIGFuIG9iamVjdFwiLCA0ZTQsIDQwMCk7XG4gIH1cbiAgaWYgKG9wdGlvbnMgJiYgXCJtb2Rlc1wiIGluIG9wdGlvbnMpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkob3B0aW9ucy5tb2RlcykpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3JJbmZvKFwib3B0aW9ucy5tb2RlcyBtdXN0IGJlIGFuIGFycmF5XCIsIDRlNCwgNDAwKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zLm1vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjdXJyZW50TW9kZSA9IG9wdGlvbnMubW9kZXNbaV07XG4gICAgICBpZiAoIWN1cnJlbnRNb2RlIHx8IHR5cGVvZiBjdXJyZW50TW9kZSAhPT0gXCJzdHJpbmdcIiB8fCAhY2hhbm5lbE1vZGVzLmluY2x1ZGVzKFN0cmluZy5wcm90b3R5cGUudG9VcHBlckNhc2UuY2FsbChjdXJyZW50TW9kZSkpKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3JJbmZvKFwiSW52YWxpZCBjaGFubmVsIG1vZGU6IFwiICsgY3VycmVudE1vZGUsIDRlNCwgNDAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbnZhciBSZWFsdGltZUNoYW5uZWwgPSBjbGFzcyBfUmVhbHRpbWVDaGFubmVsIGV4dGVuZHMgZXZlbnRlbWl0dGVyX2RlZmF1bHQge1xuICBjb25zdHJ1Y3RvcihjbGllbnQsIG5hbWUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2EyLCBfYjtcbiAgICBzdXBlcihjbGllbnQubG9nZ2VyKTtcbiAgICB0aGlzLnJldHJ5Q291bnQgPSAwO1xuICAgIHRoaXMuaGlzdG9yeSA9IGFzeW5jIGZ1bmN0aW9uKHBhcmFtcykge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sIFwiUmVhbHRpbWVDaGFubmVsLmhpc3RvcnkoKVwiLCBcImNoYW5uZWwgPSBcIiArIHRoaXMubmFtZSk7XG4gICAgICBjb25zdCByZXN0TWl4aW4gPSB0aGlzLmNsaWVudC5yZXN0LmNoYW5uZWxNaXhpbjtcbiAgICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLnVudGlsQXR0YWNoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlICE9PSBcImF0dGFjaGVkXCIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFwib3B0aW9uIHVudGlsQXR0YWNoIHJlcXVpcmVzIHRoZSBjaGFubmVsIHRvIGJlIGF0dGFjaGVkXCIsIDRlNCwgNDAwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMucHJvcGVydGllcy5hdHRhY2hTZXJpYWwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFxuICAgICAgICAgICAgXCJ1bnRpbEF0dGFjaCB3YXMgc3BlY2lmaWVkIGFuZCBjaGFubmVsIGlzIGF0dGFjaGVkLCBidXQgYXR0YWNoU2VyaWFsIGlzIG5vdCBkZWZpbmVkXCIsXG4gICAgICAgICAgICA0ZTQsXG4gICAgICAgICAgICA0MDBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBwYXJhbXMudW50aWxBdHRhY2g7XG4gICAgICAgIHBhcmFtcy5mcm9tX3NlcmlhbCA9IHRoaXMucHJvcGVydGllcy5hdHRhY2hTZXJpYWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdE1peGluLmhpc3RvcnkodGhpcywgcGFyYW1zKTtcbiAgICB9O1xuICAgIHRoaXMud2hlblN0YXRlID0gKHN0YXRlKSA9PiB7XG4gICAgICByZXR1cm4gZXZlbnRlbWl0dGVyX2RlZmF1bHQucHJvdG90eXBlLndoZW5TdGF0ZS5jYWxsKHRoaXMsIHN0YXRlLCB0aGlzLnN0YXRlKTtcbiAgICB9O1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIlJlYWx0aW1lQ2hhbm5lbCgpXCIsIFwic3RhcnRlZDsgbmFtZSA9IFwiICsgbmFtZSk7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmNoYW5uZWxPcHRpb25zID0gbm9ybWFsaXNlQ2hhbm5lbE9wdGlvbnMoKF9hMiA9IGNsaWVudC5fQ3J5cHRvKSAhPSBudWxsID8gX2EyIDogbnVsbCwgdGhpcy5sb2dnZXIsIG9wdGlvbnMpO1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMuX3ByZXNlbmNlID0gY2xpZW50Ll9SZWFsdGltZVByZXNlbmNlID8gbmV3IGNsaWVudC5fUmVhbHRpbWVQcmVzZW5jZS5SZWFsdGltZVByZXNlbmNlKHRoaXMpIDogbnVsbDtcbiAgICB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyID0gY2xpZW50LmNvbm5lY3Rpb24uY29ubmVjdGlvbk1hbmFnZXI7XG4gICAgdGhpcy5zdGF0ZSA9IFwiaW5pdGlhbGl6ZWRcIjtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBuZXcgZXZlbnRlbWl0dGVyX2RlZmF1bHQodGhpcy5sb2dnZXIpO1xuICAgIHRoaXMuc3luY0NoYW5uZWxTZXJpYWwgPSB2b2lkIDA7XG4gICAgdGhpcy5wcm9wZXJ0aWVzID0ge1xuICAgICAgYXR0YWNoU2VyaWFsOiB2b2lkIDAsXG4gICAgICBjaGFubmVsU2VyaWFsOiB2b2lkIDBcbiAgICB9O1xuICAgIHRoaXMuc2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgICB0aGlzLmVycm9yUmVhc29uID0gbnVsbDtcbiAgICB0aGlzLl9yZXF1ZXN0ZWRGbGFncyA9IG51bGw7XG4gICAgdGhpcy5fbW9kZSA9IG51bGw7XG4gICAgdGhpcy5fYXR0YWNoUmVzdW1lID0gZmFsc2U7XG4gICAgdGhpcy5fZGVjb2RpbmdDb250ZXh0ID0ge1xuICAgICAgY2hhbm5lbE9wdGlvbnM6IHRoaXMuY2hhbm5lbE9wdGlvbnMsXG4gICAgICBwbHVnaW5zOiBjbGllbnQub3B0aW9ucy5wbHVnaW5zIHx8IHt9LFxuICAgICAgYmFzZUVuY29kZWRQcmV2aW91c1BheWxvYWQ6IHZvaWQgMFxuICAgIH07XG4gICAgdGhpcy5fbGFzdFBheWxvYWQgPSB7XG4gICAgICBtZXNzYWdlSWQ6IG51bGwsXG4gICAgICBwcm90b2NvbE1lc3NhZ2VDaGFubmVsU2VyaWFsOiBudWxsLFxuICAgICAgZGVjb2RlRmFpbHVyZVJlY292ZXJ5SW5Qcm9ncmVzczogbnVsbFxuICAgIH07XG4gICAgdGhpcy5fYWxsQ2hhbm5lbENoYW5nZXMgPSBuZXcgZXZlbnRlbWl0dGVyX2RlZmF1bHQodGhpcy5sb2dnZXIpO1xuICAgIGlmICgoX2IgPSBjbGllbnQub3B0aW9ucy5wbHVnaW5zKSA9PSBudWxsID8gdm9pZCAwIDogX2IuUHVzaCkge1xuICAgICAgdGhpcy5fcHVzaCA9IG5ldyBjbGllbnQub3B0aW9ucy5wbHVnaW5zLlB1c2guUHVzaENoYW5uZWwodGhpcyk7XG4gICAgfVxuICB9XG4gIGdldCBwcmVzZW5jZSgpIHtcbiAgICBpZiAoIXRoaXMuX3ByZXNlbmNlKSB7XG4gICAgICB0aHJvd01pc3NpbmdQbHVnaW5FcnJvcihcIlJlYWx0aW1lUHJlc2VuY2VcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9wcmVzZW5jZTtcbiAgfVxuICBnZXQgcHVzaCgpIHtcbiAgICBpZiAoIXRoaXMuX3B1c2gpIHtcbiAgICAgIHRocm93TWlzc2luZ1BsdWdpbkVycm9yKFwiUHVzaFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3B1c2g7XG4gIH1cbiAgaW52YWxpZFN0YXRlRXJyb3IoKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvckluZm8oXG4gICAgICBcIkNoYW5uZWwgb3BlcmF0aW9uIGZhaWxlZCBhcyBjaGFubmVsIHN0YXRlIGlzIFwiICsgdGhpcy5zdGF0ZSxcbiAgICAgIDkwMDAxLFxuICAgICAgNDAwLFxuICAgICAgdGhpcy5lcnJvclJlYXNvbiB8fCB2b2lkIDBcbiAgICApO1xuICB9XG4gIHN0YXRpYyBwcm9jZXNzTGlzdGVuZXJBcmdzKGFyZ3MpIHtcbiAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncyk7XG4gICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGFyZ3MudW5zaGlmdChudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIGFyZ3M7XG4gIH1cbiAgYXN5bmMgc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgdmFyIF9hMjtcbiAgICBjb25zdCBwcmV2aW91c0NoYW5uZWxPcHRpb25zID0gdGhpcy5jaGFubmVsT3B0aW9ucztcbiAgICBjb25zdCBlcnIgPSB2YWxpZGF0ZUNoYW5uZWxPcHRpb25zKG9wdGlvbnMpO1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gICAgdGhpcy5jaGFubmVsT3B0aW9ucyA9IG5vcm1hbGlzZUNoYW5uZWxPcHRpb25zKChfYTIgPSB0aGlzLmNsaWVudC5fQ3J5cHRvKSAhPSBudWxsID8gX2EyIDogbnVsbCwgdGhpcy5sb2dnZXIsIG9wdGlvbnMpO1xuICAgIGlmICh0aGlzLl9kZWNvZGluZ0NvbnRleHQpXG4gICAgICB0aGlzLl9kZWNvZGluZ0NvbnRleHQuY2hhbm5lbE9wdGlvbnMgPSB0aGlzLmNoYW5uZWxPcHRpb25zO1xuICAgIGlmICh0aGlzLl9zaG91bGRSZWF0dGFjaFRvU2V0T3B0aW9ucyhvcHRpb25zLCBwcmV2aW91c0NoYW5uZWxPcHRpb25zKSkge1xuICAgICAgdGhpcy5hdHRhY2hJbXBsKCk7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB0aGlzLl9hbGxDaGFubmVsQ2hhbmdlcy5vbmNlKFxuICAgICAgICAgIFtcImF0dGFjaGVkXCIsIFwidXBkYXRlXCIsIFwiZGV0YWNoZWRcIiwgXCJmYWlsZWRcIl0sXG4gICAgICAgICAgZnVuY3Rpb24oc3RhdGVDaGFuZ2UpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5ldmVudCkge1xuICAgICAgICAgICAgICBjYXNlIFwidXBkYXRlXCI6XG4gICAgICAgICAgICAgIGNhc2UgXCJhdHRhY2hlZFwiOlxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZWplY3Qoc3RhdGVDaGFuZ2UucmVhc29uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgX3Nob3VsZFJlYXR0YWNoVG9TZXRPcHRpb25zKG9wdGlvbnMsIHByZXZPcHRpb25zKSB7XG4gICAgaWYgKCEodGhpcy5zdGF0ZSA9PT0gXCJhdHRhY2hlZFwiIHx8IHRoaXMuc3RhdGUgPT09IFwiYXR0YWNoaW5nXCIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLnBhcmFtcykge1xuICAgICAgY29uc3QgcmVxdWVzdGVkUGFyYW1zID0gb21pdEFnZW50KG9wdGlvbnMucGFyYW1zKTtcbiAgICAgIGNvbnN0IGV4aXN0aW5nUGFyYW1zID0gb21pdEFnZW50KHByZXZPcHRpb25zLnBhcmFtcyk7XG4gICAgICBpZiAoT2JqZWN0LmtleXMocmVxdWVzdGVkUGFyYW1zKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKGV4aXN0aW5nUGFyYW1zKS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIXNoYWxsb3dFcXVhbHMoZXhpc3RpbmdQYXJhbXMsIHJlcXVlc3RlZFBhcmFtcykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLm1vZGVzKSB7XG4gICAgICBpZiAoIXByZXZPcHRpb25zLm1vZGVzIHx8ICFhcnJFcXVhbHMob3B0aW9ucy5tb2RlcywgcHJldk9wdGlvbnMubW9kZXMpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgYXN5bmMgcHVibGlzaCguLi5hcmdzKSB7XG4gICAgbGV0IG1lc3NhZ2VzID0gYXJnc1swXTtcbiAgICBsZXQgYXJnQ291bnQgPSBhcmdzLmxlbmd0aDtcbiAgICBpZiAoIXRoaXMuY29ubmVjdGlvbk1hbmFnZXIuYWN0aXZlU3RhdGUoKSkge1xuICAgICAgdGhyb3cgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5nZXRFcnJvcigpO1xuICAgIH1cbiAgICBpZiAoYXJnQ291bnQgPT0gMSkge1xuICAgICAgaWYgKGlzT2JqZWN0KG1lc3NhZ2VzKSlcbiAgICAgICAgbWVzc2FnZXMgPSBbZnJvbVZhbHVlcyhtZXNzYWdlcyldO1xuICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShtZXNzYWdlcykpXG4gICAgICAgIG1lc3NhZ2VzID0gZnJvbVZhbHVlc0FycmF5KG1lc3NhZ2VzKTtcbiAgICAgIGVsc2VcbiAgICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcbiAgICAgICAgICBcIlRoZSBzaW5nbGUtYXJndW1lbnQgZm9ybSBvZiBwdWJsaXNoKCkgZXhwZWN0cyBhIG1lc3NhZ2Ugb2JqZWN0IG9yIGFuIGFycmF5IG9mIG1lc3NhZ2Ugb2JqZWN0c1wiLFxuICAgICAgICAgIDQwMDEzLFxuICAgICAgICAgIDQwMFxuICAgICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBtZXNzYWdlcyA9IFtmcm9tVmFsdWVzKHsgbmFtZTogYXJnc1swXSwgZGF0YTogYXJnc1sxXSB9KV07XG4gICAgfVxuICAgIGNvbnN0IG1heE1lc3NhZ2VTaXplID0gdGhpcy5jbGllbnQub3B0aW9ucy5tYXhNZXNzYWdlU2l6ZTtcbiAgICBhd2FpdCBlbmNvZGVBcnJheShtZXNzYWdlcywgdGhpcy5jaGFubmVsT3B0aW9ucyk7XG4gICAgY29uc3Qgc2l6ZSA9IGdldE1lc3NhZ2VzU2l6ZShtZXNzYWdlcyk7XG4gICAgaWYgKHNpemUgPiBtYXhNZXNzYWdlU2l6ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcbiAgICAgICAgXCJNYXhpbXVtIHNpemUgb2YgbWVzc2FnZXMgdGhhdCBjYW4gYmUgcHVibGlzaGVkIGF0IG9uY2UgZXhjZWVkZWQgKCB3YXMgXCIgKyBzaXplICsgXCIgYnl0ZXM7IGxpbWl0IGlzIFwiICsgbWF4TWVzc2FnZVNpemUgKyBcIiBieXRlcylcIixcbiAgICAgICAgNDAwMDksXG4gICAgICAgIDQwMFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuX3B1Ymxpc2gobWVzc2FnZXMsIChlcnIpID0+IGVyciA/IHJlamVjdChlcnIpIDogcmVzb2x2ZSgpKTtcbiAgICB9KTtcbiAgfVxuICBfcHVibGlzaChtZXNzYWdlcywgY2FsbGJhY2spIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTywgXCJSZWFsdGltZUNoYW5uZWwucHVibGlzaCgpXCIsIFwibWVzc2FnZSBjb3VudCA9IFwiICsgbWVzc2FnZXMubGVuZ3RoKTtcbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgY2FzZSBcImZhaWxlZFwiOlxuICAgICAgY2FzZSBcInN1c3BlbmRlZFwiOlxuICAgICAgICBjYWxsYmFjayhFcnJvckluZm8uZnJvbVZhbHVlcyh0aGlzLmludmFsaWRTdGF0ZUVycm9yKCkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgICAgXCJSZWFsdGltZUNoYW5uZWwucHVibGlzaCgpXCIsXG4gICAgICAgICAgXCJzZW5kaW5nIG1lc3NhZ2U7IGNoYW5uZWwgc3RhdGUgaXMgXCIgKyBzdGF0ZVxuICAgICAgICApO1xuICAgICAgICBjb25zdCBtc2cgPSBuZXcgcHJvdG9jb2xtZXNzYWdlX2RlZmF1bHQoKTtcbiAgICAgICAgbXNnLmFjdGlvbiA9IGFjdGlvbnMyLk1FU1NBR0U7XG4gICAgICAgIG1zZy5jaGFubmVsID0gdGhpcy5uYW1lO1xuICAgICAgICBtc2cubWVzc2FnZXMgPSBtZXNzYWdlcztcbiAgICAgICAgdGhpcy5zZW5kTWVzc2FnZShtc2csIGNhbGxiYWNrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIG9uRXZlbnQobWVzc2FnZXMpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTywgXCJSZWFsdGltZUNoYW5uZWwub25FdmVudCgpXCIsIFwicmVjZWl2ZWQgbWVzc2FnZVwiKTtcbiAgICBjb25zdCBzdWJzY3JpcHRpb25zID0gdGhpcy5zdWJzY3JpcHRpb25zO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVzc2FnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBtZXNzYWdlc1tpXTtcbiAgICAgIHN1YnNjcmlwdGlvbnMuZW1pdChtZXNzYWdlLm5hbWUsIG1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuICBhc3luYyBhdHRhY2goKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgPT09IFwiYXR0YWNoZWRcIikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLl9hdHRhY2goZmFsc2UsIG51bGwsIChlcnIsIHJlc3VsdCkgPT4gZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKHJlc3VsdCkpO1xuICAgIH0pO1xuICB9XG4gIF9hdHRhY2goZm9yY2VSZWF0dGFjaCwgYXR0YWNoUmVhc29uLCBjYWxsYmFjaykge1xuICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrID0gKGVycikgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICAgICAgICBcIlJlYWx0aW1lQ2hhbm5lbC5fYXR0YWNoKClcIixcbiAgICAgICAgICAgIFwiQ2hhbm5lbCBhdHRhY2ggZmFpbGVkOiBcIiArIGVyci50b1N0cmluZygpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgY29ubmVjdGlvbk1hbmFnZXIgPSB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyO1xuICAgIGlmICghY29ubmVjdGlvbk1hbmFnZXIuYWN0aXZlU3RhdGUoKSkge1xuICAgICAgY2FsbGJhY2soY29ubmVjdGlvbk1hbmFnZXIuZ2V0RXJyb3IoKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlICE9PSBcImF0dGFjaGluZ1wiIHx8IGZvcmNlUmVhdHRhY2gpIHtcbiAgICAgIHRoaXMucmVxdWVzdFN0YXRlKFwiYXR0YWNoaW5nXCIsIGF0dGFjaFJlYXNvbik7XG4gICAgfVxuICAgIHRoaXMub25jZShmdW5jdGlvbihzdGF0ZUNoYW5nZSkge1xuICAgICAgc3dpdGNoICh0aGlzLmV2ZW50KSB7XG4gICAgICAgIGNhc2UgXCJhdHRhY2hlZFwiOlxuICAgICAgICAgIGNhbGxiYWNrID09IG51bGwgPyB2b2lkIDAgOiBjYWxsYmFjayhudWxsLCBzdGF0ZUNoYW5nZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJkZXRhY2hlZFwiOlxuICAgICAgICBjYXNlIFwic3VzcGVuZGVkXCI6XG4gICAgICAgIGNhc2UgXCJmYWlsZWRcIjpcbiAgICAgICAgICBjYWxsYmFjayA9PSBudWxsID8gdm9pZCAwIDogY2FsbGJhY2soXG4gICAgICAgICAgICBzdGF0ZUNoYW5nZS5yZWFzb24gfHwgY29ubmVjdGlvbk1hbmFnZXIuZ2V0RXJyb3IoKSB8fCBuZXcgRXJyb3JJbmZvKFwiVW5hYmxlIHRvIGF0dGFjaDsgcmVhc29uIHVua25vd247IHN0YXRlID0gXCIgKyB0aGlzLmV2ZW50LCA5ZTQsIDUwMClcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZGV0YWNoaW5nXCI6XG4gICAgICAgICAgY2FsbGJhY2sgPT0gbnVsbCA/IHZvaWQgMCA6IGNhbGxiYWNrKG5ldyBFcnJvckluZm8oXCJBdHRhY2ggcmVxdWVzdCBzdXBlcnNlZGVkIGJ5IGEgc3Vic2VxdWVudCBkZXRhY2ggcmVxdWVzdFwiLCA5ZTQsIDQwOSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGF0dGFjaEltcGwoKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sIFwiUmVhbHRpbWVDaGFubmVsLmF0dGFjaEltcGwoKVwiLCBcInNlbmRpbmcgQVRUQUNIIG1lc3NhZ2VcIik7XG4gICAgY29uc3QgYXR0YWNoTXNnID0gZnJvbVZhbHVlczMoe1xuICAgICAgYWN0aW9uOiBhY3Rpb25zMi5BVFRBQ0gsXG4gICAgICBjaGFubmVsOiB0aGlzLm5hbWUsXG4gICAgICBwYXJhbXM6IHRoaXMuY2hhbm5lbE9wdGlvbnMucGFyYW1zLFxuICAgICAgLy8gUlRMNGMxOiBJbmNsdWRlcyB0aGUgY2hhbm5lbCBzZXJpYWwgdG8gcmVzdW1lIGZyb20gYSBwcmV2aW91cyBtZXNzYWdlXG4gICAgICAvLyBvciBhdHRhY2htZW50LlxuICAgICAgY2hhbm5lbFNlcmlhbDogdGhpcy5wcm9wZXJ0aWVzLmNoYW5uZWxTZXJpYWxcbiAgICB9KTtcbiAgICBpZiAodGhpcy5fcmVxdWVzdGVkRmxhZ3MpIHtcbiAgICAgIGF0dGFjaE1zZy5lbmNvZGVNb2Rlc1RvRmxhZ3ModGhpcy5fcmVxdWVzdGVkRmxhZ3MpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jaGFubmVsT3B0aW9ucy5tb2Rlcykge1xuICAgICAgYXR0YWNoTXNnLmVuY29kZU1vZGVzVG9GbGFncyhhbGxUb1VwcGVyQ2FzZSh0aGlzLmNoYW5uZWxPcHRpb25zLm1vZGVzKSk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9hdHRhY2hSZXN1bWUpIHtcbiAgICAgIGF0dGFjaE1zZy5zZXRGbGFnKFwiQVRUQUNIX1JFU1VNRVwiKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xhc3RQYXlsb2FkLmRlY29kZUZhaWx1cmVSZWNvdmVyeUluUHJvZ3Jlc3MpIHtcbiAgICAgIGF0dGFjaE1zZy5jaGFubmVsU2VyaWFsID0gdGhpcy5fbGFzdFBheWxvYWQucHJvdG9jb2xNZXNzYWdlQ2hhbm5lbFNlcmlhbDtcbiAgICB9XG4gICAgdGhpcy5zZW5kTWVzc2FnZShhdHRhY2hNc2csIG5vb3AyKTtcbiAgfVxuICBhc3luYyBkZXRhY2goKSB7XG4gICAgY29uc3QgY29ubmVjdGlvbk1hbmFnZXIgPSB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyO1xuICAgIGlmICghY29ubmVjdGlvbk1hbmFnZXIuYWN0aXZlU3RhdGUoKSkge1xuICAgICAgdGhyb3cgY29ubmVjdGlvbk1hbmFnZXIuZ2V0RXJyb3IoKTtcbiAgICB9XG4gICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XG4gICAgICBjYXNlIFwic3VzcGVuZGVkXCI6XG4gICAgICAgIHRoaXMubm90aWZ5U3RhdGUoXCJkZXRhY2hlZFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBcImRldGFjaGVkXCI6XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgXCJmYWlsZWRcIjpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcIlVuYWJsZSB0byBkZXRhY2g7IGNoYW5uZWwgc3RhdGUgPSBmYWlsZWRcIiwgOTAwMDEsIDQwMCk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLnJlcXVlc3RTdGF0ZShcImRldGFjaGluZ1wiKTtcbiAgICAgIGNhc2UgXCJkZXRhY2hpbmdcIjpcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICB0aGlzLm9uY2UoZnVuY3Rpb24oc3RhdGVDaGFuZ2UpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5ldmVudCkge1xuICAgICAgICAgICAgICBjYXNlIFwiZGV0YWNoZWRcIjpcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJhdHRhY2hlZFwiOlxuICAgICAgICAgICAgICBjYXNlIFwic3VzcGVuZGVkXCI6XG4gICAgICAgICAgICAgIGNhc2UgXCJmYWlsZWRcIjpcbiAgICAgICAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICAgICAgICBzdGF0ZUNoYW5nZS5yZWFzb24gfHwgY29ubmVjdGlvbk1hbmFnZXIuZ2V0RXJyb3IoKSB8fCBuZXcgRXJyb3JJbmZvKFwiVW5hYmxlIHRvIGRldGFjaDsgcmVhc29uIHVua25vd247IHN0YXRlID0gXCIgKyB0aGlzLmV2ZW50LCA5ZTQsIDUwMClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiYXR0YWNoaW5nXCI6XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvckluZm8oXCJEZXRhY2ggcmVxdWVzdCBzdXBlcnNlZGVkIGJ5IGEgc3Vic2VxdWVudCBhdHRhY2ggcmVxdWVzdFwiLCA5ZTQsIDQwOSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZGV0YWNoSW1wbChjYWxsYmFjaykge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLCBcIlJlYWx0aW1lQ2hhbm5lbC5kZXRhY2goKVwiLCBcInNlbmRpbmcgREVUQUNIIG1lc3NhZ2VcIik7XG4gICAgY29uc3QgbXNnID0gZnJvbVZhbHVlczMoeyBhY3Rpb246IGFjdGlvbnMyLkRFVEFDSCwgY2hhbm5lbDogdGhpcy5uYW1lIH0pO1xuICAgIHRoaXMuc2VuZE1lc3NhZ2UobXNnLCBjYWxsYmFjayB8fCBub29wMik7XG4gIH1cbiAgYXN5bmMgc3Vic2NyaWJlKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBbZXZlbnQsIGxpc3RlbmVyXSA9IF9SZWFsdGltZUNoYW5uZWwucHJvY2Vzc0xpc3RlbmVyQXJncyhhcmdzKTtcbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gXCJmYWlsZWRcIikge1xuICAgICAgdGhyb3cgRXJyb3JJbmZvLmZyb21WYWx1ZXModGhpcy5pbnZhbGlkU3RhdGVFcnJvcigpKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50ICYmIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiAhQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIHRoaXMuY2xpZW50Ll9GaWx0ZXJlZFN1YnNjcmlwdGlvbnMuc3Vic2NyaWJlRmlsdGVyKHRoaXMsIGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5vbihldmVudCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5hdHRhY2goKTtcbiAgfVxuICB1bnN1YnNjcmliZSguLi5hcmdzKSB7XG4gICAgdmFyIF9hMjtcbiAgICBjb25zdCBbZXZlbnQsIGxpc3RlbmVyXSA9IF9SZWFsdGltZUNoYW5uZWwucHJvY2Vzc0xpc3RlbmVyQXJncyhhcmdzKTtcbiAgICBpZiAodHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmICFsaXN0ZW5lciB8fCAoKF9hMiA9IHRoaXMuZmlsdGVyZWRTdWJzY3JpcHRpb25zKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLmhhcyhsaXN0ZW5lcikpKSB7XG4gICAgICB0aGlzLmNsaWVudC5fRmlsdGVyZWRTdWJzY3JpcHRpb25zLmdldEFuZERlbGV0ZUZpbHRlcmVkU3Vic2NyaXB0aW9ucyh0aGlzLCBldmVudCwgbGlzdGVuZXIpLmZvckVhY2goKGwpID0+IHRoaXMuc3Vic2NyaXB0aW9ucy5vZmYobCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMub2ZmKGV2ZW50LCBsaXN0ZW5lcik7XG4gIH1cbiAgc3luYygpIHtcbiAgICBzd2l0Y2ggKHRoaXMuc3RhdGUpIHtcbiAgICAgIGNhc2UgXCJpbml0aWFsaXplZFwiOlxuICAgICAgY2FzZSBcImRldGFjaGluZ1wiOlxuICAgICAgY2FzZSBcImRldGFjaGVkXCI6XG4gICAgICAgIHRocm93IG5ldyBQYXJ0aWFsRXJyb3JJbmZvKFwiVW5hYmxlIHRvIHN5bmMgdG8gY2hhbm5lbDsgbm90IGF0dGFjaGVkXCIsIDRlNCk7XG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgICBjb25zdCBjb25uZWN0aW9uTWFuYWdlciA9IHRoaXMuY29ubmVjdGlvbk1hbmFnZXI7XG4gICAgaWYgKCFjb25uZWN0aW9uTWFuYWdlci5hY3RpdmVTdGF0ZSgpKSB7XG4gICAgICB0aHJvdyBjb25uZWN0aW9uTWFuYWdlci5nZXRFcnJvcigpO1xuICAgIH1cbiAgICBjb25zdCBzeW5jTWVzc2FnZSA9IGZyb21WYWx1ZXMzKHsgYWN0aW9uOiBhY3Rpb25zMi5TWU5DLCBjaGFubmVsOiB0aGlzLm5hbWUgfSk7XG4gICAgaWYgKHRoaXMuc3luY0NoYW5uZWxTZXJpYWwpIHtcbiAgICAgIHN5bmNNZXNzYWdlLmNoYW5uZWxTZXJpYWwgPSB0aGlzLnN5bmNDaGFubmVsU2VyaWFsO1xuICAgIH1cbiAgICBjb25uZWN0aW9uTWFuYWdlci5zZW5kKHN5bmNNZXNzYWdlKTtcbiAgfVxuICBzZW5kTWVzc2FnZShtc2csIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5zZW5kKG1zZywgdGhpcy5jbGllbnQub3B0aW9ucy5xdWV1ZU1lc3NhZ2VzLCBjYWxsYmFjayk7XG4gIH1cbiAgc2VuZFByZXNlbmNlKHByZXNlbmNlLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IG1zZyA9IGZyb21WYWx1ZXMzKHtcbiAgICAgIGFjdGlvbjogYWN0aW9uczIuUFJFU0VOQ0UsXG4gICAgICBjaGFubmVsOiB0aGlzLm5hbWUsXG4gICAgICBwcmVzZW5jZTogQXJyYXkuaXNBcnJheShwcmVzZW5jZSkgPyB0aGlzLmNsaWVudC5fUmVhbHRpbWVQcmVzZW5jZS5wcmVzZW5jZU1lc3NhZ2VzRnJvbVZhbHVlc0FycmF5KHByZXNlbmNlKSA6IFt0aGlzLmNsaWVudC5fUmVhbHRpbWVQcmVzZW5jZS5wcmVzZW5jZU1lc3NhZ2VGcm9tVmFsdWVzKHByZXNlbmNlKV1cbiAgICB9KTtcbiAgICB0aGlzLnNlbmRNZXNzYWdlKG1zZywgY2FsbGJhY2spO1xuICB9XG4gIC8vIEFjY2VzcyB0byB0aGlzIG1ldGhvZCBpcyBzeW5jaHJvbmlzZWQgYnkgQ29ubmVjdGlvbk1hbmFnZXIjcHJvY2Vzc0NoYW5uZWxNZXNzYWdlLCBpbiBvcmRlciB0byBzeW5jaHJvbmlzZSBhY2Nlc3MgdG8gdGhlIHN0YXRlIHN0b3JlZCBpbiBfZGVjb2RpbmdDb250ZXh0LlxuICBhc3luYyBwcm9jZXNzTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UuYWN0aW9uID09PSBhY3Rpb25zMi5BVFRBQ0hFRCB8fCBtZXNzYWdlLmFjdGlvbiA9PT0gYWN0aW9uczIuTUVTU0FHRSB8fCBtZXNzYWdlLmFjdGlvbiA9PT0gYWN0aW9uczIuUFJFU0VOQ0UpIHtcbiAgICAgIHRoaXMuc2V0Q2hhbm5lbFNlcmlhbChtZXNzYWdlLmNoYW5uZWxTZXJpYWwpO1xuICAgIH1cbiAgICBsZXQgc3luY0NoYW5uZWxTZXJpYWwsIGlzU3luYyA9IGZhbHNlO1xuICAgIHN3aXRjaCAobWVzc2FnZS5hY3Rpb24pIHtcbiAgICAgIGNhc2UgYWN0aW9uczIuQVRUQUNIRUQ6IHtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLmF0dGFjaFNlcmlhbCA9IG1lc3NhZ2UuY2hhbm5lbFNlcmlhbDtcbiAgICAgICAgdGhpcy5fbW9kZSA9IG1lc3NhZ2UuZ2V0TW9kZSgpO1xuICAgICAgICB0aGlzLnBhcmFtcyA9IG1lc3NhZ2UucGFyYW1zIHx8IHt9O1xuICAgICAgICBjb25zdCBtb2Rlc0Zyb21GbGFncyA9IG1lc3NhZ2UuZGVjb2RlTW9kZXNGcm9tRmxhZ3MoKTtcbiAgICAgICAgdGhpcy5tb2RlcyA9IG1vZGVzRnJvbUZsYWdzICYmIGFsbFRvTG93ZXJDYXNlKG1vZGVzRnJvbUZsYWdzKSB8fCB2b2lkIDA7XG4gICAgICAgIGNvbnN0IHJlc3VtZWQgPSBtZXNzYWdlLmhhc0ZsYWcoXCJSRVNVTUVEXCIpO1xuICAgICAgICBjb25zdCBoYXNQcmVzZW5jZSA9IG1lc3NhZ2UuaGFzRmxhZyhcIkhBU19QUkVTRU5DRVwiKTtcbiAgICAgICAgY29uc3QgaGFzQmFja2xvZyA9IG1lc3NhZ2UuaGFzRmxhZyhcIkhBU19CQUNLTE9HXCIpO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gXCJhdHRhY2hlZFwiKSB7XG4gICAgICAgICAgaWYgKCFyZXN1bWVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcHJlc2VuY2UpIHtcbiAgICAgICAgICAgICAgdGhpcy5fcHJlc2VuY2Uub25BdHRhY2hlZChoYXNQcmVzZW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGNoYW5nZSA9IG5ldyBjaGFubmVsc3RhdGVjaGFuZ2VfZGVmYXVsdCh0aGlzLnN0YXRlLCB0aGlzLnN0YXRlLCByZXN1bWVkLCBoYXNCYWNrbG9nLCBtZXNzYWdlLmVycm9yKTtcbiAgICAgICAgICB0aGlzLl9hbGxDaGFubmVsQ2hhbmdlcy5lbWl0KFwidXBkYXRlXCIsIGNoYW5nZSk7XG4gICAgICAgICAgaWYgKCFyZXN1bWVkIHx8IHRoaXMuY2hhbm5lbE9wdGlvbnMudXBkYXRlT25BdHRhY2hlZCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0KFwidXBkYXRlXCIsIGNoYW5nZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09IFwiZGV0YWNoaW5nXCIpIHtcbiAgICAgICAgICB0aGlzLmNoZWNrUGVuZGluZ1N0YXRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5ub3RpZnlTdGF0ZShcImF0dGFjaGVkXCIsIG1lc3NhZ2UuZXJyb3IsIHJlc3VtZWQsIGhhc1ByZXNlbmNlLCBoYXNCYWNrbG9nKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgYWN0aW9uczIuREVUQUNIRUQ6IHtcbiAgICAgICAgY29uc3QgZGV0YWNoRXJyID0gbWVzc2FnZS5lcnJvciA/IEVycm9ySW5mby5mcm9tVmFsdWVzKG1lc3NhZ2UuZXJyb3IpIDogbmV3IEVycm9ySW5mbyhcIkNoYW5uZWwgZGV0YWNoZWRcIiwgOTAwMDEsIDQwNCk7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09PSBcImRldGFjaGluZ1wiKSB7XG4gICAgICAgICAgdGhpcy5ub3RpZnlTdGF0ZShcImRldGFjaGVkXCIsIGRldGFjaEVycik7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZSA9PT0gXCJhdHRhY2hpbmdcIikge1xuICAgICAgICAgIHRoaXMubm90aWZ5U3RhdGUoXCJzdXNwZW5kZWRcIiwgZGV0YWNoRXJyKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlID09PSBcImF0dGFjaGVkXCIgfHwgdGhpcy5zdGF0ZSA9PT0gXCJzdXNwZW5kZWRcIikge1xuICAgICAgICAgIHRoaXMucmVxdWVzdFN0YXRlKFwiYXR0YWNoaW5nXCIsIGRldGFjaEVycik7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIGFjdGlvbnMyLlNZTkM6XG4gICAgICAgIGlzU3luYyA9IHRydWU7XG4gICAgICAgIHN5bmNDaGFubmVsU2VyaWFsID0gdGhpcy5zeW5jQ2hhbm5lbFNlcmlhbCA9IG1lc3NhZ2UuY2hhbm5lbFNlcmlhbDtcbiAgICAgICAgaWYgKCFtZXNzYWdlLnByZXNlbmNlKVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBhY3Rpb25zMi5QUkVTRU5DRToge1xuICAgICAgICBjb25zdCBwcmVzZW5jZU1lc3NhZ2VzID0gbWVzc2FnZS5wcmVzZW5jZTtcbiAgICAgICAgaWYgKCFwcmVzZW5jZU1lc3NhZ2VzKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuY2hhbm5lbE9wdGlvbnM7XG4gICAgICAgIGF3YWl0IHRoaXMuX2RlY29kZUFuZFByZXBhcmVNZXNzYWdlcyhtZXNzYWdlLCBwcmVzZW5jZU1lc3NhZ2VzLCAobXNnKSA9PiBkZWNvZGUyKG1zZywgb3B0aW9ucykpO1xuICAgICAgICBpZiAodGhpcy5fcHJlc2VuY2UpIHtcbiAgICAgICAgICB0aGlzLl9wcmVzZW5jZS5zZXRQcmVzZW5jZShwcmVzZW5jZU1lc3NhZ2VzLCBpc1N5bmMsIHN5bmNDaGFubmVsU2VyaWFsKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgYWN0aW9uczIuTUVTU0FHRToge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSAhPT0gXCJhdHRhY2hlZFwiKSB7XG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUFKT1IsXG4gICAgICAgICAgICBcIlJlYWx0aW1lQ2hhbm5lbC5wcm9jZXNzTWVzc2FnZSgpXCIsXG4gICAgICAgICAgICAnTWVzc2FnZSBcIicgKyBtZXNzYWdlLmlkICsgJ1wiIHNraXBwZWQgYXMgdGhpcyBjaGFubmVsIFwiJyArIHRoaXMubmFtZSArICdcIiBzdGF0ZSBpcyBub3QgXCJhdHRhY2hlZFwiIChzdGF0ZSBpcyBcIicgKyB0aGlzLnN0YXRlICsgJ1wiKS4nXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBtZXNzYWdlLm1lc3NhZ2VzLCBmaXJzdE1lc3NhZ2UgPSBtZXNzYWdlc1swXSwgbGFzdE1lc3NhZ2UgPSBtZXNzYWdlc1ttZXNzYWdlcy5sZW5ndGggLSAxXSwgY2hhbm5lbFNlcmlhbCA9IG1lc3NhZ2UuY2hhbm5lbFNlcmlhbDtcbiAgICAgICAgaWYgKGZpcnN0TWVzc2FnZS5leHRyYXMgJiYgZmlyc3RNZXNzYWdlLmV4dHJhcy5kZWx0YSAmJiBmaXJzdE1lc3NhZ2UuZXh0cmFzLmRlbHRhLmZyb20gIT09IHRoaXMuX2xhc3RQYXlsb2FkLm1lc3NhZ2VJZCkge1xuICAgICAgICAgIGNvbnN0IG1zZyA9ICdEZWx0YSBtZXNzYWdlIGRlY29kZSBmYWlsdXJlIC0gcHJldmlvdXMgbWVzc2FnZSBub3QgYXZhaWxhYmxlIGZvciBtZXNzYWdlIFwiJyArIG1lc3NhZ2UuaWQgKyAnXCIgb24gdGhpcyBjaGFubmVsIFwiJyArIHRoaXMubmFtZSArICdcIi4nO1xuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLCBcIlJlYWx0aW1lQ2hhbm5lbC5wcm9jZXNzTWVzc2FnZSgpXCIsIG1zZyk7XG4gICAgICAgICAgdGhpcy5fc3RhcnREZWNvZGVGYWlsdXJlUmVjb3ZlcnkobmV3IEVycm9ySW5mbyhtc2csIDQwMDE4LCA0MDApKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHVucmVjb3ZlcmFibGVFcnJvciB9ID0gYXdhaXQgdGhpcy5fZGVjb2RlQW5kUHJlcGFyZU1lc3NhZ2VzKFxuICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgbWVzc2FnZXMsXG4gICAgICAgICAgKG1zZykgPT4gZGVjb2RlKG1zZywgdGhpcy5fZGVjb2RpbmdDb250ZXh0KSxcbiAgICAgICAgICAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JJbmZvID0gZTtcbiAgICAgICAgICAgIHN3aXRjaCAoZXJyb3JJbmZvLmNvZGUpIHtcbiAgICAgICAgICAgICAgY2FzZSA0MDAxODpcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFydERlY29kZUZhaWx1cmVSZWNvdmVyeShlcnJvckluZm8pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHVucmVjb3ZlcmFibGVFcnJvcjogdHJ1ZSB9O1xuICAgICAgICAgICAgICBjYXNlIDQwMDE5OlxuICAgICAgICAgICAgICBjYXNlIDQwMDIxOlxuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5U3RhdGUoXCJmYWlsZWRcIiwgZXJyb3JJbmZvKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB1bnJlY292ZXJhYmxlRXJyb3I6IHRydWUgfTtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4geyB1bnJlY292ZXJhYmxlRXJyb3I6IGZhbHNlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICBpZiAodW5yZWNvdmVyYWJsZUVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVzc2FnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBtc2cgPSBtZXNzYWdlc1tpXTtcbiAgICAgICAgICBpZiAoY2hhbm5lbFNlcmlhbCAmJiAhbXNnLnZlcnNpb24pIHtcbiAgICAgICAgICAgIG1zZy52ZXJzaW9uID0gY2hhbm5lbFNlcmlhbCArIFwiOlwiICsgaS50b1N0cmluZygpLnBhZFN0YXJ0KDMsIFwiMFwiKTtcbiAgICAgICAgICAgIG1zZy5leHBhbmRGaWVsZHMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGFzdFBheWxvYWQubWVzc2FnZUlkID0gbGFzdE1lc3NhZ2UuaWQ7XG4gICAgICAgIHRoaXMuX2xhc3RQYXlsb2FkLnByb3RvY29sTWVzc2FnZUNoYW5uZWxTZXJpYWwgPSBtZXNzYWdlLmNoYW5uZWxTZXJpYWw7XG4gICAgICAgIHRoaXMub25FdmVudChtZXNzYWdlcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBhY3Rpb25zMi5FUlJPUjoge1xuICAgICAgICBjb25zdCBlcnIgPSBtZXNzYWdlLmVycm9yO1xuICAgICAgICBpZiAoZXJyICYmIGVyci5jb2RlID09IDgwMDE2KSB7XG4gICAgICAgICAgdGhpcy5jaGVja1BlbmRpbmdTdGF0ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubm90aWZ5U3RhdGUoXCJmYWlsZWRcIiwgRXJyb3JJbmZvLmZyb21WYWx1ZXMoZXJyKSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLFxuICAgICAgICAgIFwiUmVhbHRpbWVDaGFubmVsLnByb2Nlc3NNZXNzYWdlKClcIixcbiAgICAgICAgICBcIkZhdGFsIHByb3RvY29sIGVycm9yOiB1bnJlY29nbmlzZWQgYWN0aW9uIChcIiArIG1lc3NhZ2UuYWN0aW9uICsgXCIpXCJcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5hYm9ydChjb25uZWN0aW9uZXJyb3JzX2RlZmF1bHQudW5rbm93bkNoYW5uZWxFcnIoKSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBNdXRhdGVzIHByb3ZpZGVkIG1lc3NhZ2VzIGJ5IGFkZGluZyBgY29ubmVjdGlvbklkYCwgYHRpbWVzdGFtcGAgYW5kIGBpZGAgZmllbGRzLCBhbmQgZGVjb2RpbmcgbWVzc2FnZSBkYXRhLlxuICAgKlxuICAgKiBAcmV0dXJucyBgdW5yZWNvdmVyYWJsZUVycm9yYCBmbGFnLiBJZiBgdHJ1ZWAgaW5kaWNhdGVzIHRoYXQgdW5yZWNvdmVyYWJsZSBlcnJvciB3YXMgZW5jb3VudGVyZWQgZHVyaW5nIG1lc3NhZ2UgZGVjb2RpbmdcbiAgICogYW5kIGFueSBmdXJ0aGVyIG1lc3NhZ2UgcHJvY2Vzc2luZyBzaG91bGQgYmUgc3RvcHBlZC4gQWx3YXlzIGVxdWFscyB0byBgZmFsc2VgIGlmIGBkZWNvZGVFcnJvclJlY292ZXJ5SGFuZGxlcmAgd2FzIG5vdCBwcm92aWRlZFxuICAgKi9cbiAgYXN5bmMgX2RlY29kZUFuZFByZXBhcmVNZXNzYWdlcyhwcm90b2NvbE1lc3NhZ2UsIG1lc3NhZ2VzLCBkZWNvZGVGbiwgZGVjb2RlRXJyb3JSZWNvdmVyeUhhbmRsZXIpIHtcbiAgICBjb25zdCB7IGlkLCBjb25uZWN0aW9uSWQsIHRpbWVzdGFtcCB9ID0gcHJvdG9jb2xNZXNzYWdlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVzc2FnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG1zZyA9IG1lc3NhZ2VzW2ldO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZGVjb2RlRm4obXNnKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUixcbiAgICAgICAgICBcIlJlYWx0aW1lQ2hhbm5lbC5kZWNvZGVBbmRQcmVwYXJlTWVzc2FnZXMoKVwiLFxuICAgICAgICAgIGUudG9TdHJpbmcoKVxuICAgICAgICApO1xuICAgICAgICBpZiAoZGVjb2RlRXJyb3JSZWNvdmVyeUhhbmRsZXIpIHtcbiAgICAgICAgICBjb25zdCB7IHVucmVjb3ZlcmFibGVFcnJvciB9ID0gZGVjb2RlRXJyb3JSZWNvdmVyeUhhbmRsZXIoZSk7XG4gICAgICAgICAgaWYgKHVucmVjb3ZlcmFibGVFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHsgdW5yZWNvdmVyYWJsZUVycm9yOiB0cnVlIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIW1zZy5jb25uZWN0aW9uSWQpXG4gICAgICAgIG1zZy5jb25uZWN0aW9uSWQgPSBjb25uZWN0aW9uSWQ7XG4gICAgICBpZiAoIW1zZy50aW1lc3RhbXApXG4gICAgICAgIG1zZy50aW1lc3RhbXAgPSB0aW1lc3RhbXA7XG4gICAgICBpZiAoaWQgJiYgIW1zZy5pZClcbiAgICAgICAgbXNnLmlkID0gaWQgKyBcIjpcIiArIGk7XG4gICAgfVxuICAgIHJldHVybiB7IHVucmVjb3ZlcmFibGVFcnJvcjogZmFsc2UgfTtcbiAgfVxuICBfc3RhcnREZWNvZGVGYWlsdXJlUmVjb3ZlcnkocmVhc29uKSB7XG4gICAgaWYgKCF0aGlzLl9sYXN0UGF5bG9hZC5kZWNvZGVGYWlsdXJlUmVjb3ZlcnlJblByb2dyZXNzKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUFKT1IsXG4gICAgICAgIFwiUmVhbHRpbWVDaGFubmVsLnByb2Nlc3NNZXNzYWdlKClcIixcbiAgICAgICAgXCJTdGFydGluZyBkZWNvZGUgZmFpbHVyZSByZWNvdmVyeSBwcm9jZXNzLlwiXG4gICAgICApO1xuICAgICAgdGhpcy5fbGFzdFBheWxvYWQuZGVjb2RlRmFpbHVyZVJlY292ZXJ5SW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICB0aGlzLl9hdHRhY2godHJ1ZSwgcmVhc29uLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuX2xhc3RQYXlsb2FkLmRlY29kZUZhaWx1cmVSZWNvdmVyeUluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBvbkF0dGFjaGVkKCkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgXCJSZWFsdGltZUNoYW5uZWwub25BdHRhY2hlZFwiLFxuICAgICAgXCJhY3RpdmF0aW5nIGNoYW5uZWw7IG5hbWUgPSBcIiArIHRoaXMubmFtZVxuICAgICk7XG4gIH1cbiAgbm90aWZ5U3RhdGUoc3RhdGUsIHJlYXNvbiwgcmVzdW1lZCwgaGFzUHJlc2VuY2UsIGhhc0JhY2tsb2cpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICB0aGlzLmxvZ2dlcixcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTyxcbiAgICAgIFwiUmVhbHRpbWVDaGFubmVsLm5vdGlmeVN0YXRlXCIsXG4gICAgICBcIm5hbWUgPSBcIiArIHRoaXMubmFtZSArIFwiLCBjdXJyZW50IHN0YXRlID0gXCIgKyB0aGlzLnN0YXRlICsgXCIsIG5vdGlmeWluZyBzdGF0ZSBcIiArIHN0YXRlXG4gICAgKTtcbiAgICB0aGlzLmNsZWFyU3RhdGVUaW1lcigpO1xuICAgIGlmIChbXCJkZXRhY2hlZFwiLCBcInN1c3BlbmRlZFwiLCBcImZhaWxlZFwiXS5pbmNsdWRlcyhzdGF0ZSkpIHtcbiAgICAgIHRoaXMucHJvcGVydGllcy5jaGFubmVsU2VyaWFsID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHN0YXRlID09PSB0aGlzLnN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLl9wcmVzZW5jZSkge1xuICAgICAgdGhpcy5fcHJlc2VuY2UuYWN0T25DaGFubmVsU3RhdGUoc3RhdGUsIGhhc1ByZXNlbmNlLCByZWFzb24pO1xuICAgIH1cbiAgICBpZiAoc3RhdGUgPT09IFwic3VzcGVuZGVkXCIgJiYgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5zdGF0ZS5zZW5kRXZlbnRzKSB7XG4gICAgICB0aGlzLnN0YXJ0UmV0cnlUaW1lcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNhbmNlbFJldHJ5VGltZXIoKTtcbiAgICB9XG4gICAgaWYgKHJlYXNvbikge1xuICAgICAgdGhpcy5lcnJvclJlYXNvbiA9IHJlYXNvbjtcbiAgICB9XG4gICAgY29uc3QgY2hhbmdlID0gbmV3IGNoYW5uZWxzdGF0ZWNoYW5nZV9kZWZhdWx0KHRoaXMuc3RhdGUsIHN0YXRlLCByZXN1bWVkLCBoYXNCYWNrbG9nLCByZWFzb24pO1xuICAgIGNvbnN0IGFjdGlvbiA9ICdDaGFubmVsIHN0YXRlIGZvciBjaGFubmVsIFwiJyArIHRoaXMubmFtZSArICdcIic7XG4gICAgY29uc3QgbWVzc2FnZSA9IHN0YXRlICsgKHJlYXNvbiA/IFwiOyByZWFzb246IFwiICsgcmVhc29uIDogXCJcIik7XG4gICAgaWYgKHN0YXRlID09PSBcImZhaWxlZFwiKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUiwgYWN0aW9uLCBtZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUFKT1IsIGFjdGlvbiwgbWVzc2FnZSk7XG4gICAgfVxuICAgIGlmIChzdGF0ZSAhPT0gXCJhdHRhY2hpbmdcIiAmJiBzdGF0ZSAhPT0gXCJzdXNwZW5kZWRcIikge1xuICAgICAgdGhpcy5yZXRyeUNvdW50ID0gMDtcbiAgICB9XG4gICAgaWYgKHN0YXRlID09PSBcImF0dGFjaGVkXCIpIHtcbiAgICAgIHRoaXMub25BdHRhY2hlZCgpO1xuICAgIH1cbiAgICBpZiAoc3RhdGUgPT09IFwiYXR0YWNoZWRcIikge1xuICAgICAgdGhpcy5fYXR0YWNoUmVzdW1lID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlID09PSBcImRldGFjaGluZ1wiIHx8IHN0YXRlID09PSBcImZhaWxlZFwiKSB7XG4gICAgICB0aGlzLl9hdHRhY2hSZXN1bWUgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgIHRoaXMuX2FsbENoYW5uZWxDaGFuZ2VzLmVtaXQoc3RhdGUsIGNoYW5nZSk7XG4gICAgdGhpcy5lbWl0KHN0YXRlLCBjaGFuZ2UpO1xuICB9XG4gIHJlcXVlc3RTdGF0ZShzdGF0ZSwgcmVhc29uKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICBcIlJlYWx0aW1lQ2hhbm5lbC5yZXF1ZXN0U3RhdGVcIixcbiAgICAgIFwibmFtZSA9IFwiICsgdGhpcy5uYW1lICsgXCIsIHN0YXRlID0gXCIgKyBzdGF0ZVxuICAgICk7XG4gICAgdGhpcy5ub3RpZnlTdGF0ZShzdGF0ZSwgcmVhc29uKTtcbiAgICB0aGlzLmNoZWNrUGVuZGluZ1N0YXRlKCk7XG4gIH1cbiAgY2hlY2tQZW5kaW5nU3RhdGUoKSB7XG4gICAgY29uc3QgY21TdGF0ZSA9IHRoaXMuY29ubmVjdGlvbk1hbmFnZXIuc3RhdGU7XG4gICAgaWYgKCFjbVN0YXRlLnNlbmRFdmVudHMpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgICAgXCJSZWFsdGltZUNoYW5uZWwuY2hlY2tQZW5kaW5nU3RhdGVcIixcbiAgICAgICAgXCJzZW5kRXZlbnRzIGlzIGZhbHNlOyBzdGF0ZSBpcyBcIiArIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIuc3RhdGUuc3RhdGVcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgXCJSZWFsdGltZUNoYW5uZWwuY2hlY2tQZW5kaW5nU3RhdGVcIixcbiAgICAgIFwibmFtZSA9IFwiICsgdGhpcy5uYW1lICsgXCIsIHN0YXRlID0gXCIgKyB0aGlzLnN0YXRlXG4gICAgKTtcbiAgICBzd2l0Y2ggKHRoaXMuc3RhdGUpIHtcbiAgICAgIGNhc2UgXCJhdHRhY2hpbmdcIjpcbiAgICAgICAgdGhpcy5zdGFydFN0YXRlVGltZXJJZk5vdFJ1bm5pbmcoKTtcbiAgICAgICAgdGhpcy5hdHRhY2hJbXBsKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImRldGFjaGluZ1wiOlxuICAgICAgICB0aGlzLnN0YXJ0U3RhdGVUaW1lcklmTm90UnVubmluZygpO1xuICAgICAgICB0aGlzLmRldGFjaEltcGwoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiYXR0YWNoZWRcIjpcbiAgICAgICAgdGhpcy5zeW5jKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHRpbWVvdXRQZW5kaW5nU3RhdGUoKSB7XG4gICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XG4gICAgICBjYXNlIFwiYXR0YWNoaW5nXCI6IHtcbiAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9ySW5mbyhcIkNoYW5uZWwgYXR0YWNoIHRpbWVkIG91dFwiLCA5MDAwNywgNDA4KTtcbiAgICAgICAgdGhpcy5ub3RpZnlTdGF0ZShcInN1c3BlbmRlZFwiLCBlcnIpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJkZXRhY2hpbmdcIjoge1xuICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3JJbmZvKFwiQ2hhbm5lbCBkZXRhY2ggdGltZWQgb3V0XCIsIDkwMDA3LCA0MDgpO1xuICAgICAgICB0aGlzLm5vdGlmeVN0YXRlKFwiYXR0YWNoZWRcIiwgZXJyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLmNoZWNrUGVuZGluZ1N0YXRlKCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBzdGFydFN0YXRlVGltZXJJZk5vdFJ1bm5pbmcoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlVGltZXIpIHtcbiAgICAgIHRoaXMuc3RhdGVUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJSZWFsdGltZUNoYW5uZWwuc3RhcnRTdGF0ZVRpbWVySWZOb3RSdW5uaW5nXCIsIFwidGltZXIgZXhwaXJlZFwiKTtcbiAgICAgICAgdGhpcy5zdGF0ZVRpbWVyID0gbnVsbDtcbiAgICAgICAgdGhpcy50aW1lb3V0UGVuZGluZ1N0YXRlKCk7XG4gICAgICB9LCB0aGlzLmNsaWVudC5vcHRpb25zLnRpbWVvdXRzLnJlYWx0aW1lUmVxdWVzdFRpbWVvdXQpO1xuICAgIH1cbiAgfVxuICBjbGVhclN0YXRlVGltZXIoKSB7XG4gICAgY29uc3Qgc3RhdGVUaW1lciA9IHRoaXMuc3RhdGVUaW1lcjtcbiAgICBpZiAoc3RhdGVUaW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHN0YXRlVGltZXIpO1xuICAgICAgdGhpcy5zdGF0ZVRpbWVyID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgc3RhcnRSZXRyeVRpbWVyKCkge1xuICAgIGlmICh0aGlzLnJldHJ5VGltZXIpXG4gICAgICByZXR1cm47XG4gICAgdGhpcy5yZXRyeUNvdW50Kys7XG4gICAgY29uc3QgcmV0cnlEZWxheSA9IGdldFJldHJ5VGltZSh0aGlzLmNsaWVudC5vcHRpb25zLnRpbWVvdXRzLmNoYW5uZWxSZXRyeVRpbWVvdXQsIHRoaXMucmV0cnlDb3VudCk7XG4gICAgdGhpcy5yZXRyeVRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gXCJzdXNwZW5kZWRcIiAmJiB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLnN0YXRlLnNlbmRFdmVudHMpIHtcbiAgICAgICAgdGhpcy5yZXRyeVRpbWVyID0gbnVsbDtcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgICAgICBcIlJlYWx0aW1lQ2hhbm5lbCByZXRyeSB0aW1lciBleHBpcmVkXCIsXG4gICAgICAgICAgXCJhdHRlbXB0aW5nIGEgbmV3IGF0dGFjaFwiXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMucmVxdWVzdFN0YXRlKFwiYXR0YWNoaW5nXCIpO1xuICAgICAgfVxuICAgIH0sIHJldHJ5RGVsYXkpO1xuICB9XG4gIGNhbmNlbFJldHJ5VGltZXIoKSB7XG4gICAgaWYgKHRoaXMucmV0cnlUaW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmV0cnlUaW1lcik7XG4gICAgICB0aGlzLnJldHJ5VGltZXIgPSBudWxsO1xuICAgIH1cbiAgfVxuICAvKiBAcmV0dXJucyBudWxsIChpZiBjYW4gc2FmZWx5IGJlIHJlbGVhc2VkKSB8IEVycm9ySW5mbyAoaWYgY2Fubm90KSAqL1xuICBnZXRSZWxlYXNlRXJyKCkge1xuICAgIGNvbnN0IHMgPSB0aGlzLnN0YXRlO1xuICAgIGlmIChzID09PSBcImluaXRpYWxpemVkXCIgfHwgcyA9PT0gXCJkZXRhY2hlZFwiIHx8IHMgPT09IFwiZmFpbGVkXCIpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEVycm9ySW5mbyhcbiAgICAgIFwiQ2FuIG9ubHkgcmVsZWFzZSBhIGNoYW5uZWwgaW4gYSBzdGF0ZSB3aGVyZSB0aGVyZSBpcyBubyBwb3NzaWJpbGl0eSBvZiBmdXJ0aGVyIHVwZGF0ZXMgZnJvbSB0aGUgc2VydmVyIGJlaW5nIHJlY2VpdmVkIChpbml0aWFsaXplZCwgZGV0YWNoZWQsIG9yIGZhaWxlZCk7IHdhcyBcIiArIHMsXG4gICAgICA5MDAwMSxcbiAgICAgIDQwMFxuICAgICk7XG4gIH1cbiAgc2V0Q2hhbm5lbFNlcmlhbChjaGFubmVsU2VyaWFsKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICBcIlJlYWx0aW1lQ2hhbm5lbC5zZXRDaGFubmVsU2VyaWFsKClcIixcbiAgICAgIFwiVXBkYXRpbmcgY2hhbm5lbCBzZXJpYWw7IHNlcmlhbCA9IFwiICsgY2hhbm5lbFNlcmlhbCArIFwiOyBwcmV2aW91cyA9IFwiICsgdGhpcy5wcm9wZXJ0aWVzLmNoYW5uZWxTZXJpYWxcbiAgICApO1xuICAgIGlmIChjaGFubmVsU2VyaWFsKSB7XG4gICAgICB0aGlzLnByb3BlcnRpZXMuY2hhbm5lbFNlcmlhbCA9IGNoYW5uZWxTZXJpYWw7XG4gICAgfVxuICB9XG4gIGFzeW5jIHN0YXR1cygpIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQucmVzdC5jaGFubmVsTWl4aW4uc3RhdHVzKHRoaXMpO1xuICB9XG59O1xuZnVuY3Rpb24gb21pdEFnZW50KGNoYW5uZWxQYXJhbXMpIHtcbiAgY29uc3QgX2EyID0gY2hhbm5lbFBhcmFtcyB8fCB7fSwgeyBhZ2VudDogXyB9ID0gX2EyLCBwYXJhbXNXaXRob3V0QWdlbnQgPSBfX29ialJlc3QoX2EyLCBbXCJhZ2VudFwiXSk7XG4gIHJldHVybiBwYXJhbXNXaXRob3V0QWdlbnQ7XG59XG52YXIgcmVhbHRpbWVjaGFubmVsX2RlZmF1bHQgPSBSZWFsdGltZUNoYW5uZWw7XG5cbi8vIHNyYy9jb21tb24vbGliL2NsaWVudC9iYXNlcmVhbHRpbWUudHNcbnZhciBfQmFzZVJlYWx0aW1lID0gY2xhc3MgX0Jhc2VSZWFsdGltZSBleHRlbmRzIGJhc2VjbGllbnRfZGVmYXVsdCB7XG4gIC8qXG4gICAqIFRoZSBwdWJsaWMgdHlwaW5ncyBkZWNsYXJlIHRoYXQgdGhpcyBvbmx5IGFjY2VwdHMgYW4gb2JqZWN0LCBidXQgc2luY2Ugd2Ugd2FudCB0byBlbWl0IGEgZ29vZCBlcnJvciBtZXNzYWdlIGluIHRoZSBjYXNlIHdoZXJlIGEgbm9uLVR5cGVTY3JpcHQgdXNlciBkb2VzIG9uZSBvZiB0aGVzZSB0aGluZ3M6XG4gICAqXG4gICAqIDEuIHBhc3NlcyBhIHN0cmluZyAod2hpY2ggaXMgcXVpdGUgbGlrZWx5IGlmIHRoZXnigJlyZSBlLmcuIG1pZ3JhdGluZyBmcm9tIHRoZSBkZWZhdWx0IHZhcmlhbnQgdG8gdGhlIG1vZHVsYXIgdmFyaWFudClcbiAgICogMi4gcGFzc2VzIG5vIGFyZ3VtZW50IGF0IGFsbFxuICAgKlxuICAgKiB0ZWxsIHRoZSBjb21waWxlciB0aGF0IHRoZXNlIGNhc2VzIGFyZSBwb3NzaWJsZSBzbyB0aGF0IGl0IGZvcmNlcyB1cyB0byBoYW5kbGUgdGhlbS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB2YXIgX2EyLCBfYjtcbiAgICBzdXBlcihkZWZhdWx0c19kZWZhdWx0Lm9iamVjdGlmeU9wdGlvbnMob3B0aW9ucywgZmFsc2UsIFwiQmFzZVJlYWx0aW1lXCIsIGxvZ2dlcl9kZWZhdWx0LmRlZmF1bHRMb2dnZXIpKTtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJSZWFsdGltZSgpXCIsIFwiXCIpO1xuICAgIGlmICh0eXBlb2YgRWRnZVJ1bnRpbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvckluZm8oXG4gICAgICAgIGBBYmx5LlJlYWx0aW1lIGluc3RhbmNlIGNhbm5vdCBiZSB1c2VkIGluIFZlcmNlbCBFZGdlIHJ1bnRpbWUuIElmIHlvdSBhcmUgcnVubmluZyBWZXJjZWwgRWRnZSBmdW5jdGlvbnMsIHBsZWFzZSByZXBsYWNlIHlvdXIgXCJuZXcgQWJseS5SZWFsdGltZSgpXCIgd2l0aCBcIm5ldyBBYmx5LlJlc3QoKVwiIGFuZCB1c2UgQWJseSBSZXN0IEFQSSBpbnN0ZWFkIG9mIHRoZSBSZWFsdGltZSBBUEkuIElmIHlvdSBhcmUgc2VydmVyLXJlbmRlcmluZyB5b3VyIGFwcGxpY2F0aW9uIGluIHRoZSBWZXJjZWwgRWRnZSBydW50aW1lLCBwbGVhc2UgdXNlIHRoZSBjb25kaXRpb24gXCJpZiAodHlwZW9mIEVkZ2VSdW50aW1lID09PSAnc3RyaW5nJylcIiB0byBwcmV2ZW50IGluc3RhbnRpYXRpbmcgQWJseS5SZWFsdGltZSBpbnN0YW5jZSBkdXJpbmcgU1NSIGluIHRoZSBWZXJjZWwgRWRnZSBydW50aW1lLmAsXG4gICAgICAgIDRlNCxcbiAgICAgICAgNDAwXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLl9hZGRpdGlvbmFsVHJhbnNwb3J0SW1wbGVtZW50YXRpb25zID0gX0Jhc2VSZWFsdGltZS50cmFuc3BvcnRJbXBsZW1lbnRhdGlvbnNGcm9tUGx1Z2lucyh0aGlzLm9wdGlvbnMucGx1Z2lucyk7XG4gICAgdGhpcy5fUmVhbHRpbWVQcmVzZW5jZSA9IChfYiA9IChfYTIgPSB0aGlzLm9wdGlvbnMucGx1Z2lucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5SZWFsdGltZVByZXNlbmNlKSAhPSBudWxsID8gX2IgOiBudWxsO1xuICAgIHRoaXMuY29ubmVjdGlvbiA9IG5ldyBjb25uZWN0aW9uX2RlZmF1bHQodGhpcywgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLl9jaGFubmVscyA9IG5ldyBDaGFubmVsczIodGhpcyk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvQ29ubmVjdCAhPT0gZmFsc2UpXG4gICAgICB0aGlzLmNvbm5lY3QoKTtcbiAgfVxuICBzdGF0aWMgdHJhbnNwb3J0SW1wbGVtZW50YXRpb25zRnJvbVBsdWdpbnMocGx1Z2lucykge1xuICAgIGNvbnN0IHRyYW5zcG9ydHMgPSB7fTtcbiAgICBpZiAocGx1Z2lucyA9PSBudWxsID8gdm9pZCAwIDogcGx1Z2lucy5XZWJTb2NrZXRUcmFuc3BvcnQpIHtcbiAgICAgIHRyYW5zcG9ydHNbVHJhbnNwb3J0TmFtZXMuV2ViU29ja2V0XSA9IHBsdWdpbnMuV2ViU29ja2V0VHJhbnNwb3J0O1xuICAgIH1cbiAgICBpZiAocGx1Z2lucyA9PSBudWxsID8gdm9pZCAwIDogcGx1Z2lucy5YSFJQb2xsaW5nKSB7XG4gICAgICB0cmFuc3BvcnRzW1RyYW5zcG9ydE5hbWVzLlhoclBvbGxpbmddID0gcGx1Z2lucy5YSFJQb2xsaW5nO1xuICAgIH1cbiAgICByZXR1cm4gdHJhbnNwb3J0cztcbiAgfVxuICBnZXQgY2hhbm5lbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NoYW5uZWxzO1xuICB9XG4gIGNvbm5lY3QoKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiUmVhbHRpbWUuY29ubmVjdCgpXCIsIFwiXCIpO1xuICAgIHRoaXMuY29ubmVjdGlvbi5jb25uZWN0KCk7XG4gIH1cbiAgY2xvc2UoKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiUmVhbHRpbWUuY2xvc2UoKVwiLCBcIlwiKTtcbiAgICB0aGlzLmNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgfVxufTtcbi8vIGludGVybmFsIEFQSSB0byBtYWtlIEV2ZW50RW1pdHRlciB1c2FibGUgaW4gb3RoZXIgU0RLc1xuX0Jhc2VSZWFsdGltZS5FdmVudEVtaXR0ZXIgPSBldmVudGVtaXR0ZXJfZGVmYXVsdDtcbnZhciBCYXNlUmVhbHRpbWUgPSBfQmFzZVJlYWx0aW1lO1xudmFyIENoYW5uZWxzMiA9IGNsYXNzIGV4dGVuZHMgZXZlbnRlbWl0dGVyX2RlZmF1bHQge1xuICBjb25zdHJ1Y3RvcihyZWFsdGltZSkge1xuICAgIHN1cGVyKHJlYWx0aW1lLmxvZ2dlcik7XG4gICAgdGhpcy5yZWFsdGltZSA9IHJlYWx0aW1lO1xuICAgIHRoaXMuYWxsID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgcmVhbHRpbWUuY29ubmVjdGlvbi5jb25uZWN0aW9uTWFuYWdlci5vbihcInRyYW5zcG9ydC5hY3RpdmVcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5vblRyYW5zcG9ydEFjdGl2ZSgpO1xuICAgIH0pO1xuICB9XG4gIGNoYW5uZWxTZXJpYWxzKCkge1xuICAgIGxldCBzZXJpYWxzID0ge307XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIGtleXNBcnJheSh0aGlzLmFsbCwgdHJ1ZSkpIHtcbiAgICAgIGNvbnN0IGNoYW5uZWwgPSB0aGlzLmFsbFtuYW1lXTtcbiAgICAgIGlmIChjaGFubmVsLnByb3BlcnRpZXMuY2hhbm5lbFNlcmlhbCkge1xuICAgICAgICBzZXJpYWxzW25hbWVdID0gY2hhbm5lbC5wcm9wZXJ0aWVzLmNoYW5uZWxTZXJpYWw7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzZXJpYWxzO1xuICB9XG4gIC8vIHJlY292ZXJDaGFubmVscyBnZXRzIHRoZSBnaXZlbiBjaGFubmVscyBhbmQgc2V0cyB0aGVpciBjaGFubmVsIHNlcmlhbHMuXG4gIHJlY292ZXJDaGFubmVscyhjaGFubmVsU2VyaWFscykge1xuICAgIGZvciAoY29uc3QgbmFtZSBvZiBrZXlzQXJyYXkoY2hhbm5lbFNlcmlhbHMsIHRydWUpKSB7XG4gICAgICBjb25zdCBjaGFubmVsID0gdGhpcy5nZXQobmFtZSk7XG4gICAgICBjaGFubmVsLnByb3BlcnRpZXMuY2hhbm5lbFNlcmlhbCA9IGNoYW5uZWxTZXJpYWxzW25hbWVdO1xuICAgIH1cbiAgfVxuICAvLyBBY2Nlc3MgdG8gdGhpcyBtZXRob2QgaXMgc3luY2hyb25pc2VkIGJ5IENvbm5lY3Rpb25NYW5hZ2VyI3Byb2Nlc3NDaGFubmVsTWVzc2FnZS5cbiAgYXN5bmMgcHJvY2Vzc0NoYW5uZWxNZXNzYWdlKG1zZykge1xuICAgIGNvbnN0IGNoYW5uZWxOYW1lID0gbXNnLmNoYW5uZWw7XG4gICAgaWYgKGNoYW5uZWxOYW1lID09PSB2b2lkIDApIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUixcbiAgICAgICAgXCJDaGFubmVscy5wcm9jZXNzQ2hhbm5lbE1lc3NhZ2UoKVwiLFxuICAgICAgICBcInJlY2VpdmVkIGV2ZW50IHVuc3BlY2lmaWVkIGNoYW5uZWwsIGFjdGlvbiA9IFwiICsgbXNnLmFjdGlvblxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY2hhbm5lbCA9IHRoaXMuYWxsW2NoYW5uZWxOYW1lXTtcbiAgICBpZiAoIWNoYW5uZWwpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUixcbiAgICAgICAgXCJDaGFubmVscy5wcm9jZXNzQ2hhbm5lbE1lc3NhZ2UoKVwiLFxuICAgICAgICBcInJlY2VpdmVkIGV2ZW50IGZvciBub24tZXhpc3RlbnQgY2hhbm5lbDogXCIgKyBjaGFubmVsTmFtZVxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXdhaXQgY2hhbm5lbC5wcm9jZXNzTWVzc2FnZShtc2cpO1xuICB9XG4gIC8qIGNhbGxlZCB3aGVuIGEgdHJhbnNwb3J0IGJlY29tZXMgY29ubmVjdGVkOyByZWF0dGVtcHQgYXR0YWNoL2RldGFjaFxuICAgKiBmb3IgY2hhbm5lbHMgdGhhdCBhcmUgYXR0YWNoaW5nIG9yIGRldGFjaGluZy4gKi9cbiAgb25UcmFuc3BvcnRBY3RpdmUoKSB7XG4gICAgZm9yIChjb25zdCBjaGFubmVsTmFtZSBpbiB0aGlzLmFsbCkge1xuICAgICAgY29uc3QgY2hhbm5lbCA9IHRoaXMuYWxsW2NoYW5uZWxOYW1lXTtcbiAgICAgIGlmIChjaGFubmVsLnN0YXRlID09PSBcImF0dGFjaGluZ1wiIHx8IGNoYW5uZWwuc3RhdGUgPT09IFwiZGV0YWNoaW5nXCIpIHtcbiAgICAgICAgY2hhbm5lbC5jaGVja1BlbmRpbmdTdGF0ZSgpO1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsLnN0YXRlID09PSBcInN1c3BlbmRlZFwiKSB7XG4gICAgICAgIGNoYW5uZWwuX2F0dGFjaChmYWxzZSwgbnVsbCk7XG4gICAgICB9IGVsc2UgaWYgKGNoYW5uZWwuc3RhdGUgPT09IFwiYXR0YWNoZWRcIikge1xuICAgICAgICBjaGFubmVsLnJlcXVlc3RTdGF0ZShcImF0dGFjaGluZ1wiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyogQ29ubmVjdGlvbiBpbnRlcnJ1cHRpb25zIChpZSB3aGVuIHRoZSBjb25uZWN0aW9uIHdpbGwgbm8gbG9uZ2VyIHF1ZXVlXG4gICAqIGV2ZW50cykgaW1wbHkgY29ubmVjdGlvbiBzdGF0ZSBjaGFuZ2VzIGZvciBhbnkgY2hhbm5lbCB3aGljaCBpcyBlaXRoZXJcbiAgICogYXR0YWNoZWQsIHBlbmRpbmcsIG9yIHdpbGwgYXR0ZW1wdCB0byBiZWNvbWUgYXR0YWNoZWQgaW4gdGhlIGZ1dHVyZSAqL1xuICBwcm9wb2dhdGVDb25uZWN0aW9uSW50ZXJydXB0aW9uKGNvbm5lY3Rpb25TdGF0ZSwgcmVhc29uKSB7XG4gICAgY29uc3QgY29ubmVjdGlvblN0YXRlVG9DaGFubmVsU3RhdGUgPSB7XG4gICAgICBjbG9zaW5nOiBcImRldGFjaGVkXCIsXG4gICAgICBjbG9zZWQ6IFwiZGV0YWNoZWRcIixcbiAgICAgIGZhaWxlZDogXCJmYWlsZWRcIixcbiAgICAgIHN1c3BlbmRlZDogXCJzdXNwZW5kZWRcIlxuICAgIH07XG4gICAgY29uc3QgZnJvbUNoYW5uZWxTdGF0ZXMgPSBbXCJhdHRhY2hpbmdcIiwgXCJhdHRhY2hlZFwiLCBcImRldGFjaGluZ1wiLCBcInN1c3BlbmRlZFwiXTtcbiAgICBjb25zdCB0b0NoYW5uZWxTdGF0ZSA9IGNvbm5lY3Rpb25TdGF0ZVRvQ2hhbm5lbFN0YXRlW2Nvbm5lY3Rpb25TdGF0ZV07XG4gICAgZm9yIChjb25zdCBjaGFubmVsSWQgaW4gdGhpcy5hbGwpIHtcbiAgICAgIGNvbnN0IGNoYW5uZWwgPSB0aGlzLmFsbFtjaGFubmVsSWRdO1xuICAgICAgaWYgKGZyb21DaGFubmVsU3RhdGVzLmluY2x1ZGVzKGNoYW5uZWwuc3RhdGUpKSB7XG4gICAgICAgIGNoYW5uZWwubm90aWZ5U3RhdGUodG9DaGFubmVsU3RhdGUsIHJlYXNvbik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGdldChuYW1lLCBjaGFubmVsT3B0aW9ucykge1xuICAgIG5hbWUgPSBTdHJpbmcobmFtZSk7XG4gICAgbGV0IGNoYW5uZWwgPSB0aGlzLmFsbFtuYW1lXTtcbiAgICBpZiAoIWNoYW5uZWwpIHtcbiAgICAgIGNoYW5uZWwgPSB0aGlzLmFsbFtuYW1lXSA9IG5ldyByZWFsdGltZWNoYW5uZWxfZGVmYXVsdCh0aGlzLnJlYWx0aW1lLCBuYW1lLCBjaGFubmVsT3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmIChjaGFubmVsT3B0aW9ucykge1xuICAgICAgaWYgKGNoYW5uZWwuX3Nob3VsZFJlYXR0YWNoVG9TZXRPcHRpb25zKGNoYW5uZWxPcHRpb25zLCBjaGFubmVsLmNoYW5uZWxPcHRpb25zKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFxuICAgICAgICAgIFwiQ2hhbm5lbHMuZ2V0KCkgY2Fubm90IGJlIHVzZWQgdG8gc2V0IGNoYW5uZWwgb3B0aW9ucyB0aGF0IHdvdWxkIGNhdXNlIHRoZSBjaGFubmVsIHRvIHJlYXR0YWNoLiBQbGVhc2UsIHVzZSBSZWFsdGltZUNoYW5uZWwuc2V0T3B0aW9ucygpIGluc3RlYWQuXCIsXG4gICAgICAgICAgNGU0LFxuICAgICAgICAgIDQwMFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY2hhbm5lbC5zZXRPcHRpb25zKGNoYW5uZWxPcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoYW5uZWw7XG4gIH1cbiAgZ2V0RGVyaXZlZChuYW1lLCBkZXJpdmVPcHRpb25zLCBjaGFubmVsT3B0aW9ucykge1xuICAgIGlmIChkZXJpdmVPcHRpb25zLmZpbHRlcikge1xuICAgICAgY29uc3QgZmlsdGVyID0gdG9CYXNlNjQoZGVyaXZlT3B0aW9ucy5maWx0ZXIpO1xuICAgICAgY29uc3QgbWF0Y2ggPSBtYXRjaERlcml2ZWRDaGFubmVsKG5hbWUpO1xuICAgICAgbmFtZSA9IGBbZmlsdGVyPSR7ZmlsdGVyfSR7bWF0Y2gucXVhbGlmaWVyUGFyYW19XSR7bWF0Y2guY2hhbm5lbE5hbWV9YDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0KG5hbWUsIGNoYW5uZWxPcHRpb25zKTtcbiAgfVxuICAvKiBJbmNsdWRlZCB0byBzdXBwb3J0IGNlcnRhaW4gbmljaGUgdXNlLWNhc2VzOyBtb3N0IHVzZXJzIHNob3VsZCBpZ25vcmUgdGhpcy5cbiAgICogUGxlYXNlIGRvIG5vdCB1c2UgdGhpcyB1bmxlc3MgeW91IGtub3cgd2hhdCB5b3UncmUgZG9pbmcgKi9cbiAgcmVsZWFzZShuYW1lKSB7XG4gICAgbmFtZSA9IFN0cmluZyhuYW1lKTtcbiAgICBjb25zdCBjaGFubmVsID0gdGhpcy5hbGxbbmFtZV07XG4gICAgaWYgKCFjaGFubmVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJlbGVhc2VFcnIgPSBjaGFubmVsLmdldFJlbGVhc2VFcnIoKTtcbiAgICBpZiAocmVsZWFzZUVycikge1xuICAgICAgdGhyb3cgcmVsZWFzZUVycjtcbiAgICB9XG4gICAgZGVsZXRlIHRoaXMuYWxsW25hbWVdO1xuICB9XG59O1xudmFyIGJhc2VyZWFsdGltZV9kZWZhdWx0ID0gQmFzZVJlYWx0aW1lO1xuXG4vLyBzcmMvY29tbW9uL2xpYi9jbGllbnQvcHJlc2VuY2VtYXAudHNcbmZ1bmN0aW9uIG5ld2VyVGhhbihpdGVtLCBleGlzdGluZykge1xuICBpZiAoaXRlbS5pc1N5bnRoZXNpemVkKCkgfHwgZXhpc3RpbmcuaXNTeW50aGVzaXplZCgpKSB7XG4gICAgcmV0dXJuIGl0ZW0udGltZXN0YW1wID49IGV4aXN0aW5nLnRpbWVzdGFtcDtcbiAgfVxuICBjb25zdCBpdGVtT3JkZXJpbmdzID0gaXRlbS5wYXJzZUlkKCksIGV4aXN0aW5nT3JkZXJpbmdzID0gZXhpc3RpbmcucGFyc2VJZCgpO1xuICBpZiAoaXRlbU9yZGVyaW5ncy5tc2dTZXJpYWwgPT09IGV4aXN0aW5nT3JkZXJpbmdzLm1zZ1NlcmlhbCkge1xuICAgIHJldHVybiBpdGVtT3JkZXJpbmdzLmluZGV4ID4gZXhpc3RpbmdPcmRlcmluZ3MuaW5kZXg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGl0ZW1PcmRlcmluZ3MubXNnU2VyaWFsID4gZXhpc3RpbmdPcmRlcmluZ3MubXNnU2VyaWFsO1xuICB9XG59XG52YXIgUHJlc2VuY2VNYXAgPSBjbGFzcyBleHRlbmRzIGV2ZW50ZW1pdHRlcl9kZWZhdWx0IHtcbiAgY29uc3RydWN0b3IocHJlc2VuY2UsIG1lbWJlcktleSwgbmV3ZXIgPSBuZXdlclRoYW4pIHtcbiAgICBzdXBlcihwcmVzZW5jZS5sb2dnZXIpO1xuICAgIHRoaXMucHJlc2VuY2UgPSBwcmVzZW5jZTtcbiAgICB0aGlzLm1hcCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuc3luY0luUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICB0aGlzLnJlc2lkdWFsTWVtYmVycyA9IG51bGw7XG4gICAgdGhpcy5tZW1iZXJLZXkgPSBtZW1iZXJLZXk7XG4gICAgdGhpcy5uZXdlclRoYW4gPSBuZXdlcjtcbiAgfVxuICBnZXQoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMubWFwW2tleV07XG4gIH1cbiAgZ2V0Q2xpZW50KGNsaWVudElkKSB7XG4gICAgY29uc3QgbWFwID0gdGhpcy5tYXAsIHJlc3VsdCA9IFtdO1xuICAgIGZvciAoY29uc3Qga2V5IGluIG1hcCkge1xuICAgICAgY29uc3QgaXRlbSA9IG1hcFtrZXldO1xuICAgICAgaWYgKGl0ZW0uY2xpZW50SWQgPT0gY2xpZW50SWQgJiYgaXRlbS5hY3Rpb24gIT0gXCJhYnNlbnRcIilcbiAgICAgICAgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgbGlzdChwYXJhbXMpIHtcbiAgICBjb25zdCBtYXAgPSB0aGlzLm1hcCwgY2xpZW50SWQgPSBwYXJhbXMgJiYgcGFyYW1zLmNsaWVudElkLCBjb25uZWN0aW9uSWQgPSBwYXJhbXMgJiYgcGFyYW1zLmNvbm5lY3Rpb25JZCwgcmVzdWx0ID0gW107XG4gICAgZm9yIChjb25zdCBrZXkgaW4gbWFwKSB7XG4gICAgICBjb25zdCBpdGVtID0gbWFwW2tleV07XG4gICAgICBpZiAoaXRlbS5hY3Rpb24gPT09IFwiYWJzZW50XCIpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgaWYgKGNsaWVudElkICYmIGNsaWVudElkICE9IGl0ZW0uY2xpZW50SWQpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgaWYgKGNvbm5lY3Rpb25JZCAmJiBjb25uZWN0aW9uSWQgIT0gaXRlbS5jb25uZWN0aW9uSWQpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgcHV0KGl0ZW0pIHtcbiAgICBpZiAoaXRlbS5hY3Rpb24gPT09IFwiZW50ZXJcIiB8fCBpdGVtLmFjdGlvbiA9PT0gXCJ1cGRhdGVcIikge1xuICAgICAgaXRlbSA9IGZyb21WYWx1ZXMyKGl0ZW0pO1xuICAgICAgaXRlbS5hY3Rpb24gPSBcInByZXNlbnRcIjtcbiAgICB9XG4gICAgY29uc3QgbWFwID0gdGhpcy5tYXAsIGtleSA9IHRoaXMubWVtYmVyS2V5KGl0ZW0pO1xuICAgIGlmICh0aGlzLnJlc2lkdWFsTWVtYmVycylcbiAgICAgIGRlbGV0ZSB0aGlzLnJlc2lkdWFsTWVtYmVyc1trZXldO1xuICAgIGNvbnN0IGV4aXN0aW5nSXRlbSA9IG1hcFtrZXldO1xuICAgIGlmIChleGlzdGluZ0l0ZW0gJiYgIXRoaXMubmV3ZXJUaGFuKGl0ZW0sIGV4aXN0aW5nSXRlbSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbWFwW2tleV0gPSBpdGVtO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhbHVlcygpIHtcbiAgICBjb25zdCBtYXAgPSB0aGlzLm1hcCwgcmVzdWx0ID0gW107XG4gICAgZm9yIChjb25zdCBrZXkgaW4gbWFwKSB7XG4gICAgICBjb25zdCBpdGVtID0gbWFwW2tleV07XG4gICAgICBpZiAoaXRlbS5hY3Rpb24gIT0gXCJhYnNlbnRcIilcbiAgICAgICAgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgcmVtb3ZlKGl0ZW0pIHtcbiAgICBjb25zdCBtYXAgPSB0aGlzLm1hcCwga2V5ID0gdGhpcy5tZW1iZXJLZXkoaXRlbSk7XG4gICAgY29uc3QgZXhpc3RpbmdJdGVtID0gbWFwW2tleV07XG4gICAgaWYgKGV4aXN0aW5nSXRlbSAmJiAhdGhpcy5uZXdlclRoYW4oaXRlbSwgZXhpc3RpbmdJdGVtKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodGhpcy5zeW5jSW5Qcm9ncmVzcykge1xuICAgICAgaXRlbSA9IGZyb21WYWx1ZXMyKGl0ZW0pO1xuICAgICAgaXRlbS5hY3Rpb24gPSBcImFic2VudFwiO1xuICAgICAgbWFwW2tleV0gPSBpdGVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgbWFwW2tleV07XG4gICAgfVxuICAgIHJldHVybiAhIWV4aXN0aW5nSXRlbTtcbiAgfVxuICBzdGFydFN5bmMoKSB7XG4gICAgY29uc3QgbWFwID0gdGhpcy5tYXAsIHN5bmNJblByb2dyZXNzID0gdGhpcy5zeW5jSW5Qcm9ncmVzcztcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICB0aGlzLmxvZ2dlcixcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgIFwiUHJlc2VuY2VNYXAuc3RhcnRTeW5jKClcIixcbiAgICAgIFwiY2hhbm5lbCA9IFwiICsgdGhpcy5wcmVzZW5jZS5jaGFubmVsLm5hbWUgKyBcIjsgc3luY0luUHJvZ3Jlc3MgPSBcIiArIHN5bmNJblByb2dyZXNzXG4gICAgKTtcbiAgICBpZiAoIXRoaXMuc3luY0luUHJvZ3Jlc3MpIHtcbiAgICAgIHRoaXMucmVzaWR1YWxNZW1iZXJzID0gY29weShtYXApO1xuICAgICAgdGhpcy5zZXRJblByb2dyZXNzKHRydWUpO1xuICAgIH1cbiAgfVxuICBlbmRTeW5jKCkge1xuICAgIGNvbnN0IG1hcCA9IHRoaXMubWFwLCBzeW5jSW5Qcm9ncmVzcyA9IHRoaXMuc3luY0luUHJvZ3Jlc3M7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICBcIlByZXNlbmNlTWFwLmVuZFN5bmMoKVwiLFxuICAgICAgXCJjaGFubmVsID0gXCIgKyB0aGlzLnByZXNlbmNlLmNoYW5uZWwubmFtZSArIFwiOyBzeW5jSW5Qcm9ncmVzcyA9IFwiICsgc3luY0luUHJvZ3Jlc3NcbiAgICApO1xuICAgIGlmIChzeW5jSW5Qcm9ncmVzcykge1xuICAgICAgZm9yIChjb25zdCBtZW1iZXJLZXkgaW4gbWFwKSB7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0gbWFwW21lbWJlcktleV07XG4gICAgICAgIGlmIChlbnRyeS5hY3Rpb24gPT09IFwiYWJzZW50XCIpIHtcbiAgICAgICAgICBkZWxldGUgbWFwW21lbWJlcktleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMucHJlc2VuY2UuX3N5bnRoZXNpemVMZWF2ZXModmFsdWVzQXJyYXkodGhpcy5yZXNpZHVhbE1lbWJlcnMpKTtcbiAgICAgIGZvciAoY29uc3QgbWVtYmVyS2V5IGluIHRoaXMucmVzaWR1YWxNZW1iZXJzKSB7XG4gICAgICAgIGRlbGV0ZSBtYXBbbWVtYmVyS2V5XTtcbiAgICAgIH1cbiAgICAgIHRoaXMucmVzaWR1YWxNZW1iZXJzID0gbnVsbDtcbiAgICAgIHRoaXMuc2V0SW5Qcm9ncmVzcyhmYWxzZSk7XG4gICAgfVxuICAgIHRoaXMuZW1pdChcInN5bmNcIik7XG4gIH1cbiAgd2FpdFN5bmMoY2FsbGJhY2spIHtcbiAgICBjb25zdCBzeW5jSW5Qcm9ncmVzcyA9IHRoaXMuc3luY0luUHJvZ3Jlc3M7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICBcIlByZXNlbmNlTWFwLndhaXRTeW5jKClcIixcbiAgICAgIFwiY2hhbm5lbCA9IFwiICsgdGhpcy5wcmVzZW5jZS5jaGFubmVsLm5hbWUgKyBcIjsgc3luY0luUHJvZ3Jlc3MgPSBcIiArIHN5bmNJblByb2dyZXNzXG4gICAgKTtcbiAgICBpZiAoIXN5bmNJblByb2dyZXNzKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm9uY2UoXCJzeW5jXCIsIGNhbGxiYWNrKTtcbiAgfVxuICBjbGVhcigpIHtcbiAgICB0aGlzLm1hcCA9IHt9O1xuICAgIHRoaXMuc2V0SW5Qcm9ncmVzcyhmYWxzZSk7XG4gICAgdGhpcy5yZXNpZHVhbE1lbWJlcnMgPSBudWxsO1xuICB9XG4gIHNldEluUHJvZ3Jlc3MoaW5Qcm9ncmVzcykge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLCBcIlByZXNlbmNlTWFwLnNldEluUHJvZ3Jlc3MoKVwiLCBcImluUHJvZ3Jlc3MgPSBcIiArIGluUHJvZ3Jlc3MpO1xuICAgIHRoaXMuc3luY0luUHJvZ3Jlc3MgPSBpblByb2dyZXNzO1xuICAgIHRoaXMucHJlc2VuY2Uuc3luY0NvbXBsZXRlID0gIWluUHJvZ3Jlc3M7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tb24vbGliL2NsaWVudC9yZWFsdGltZXByZXNlbmNlLnRzXG5mdW5jdGlvbiBnZXRDbGllbnRJZChyZWFsdGltZVByZXNlbmNlKSB7XG4gIHJldHVybiByZWFsdGltZVByZXNlbmNlLmNoYW5uZWwuY2xpZW50LmF1dGguY2xpZW50SWQ7XG59XG5mdW5jdGlvbiBpc0Fub255bW91c09yV2lsZGNhcmQocmVhbHRpbWVQcmVzZW5jZSkge1xuICBjb25zdCByZWFsdGltZSA9IHJlYWx0aW1lUHJlc2VuY2UuY2hhbm5lbC5jbGllbnQ7XG4gIGNvbnN0IGNsaWVudElkID0gcmVhbHRpbWUuYXV0aC5jbGllbnRJZDtcbiAgcmV0dXJuICghY2xpZW50SWQgfHwgY2xpZW50SWQgPT09IFwiKlwiKSAmJiByZWFsdGltZS5jb25uZWN0aW9uLnN0YXRlID09PSBcImNvbm5lY3RlZFwiO1xufVxuZnVuY3Rpb24gd2FpdEF0dGFjaGVkKGNoYW5uZWwsIGNhbGxiYWNrLCBhY3Rpb24pIHtcbiAgc3dpdGNoIChjaGFubmVsLnN0YXRlKSB7XG4gICAgY2FzZSBcImF0dGFjaGVkXCI6XG4gICAgY2FzZSBcInN1c3BlbmRlZFwiOlxuICAgICAgYWN0aW9uKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW5pdGlhbGl6ZWRcIjpcbiAgICBjYXNlIFwiZGV0YWNoZWRcIjpcbiAgICBjYXNlIFwiZGV0YWNoaW5nXCI6XG4gICAgY2FzZSBcImF0dGFjaGluZ1wiOlxuICAgICAgd2hlblByb21pc2VTZXR0bGVzKGNoYW5uZWwuYXR0YWNoKCksIGZ1bmN0aW9uKGVycikge1xuICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBhY3Rpb24oKTtcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGNhbGxiYWNrKEVycm9ySW5mby5mcm9tVmFsdWVzKGNoYW5uZWwuaW52YWxpZFN0YXRlRXJyb3IoKSkpO1xuICB9XG59XG52YXIgUmVhbHRpbWVQcmVzZW5jZSA9IGNsYXNzIGV4dGVuZHMgZXZlbnRlbWl0dGVyX2RlZmF1bHQge1xuICBjb25zdHJ1Y3RvcihjaGFubmVsKSB7XG4gICAgc3VwZXIoY2hhbm5lbC5sb2dnZXIpO1xuICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWw7XG4gICAgdGhpcy5zeW5jQ29tcGxldGUgPSBmYWxzZTtcbiAgICB0aGlzLm1lbWJlcnMgPSBuZXcgUHJlc2VuY2VNYXAodGhpcywgKGl0ZW0pID0+IGl0ZW0uY2xpZW50SWQgKyBcIjpcIiArIGl0ZW0uY29ubmVjdGlvbklkKTtcbiAgICB0aGlzLl9teU1lbWJlcnMgPSBuZXcgUHJlc2VuY2VNYXAodGhpcywgKGl0ZW0pID0+IGl0ZW0uY2xpZW50SWQpO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IG5ldyBldmVudGVtaXR0ZXJfZGVmYXVsdCh0aGlzLmxvZ2dlcik7XG4gICAgdGhpcy5wZW5kaW5nUHJlc2VuY2UgPSBbXTtcbiAgfVxuICBhc3luYyBlbnRlcihkYXRhKSB7XG4gICAgaWYgKGlzQW5vbnltb3VzT3JXaWxkY2FyZCh0aGlzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcImNsaWVudElkIG11c3QgYmUgc3BlY2lmaWVkIHRvIGVudGVyIGEgcHJlc2VuY2UgY2hhbm5lbFwiLCA0MDAxMiwgNDAwKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2VudGVyT3JVcGRhdGVDbGllbnQodm9pZCAwLCB2b2lkIDAsIGRhdGEsIFwiZW50ZXJcIik7XG4gIH1cbiAgYXN5bmMgdXBkYXRlKGRhdGEpIHtcbiAgICBpZiAoaXNBbm9ueW1vdXNPcldpbGRjYXJkKHRoaXMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFwiY2xpZW50SWQgbXVzdCBiZSBzcGVjaWZpZWQgdG8gdXBkYXRlIHByZXNlbmNlIGRhdGFcIiwgNDAwMTIsIDQwMCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9lbnRlck9yVXBkYXRlQ2xpZW50KHZvaWQgMCwgdm9pZCAwLCBkYXRhLCBcInVwZGF0ZVwiKTtcbiAgfVxuICBhc3luYyBlbnRlckNsaWVudChjbGllbnRJZCwgZGF0YSkge1xuICAgIHJldHVybiB0aGlzLl9lbnRlck9yVXBkYXRlQ2xpZW50KHZvaWQgMCwgY2xpZW50SWQsIGRhdGEsIFwiZW50ZXJcIik7XG4gIH1cbiAgYXN5bmMgdXBkYXRlQ2xpZW50KGNsaWVudElkLCBkYXRhKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VudGVyT3JVcGRhdGVDbGllbnQodm9pZCAwLCBjbGllbnRJZCwgZGF0YSwgXCJ1cGRhdGVcIik7XG4gIH1cbiAgYXN5bmMgX2VudGVyT3JVcGRhdGVDbGllbnQoaWQsIGNsaWVudElkLCBkYXRhLCBhY3Rpb24pIHtcbiAgICBjb25zdCBjaGFubmVsID0gdGhpcy5jaGFubmVsO1xuICAgIGlmICghY2hhbm5lbC5jb25uZWN0aW9uTWFuYWdlci5hY3RpdmVTdGF0ZSgpKSB7XG4gICAgICB0aHJvdyBjaGFubmVsLmNvbm5lY3Rpb25NYW5hZ2VyLmdldEVycm9yKCk7XG4gICAgfVxuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgXCJSZWFsdGltZVByZXNlbmNlLlwiICsgYWN0aW9uICsgXCJDbGllbnQoKVwiLFxuICAgICAgXCJjaGFubmVsID0gXCIgKyBjaGFubmVsLm5hbWUgKyBcIiwgaWQgPSBcIiArIGlkICsgXCIsIGNsaWVudCA9IFwiICsgKGNsaWVudElkIHx8IFwiKGltcGxpY2l0KSBcIiArIGdldENsaWVudElkKHRoaXMpKVxuICAgICk7XG4gICAgY29uc3QgcHJlc2VuY2UgPSBmcm9tRGF0YShkYXRhKTtcbiAgICBwcmVzZW5jZS5hY3Rpb24gPSBhY3Rpb247XG4gICAgaWYgKGlkKSB7XG4gICAgICBwcmVzZW5jZS5pZCA9IGlkO1xuICAgIH1cbiAgICBpZiAoY2xpZW50SWQpIHtcbiAgICAgIHByZXNlbmNlLmNsaWVudElkID0gY2xpZW50SWQ7XG4gICAgfVxuICAgIGF3YWl0IGVuY29kZShwcmVzZW5jZSwgY2hhbm5lbC5jaGFubmVsT3B0aW9ucyk7XG4gICAgc3dpdGNoIChjaGFubmVsLnN0YXRlKSB7XG4gICAgICBjYXNlIFwiYXR0YWNoZWRcIjpcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICBjaGFubmVsLnNlbmRQcmVzZW5jZShwcmVzZW5jZSwgKGVycikgPT4gZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKCkpO1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgXCJpbml0aWFsaXplZFwiOlxuICAgICAgY2FzZSBcImRldGFjaGVkXCI6XG4gICAgICAgIGNoYW5uZWwuYXR0YWNoKCk7XG4gICAgICBjYXNlIFwiYXR0YWNoaW5nXCI6XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgdGhpcy5wZW5kaW5nUHJlc2VuY2UucHVzaCh7XG4gICAgICAgICAgICBwcmVzZW5jZSxcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoZXJyKSA9PiBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgY29uc3QgZXJyID0gbmV3IFBhcnRpYWxFcnJvckluZm8oXG4gICAgICAgICAgXCJVbmFibGUgdG8gXCIgKyBhY3Rpb24gKyBcIiBwcmVzZW5jZSBjaGFubmVsIHdoaWxlIGluIFwiICsgY2hhbm5lbC5zdGF0ZSArIFwiIHN0YXRlXCIsXG4gICAgICAgICAgOTAwMDFcbiAgICAgICAgKTtcbiAgICAgICAgZXJyLmNvZGUgPSA5MDAwMTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBhc3luYyBsZWF2ZShkYXRhKSB7XG4gICAgaWYgKGlzQW5vbnltb3VzT3JXaWxkY2FyZCh0aGlzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcImNsaWVudElkIG11c3QgaGF2ZSBiZWVuIHNwZWNpZmllZCB0byBlbnRlciBvciBsZWF2ZSBhIHByZXNlbmNlIGNoYW5uZWxcIiwgNDAwMTIsIDQwMCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmxlYXZlQ2xpZW50KHZvaWQgMCwgZGF0YSk7XG4gIH1cbiAgYXN5bmMgbGVhdmVDbGllbnQoY2xpZW50SWQsIGRhdGEpIHtcbiAgICBjb25zdCBjaGFubmVsID0gdGhpcy5jaGFubmVsO1xuICAgIGlmICghY2hhbm5lbC5jb25uZWN0aW9uTWFuYWdlci5hY3RpdmVTdGF0ZSgpKSB7XG4gICAgICB0aHJvdyBjaGFubmVsLmNvbm5lY3Rpb25NYW5hZ2VyLmdldEVycm9yKCk7XG4gICAgfVxuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgXCJSZWFsdGltZVByZXNlbmNlLmxlYXZlQ2xpZW50KClcIixcbiAgICAgIFwibGVhdmluZzsgY2hhbm5lbCA9IFwiICsgdGhpcy5jaGFubmVsLm5hbWUgKyBcIiwgY2xpZW50ID0gXCIgKyBjbGllbnRJZFxuICAgICk7XG4gICAgY29uc3QgcHJlc2VuY2UgPSBmcm9tRGF0YShkYXRhKTtcbiAgICBwcmVzZW5jZS5hY3Rpb24gPSBcImxlYXZlXCI7XG4gICAgaWYgKGNsaWVudElkKSB7XG4gICAgICBwcmVzZW5jZS5jbGllbnRJZCA9IGNsaWVudElkO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgc3dpdGNoIChjaGFubmVsLnN0YXRlKSB7XG4gICAgICAgIGNhc2UgXCJhdHRhY2hlZFwiOlxuICAgICAgICAgIGNoYW5uZWwuc2VuZFByZXNlbmNlKHByZXNlbmNlLCAoZXJyKSA9PiBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJhdHRhY2hpbmdcIjpcbiAgICAgICAgICB0aGlzLnBlbmRpbmdQcmVzZW5jZS5wdXNoKHtcbiAgICAgICAgICAgIHByZXNlbmNlLFxuICAgICAgICAgICAgY2FsbGJhY2s6IChlcnIpID0+IGVyciA/IHJlamVjdChlcnIpIDogcmVzb2x2ZSgpXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJpbml0aWFsaXplZFwiOlxuICAgICAgICBjYXNlIFwiZmFpbGVkXCI6IHtcbiAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgUGFydGlhbEVycm9ySW5mbyhcIlVuYWJsZSB0byBsZWF2ZSBwcmVzZW5jZSBjaGFubmVsIChpbmNvbXBhdGlibGUgc3RhdGUpXCIsIDkwMDAxKTtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlamVjdChjaGFubmVsLmludmFsaWRTdGF0ZUVycm9yKCkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGFzeW5jIGdldChwYXJhbXMpIHtcbiAgICBjb25zdCB3YWl0Rm9yU3luYyA9ICFwYXJhbXMgfHwgKFwid2FpdEZvclN5bmNcIiBpbiBwYXJhbXMgPyBwYXJhbXMud2FpdEZvclN5bmMgOiB0cnVlKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZnVuY3Rpb24gcmV0dXJuTWVtYmVycyhtZW1iZXJzKSB7XG4gICAgICAgIHJlc29sdmUocGFyYW1zID8gbWVtYmVycy5saXN0KHBhcmFtcykgOiBtZW1iZXJzLnZhbHVlcygpKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmNoYW5uZWwuc3RhdGUgPT09IFwic3VzcGVuZGVkXCIpIHtcbiAgICAgICAgaWYgKHdhaXRGb3JTeW5jKSB7XG4gICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgRXJyb3JJbmZvLmZyb21WYWx1ZXMoe1xuICAgICAgICAgICAgICBzdGF0dXNDb2RlOiA0MDAsXG4gICAgICAgICAgICAgIGNvZGU6IDkxMDA1LFxuICAgICAgICAgICAgICBtZXNzYWdlOiBcIlByZXNlbmNlIHN0YXRlIGlzIG91dCBvZiBzeW5jIGR1ZSB0byBjaGFubmVsIGJlaW5nIGluIHRoZSBTVVNQRU5ERUQgc3RhdGVcIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybk1lbWJlcnModGhpcy5tZW1iZXJzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB3YWl0QXR0YWNoZWQoXG4gICAgICAgIHRoaXMuY2hhbm5lbCxcbiAgICAgICAgKGVycikgPT4gcmVqZWN0KGVyciksXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICBjb25zdCBtZW1iZXJzID0gdGhpcy5tZW1iZXJzO1xuICAgICAgICAgIGlmICh3YWl0Rm9yU3luYykge1xuICAgICAgICAgICAgbWVtYmVycy53YWl0U3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuTWVtYmVycyhtZW1iZXJzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm5NZW1iZXJzKG1lbWJlcnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuICBhc3luYyBoaXN0b3J5KHBhcmFtcykge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLCBcIlJlYWx0aW1lUHJlc2VuY2UuaGlzdG9yeSgpXCIsIFwiY2hhbm5lbCA9IFwiICsgdGhpcy5uYW1lKTtcbiAgICBjb25zdCByZXN0TWl4aW4gPSB0aGlzLmNoYW5uZWwuY2xpZW50LnJlc3QucHJlc2VuY2VNaXhpbjtcbiAgICBpZiAocGFyYW1zICYmIHBhcmFtcy51bnRpbEF0dGFjaCkge1xuICAgICAgaWYgKHRoaXMuY2hhbm5lbC5zdGF0ZSA9PT0gXCJhdHRhY2hlZFwiKSB7XG4gICAgICAgIGRlbGV0ZSBwYXJhbXMudW50aWxBdHRhY2g7XG4gICAgICAgIHBhcmFtcy5mcm9tX3NlcmlhbCA9IHRoaXMuY2hhbm5lbC5wcm9wZXJ0aWVzLmF0dGFjaFNlcmlhbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvckluZm8oXG4gICAgICAgICAgXCJvcHRpb24gdW50aWxBdHRhY2ggcmVxdWlyZXMgdGhlIGNoYW5uZWwgdG8gYmUgYXR0YWNoZWQsIHdhczogXCIgKyB0aGlzLmNoYW5uZWwuc3RhdGUsXG4gICAgICAgICAgNGU0LFxuICAgICAgICAgIDQwMFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdE1peGluLmhpc3RvcnkodGhpcywgcGFyYW1zKTtcbiAgfVxuICBzZXRQcmVzZW5jZShwcmVzZW5jZVNldCwgaXNTeW5jLCBzeW5jQ2hhbm5lbFNlcmlhbCkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgXCJSZWFsdGltZVByZXNlbmNlLnNldFByZXNlbmNlKClcIixcbiAgICAgIFwicmVjZWl2ZWQgcHJlc2VuY2UgZm9yIFwiICsgcHJlc2VuY2VTZXQubGVuZ3RoICsgXCIgcGFydGljaXBhbnRzOyBzeW5jQ2hhbm5lbFNlcmlhbCA9IFwiICsgc3luY0NoYW5uZWxTZXJpYWxcbiAgICApO1xuICAgIGxldCBzeW5jQ3Vyc29yLCBtYXRjaDtcbiAgICBjb25zdCBtZW1iZXJzID0gdGhpcy5tZW1iZXJzLCBteU1lbWJlcnMgPSB0aGlzLl9teU1lbWJlcnMsIGJyb2FkY2FzdE1lc3NhZ2VzID0gW10sIGNvbm5JZCA9IHRoaXMuY2hhbm5lbC5jb25uZWN0aW9uTWFuYWdlci5jb25uZWN0aW9uSWQ7XG4gICAgaWYgKGlzU3luYykge1xuICAgICAgdGhpcy5tZW1iZXJzLnN0YXJ0U3luYygpO1xuICAgICAgaWYgKHN5bmNDaGFubmVsU2VyaWFsICYmIChtYXRjaCA9IHN5bmNDaGFubmVsU2VyaWFsLm1hdGNoKC9eW1xcdy1dKzooLiopJC8pKSkge1xuICAgICAgICBzeW5jQ3Vyc29yID0gbWF0Y2hbMV07XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJlc2VuY2VTZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHByZXNlbmNlID0gZnJvbVZhbHVlczIocHJlc2VuY2VTZXRbaV0pO1xuICAgICAgc3dpdGNoIChwcmVzZW5jZS5hY3Rpb24pIHtcbiAgICAgICAgY2FzZSBcImxlYXZlXCI6XG4gICAgICAgICAgaWYgKG1lbWJlcnMucmVtb3ZlKHByZXNlbmNlKSkge1xuICAgICAgICAgICAgYnJvYWRjYXN0TWVzc2FnZXMucHVzaChwcmVzZW5jZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmVzZW5jZS5jb25uZWN0aW9uSWQgPT09IGNvbm5JZCAmJiAhcHJlc2VuY2UuaXNTeW50aGVzaXplZCgpKSB7XG4gICAgICAgICAgICBteU1lbWJlcnMucmVtb3ZlKHByZXNlbmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJlbnRlclwiOlxuICAgICAgICBjYXNlIFwicHJlc2VudFwiOlxuICAgICAgICBjYXNlIFwidXBkYXRlXCI6XG4gICAgICAgICAgaWYgKG1lbWJlcnMucHV0KHByZXNlbmNlKSkge1xuICAgICAgICAgICAgYnJvYWRjYXN0TWVzc2FnZXMucHVzaChwcmVzZW5jZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmVzZW5jZS5jb25uZWN0aW9uSWQgPT09IGNvbm5JZCkge1xuICAgICAgICAgICAgbXlNZW1iZXJzLnB1dChwcmVzZW5jZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNTeW5jICYmICFzeW5jQ3Vyc29yKSB7XG4gICAgICBtZW1iZXJzLmVuZFN5bmMoKTtcbiAgICAgIHRoaXMuY2hhbm5lbC5zeW5jQ2hhbm5lbFNlcmlhbCA9IG51bGw7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnJvYWRjYXN0TWVzc2FnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHByZXNlbmNlID0gYnJvYWRjYXN0TWVzc2FnZXNbaV07XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZW1pdChwcmVzZW5jZS5hY3Rpb24sIHByZXNlbmNlKTtcbiAgICB9XG4gIH1cbiAgb25BdHRhY2hlZChoYXNQcmVzZW5jZSkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgXCJSZWFsdGltZVByZXNlbmNlLm9uQXR0YWNoZWQoKVwiLFxuICAgICAgXCJjaGFubmVsID0gXCIgKyB0aGlzLmNoYW5uZWwubmFtZSArIFwiLCBoYXNQcmVzZW5jZSA9IFwiICsgaGFzUHJlc2VuY2VcbiAgICApO1xuICAgIGlmIChoYXNQcmVzZW5jZSkge1xuICAgICAgdGhpcy5tZW1iZXJzLnN0YXJ0U3luYygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zeW50aGVzaXplTGVhdmVzKHRoaXMubWVtYmVycy52YWx1ZXMoKSk7XG4gICAgICB0aGlzLm1lbWJlcnMuY2xlYXIoKTtcbiAgICB9XG4gICAgdGhpcy5fZW5zdXJlTXlNZW1iZXJzUHJlc2VudCgpO1xuICAgIGNvbnN0IHBlbmRpbmdQcmVzZW5jZSA9IHRoaXMucGVuZGluZ1ByZXNlbmNlLCBwZW5kaW5nUHJlc0NvdW50ID0gcGVuZGluZ1ByZXNlbmNlLmxlbmd0aDtcbiAgICBpZiAocGVuZGluZ1ByZXNDb3VudCkge1xuICAgICAgdGhpcy5wZW5kaW5nUHJlc2VuY2UgPSBbXTtcbiAgICAgIGNvbnN0IHByZXNlbmNlQXJyYXkgPSBbXTtcbiAgICAgIGNvbnN0IG11bHRpY2FzdGVyID0gbXVsdGljYXN0ZXJfZGVmYXVsdC5jcmVhdGUodGhpcy5sb2dnZXIpO1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgICBcIlJlYWx0aW1lUHJlc2VuY2Uub25BdHRhY2hlZFwiLFxuICAgICAgICBcInNlbmRpbmcgXCIgKyBwZW5kaW5nUHJlc0NvdW50ICsgXCIgcXVldWVkIHByZXNlbmNlIG1lc3NhZ2VzXCJcbiAgICAgICk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBlbmRpbmdQcmVzQ291bnQ7IGkrKykge1xuICAgICAgICBjb25zdCBldmVudCA9IHBlbmRpbmdQcmVzZW5jZVtpXTtcbiAgICAgICAgcHJlc2VuY2VBcnJheS5wdXNoKGV2ZW50LnByZXNlbmNlKTtcbiAgICAgICAgbXVsdGljYXN0ZXIucHVzaChldmVudC5jYWxsYmFjayk7XG4gICAgICB9XG4gICAgICB0aGlzLmNoYW5uZWwuc2VuZFByZXNlbmNlKHByZXNlbmNlQXJyYXksIG11bHRpY2FzdGVyKTtcbiAgICB9XG4gIH1cbiAgYWN0T25DaGFubmVsU3RhdGUoc3RhdGUsIGhhc1ByZXNlbmNlLCBlcnIpIHtcbiAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICBjYXNlIFwiYXR0YWNoZWRcIjpcbiAgICAgICAgdGhpcy5vbkF0dGFjaGVkKGhhc1ByZXNlbmNlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZGV0YWNoZWRcIjpcbiAgICAgIGNhc2UgXCJmYWlsZWRcIjpcbiAgICAgICAgdGhpcy5fY2xlYXJNeU1lbWJlcnMoKTtcbiAgICAgICAgdGhpcy5tZW1iZXJzLmNsZWFyKCk7XG4gICAgICBjYXNlIFwic3VzcGVuZGVkXCI6XG4gICAgICAgIHRoaXMuZmFpbFBlbmRpbmdQcmVzZW5jZShlcnIpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgZmFpbFBlbmRpbmdQcmVzZW5jZShlcnIpIHtcbiAgICBpZiAodGhpcy5wZW5kaW5nUHJlc2VuY2UubGVuZ3RoKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgIFwiUmVhbHRpbWVDaGFubmVsLmZhaWxQZW5kaW5nUHJlc2VuY2VcIixcbiAgICAgICAgXCJjaGFubmVsOyBuYW1lID0gXCIgKyB0aGlzLmNoYW5uZWwubmFtZSArIFwiLCBlcnIgPSBcIiArIGluc3BlY3RFcnJvcihlcnIpXG4gICAgICApO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBlbmRpbmdQcmVzZW5jZS5sZW5ndGg7IGkrKylcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLnBlbmRpbmdQcmVzZW5jZVtpXS5jYWxsYmFjayhlcnIpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIH1cbiAgICAgIHRoaXMucGVuZGluZ1ByZXNlbmNlID0gW107XG4gICAgfVxuICB9XG4gIF9jbGVhck15TWVtYmVycygpIHtcbiAgICB0aGlzLl9teU1lbWJlcnMuY2xlYXIoKTtcbiAgfVxuICBfZW5zdXJlTXlNZW1iZXJzUHJlc2VudCgpIHtcbiAgICBjb25zdCBteU1lbWJlcnMgPSB0aGlzLl9teU1lbWJlcnM7XG4gICAgY29uc3QgY29ubklkID0gdGhpcy5jaGFubmVsLmNvbm5lY3Rpb25NYW5hZ2VyLmNvbm5lY3Rpb25JZDtcbiAgICBmb3IgKGNvbnN0IG1lbWJlcktleSBpbiBteU1lbWJlcnMubWFwKSB7XG4gICAgICBjb25zdCBlbnRyeSA9IG15TWVtYmVycy5tYXBbbWVtYmVyS2V5XTtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTyxcbiAgICAgICAgXCJSZWFsdGltZVByZXNlbmNlLl9lbnN1cmVNeU1lbWJlcnNQcmVzZW50KClcIixcbiAgICAgICAgJ0F1dG8tcmVlbnRlcmluZyBjbGllbnRJZCBcIicgKyBlbnRyeS5jbGllbnRJZCArICdcIiBpbnRvIHRoZSBwcmVzZW5jZSBzZXQnXG4gICAgICApO1xuICAgICAgY29uc3QgaWQgPSBlbnRyeS5jb25uZWN0aW9uSWQgPT09IGNvbm5JZCA/IGVudHJ5LmlkIDogdm9pZCAwO1xuICAgICAgdGhpcy5fZW50ZXJPclVwZGF0ZUNsaWVudChpZCwgZW50cnkuY2xpZW50SWQsIGVudHJ5LmRhdGEsIFwiZW50ZXJcIikuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBjb25zdCB3cmFwcGVkRXJyID0gbmV3IEVycm9ySW5mbyhcIlByZXNlbmNlIGF1dG8gcmUtZW50ZXIgZmFpbGVkXCIsIDkxMDA0LCA0MDAsIGVycik7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICAgICAgXCJSZWFsdGltZVByZXNlbmNlLl9lbnN1cmVNeU1lbWJlcnNQcmVzZW50KClcIixcbiAgICAgICAgICBcIlByZXNlbmNlIGF1dG8gcmUtZW50ZXIgZmFpbGVkOyByZWFzb24gPSBcIiArIGluc3BlY3RFcnJvcihlcnIpXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGNoYW5nZSA9IG5ldyBjaGFubmVsc3RhdGVjaGFuZ2VfZGVmYXVsdCh0aGlzLmNoYW5uZWwuc3RhdGUsIHRoaXMuY2hhbm5lbC5zdGF0ZSwgdHJ1ZSwgZmFsc2UsIHdyYXBwZWRFcnIpO1xuICAgICAgICB0aGlzLmNoYW5uZWwuZW1pdChcInVwZGF0ZVwiLCBjaGFuZ2UpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIF9zeW50aGVzaXplTGVhdmVzKGl0ZW1zKSB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9ucyA9IHRoaXMuc3Vic2NyaXB0aW9ucztcbiAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIGNvbnN0IHByZXNlbmNlID0gZnJvbVZhbHVlczIoe1xuICAgICAgICBhY3Rpb246IFwibGVhdmVcIixcbiAgICAgICAgY29ubmVjdGlvbklkOiBpdGVtLmNvbm5lY3Rpb25JZCxcbiAgICAgICAgY2xpZW50SWQ6IGl0ZW0uY2xpZW50SWQsXG4gICAgICAgIGRhdGE6IGl0ZW0uZGF0YSxcbiAgICAgICAgZW5jb2Rpbmc6IGl0ZW0uZW5jb2RpbmcsXG4gICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKVxuICAgICAgfSk7XG4gICAgICBzdWJzY3JpcHRpb25zLmVtaXQoXCJsZWF2ZVwiLCBwcmVzZW5jZSk7XG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgc3Vic2NyaWJlKC4uLl9hcmdzKSB7XG4gICAgY29uc3QgYXJncyA9IHJlYWx0aW1lY2hhbm5lbF9kZWZhdWx0LnByb2Nlc3NMaXN0ZW5lckFyZ3MoX2FyZ3MpO1xuICAgIGNvbnN0IGV2ZW50ID0gYXJnc1swXTtcbiAgICBjb25zdCBsaXN0ZW5lciA9IGFyZ3NbMV07XG4gICAgY29uc3QgY2hhbm5lbCA9IHRoaXMuY2hhbm5lbDtcbiAgICBpZiAoY2hhbm5lbC5zdGF0ZSA9PT0gXCJmYWlsZWRcIikge1xuICAgICAgdGhyb3cgRXJyb3JJbmZvLmZyb21WYWx1ZXMoY2hhbm5lbC5pbnZhbGlkU3RhdGVFcnJvcigpKTtcbiAgICB9XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLm9uKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgYXdhaXQgY2hhbm5lbC5hdHRhY2goKTtcbiAgfVxuICB1bnN1YnNjcmliZSguLi5fYXJncykge1xuICAgIGNvbnN0IGFyZ3MgPSByZWFsdGltZWNoYW5uZWxfZGVmYXVsdC5wcm9jZXNzTGlzdGVuZXJBcmdzKF9hcmdzKTtcbiAgICBjb25zdCBldmVudCA9IGFyZ3NbMF07XG4gICAgY29uc3QgbGlzdGVuZXIgPSBhcmdzWzFdO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5vZmYoZXZlbnQsIGxpc3RlbmVyKTtcbiAgfVxufTtcbnZhciByZWFsdGltZXByZXNlbmNlX2RlZmF1bHQgPSBSZWFsdGltZVByZXNlbmNlO1xuXG4vLyBzcmMvY29tbW9uL2xpYi90cmFuc3BvcnQvd2Vic29ja2V0dHJhbnNwb3J0LnRzXG52YXIgc2hvcnROYW1lID0gVHJhbnNwb3J0TmFtZXMuV2ViU29ja2V0O1xuZnVuY3Rpb24gaXNOb2RlV2ViU29ja2V0KHdzKSB7XG4gIHJldHVybiAhIXdzLm9uO1xufVxudmFyIFdlYlNvY2tldFRyYW5zcG9ydCA9IGNsYXNzIGV4dGVuZHMgdHJhbnNwb3J0X2RlZmF1bHQge1xuICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uTWFuYWdlciwgYXV0aCwgcGFyYW1zKSB7XG4gICAgc3VwZXIoY29ubmVjdGlvbk1hbmFnZXIsIGF1dGgsIHBhcmFtcyk7XG4gICAgdGhpcy5zaG9ydE5hbWUgPSBzaG9ydE5hbWU7XG4gICAgcGFyYW1zLmhlYXJ0YmVhdHMgPSBQbGF0Zm9ybS5Db25maWcudXNlUHJvdG9jb2xIZWFydGJlYXRzO1xuICAgIHRoaXMud3NIb3N0ID0gcGFyYW1zLmhvc3Q7XG4gIH1cbiAgc3RhdGljIGlzQXZhaWxhYmxlKCkge1xuICAgIHJldHVybiAhIVBsYXRmb3JtLkNvbmZpZy5XZWJTb2NrZXQ7XG4gIH1cbiAgY3JlYXRlV2ViU29ja2V0KHVyaSwgY29ubmVjdFBhcmFtcykge1xuICAgIHRoaXMudXJpID0gdXJpICsgdG9RdWVyeVN0cmluZyhjb25uZWN0UGFyYW1zKTtcbiAgICByZXR1cm4gbmV3IFBsYXRmb3JtLkNvbmZpZy5XZWJTb2NrZXQodGhpcy51cmkpO1xuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBcIldlYlNvY2tldFRyYW5zcG9ydDsgdXJpPVwiICsgdGhpcy51cmk7XG4gIH1cbiAgY29ubmVjdCgpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJXZWJTb2NrZXRUcmFuc3BvcnQuY29ubmVjdCgpXCIsIFwic3RhcnRpbmdcIik7XG4gICAgdHJhbnNwb3J0X2RlZmF1bHQucHJvdG90eXBlLmNvbm5lY3QuY2FsbCh0aGlzKTtcbiAgICBjb25zdCBzZWxmMiA9IHRoaXMsIHBhcmFtcyA9IHRoaXMucGFyYW1zLCBvcHRpb25zID0gcGFyYW1zLm9wdGlvbnM7XG4gICAgY29uc3Qgd3NTY2hlbWUgPSBvcHRpb25zLnRscyA/IFwid3NzOi8vXCIgOiBcIndzOi8vXCI7XG4gICAgY29uc3Qgd3NVcmkgPSB3c1NjaGVtZSArIHRoaXMud3NIb3N0ICsgXCI6XCIgKyBkZWZhdWx0c19kZWZhdWx0LmdldFBvcnQob3B0aW9ucykgKyBcIi9cIjtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJXZWJTb2NrZXRUcmFuc3BvcnQuY29ubmVjdCgpXCIsIFwidXJpOiBcIiArIHdzVXJpKTtcbiAgICB3aGVuUHJvbWlzZVNldHRsZXMoXG4gICAgICB0aGlzLmF1dGguZ2V0QXV0aFBhcmFtcygpLFxuICAgICAgZnVuY3Rpb24oZXJyLCBhdXRoUGFyYW1zKSB7XG4gICAgICAgIGlmIChzZWxmMi5pc0Rpc3Bvc2VkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwYXJhbVN0ciA9IFwiXCI7XG4gICAgICAgIGZvciAoY29uc3QgcGFyYW0gaW4gYXV0aFBhcmFtcylcbiAgICAgICAgICBwYXJhbVN0ciArPSBcIiBcIiArIHBhcmFtICsgXCI6IFwiICsgYXV0aFBhcmFtc1twYXJhbV0gKyBcIjtcIjtcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgIHNlbGYyLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgICAgXCJXZWJTb2NrZXRUcmFuc3BvcnQuY29ubmVjdCgpXCIsXG4gICAgICAgICAgXCJhdXRoUGFyYW1zOlwiICsgcGFyYW1TdHIgKyBcIiBlcnI6IFwiICsgZXJyXG4gICAgICAgICk7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBzZWxmMi5kaXNjb25uZWN0KGVycik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbm5lY3RQYXJhbXMgPSBwYXJhbXMuZ2V0Q29ubmVjdFBhcmFtcyhhdXRoUGFyYW1zKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCB3c0Nvbm5lY3Rpb24gPSBzZWxmMi53c0Nvbm5lY3Rpb24gPSBzZWxmMi5jcmVhdGVXZWJTb2NrZXQod3NVcmksIGNvbm5lY3RQYXJhbXMpO1xuICAgICAgICAgIHdzQ29ubmVjdGlvbi5iaW5hcnlUeXBlID0gUGxhdGZvcm0uQ29uZmlnLmJpbmFyeVR5cGU7XG4gICAgICAgICAgd3NDb25uZWN0aW9uLm9ub3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZjIub25Xc09wZW4oKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHdzQ29ubmVjdGlvbi5vbmNsb3NlID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIHNlbGYyLm9uV3NDbG9zZShldik7XG4gICAgICAgICAgfTtcbiAgICAgICAgICB3c0Nvbm5lY3Rpb24ub25tZXNzYWdlID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIHNlbGYyLm9uV3NEYXRhKGV2LmRhdGEpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgd3NDb25uZWN0aW9uLm9uZXJyb3IgPSBmdW5jdGlvbihldikge1xuICAgICAgICAgICAgc2VsZjIub25Xc0Vycm9yKGV2KTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmIChpc05vZGVXZWJTb2NrZXQod3NDb25uZWN0aW9uKSkge1xuICAgICAgICAgICAgd3NDb25uZWN0aW9uLm9uKFwicGluZ1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgc2VsZjIub25BY3Rpdml0eSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgICAgc2VsZjIubG9nZ2VyLFxuICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLFxuICAgICAgICAgICAgXCJXZWJTb2NrZXRUcmFuc3BvcnQuY29ubmVjdCgpXCIsXG4gICAgICAgICAgICBcIlVuZXhwZWN0ZWQgZXhjZXB0aW9uIGNyZWF0aW5nIHdlYnNvY2tldDogZXJyID0gXCIgKyAoZS5zdGFjayB8fCBlLm1lc3NhZ2UpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBzZWxmMi5kaXNjb25uZWN0KGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgfVxuICBzZW5kKG1lc3NhZ2UpIHtcbiAgICBjb25zdCB3c0Nvbm5lY3Rpb24gPSB0aGlzLndzQ29ubmVjdGlvbjtcbiAgICBpZiAoIXdzQ29ubmVjdGlvbikge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIFwiV2ViU29ja2V0VHJhbnNwb3J0LnNlbmQoKVwiLCBcIk5vIHNvY2tldCBjb25uZWN0aW9uXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgd3NDb25uZWN0aW9uLnNlbmQoXG4gICAgICAgIHNlcmlhbGl6ZTIobWVzc2FnZSwgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5yZWFsdGltZS5fTXNnUGFjaywgdGhpcy5wYXJhbXMuZm9ybWF0KVxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBtc2cgPSBcIkV4Y2VwdGlvbiBmcm9tIHdzIGNvbm5lY3Rpb24gd2hlbiB0cnlpbmcgdG8gc2VuZDogXCIgKyBpbnNwZWN0RXJyb3IoZSk7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUiwgXCJXZWJTb2NrZXRUcmFuc3BvcnQuc2VuZCgpXCIsIG1zZyk7XG4gICAgICB0aGlzLmZpbmlzaChcImRpc2Nvbm5lY3RlZFwiLCBuZXcgRXJyb3JJbmZvKG1zZywgNWU0LCA1MDApKTtcbiAgICB9XG4gIH1cbiAgb25Xc0RhdGEoZGF0YSkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgXCJXZWJTb2NrZXRUcmFuc3BvcnQub25Xc0RhdGEoKVwiLFxuICAgICAgXCJkYXRhIHJlY2VpdmVkOyBsZW5ndGggPSBcIiArIGRhdGEubGVuZ3RoICsgXCI7IHR5cGUgPSBcIiArIHR5cGVvZiBkYXRhXG4gICAgKTtcbiAgICB0cnkge1xuICAgICAgdGhpcy5vblByb3RvY29sTWVzc2FnZShcbiAgICAgICAgZGVzZXJpYWxpemUoXG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLnJlYWx0aW1lLl9Nc2dQYWNrLFxuICAgICAgICAgIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIucmVhbHRpbWUuX1JlYWx0aW1lUHJlc2VuY2UsXG4gICAgICAgICAgdGhpcy5mb3JtYXRcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICAgIFwiV2ViU29ja2V0VHJhbnNwb3J0Lm9uV3NEYXRhKClcIixcbiAgICAgICAgXCJVbmV4cGVjdGVkIGV4Y2VwdGlvbiBoYW5kaW5nIGNoYW5uZWwgbWVzc2FnZTogXCIgKyBlLnN0YWNrXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBvbldzT3BlbigpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJXZWJTb2NrZXRUcmFuc3BvcnQub25Xc09wZW4oKVwiLCBcIm9wZW5lZCBXZWJTb2NrZXRcIik7XG4gICAgdGhpcy5lbWl0KFwicHJlY29ubmVjdFwiKTtcbiAgfVxuICBvbldzQ2xvc2UoZXYpIHtcbiAgICBsZXQgd2FzQ2xlYW4sIGNvZGU7XG4gICAgaWYgKHR5cGVvZiBldiA9PSBcIm9iamVjdFwiKSB7XG4gICAgICBjb2RlID0gZXYuY29kZTtcbiAgICAgIHdhc0NsZWFuID0gZXYud2FzQ2xlYW4gfHwgY29kZSA9PT0gMWUzO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb2RlID0gZXY7XG4gICAgICB3YXNDbGVhbiA9IGNvZGUgPT0gMWUzO1xuICAgIH1cbiAgICBkZWxldGUgdGhpcy53c0Nvbm5lY3Rpb247XG4gICAgaWYgKHdhc0NsZWFuKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJXZWJTb2NrZXRUcmFuc3BvcnQub25Xc0Nsb3NlKClcIiwgXCJDbGVhbmx5IGNsb3NlZCBXZWJTb2NrZXRcIik7XG4gICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3JJbmZvKFwiV2Vic29ja2V0IGNsb3NlZFwiLCA4MDAwMywgNDAwKTtcbiAgICAgIHRoaXMuZmluaXNoKFwiZGlzY29ubmVjdGVkXCIsIGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG1zZyA9IFwiVW5jbGVhbiBkaXNjb25uZWN0aW9uIG9mIFdlYlNvY2tldCA7IGNvZGUgPSBcIiArIGNvZGUsIGVyciA9IG5ldyBFcnJvckluZm8obXNnLCA4MDAwMywgNDAwKTtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIldlYlNvY2tldFRyYW5zcG9ydC5vbldzQ2xvc2UoKVwiLCBtc2cpO1xuICAgICAgdGhpcy5maW5pc2goXCJkaXNjb25uZWN0ZWRcIiwgZXJyKTtcbiAgICB9XG4gICAgdGhpcy5lbWl0KFwiZGlzcG9zZWRcIik7XG4gIH1cbiAgb25Xc0Vycm9yKGVycikge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgXCJXZWJTb2NrZXRUcmFuc3BvcnQub25FcnJvcigpXCIsXG4gICAgICBcIkVycm9yIGZyb20gV2ViU29ja2V0OiBcIiArIGVyci5tZXNzYWdlXG4gICAgKTtcbiAgICBQbGF0Zm9ybS5Db25maWcubmV4dFRpY2soKCkgPT4ge1xuICAgICAgdGhpcy5kaXNjb25uZWN0KEVycm9yKGVyci5tZXNzYWdlKSk7XG4gICAgfSk7XG4gIH1cbiAgZGlzcG9zZSgpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJXZWJTb2NrZXRUcmFuc3BvcnQuZGlzcG9zZSgpXCIsIFwiXCIpO1xuICAgIHRoaXMuaXNEaXNwb3NlZCA9IHRydWU7XG4gICAgY29uc3Qgd3NDb25uZWN0aW9uID0gdGhpcy53c0Nvbm5lY3Rpb247XG4gICAgaWYgKHdzQ29ubmVjdGlvbikge1xuICAgICAgd3NDb25uZWN0aW9uLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgfTtcbiAgICAgIGRlbGV0ZSB0aGlzLndzQ29ubmVjdGlvbjtcbiAgICAgIFBsYXRmb3JtLkNvbmZpZy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLCBcIldlYlNvY2tldFRyYW5zcG9ydC5kaXNwb3NlKClcIiwgXCJjbG9zaW5nIHdlYnNvY2tldFwiKTtcbiAgICAgICAgaWYgKCF3c0Nvbm5lY3Rpb24pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXZWJTb2NrZXRUcmFuc3BvcnQuZGlzcG9zZSgpOiB3c0Nvbm5lY3Rpb24gaXMgbm90IGRlZmluZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgd3NDb25uZWN0aW9uLmNsb3NlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn07XG52YXIgd2Vic29ja2V0dHJhbnNwb3J0X2RlZmF1bHQgPSBXZWJTb2NrZXRUcmFuc3BvcnQ7XG5cbi8vIHNyYy9jb21tb24vbGliL2NsaWVudC9maWx0ZXJlZHN1YnNjcmlwdGlvbnMudHNcbnZhciBGaWx0ZXJlZFN1YnNjcmlwdGlvbnMgPSBjbGFzcyB7XG4gIHN0YXRpYyBzdWJzY3JpYmVGaWx0ZXIoY2hhbm5lbCwgZmlsdGVyLCBsaXN0ZW5lcikge1xuICAgIGNvbnN0IGZpbHRlcmVkTGlzdGVuZXIgPSAobSkgPT4ge1xuICAgICAgdmFyIF9hMiwgX2IsIF9jLCBfZCwgX2UsIF9mO1xuICAgICAgY29uc3QgbWFwcGluZyA9IHtcbiAgICAgICAgbmFtZTogbS5uYW1lLFxuICAgICAgICByZWZUaW1lc2VyaWFsOiAoX2IgPSAoX2EyID0gbS5leHRyYXMpID09IG51bGwgPyB2b2lkIDAgOiBfYTIucmVmKSA9PSBudWxsID8gdm9pZCAwIDogX2IudGltZXNlcmlhbCxcbiAgICAgICAgcmVmVHlwZTogKF9kID0gKF9jID0gbS5leHRyYXMpID09IG51bGwgPyB2b2lkIDAgOiBfYy5yZWYpID09IG51bGwgPyB2b2lkIDAgOiBfZC50eXBlLFxuICAgICAgICBpc1JlZjogISEoKF9mID0gKF9lID0gbS5leHRyYXMpID09IG51bGwgPyB2b2lkIDAgOiBfZS5yZWYpID09IG51bGwgPyB2b2lkIDAgOiBfZi50aW1lc2VyaWFsKSxcbiAgICAgICAgY2xpZW50SWQ6IG0uY2xpZW50SWRcbiAgICAgIH07XG4gICAgICBpZiAoT2JqZWN0LmVudHJpZXMoZmlsdGVyKS5maW5kKFxuICAgICAgICAoW2tleSwgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdm9pZCAwID8gbWFwcGluZ1trZXldICE9PSB2YWx1ZSA6IGZhbHNlXG4gICAgICApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxpc3RlbmVyKG0pO1xuICAgIH07XG4gICAgdGhpcy5hZGRGaWx0ZXJlZFN1YnNjcmlwdGlvbihjaGFubmVsLCBmaWx0ZXIsIGxpc3RlbmVyLCBmaWx0ZXJlZExpc3RlbmVyKTtcbiAgICBjaGFubmVsLnN1YnNjcmlwdGlvbnMub24oZmlsdGVyZWRMaXN0ZW5lcik7XG4gIH1cbiAgLy8gQWRkcyBhIG5ldyBmaWx0ZXJlZCBzdWJzY3JpcHRpb25cbiAgc3RhdGljIGFkZEZpbHRlcmVkU3Vic2NyaXB0aW9uKGNoYW5uZWwsIGZpbHRlciwgcmVhbExpc3RlbmVyLCBmaWx0ZXJlZExpc3RlbmVyKSB7XG4gICAgdmFyIF9hMjtcbiAgICBpZiAoIWNoYW5uZWwuZmlsdGVyZWRTdWJzY3JpcHRpb25zKSB7XG4gICAgICBjaGFubmVsLmZpbHRlcmVkU3Vic2NyaXB0aW9ucyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgfVxuICAgIGlmIChjaGFubmVsLmZpbHRlcmVkU3Vic2NyaXB0aW9ucy5oYXMocmVhbExpc3RlbmVyKSkge1xuICAgICAgY29uc3QgcmVhbExpc3RlbmVyTWFwID0gY2hhbm5lbC5maWx0ZXJlZFN1YnNjcmlwdGlvbnMuZ2V0KHJlYWxMaXN0ZW5lcik7XG4gICAgICByZWFsTGlzdGVuZXJNYXAuc2V0KGZpbHRlciwgKChfYTIgPSByZWFsTGlzdGVuZXJNYXAgPT0gbnVsbCA/IHZvaWQgMCA6IHJlYWxMaXN0ZW5lck1hcC5nZXQoZmlsdGVyKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5jb25jYXQoZmlsdGVyZWRMaXN0ZW5lcikpIHx8IFtmaWx0ZXJlZExpc3RlbmVyXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoYW5uZWwuZmlsdGVyZWRTdWJzY3JpcHRpb25zLnNldChcbiAgICAgICAgcmVhbExpc3RlbmVyLFxuICAgICAgICAvKiBAX19QVVJFX18gKi8gbmV3IE1hcChbW2ZpbHRlciwgW2ZpbHRlcmVkTGlzdGVuZXJdXV0pXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBzdGF0aWMgZ2V0QW5kRGVsZXRlRmlsdGVyZWRTdWJzY3JpcHRpb25zKGNoYW5uZWwsIGZpbHRlciwgcmVhbExpc3RlbmVyKSB7XG4gICAgaWYgKCFjaGFubmVsLmZpbHRlcmVkU3Vic2NyaXB0aW9ucykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBpZiAoIXJlYWxMaXN0ZW5lciAmJiBmaWx0ZXIpIHtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKGNoYW5uZWwuZmlsdGVyZWRTdWJzY3JpcHRpb25zLmVudHJpZXMoKSkubWFwKChba2V5LCBmaWx0ZXJNYXBzXSkgPT4ge1xuICAgICAgICB2YXIgX2EyO1xuICAgICAgICBsZXQgbGlzdGVuZXJNYXBzID0gZmlsdGVyTWFwcy5nZXQoZmlsdGVyKTtcbiAgICAgICAgZmlsdGVyTWFwcy5kZWxldGUoZmlsdGVyKTtcbiAgICAgICAgaWYgKGZpbHRlck1hcHMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgIChfYTIgPSBjaGFubmVsLmZpbHRlcmVkU3Vic2NyaXB0aW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5kZWxldGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdGVuZXJNYXBzO1xuICAgICAgfSkucmVkdWNlKFxuICAgICAgICAocHJldiwgY3VyKSA9PiBjdXIgPyBwcmV2LmNvbmNhdCguLi5jdXIpIDogcHJldixcbiAgICAgICAgW11cbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghcmVhbExpc3RlbmVyIHx8ICFjaGFubmVsLmZpbHRlcmVkU3Vic2NyaXB0aW9ucy5oYXMocmVhbExpc3RlbmVyKSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBjb25zdCByZWFsTGlzdGVuZXJNYXAgPSBjaGFubmVsLmZpbHRlcmVkU3Vic2NyaXB0aW9ucy5nZXQocmVhbExpc3RlbmVyKTtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgY29uc3QgbGlzdGVuZXJzMiA9IEFycmF5LmZyb20ocmVhbExpc3RlbmVyTWFwLnZhbHVlcygpKS5yZWR1Y2UoKHByZXYsIGN1cikgPT4gcHJldi5jb25jYXQoLi4uY3VyKSwgW10pO1xuICAgICAgY2hhbm5lbC5maWx0ZXJlZFN1YnNjcmlwdGlvbnMuZGVsZXRlKHJlYWxMaXN0ZW5lcik7XG4gICAgICByZXR1cm4gbGlzdGVuZXJzMjtcbiAgICB9XG4gICAgbGV0IGxpc3RlbmVycyA9IHJlYWxMaXN0ZW5lck1hcC5nZXQoZmlsdGVyKTtcbiAgICByZWFsTGlzdGVuZXJNYXAuZGVsZXRlKGZpbHRlcik7XG4gICAgcmV0dXJuIGxpc3RlbmVycyB8fCBbXTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1vbi9saWIvY2xpZW50L2RlZmF1bHRyZWFsdGltZS50c1xudmFyIF9EZWZhdWx0UmVhbHRpbWUgPSBjbGFzcyBfRGVmYXVsdFJlYWx0aW1lIGV4dGVuZHMgYmFzZXJlYWx0aW1lX2RlZmF1bHQge1xuICAvLyBUaGUgcHVibGljIHR5cGluZ3MgZGVjbGFyZSB0aGF0IHRoaXMgcmVxdWlyZXMgYW4gYXJndW1lbnQgdG8gYmUgcGFzc2VkLCBidXQgc2luY2Ugd2Ugd2FudCB0byBlbWl0IGEgZ29vZCBlcnJvciBtZXNzYWdlIGluIHRoZSBjYXNlIHdoZXJlIGEgbm9uLVR5cGVTY3JpcHQgdXNlciBkb2VzIG5vdCBwYXNzIGFuIGFyZ3VtZW50LCB0ZWxsIHRoZSBjb21waWxlciB0aGF0IHRoaXMgaXMgcG9zc2libGUgc28gdGhhdCBpdCBmb3JjZXMgdXMgdG8gaGFuZGxlIGl0LlxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdmFyIF9hMjtcbiAgICBjb25zdCBNc2dQYWNrID0gX0RlZmF1bHRSZWFsdGltZS5fTXNnUGFjaztcbiAgICBpZiAoIU1zZ1BhY2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIERlZmF1bHRSZWFsdGltZS5fTXNnUGFjayB0byBoYXZlIGJlZW4gc2V0XCIpO1xuICAgIH1cbiAgICBzdXBlcihcbiAgICAgIGRlZmF1bHRzX2RlZmF1bHQub2JqZWN0aWZ5T3B0aW9ucyhvcHRpb25zLCB0cnVlLCBcIlJlYWx0aW1lXCIsIGxvZ2dlcl9kZWZhdWx0LmRlZmF1bHRMb2dnZXIsIF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIGFsbENvbW1vbk1vZHVsYXJQbHVnaW5zKSwge1xuICAgICAgICBDcnlwdG86IChfYTIgPSBfRGVmYXVsdFJlYWx0aW1lLkNyeXB0bykgIT0gbnVsbCA/IF9hMiA6IHZvaWQgMCxcbiAgICAgICAgTXNnUGFjayxcbiAgICAgICAgUmVhbHRpbWVQcmVzZW5jZToge1xuICAgICAgICAgIFJlYWx0aW1lUHJlc2VuY2U6IHJlYWx0aW1lcHJlc2VuY2VfZGVmYXVsdCxcbiAgICAgICAgICBwcmVzZW5jZU1lc3NhZ2VGcm9tVmFsdWVzOiBmcm9tVmFsdWVzMixcbiAgICAgICAgICBwcmVzZW5jZU1lc3NhZ2VzRnJvbVZhbHVlc0FycmF5OiBmcm9tVmFsdWVzQXJyYXkyLFxuICAgICAgICAgIHByZXNlbmNlTWVzc2FnZUZyb21XaXJlUHJvdG9jb2w6IGZyb21XaXJlUHJvdG9jb2wyXG4gICAgICAgIH0sXG4gICAgICAgIFdlYlNvY2tldFRyYW5zcG9ydDogd2Vic29ja2V0dHJhbnNwb3J0X2RlZmF1bHQsXG4gICAgICAgIE1lc3NhZ2VJbnRlcmFjdGlvbnM6IEZpbHRlcmVkU3Vic2NyaXB0aW9uc1xuICAgICAgfSkpXG4gICAgKTtcbiAgfVxuICBzdGF0aWMgZ2V0IENyeXB0bygpIHtcbiAgICBpZiAodGhpcy5fQ3J5cHRvID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbmNyeXB0aW9uIG5vdCBlbmFibGVkOyB1c2UgYWJseS5lbmNyeXB0aW9uLmpzIGluc3RlYWRcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9DcnlwdG87XG4gIH1cbiAgc3RhdGljIHNldCBDcnlwdG8obmV3VmFsdWUpIHtcbiAgICB0aGlzLl9DcnlwdG8gPSBuZXdWYWx1ZTtcbiAgfVxufTtcbl9EZWZhdWx0UmVhbHRpbWUuVXRpbHMgPSB1dGlsc19leHBvcnRzO1xuX0RlZmF1bHRSZWFsdGltZS5Db25uZWN0aW9uTWFuYWdlciA9IGNvbm5lY3Rpb25tYW5hZ2VyX2RlZmF1bHQ7XG5fRGVmYXVsdFJlYWx0aW1lLlByb3RvY29sTWVzc2FnZSA9IHByb3RvY29sbWVzc2FnZV9kZWZhdWx0O1xuX0RlZmF1bHRSZWFsdGltZS5fQ3J5cHRvID0gbnVsbDtcbl9EZWZhdWx0UmVhbHRpbWUuTWVzc2FnZSA9IERlZmF1bHRNZXNzYWdlO1xuX0RlZmF1bHRSZWFsdGltZS5QcmVzZW5jZU1lc3NhZ2UgPSBEZWZhdWx0UHJlc2VuY2VNZXNzYWdlO1xuX0RlZmF1bHRSZWFsdGltZS5fTXNnUGFjayA9IG51bGw7XG4vLyBVc2VkIGJ5IHRlc3RzXG5fRGVmYXVsdFJlYWx0aW1lLl9IdHRwID0gSHR0cDtcbl9EZWZhdWx0UmVhbHRpbWUuX1ByZXNlbmNlTWFwID0gUHJlc2VuY2VNYXA7XG52YXIgRGVmYXVsdFJlYWx0aW1lID0gX0RlZmF1bHRSZWFsdGltZTtcblxuLy8gc3JjL3BsYXRmb3JtL25vZGVqcy9saWIvdXRpbC9idWZmZXJ1dGlscy50c1xudmFyIGltcG9ydF9jcnlwdG8gPSBfX3RvRVNNKHJlcXVpcmUoXCJjcnlwdG9cIikpO1xudmFyIEJ1ZmZlclV0aWxzID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmJhc2U2NENoYXJTZXQgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIjtcbiAgICB0aGlzLmhleENoYXJTZXQgPSBcIjAxMjM0NTY3ODlhYmNkZWZcIjtcbiAgfVxuICBiYXNlNjREZWNvZGUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHN0cmluZywgXCJiYXNlNjRcIik7XG4gIH1cbiAgYmFzZTY0RW5jb2RlKGJ1ZmZlcikge1xuICAgIHJldHVybiB0aGlzLnRvQnVmZmVyKGJ1ZmZlcikudG9TdHJpbmcoXCJiYXNlNjRcIik7XG4gIH1cbiAgYXJlQnVmZmVyc0VxdWFsKGJ1ZmZlcjEsIGJ1ZmZlcjIpIHtcbiAgICBpZiAoIWJ1ZmZlcjEgfHwgIWJ1ZmZlcjIpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXMudG9CdWZmZXIoYnVmZmVyMSkuY29tcGFyZSh0aGlzLnRvQnVmZmVyKGJ1ZmZlcjIpKSA9PSAwO1xuICB9XG4gIGJ5dGVMZW5ndGgoYnVmZmVyKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5ieXRlTGVuZ3RoO1xuICB9XG4gIGhleERlY29kZShzdHJpbmcpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oc3RyaW5nLCBcImhleFwiKTtcbiAgfVxuICBoZXhFbmNvZGUoYnVmZmVyKSB7XG4gICAgcmV0dXJuIHRoaXMudG9CdWZmZXIoYnVmZmVyKS50b1N0cmluZyhcImhleFwiKTtcbiAgfVxuICAvKiBJbiBub2RlLCBCdWZmZXJVdGlscyBtZXRob2RzIHRoYXQgcmV0dXJuIGJpbmFyeSBvYmplY3RzIHJldHVybiBhIEJ1ZmZlclxuICAgKiBmb3IgaGlzdG9yaWNhbCByZWFzb25zOyB0aGUgYnJvd3NlciBlcXVpdmFsZW50cyByZXR1cm4gQXJyYXlCdWZmZXJzICovXG4gIGlzQnVmZmVyKGJ1ZmZlcikge1xuICAgIHJldHVybiBCdWZmZXIuaXNCdWZmZXIoYnVmZmVyKSB8fCBidWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCBBcnJheUJ1ZmZlci5pc1ZpZXcoYnVmZmVyKTtcbiAgfVxuICB0b0FycmF5QnVmZmVyKGJ1ZmZlcikge1xuICAgIGNvbnN0IG5vZGVCdWZmZXIgPSB0aGlzLnRvQnVmZmVyKGJ1ZmZlcik7XG4gICAgcmV0dXJuIG5vZGVCdWZmZXIuYnVmZmVyLnNsaWNlKG5vZGVCdWZmZXIuYnl0ZU9mZnNldCwgbm9kZUJ1ZmZlci5ieXRlT2Zmc2V0ICsgbm9kZUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgfVxuICB0b0J1ZmZlcihidWZmZXIpIHtcbiAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGJ1ZmZlcikpIHtcbiAgICAgIHJldHVybiBidWZmZXI7XG4gICAgfVxuICAgIGlmIChidWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJ1ZmZlcik7XG4gICAgfVxuICAgIHJldHVybiBCdWZmZXIuZnJvbShidWZmZXIuYnVmZmVyLCBidWZmZXIuYnl0ZU9mZnNldCwgYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICB9XG4gIGFycmF5QnVmZmVyVmlld1RvQnVmZmVyKGFycmF5QnVmZmVyVmlldykge1xuICAgIHJldHVybiB0aGlzLnRvQnVmZmVyKGFycmF5QnVmZmVyVmlldyk7XG4gIH1cbiAgdXRmOERlY29kZShidWZmZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNCdWZmZXIoYnVmZmVyKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgaW5wdXQgb2YgdXRmOERlY29kZSB0byBiZSBhIGJ1ZmZlciwgYXJyYXlidWZmZXIsIG9yIHZpZXdcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRvQnVmZmVyKGJ1ZmZlcikudG9TdHJpbmcoXCJ1dGY4XCIpO1xuICB9XG4gIHV0ZjhFbmNvZGUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHN0cmluZywgXCJ1dGY4XCIpO1xuICB9XG4gIGhtYWNTaGEyNTYobWVzc2FnZSwga2V5KSB7XG4gICAgY29uc3QgbWVzc2FnZUJ1ZmZlciA9IHRoaXMudG9CdWZmZXIobWVzc2FnZSk7XG4gICAgY29uc3Qga2V5QnVmZmVyID0gdGhpcy50b0J1ZmZlcihrZXkpO1xuICAgIGNvbnN0IGhtYWMyID0gaW1wb3J0X2NyeXB0by5kZWZhdWx0LmNyZWF0ZUhtYWMoXCJTSEEyNTZcIiwga2V5QnVmZmVyKTtcbiAgICBobWFjMi51cGRhdGUobWVzc2FnZUJ1ZmZlcik7XG4gICAgcmV0dXJuIGhtYWMyLmRpZ2VzdCgpO1xuICB9XG59O1xudmFyIGJ1ZmZlcnV0aWxzX2RlZmF1bHQgPSBuZXcgQnVmZmVyVXRpbHMoKTtcblxuLy8gc3JjL3BsYXRmb3JtL25vZGVqcy9saWIvdXRpbC9jcnlwdG8udHNcbnZhciBpbXBvcnRfY3J5cHRvMiA9IF9fdG9FU00ocmVxdWlyZShcImNyeXB0b1wiKSk7XG52YXIgaW1wb3J0X3V0aWwgPSBfX3RvRVNNKHJlcXVpcmUoXCJ1dGlsXCIpKTtcbnZhciBjcmVhdGVDcnlwdG9DbGFzcyA9IGZ1bmN0aW9uKGJ1ZmZlclV0aWxzKSB7XG4gIHZhciBERUZBVUxUX0FMR09SSVRITSA9IFwiYWVzXCI7XG4gIHZhciBERUZBVUxUX0tFWUxFTkdUSCA9IDI1NjtcbiAgdmFyIERFRkFVTFRfTU9ERSA9IFwiY2JjXCI7XG4gIHZhciBERUZBVUxUX0JMT0NLTEVOR1RIID0gMTY7XG4gIGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tKGJ5dGVzKSB7XG4gICAgcmV0dXJuIGltcG9ydF91dGlsLmRlZmF1bHQucHJvbWlzaWZ5KGltcG9ydF9jcnlwdG8yLmRlZmF1bHQucmFuZG9tQnl0ZXMpKGJ5dGVzKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRQYWRkZWRMZW5ndGgocGxhaW50ZXh0TGVuZ3RoKSB7XG4gICAgcmV0dXJuIHBsYWludGV4dExlbmd0aCArIERFRkFVTFRfQkxPQ0tMRU5HVEggJiAtREVGQVVMVF9CTE9DS0xFTkdUSDtcbiAgfVxuICBmdW5jdGlvbiB2YWxpZGF0ZUNpcGhlclBhcmFtcyhwYXJhbXMpIHtcbiAgICBpZiAocGFyYW1zLmFsZ29yaXRobSA9PT0gXCJhZXNcIiAmJiBwYXJhbXMubW9kZSA9PT0gXCJjYmNcIikge1xuICAgICAgaWYgKHBhcmFtcy5rZXlMZW5ndGggPT09IDEyOCB8fCBwYXJhbXMua2V5TGVuZ3RoID09PSAyNTYpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIlVuc3VwcG9ydGVkIGtleSBsZW5ndGggXCIgKyBwYXJhbXMua2V5TGVuZ3RoICsgXCIgZm9yIGFlcy1jYmMgZW5jcnlwdGlvbi4gRW5jcnlwdGlvbiBrZXkgbXVzdCBiZSAxMjggb3IgMjU2IGJpdHMgKDE2IG9yIDMyIEFTQ0lJIGNoYXJhY3RlcnMpXCJcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG5vcm1hbGlzZUJhc2U2NChzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoXCJfXCIsIFwiL1wiKS5yZXBsYWNlKFwiLVwiLCBcIitcIik7XG4gIH1cbiAgZnVuY3Rpb24gZmlsbGVkQnVmZmVyKGxlbmd0aCwgdmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gQnVmZmVyLmFsbG9jKGxlbmd0aCk7XG4gICAgcmVzdWx0LmZpbGwodmFsdWUpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgdmFyIHBrY3M1UGFkZGluZyA9IFtmaWxsZWRCdWZmZXIoMTYsIDE2KV07XG4gIGZvciAodmFyIGkgPSAxOyBpIDw9IDE2OyBpKyspXG4gICAgcGtjczVQYWRkaW5nLnB1c2goZmlsbGVkQnVmZmVyKGksIGkpKTtcbiAgY2xhc3MgQ2lwaGVyUGFyYW1zIHtcbiAgICBjb25zdHJ1Y3RvcihhbGdvcml0aG0sIGtleUxlbmd0aCwgbW9kZSwga2V5KSB7XG4gICAgICB0aGlzLmFsZ29yaXRobSA9IGFsZ29yaXRobTtcbiAgICAgIHRoaXMua2V5TGVuZ3RoID0ga2V5TGVuZ3RoO1xuICAgICAgdGhpcy5tb2RlID0gbW9kZTtcbiAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgdGhpcy5pdiA9IG51bGw7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGlzSW5zdENpcGhlclBhcmFtcyhwYXJhbXMpIHtcbiAgICByZXR1cm4gISEocGFyYW1zLmFsZ29yaXRobSAmJiBwYXJhbXMua2V5ICYmIHBhcmFtcy5rZXlMZW5ndGggJiYgcGFyYW1zLm1vZGUpO1xuICB9XG4gIGNsYXNzIENyeXB0bzIge1xuICAgIC8qKlxuICAgICAqIE9idGFpbiBhIGNvbXBsZXRlIENpcGhlclBhcmFtcyBpbnN0YW5jZSBmcm9tIHRoZSBwcm92aWRlZCBwYXJhbXMsIGZpbGxpbmdcbiAgICAgKiBpbiBhbnkgbm90IHByb3ZpZGVkIHdpdGggZGVmYXVsdCB2YWx1ZXMsIGNhbGN1bGF0aW5nIGEga2V5TGVuZ3RoIGZyb21cbiAgICAgKiB0aGUgc3VwcGxpZWQga2V5LCBhbmQgdmFsaWRhdGluZyB0aGUgcmVzdWx0LlxuICAgICAqIEBwYXJhbSBwYXJhbXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYXQgYSBtaW5pbXVtIGEgYGtleWAga2V5IHdpdGggdmFsdWUgdGhlXG4gICAgICoga2V5LCBhcyBlaXRoZXIgYSBiaW5hcnkgb3IgYSBiYXNlNjQtZW5jb2RlZCBzdHJpbmcuXG4gICAgICogTWF5IG9wdGlvbmFsbHkgYWxzbyBjb250YWluOiBhbGdvcml0aG0gKGRlZmF1bHRzIHRvIEFFUyksXG4gICAgICogbW9kZSAoZGVmYXVsdHMgdG8gJ2NiYycpXG4gICAgICovXG4gICAgc3RhdGljIGdldERlZmF1bHRQYXJhbXMocGFyYW1zKSB7XG4gICAgICB2YXIga2V5O1xuICAgICAgaWYgKCFwYXJhbXMua2V5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNyeXB0by5nZXREZWZhdWx0UGFyYW1zOiBhIGtleSBpcyByZXF1aXJlZFwiKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcGFyYW1zLmtleSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBrZXkgPSBidWZmZXJVdGlscy5iYXNlNjREZWNvZGUobm9ybWFsaXNlQmFzZTY0KHBhcmFtcy5rZXkpKTtcbiAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmtleSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICAgIGtleSA9IEJ1ZmZlci5mcm9tKHBhcmFtcy5rZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAga2V5ID0gcGFyYW1zLmtleTtcbiAgICAgIH1cbiAgICAgIHZhciBhbGdvcml0aG0gPSBwYXJhbXMuYWxnb3JpdGhtIHx8IERFRkFVTFRfQUxHT1JJVEhNO1xuICAgICAgdmFyIGtleUxlbmd0aCA9IGtleS5sZW5ndGggKiA4O1xuICAgICAgdmFyIG1vZGUgPSBwYXJhbXMubW9kZSB8fCBERUZBVUxUX01PREU7XG4gICAgICB2YXIgY2lwaGVyUGFyYW1zID0gbmV3IENpcGhlclBhcmFtcyhhbGdvcml0aG0sIGtleUxlbmd0aCwgbW9kZSwga2V5KTtcbiAgICAgIGlmIChwYXJhbXMua2V5TGVuZ3RoICYmIHBhcmFtcy5rZXlMZW5ndGggIT09IGNpcGhlclBhcmFtcy5rZXlMZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiQ3J5cHRvLmdldERlZmF1bHRQYXJhbXM6IGEga2V5TGVuZ3RoIG9mIFwiICsgcGFyYW1zLmtleUxlbmd0aCArIFwiIHdhcyBzcGVjaWZpZWQsIGJ1dCB0aGUga2V5IGFjdHVhbGx5IGhhcyBsZW5ndGggXCIgKyBjaXBoZXJQYXJhbXMua2V5TGVuZ3RoXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2YWxpZGF0ZUNpcGhlclBhcmFtcyhjaXBoZXJQYXJhbXMpO1xuICAgICAgcmV0dXJuIGNpcGhlclBhcmFtcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgYSByYW5kb20gZW5jcnlwdGlvbiBrZXkgZnJvbSB0aGUgc3VwcGxpZWQga2V5bGVuZ3RoIChvciB0aGVcbiAgICAgKiBkZWZhdWx0IGtleUxlbmd0aCBpZiBub25lIHN1cHBsaWVkKSBhcyBhIEJ1ZmZlclxuICAgICAqIEBwYXJhbSBrZXlMZW5ndGggKG9wdGlvbmFsKSB0aGUgcmVxdWlyZWQga2V5TGVuZ3RoIGluIGJpdHNcbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgZ2VuZXJhdGVSYW5kb21LZXkoa2V5TGVuZ3RoKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gZ2VuZXJhdGVSYW5kb20oKGtleUxlbmd0aCB8fCBERUZBVUxUX0tFWUxFTkdUSCkgLyA4KTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFwiRmFpbGVkIHRvIGdlbmVyYXRlIHJhbmRvbSBrZXk6IFwiICsgZXJyLm1lc3NhZ2UsIDUwMCwgNWU0LCBlcnIpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbDsgZ2V0IGEgQ2hhbm5lbENpcGhlciBpbnN0YW5jZSBiYXNlZCBvbiB0aGUgZ2l2ZW4gY2lwaGVyUGFyYW1zXG4gICAgICogQHBhcmFtIHBhcmFtcyBlaXRoZXIgYSBDaXBoZXJQYXJhbXMgaW5zdGFuY2Ugb3Igc29tZSBzdWJzZXQgb2YgaXRzXG4gICAgICogZmllbGRzIHRoYXQgaW5jbHVkZXMgYSBrZXlcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0Q2lwaGVyKHBhcmFtcywgbG9nZ2VyKSB7XG4gICAgICB2YXIgX2EyO1xuICAgICAgdmFyIGNpcGhlclBhcmFtcyA9IGlzSW5zdENpcGhlclBhcmFtcyhwYXJhbXMpID8gcGFyYW1zIDogdGhpcy5nZXREZWZhdWx0UGFyYW1zKHBhcmFtcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjaXBoZXJQYXJhbXMsXG4gICAgICAgIGNpcGhlcjogbmV3IENCQ0NpcGhlcihjaXBoZXJQYXJhbXMsIChfYTIgPSBwYXJhbXMuaXYpICE9IG51bGwgPyBfYTIgOiBudWxsLCBsb2dnZXIpXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICBDcnlwdG8yLkNpcGhlclBhcmFtcyA9IENpcGhlclBhcmFtcztcbiAgQ3J5cHRvMjtcbiAgY2xhc3MgQ0JDQ2lwaGVyIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMsIGl2LCBsb2dnZXIpIHtcbiAgICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xuICAgICAgdGhpcy5lbmNyeXB0Q2lwaGVyID0gbnVsbDtcbiAgICAgIHRoaXMuYWxnb3JpdGhtID0gcGFyYW1zLmFsZ29yaXRobSArIFwiLVwiICsgU3RyaW5nKHBhcmFtcy5rZXlMZW5ndGgpICsgXCItXCIgKyBwYXJhbXMubW9kZTtcbiAgICAgIHRoaXMua2V5ID0gcGFyYW1zLmtleTtcbiAgICAgIHRoaXMuaXYgPSBpdjtcbiAgICB9XG4gICAgYXN5bmMgZW5jcnlwdChwbGFpbnRleHQpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLCBcIkNCQ0NpcGhlci5lbmNyeXB0KClcIiwgXCJcIik7XG4gICAgICBjb25zdCBpdiA9IGF3YWl0IHRoaXMuZ2V0SXYoKTtcbiAgICAgIGlmICghdGhpcy5lbmNyeXB0Q2lwaGVyKSB7XG4gICAgICAgIHRoaXMuZW5jcnlwdENpcGhlciA9IGltcG9ydF9jcnlwdG8yLmRlZmF1bHQuY3JlYXRlQ2lwaGVyaXYodGhpcy5hbGdvcml0aG0sIHRoaXMua2V5LCBpdik7XG4gICAgICB9XG4gICAgICB2YXIgcGxhaW50ZXh0QnVmZmVyID0gYnVmZmVyVXRpbHMudG9CdWZmZXIocGxhaW50ZXh0KTtcbiAgICAgIHZhciBwbGFpbnRleHRMZW5ndGggPSBwbGFpbnRleHRCdWZmZXIubGVuZ3RoLCBwYWRkZWRMZW5ndGggPSBnZXRQYWRkZWRMZW5ndGgocGxhaW50ZXh0TGVuZ3RoKTtcbiAgICAgIHZhciBjaXBoZXJPdXQgPSB0aGlzLmVuY3J5cHRDaXBoZXIudXBkYXRlKFxuICAgICAgICBCdWZmZXIuY29uY2F0KFtwbGFpbnRleHRCdWZmZXIsIHBrY3M1UGFkZGluZ1twYWRkZWRMZW5ndGggLSBwbGFpbnRleHRMZW5ndGhdXSlcbiAgICAgICk7XG4gICAgICB2YXIgY2lwaGVydGV4dCA9IEJ1ZmZlci5jb25jYXQoW2l2LCBjaXBoZXJPdXRdKTtcbiAgICAgIHJldHVybiBjaXBoZXJ0ZXh0O1xuICAgIH1cbiAgICBhc3luYyBkZWNyeXB0KGNpcGhlcnRleHQpIHtcbiAgICAgIHZhciBkZWNyeXB0Q2lwaGVyID0gaW1wb3J0X2NyeXB0bzIuZGVmYXVsdC5jcmVhdGVEZWNpcGhlcml2KHRoaXMuYWxnb3JpdGhtLCB0aGlzLmtleSwgY2lwaGVydGV4dC5zbGljZSgwLCBERUZBVUxUX0JMT0NLTEVOR1RIKSksIHBsYWludGV4dCA9IGRlY3J5cHRDaXBoZXIudXBkYXRlKGNpcGhlcnRleHQuc2xpY2UoREVGQVVMVF9CTE9DS0xFTkdUSCkpLCBmaW5hbCA9IGRlY3J5cHRDaXBoZXIuZmluYWwoKTtcbiAgICAgIGlmIChmaW5hbCAmJiBmaW5hbC5sZW5ndGgpXG4gICAgICAgIHBsYWludGV4dCA9IEJ1ZmZlci5jb25jYXQoW3BsYWludGV4dCwgZmluYWxdKTtcbiAgICAgIHJldHVybiBwbGFpbnRleHQ7XG4gICAgfVxuICAgIGFzeW5jIGdldEl2KCkge1xuICAgICAgaWYgKHRoaXMuaXYpIHtcbiAgICAgICAgdmFyIGl2ID0gdGhpcy5pdjtcbiAgICAgICAgdGhpcy5pdiA9IG51bGw7XG4gICAgICAgIHJldHVybiBpdjtcbiAgICAgIH1cbiAgICAgIHZhciByYW5kb21CbG9jayA9IGF3YWl0IGdlbmVyYXRlUmFuZG9tKERFRkFVTFRfQkxPQ0tMRU5HVEgpO1xuICAgICAgaWYgKCF0aGlzLmVuY3J5cHRDaXBoZXIpIHtcbiAgICAgICAgcmV0dXJuIHJhbmRvbUJsb2NrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5jcnlwdENpcGhlci51cGRhdGUocmFuZG9tQmxvY2spO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gQ3J5cHRvMjtcbn07XG5cbi8vIHNyYy9wbGF0Zm9ybS9ub2RlanMvbGliL3V0aWwvaHR0cC50c1xudmFyIGltcG9ydF9nb3QgPSBfX3RvRVNNKHJlcXVpcmUoXCJnb3RcIikpO1xudmFyIGltcG9ydF9odHRwNSA9IF9fdG9FU00ocmVxdWlyZShcImh0dHBcIikpO1xudmFyIGltcG9ydF9odHRwcyA9IF9fdG9FU00ocmVxdWlyZShcImh0dHBzXCIpKTtcbnZhciBnbG9iYWxBZ2VudFBvb2wgPSBbXTtcbnZhciBfYTtcbnZhciBIdHRwMiA9IChfYSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5hZ2VudCA9IG51bGw7XG4gICAgdGhpcy5zdXBwb3J0c0F1dGhIZWFkZXJzID0gdHJ1ZTtcbiAgICB0aGlzLnN1cHBvcnRzTGlua0hlYWRlcnMgPSB0cnVlO1xuICAgIHRoaXMuY2hlY2tDb25uZWN0aXZpdHkgPSBhc3luYyAoKSA9PiB7XG4gICAgICB2YXIgX2EyLCBfYiwgX2MsIF9kLCBfZTtcbiAgICAgIGlmICgoX2EyID0gdGhpcy5jbGllbnQpID09IG51bGwgPyB2b2lkIDAgOiBfYTIub3B0aW9ucy5kaXNhYmxlQ29ubmVjdGl2aXR5Q2hlY2spIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBjb25zdCBjb25uZWN0aXZpdHlDaGVja1VybCA9ICgoX2IgPSB0aGlzLmNsaWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLm9wdGlvbnMuY29ubmVjdGl2aXR5Q2hlY2tVcmwpIHx8IGRlZmF1bHRzX2RlZmF1bHQuY29ubmVjdGl2aXR5Q2hlY2tVcmw7XG4gICAgICBjb25zdCBjb25uZWN0aXZpdHlDaGVja1BhcmFtcyA9IChfZCA9IChfYyA9IHRoaXMuY2xpZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2Mub3B0aW9ucy5jb25uZWN0aXZpdHlDaGVja1BhcmFtcykgIT0gbnVsbCA/IF9kIDogbnVsbDtcbiAgICAgIGNvbnN0IGNvbm5lY3Rpdml0eVVybElzRGVmYXVsdCA9ICEoKF9lID0gdGhpcy5jbGllbnQpID09IG51bGwgPyB2b2lkIDAgOiBfZS5vcHRpb25zLmNvbm5lY3Rpdml0eUNoZWNrVXJsKTtcbiAgICAgIGNvbnN0IHsgZXJyb3IsIHN0YXR1c0NvZGUsIGJvZHkgfSA9IGF3YWl0IHRoaXMuZG9VcmkoXG4gICAgICAgIEh0dHBNZXRob2RzX2RlZmF1bHQuR2V0LFxuICAgICAgICBjb25uZWN0aXZpdHlDaGVja1VybCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgY29ubmVjdGl2aXR5Q2hlY2tQYXJhbXNcbiAgICAgICk7XG4gICAgICBpZiAoIWVycm9yICYmICFjb25uZWN0aXZpdHlVcmxJc0RlZmF1bHQpIHtcbiAgICAgICAgcmV0dXJuIGlzU3VjY2Vzc0NvZGUoc3RhdHVzQ29kZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gIWVycm9yICYmIChib2R5ID09IG51bGwgPyB2b2lkIDAgOiBib2R5LnRvU3RyaW5nKCkudHJpbSgpKSA9PT0gXCJ5ZXNcIjtcbiAgICB9O1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50ICE9IG51bGwgPyBjbGllbnQgOiBudWxsO1xuICB9XG4gIGFzeW5jIGRvVXJpKG1ldGhvZCwgdXJpLCBoZWFkZXJzLCBib2R5LCBwYXJhbXMpIHtcbiAgICB2YXIgX2EyO1xuICAgIGNvbnN0IGFnZW50T3B0aW9ucyA9IHRoaXMuY2xpZW50ICYmIHRoaXMuY2xpZW50Lm9wdGlvbnMucmVzdEFnZW50T3B0aW9ucyB8fCBkZWZhdWx0c19kZWZhdWx0LnJlc3RBZ2VudE9wdGlvbnM7XG4gICAgY29uc3QgZG9PcHRpb25zID0geyBoZWFkZXJzOiBoZWFkZXJzIHx8IHZvaWQgMCwgcmVzcG9uc2VUeXBlOiBcImJ1ZmZlclwiIH07XG4gICAgaWYgKCF0aGlzLmFnZW50KSB7XG4gICAgICBjb25zdCBwZXJzaXN0ZWRBZ2VudCA9IChfYTIgPSBnbG9iYWxBZ2VudFBvb2wuZmluZCgoeCkgPT4gc2hhbGxvd0VxdWFscyhhZ2VudE9wdGlvbnMsIHgub3B0aW9ucykpKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLmFnZW50cztcbiAgICAgIGlmIChwZXJzaXN0ZWRBZ2VudCkge1xuICAgICAgICB0aGlzLmFnZW50ID0gcGVyc2lzdGVkQWdlbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmFnZW50ID0ge1xuICAgICAgICAgIGh0dHA6IG5ldyBpbXBvcnRfaHR0cDUuZGVmYXVsdC5BZ2VudChhZ2VudE9wdGlvbnMpLFxuICAgICAgICAgIGh0dHBzOiBuZXcgaW1wb3J0X2h0dHBzLmRlZmF1bHQuQWdlbnQoYWdlbnRPcHRpb25zKVxuICAgICAgICB9O1xuICAgICAgICBnbG9iYWxBZ2VudFBvb2wucHVzaCh7XG4gICAgICAgICAgb3B0aW9uczogYWdlbnRPcHRpb25zLFxuICAgICAgICAgIGFnZW50czogdGhpcy5hZ2VudFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGJvZHkpIHtcbiAgICAgIGRvT3B0aW9ucy5ib2R5ID0gYm9keTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcylcbiAgICAgIGRvT3B0aW9ucy5zZWFyY2hQYXJhbXMgPSBwYXJhbXM7XG4gICAgZG9PcHRpb25zLmFnZW50ID0gdGhpcy5hZ2VudDtcbiAgICBkb09wdGlvbnMudXJsID0gdXJpO1xuICAgIGRvT3B0aW9ucy50aW1lb3V0ID0ge1xuICAgICAgcmVxdWVzdDogKHRoaXMuY2xpZW50ICYmIHRoaXMuY2xpZW50Lm9wdGlvbnMudGltZW91dHMgfHwgZGVmYXVsdHNfZGVmYXVsdC5USU1FT1VUUykuaHR0cFJlcXVlc3RUaW1lb3V0XG4gICAgfTtcbiAgICBkb09wdGlvbnMucmV0cnkgPSB7IGxpbWl0OiAwIH07XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGltcG9ydF9nb3QuZGVmYXVsdFttZXRob2RdKGRvT3B0aW9ucyk7XG4gICAgICByZXR1cm4gdGhpcy5faGFuZGxlcihudWxsLCByZXMsIHJlcy5ib2R5KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBpbXBvcnRfZ290LmRlZmF1bHQuSFRUUEVycm9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVyKG51bGwsIGVyci5yZXNwb25zZSwgZXJyLnJlc3BvbnNlLmJvZHkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZXIoZXJyKTtcbiAgICB9XG4gIH1cbiAgc2hvdWxkRmFsbGJhY2soZXJyKSB7XG4gICAgY29uc3QgeyBjb2RlLCBzdGF0dXNDb2RlIH0gPSBlcnI7XG4gICAgcmV0dXJuIGNvZGUgPT09IFwiRU5FVFVOUkVBQ0hcIiB8fCBjb2RlID09PSBcIkVIT1NUVU5SRUFDSFwiIHx8IGNvZGUgPT09IFwiRUhPU1RET1dOXCIgfHwgY29kZSA9PT0gXCJFVElNRURPVVRcIiB8fCBjb2RlID09PSBcIkVTT0NLRVRUSU1FRE9VVFwiIHx8IGNvZGUgPT09IFwiRU5PVEZPVU5EXCIgfHwgY29kZSA9PT0gXCJFQ09OTlJFU0VUXCIgfHwgY29kZSA9PT0gXCJFQ09OTlJFRlVTRURcIiB8fCBzdGF0dXNDb2RlID49IDUwMCAmJiBzdGF0dXNDb2RlIDw9IDUwNDtcbiAgfVxuICBfaGFuZGxlcihlcnIsIHJlc3BvbnNlLCBib2R5KSB7XG4gICAgdmFyIF9hMjtcbiAgICBpZiAoZXJyKSB7XG4gICAgICByZXR1cm4geyBlcnJvcjogZXJyIH07XG4gICAgfVxuICAgIGNvbnN0IHN0YXR1c0NvZGUgPSByZXNwb25zZS5zdGF0dXNDb2RlLCBoZWFkZXJzID0gcmVzcG9uc2UuaGVhZGVycztcbiAgICBpZiAoc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgIHN3aXRjaCAoaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSkge1xuICAgICAgICBjYXNlIFwiYXBwbGljYXRpb24vanNvblwiOlxuICAgICAgICAgIGJvZHkgPSBKU09OLnBhcnNlKGJvZHkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiYXBwbGljYXRpb24veC1tc2dwYWNrXCI6XG4gICAgICAgICAgaWYgKCEoKF9hMiA9IHRoaXMuY2xpZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2EyLl9Nc2dQYWNrKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3I6IGNyZWF0ZU1pc3NpbmdQbHVnaW5FcnJvcihcIk1zZ1BhY2tcIikgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYm9keSA9IHRoaXMuY2xpZW50Ll9Nc2dQYWNrLmRlY29kZShib2R5KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVycm9yID0gYm9keS5lcnJvciA/IEVycm9ySW5mby5mcm9tVmFsdWVzKGJvZHkuZXJyb3IpIDogbmV3IEVycm9ySW5mbyhcbiAgICAgICAgaGVhZGVyc1tcIngtYWJseS1lcnJvcm1lc3NhZ2VcIl0gfHwgXCJFcnJvciByZXNwb25zZSByZWNlaXZlZCBmcm9tIHNlcnZlcjogXCIgKyBzdGF0dXNDb2RlICsgXCIgYm9keSB3YXM6IFwiICsgUGxhdGZvcm0uQ29uZmlnLmluc3BlY3QoYm9keSksXG4gICAgICAgIE51bWJlcihoZWFkZXJzW1wieC1hYmx5LWVycm9yY29kZVwiXSksXG4gICAgICAgIHN0YXR1c0NvZGVcbiAgICAgICk7XG4gICAgICByZXR1cm4geyBlcnJvciwgYm9keSwgaGVhZGVycywgdW5wYWNrZWQ6IHRydWUsIHN0YXR1c0NvZGUgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgZXJyb3I6IG51bGwsIGJvZHksIGhlYWRlcnMsIHVucGFja2VkOiBmYWxzZSwgc3RhdHVzQ29kZSB9O1xuICB9XG59LCBfYS5tZXRob2RzID0gW0h0dHBNZXRob2RzX2RlZmF1bHQuR2V0LCBIdHRwTWV0aG9kc19kZWZhdWx0LkRlbGV0ZSwgSHR0cE1ldGhvZHNfZGVmYXVsdC5Qb3N0LCBIdHRwTWV0aG9kc19kZWZhdWx0LlB1dCwgSHR0cE1ldGhvZHNfZGVmYXVsdC5QYXRjaF0sIF9hLm1ldGhvZHNXaXRob3V0Qm9keSA9IFtIdHRwTWV0aG9kc19kZWZhdWx0LkdldCwgSHR0cE1ldGhvZHNfZGVmYXVsdC5EZWxldGVdLCBfYS5tZXRob2RzV2l0aEJvZHkgPSBbSHR0cE1ldGhvZHNfZGVmYXVsdC5Qb3N0LCBIdHRwTWV0aG9kc19kZWZhdWx0LlB1dCwgSHR0cE1ldGhvZHNfZGVmYXVsdC5QYXRjaF0sIF9hKTtcbnZhciBodHRwX2RlZmF1bHQgPSBIdHRwMjtcblxuLy8gc3JjL3BsYXRmb3JtL25vZGVqcy9jb25maWcudHNcbnZhciBpbXBvcnRfY3J5cHRvMyA9IF9fdG9FU00ocmVxdWlyZShcImNyeXB0b1wiKSk7XG52YXIgaW1wb3J0X3dzID0gX190b0VTTShyZXF1aXJlKFwid3NcIikpO1xudmFyIGltcG9ydF91dGlsMiA9IF9fdG9FU00ocmVxdWlyZShcInV0aWxcIikpO1xudmFyIENvbmZpZyA9IHtcbiAgYWdlbnQ6IFwibm9kZWpzL1wiICsgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlLFxuICBsb2dUaW1lc3RhbXBzOiB0cnVlLFxuICB1c2VyQWdlbnQ6IG51bGwsXG4gIGJpbmFyeVR5cGU6IFwibm9kZWJ1ZmZlclwiLFxuICBXZWJTb2NrZXQ6IGltcG9ydF93cy5kZWZhdWx0LFxuICB1c2VQcm90b2NvbEhlYXJ0YmVhdHM6IGZhbHNlLFxuICBzdXBwb3J0c0JpbmFyeTogdHJ1ZSxcbiAgcHJlZmVyQmluYXJ5OiB0cnVlLFxuICBuZXh0VGljazogcHJvY2Vzcy5uZXh0VGljayxcbiAgaW5zcGVjdDogaW1wb3J0X3V0aWwyLmRlZmF1bHQuaW5zcGVjdCxcbiAgc3RyaW5nQnl0ZVNpemU6IEJ1ZmZlci5ieXRlTGVuZ3RoLFxuICBpbmhlcml0czogaW1wb3J0X3V0aWwyLmRlZmF1bHQuaW5oZXJpdHMsXG4gIGFkZEV2ZW50TGlzdGVuZXI6IG51bGwsXG4gIGdldFJhbmRvbUFycmF5QnVmZmVyOiBhc3luYyBmdW5jdGlvbihieXRlTGVuZ3RoKSB7XG4gICAgcmV0dXJuIGltcG9ydF91dGlsMi5kZWZhdWx0LnByb21pc2lmeShpbXBvcnRfY3J5cHRvMy5kZWZhdWx0LnJhbmRvbUJ5dGVzKShieXRlTGVuZ3RoKTtcbiAgfVxufTtcbnZhciBjb25maWdfZGVmYXVsdCA9IENvbmZpZztcblxuLy8gc3JjL2NvbW1vbi9jb25zdGFudHMvWEhSU3RhdGVzLnRzXG52YXIgWEhSU3RhdGVzID0gLyogQF9fUFVSRV9fICovICgoWEhSU3RhdGVzMikgPT4ge1xuICBYSFJTdGF0ZXMyW1hIUlN0YXRlczJbXCJSRVFfU0VORFwiXSA9IDBdID0gXCJSRVFfU0VORFwiO1xuICBYSFJTdGF0ZXMyW1hIUlN0YXRlczJbXCJSRVFfUkVDVlwiXSA9IDFdID0gXCJSRVFfUkVDVlwiO1xuICBYSFJTdGF0ZXMyW1hIUlN0YXRlczJbXCJSRVFfUkVDVl9QT0xMXCJdID0gMl0gPSBcIlJFUV9SRUNWX1BPTExcIjtcbiAgWEhSU3RhdGVzMltYSFJTdGF0ZXMyW1wiUkVRX1JFQ1ZfU1RSRUFNXCJdID0gM10gPSBcIlJFUV9SRUNWX1NUUkVBTVwiO1xuICByZXR1cm4gWEhSU3RhdGVzMjtcbn0pKFhIUlN0YXRlcyB8fCB7fSk7XG52YXIgWEhSU3RhdGVzX2RlZmF1bHQgPSBYSFJTdGF0ZXM7XG5cbi8vIHNyYy9jb21tb24vbGliL3RyYW5zcG9ydC9jb21ldHRyYW5zcG9ydC50c1xuZnVuY3Rpb24gc2hvdWxkQmVFcnJvckFjdGlvbihlcnIpIHtcbiAgY29uc3QgVU5SRVNPTFZBQkxFX0VSUk9SX0NPREVTID0gWzgwMDE1LCA4MDAxNywgODAwMzBdO1xuICBpZiAoZXJyLmNvZGUpIHtcbiAgICBpZiAoYXV0aF9kZWZhdWx0LmlzVG9rZW5FcnIoZXJyKSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoVU5SRVNPTFZBQkxFX0VSUk9SX0NPREVTLmluY2x1ZGVzKGVyci5jb2RlKSlcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBlcnIuY29kZSA+PSA0ZTQgJiYgZXJyLmNvZGUgPCA1ZTQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5mdW5jdGlvbiBwcm90b2NvbE1lc3NhZ2VGcm9tUmF3RXJyb3IoZXJyKSB7XG4gIGlmIChzaG91bGRCZUVycm9yQWN0aW9uKGVycikpIHtcbiAgICByZXR1cm4gW2Zyb21WYWx1ZXMzKHsgYWN0aW9uOiBhY3Rpb25zMi5FUlJPUiwgZXJyb3I6IGVyciB9KV07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFtmcm9tVmFsdWVzMyh7IGFjdGlvbjogYWN0aW9uczIuRElTQ09OTkVDVEVELCBlcnJvcjogZXJyIH0pXTtcbiAgfVxufVxudmFyIENvbWV0VHJhbnNwb3J0ID0gY2xhc3MgZXh0ZW5kcyB0cmFuc3BvcnRfZGVmYXVsdCB7XG4gIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb25NYW5hZ2VyLCBhdXRoLCBwYXJhbXMpIHtcbiAgICBzdXBlcihcbiAgICAgIGNvbm5lY3Rpb25NYW5hZ2VyLFxuICAgICAgYXV0aCxcbiAgICAgIHBhcmFtcyxcbiAgICAgIC8qIGJpbmFyeSBub3Qgc3VwcG9ydGVkIGZvciBjb21ldCBzbyBmb3JjZSBKU09OIHByb3RvY29sICovXG4gICAgICB0cnVlXG4gICAgKTtcbiAgICAvKiBIaXN0b3JpY2FsIGNvbW1lbnQsIGJhY2sgZnJvbSB3aGVuIHdlIHN1cHBvcnRlZCBKU09OUDpcbiAgICAgKlxuICAgICAqID4gRm9yIGNvbWV0LCB3ZSBjb3VsZCBkbyB0aGUgYXV0aCB1cGRhdGUgYnkgYWJvcnRpbmcgdGhlIGN1cnJlbnQgcmVjdiBhbmRcbiAgICAgKiA+IHN0YXJ0aW5nIGEgbmV3IG9uZSB3aXRoIHRoZSBuZXcgdG9rZW4sIHRoYXQnZCBiZSBzdWZmaWNpZW50IGZvciByZWFsdGltZS5cbiAgICAgKiA+IFByb2JsZW0gaXMgSlNPTlAgLSB5b3UgY2FuJ3QgY2FuY2VsIHRydWx5IGFib3J0IGEgcmVjdiBvbmNlIHN0YXJ0ZWQuIFNvXG4gICAgICogPiB3ZSBuZWVkIHRvIHNlbmQgYW4gQVVUSCBmb3IganNvbnAuIEluIHdoaWNoIGNhc2UgaXQncyBzaW1wbGVyIHRvIGtlZXAgYWxsXG4gICAgICogPiBjb21ldCB0cmFuc3BvcnRzIHRoZSBzYW1lIGFuZCBkbyBpdCBmb3IgYWxsIG9mIHRoZW0uIFNvIHdlIHNlbmQgdGhlIEFVVEhcbiAgICAgKiA+IGluc3RlYWQsIGFuZCBkb24ndCBuZWVkIHRvIGFib3J0IHRoZSByZWN2XG4gICAgICpcbiAgICAgKiBOb3cgdGhhdCB3ZeKAmXZlIGRyb3BwZWQgSlNPTlAgc3VwcG9ydCwgd2UgbWF5IGJlIGFibGUgdG8gcmV2aXNpdCB0aGUgYWJvdmU7XG4gICAgICogc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hYmx5L2FibHktanMvaXNzdWVzLzEyMTQuXG4gICAgICovXG4gICAgdGhpcy5vbkF1dGhVcGRhdGVkID0gKHRva2VuRGV0YWlscykgPT4ge1xuICAgICAgdGhpcy5hdXRoUGFyYW1zID0geyBhY2Nlc3NfdG9rZW46IHRva2VuRGV0YWlscy50b2tlbiB9O1xuICAgIH07XG4gICAgdGhpcy5zdHJlYW0gPSBcInN0cmVhbVwiIGluIHBhcmFtcyA/IHBhcmFtcy5zdHJlYW0gOiB0cnVlO1xuICAgIHRoaXMuc2VuZFJlcXVlc3QgPSBudWxsO1xuICAgIHRoaXMucmVjdlJlcXVlc3QgPSBudWxsO1xuICAgIHRoaXMucGVuZGluZ0NhbGxiYWNrID0gbnVsbDtcbiAgICB0aGlzLnBlbmRpbmdJdGVtcyA9IG51bGw7XG4gIH1cbiAgY29ubmVjdCgpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJDb21ldFRyYW5zcG9ydC5jb25uZWN0KClcIiwgXCJzdGFydGluZ1wiKTtcbiAgICB0cmFuc3BvcnRfZGVmYXVsdC5wcm90b3R5cGUuY29ubmVjdC5jYWxsKHRoaXMpO1xuICAgIGNvbnN0IHBhcmFtcyA9IHRoaXMucGFyYW1zO1xuICAgIGNvbnN0IG9wdGlvbnMgPSBwYXJhbXMub3B0aW9ucztcbiAgICBjb25zdCBob3N0ID0gZGVmYXVsdHNfZGVmYXVsdC5nZXRIb3N0KG9wdGlvbnMsIHBhcmFtcy5ob3N0KTtcbiAgICBjb25zdCBwb3J0ID0gZGVmYXVsdHNfZGVmYXVsdC5nZXRQb3J0KG9wdGlvbnMpO1xuICAgIGNvbnN0IGNvbWV0U2NoZW1lID0gb3B0aW9ucy50bHMgPyBcImh0dHBzOi8vXCIgOiBcImh0dHA6Ly9cIjtcbiAgICB0aGlzLmJhc2VVcmkgPSBjb21ldFNjaGVtZSArIGhvc3QgKyBcIjpcIiArIHBvcnQgKyBcIi9jb21ldC9cIjtcbiAgICBjb25zdCBjb25uZWN0VXJpID0gdGhpcy5iYXNlVXJpICsgXCJjb25uZWN0XCI7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiQ29tZXRUcmFuc3BvcnQuY29ubmVjdCgpXCIsIFwidXJpOiBcIiArIGNvbm5lY3RVcmkpO1xuICAgIHdoZW5Qcm9taXNlU2V0dGxlcyh0aGlzLmF1dGguZ2V0QXV0aFBhcmFtcygpLCAoZXJyLCBhdXRoUGFyYW1zKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHRoaXMuZGlzY29ubmVjdChlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc0Rpc3Bvc2VkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuYXV0aFBhcmFtcyA9IGF1dGhQYXJhbXM7XG4gICAgICBjb25zdCBjb25uZWN0UGFyYW1zID0gdGhpcy5wYXJhbXMuZ2V0Q29ubmVjdFBhcmFtcyhhdXRoUGFyYW1zKTtcbiAgICAgIGlmIChcInN0cmVhbVwiIGluIGNvbm5lY3RQYXJhbXMpXG4gICAgICAgIHRoaXMuc3RyZWFtID0gY29ubmVjdFBhcmFtcy5zdHJlYW07XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgIFwiQ29tZXRUcmFuc3BvcnQuY29ubmVjdCgpXCIsXG4gICAgICAgIFwiY29ubmVjdFBhcmFtczpcIiArIHRvUXVlcnlTdHJpbmcoY29ubmVjdFBhcmFtcylcbiAgICAgICk7XG4gICAgICBsZXQgcHJlY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICBjb25zdCBjb25uZWN0UmVxdWVzdCA9IHRoaXMucmVjdlJlcXVlc3QgPSB0aGlzLmNyZWF0ZVJlcXVlc3QoXG4gICAgICAgIGNvbm5lY3RVcmksXG4gICAgICAgIG51bGwsXG4gICAgICAgIGNvbm5lY3RQYXJhbXMsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHRoaXMuc3RyZWFtID8gWEhSU3RhdGVzX2RlZmF1bHQuUkVRX1JFQ1ZfU1RSRUFNIDogWEhSU3RhdGVzX2RlZmF1bHQuUkVRX1JFQ1ZcbiAgICAgICk7XG4gICAgICBjb25uZWN0UmVxdWVzdC5vbihcImRhdGFcIiwgKGRhdGEpID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLnJlY3ZSZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcHJlY29ubmVjdGVkKSB7XG4gICAgICAgICAgcHJlY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmVtaXQoXCJwcmVjb25uZWN0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub25EYXRhKGRhdGEpO1xuICAgICAgfSk7XG4gICAgICBjb25uZWN0UmVxdWVzdC5vbihcImNvbXBsZXRlXCIsIChlcnIyKSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5yZWN2UmVxdWVzdCkge1xuICAgICAgICAgIGVycjIgPSBlcnIyIHx8IG5ldyBFcnJvckluZm8oXCJSZXF1ZXN0IGNhbmNlbGxlZFwiLCA4MDAwMywgNDAwKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlY3ZSZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgaWYgKCFwcmVjb25uZWN0ZWQgJiYgIWVycjIpIHtcbiAgICAgICAgICBwcmVjb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuZW1pdChcInByZWNvbm5lY3RcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbkFjdGl2aXR5KCk7XG4gICAgICAgIGlmIChlcnIyKSB7XG4gICAgICAgICAgaWYgKGVycjIuY29kZSkge1xuICAgICAgICAgICAgdGhpcy5vbkRhdGEocHJvdG9jb2xNZXNzYWdlRnJvbVJhd0Vycm9yKGVycjIpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0KGVycjIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgUGxhdGZvcm0uQ29uZmlnLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnJlY3YoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGNvbm5lY3RSZXF1ZXN0LmV4ZWMoKTtcbiAgICB9KTtcbiAgfVxuICByZXF1ZXN0Q2xvc2UoKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiQ29tZXRUcmFuc3BvcnQucmVxdWVzdENsb3NlKClcIik7XG4gICAgdGhpcy5fcmVxdWVzdENsb3NlT3JEaXNjb25uZWN0KHRydWUpO1xuICB9XG4gIHJlcXVlc3REaXNjb25uZWN0KCkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIkNvbWV0VHJhbnNwb3J0LnJlcXVlc3REaXNjb25uZWN0KClcIik7XG4gICAgdGhpcy5fcmVxdWVzdENsb3NlT3JEaXNjb25uZWN0KGZhbHNlKTtcbiAgfVxuICBfcmVxdWVzdENsb3NlT3JEaXNjb25uZWN0KGNsb3NpbmcpIHtcbiAgICBjb25zdCBjbG9zZU9yRGlzY29ubmVjdFVyaSA9IGNsb3NpbmcgPyB0aGlzLmNsb3NlVXJpIDogdGhpcy5kaXNjb25uZWN0VXJpO1xuICAgIGlmIChjbG9zZU9yRGlzY29ubmVjdFVyaSkge1xuICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuY3JlYXRlUmVxdWVzdChjbG9zZU9yRGlzY29ubmVjdFVyaSwgbnVsbCwgdGhpcy5hdXRoUGFyYW1zLCBudWxsLCBYSFJTdGF0ZXNfZGVmYXVsdC5SRVFfU0VORCk7XG4gICAgICByZXF1ZXN0Lm9uKFwiY29tcGxldGVcIiwgKGVycikgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICAgICAgICBcIkNvbWV0VHJhbnNwb3J0LnJlcXVlc3RcIiArIChjbG9zaW5nID8gXCJDbG9zZSgpXCIgOiBcIkRpc2Nvbm5lY3QoKVwiKSxcbiAgICAgICAgICAgIFwicmVxdWVzdCByZXR1cm5lZCBlcnIgPSBcIiArIGluc3BlY3RFcnJvcihlcnIpXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLmZpbmlzaChcImRpc2Nvbm5lY3RlZFwiLCBlcnIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJlcXVlc3QuZXhlYygpO1xuICAgIH1cbiAgfVxuICBkaXNwb3NlKCkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIkNvbWV0VHJhbnNwb3J0LmRpc3Bvc2UoKVwiLCBcIlwiKTtcbiAgICBpZiAoIXRoaXMuaXNEaXNwb3NlZCkge1xuICAgICAgdGhpcy5pc0Rpc3Bvc2VkID0gdHJ1ZTtcbiAgICAgIGlmICh0aGlzLnJlY3ZSZXF1ZXN0KSB7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIkNvbWV0VHJhbnNwb3J0LmRpc3Bvc2UoKVwiLCBcImFib3J0aW5nIHJlY3YgcmVxdWVzdFwiKTtcbiAgICAgICAgdGhpcy5yZWN2UmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICB0aGlzLnJlY3ZSZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRoaXMuZmluaXNoKFwiZGlzY29ubmVjdGVkXCIsIGNvbm5lY3Rpb25lcnJvcnNfZGVmYXVsdC5kaXNjb25uZWN0ZWQoKSk7XG4gICAgICBQbGF0Zm9ybS5Db25maWcubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICB0aGlzLmVtaXQoXCJkaXNwb3NlZFwiKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBvbkNvbm5lY3QobWVzc2FnZSkge1xuICAgIHZhciBfYTI7XG4gICAgaWYgKHRoaXMuaXNEaXNwb3NlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjb25uZWN0aW9uU3RyID0gKF9hMiA9IG1lc3NhZ2UuY29ubmVjdGlvbkRldGFpbHMpID09IG51bGwgPyB2b2lkIDAgOiBfYTIuY29ubmVjdGlvbktleTtcbiAgICB0cmFuc3BvcnRfZGVmYXVsdC5wcm90b3R5cGUub25Db25uZWN0LmNhbGwodGhpcywgbWVzc2FnZSk7XG4gICAgY29uc3QgYmFzZUNvbm5lY3Rpb25VcmkgPSB0aGlzLmJhc2VVcmkgKyBjb25uZWN0aW9uU3RyO1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLCBcIkNvbWV0VHJhbnNwb3J0Lm9uQ29ubmVjdCgpXCIsIFwiYmFzZVVyaSA9IFwiICsgYmFzZUNvbm5lY3Rpb25VcmkpO1xuICAgIHRoaXMuc2VuZFVyaSA9IGJhc2VDb25uZWN0aW9uVXJpICsgXCIvc2VuZFwiO1xuICAgIHRoaXMucmVjdlVyaSA9IGJhc2VDb25uZWN0aW9uVXJpICsgXCIvcmVjdlwiO1xuICAgIHRoaXMuY2xvc2VVcmkgPSBiYXNlQ29ubmVjdGlvblVyaSArIFwiL2Nsb3NlXCI7XG4gICAgdGhpcy5kaXNjb25uZWN0VXJpID0gYmFzZUNvbm5lY3Rpb25VcmkgKyBcIi9kaXNjb25uZWN0XCI7XG4gIH1cbiAgc2VuZChtZXNzYWdlKSB7XG4gICAgaWYgKHRoaXMuc2VuZFJlcXVlc3QpIHtcbiAgICAgIHRoaXMucGVuZGluZ0l0ZW1zID0gdGhpcy5wZW5kaW5nSXRlbXMgfHwgW107XG4gICAgICB0aGlzLnBlbmRpbmdJdGVtcy5wdXNoKG1lc3NhZ2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwZW5kaW5nSXRlbXMgPSB0aGlzLnBlbmRpbmdJdGVtcyB8fCBbXTtcbiAgICBwZW5kaW5nSXRlbXMucHVzaChtZXNzYWdlKTtcbiAgICB0aGlzLnBlbmRpbmdJdGVtcyA9IG51bGw7XG4gICAgdGhpcy5zZW5kSXRlbXMocGVuZGluZ0l0ZW1zKTtcbiAgfVxuICBzZW5kQW55UGVuZGluZygpIHtcbiAgICBjb25zdCBwZW5kaW5nSXRlbXMgPSB0aGlzLnBlbmRpbmdJdGVtcztcbiAgICBpZiAoIXBlbmRpbmdJdGVtcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnBlbmRpbmdJdGVtcyA9IG51bGw7XG4gICAgdGhpcy5zZW5kSXRlbXMocGVuZGluZ0l0ZW1zKTtcbiAgfVxuICBzZW5kSXRlbXMoaXRlbXMpIHtcbiAgICBjb25zdCBzZW5kUmVxdWVzdCA9IHRoaXMuc2VuZFJlcXVlc3QgPSB0aGlzLmNyZWF0ZVJlcXVlc3QoXG4gICAgICB0aGlzLnNlbmRVcmksXG4gICAgICBudWxsLFxuICAgICAgdGhpcy5hdXRoUGFyYW1zLFxuICAgICAgdGhpcy5lbmNvZGVSZXF1ZXN0KGl0ZW1zKSxcbiAgICAgIFhIUlN0YXRlc19kZWZhdWx0LlJFUV9TRU5EXG4gICAgKTtcbiAgICBzZW5kUmVxdWVzdC5vbihcImNvbXBsZXRlXCIsIChlcnIsIGRhdGEpID0+IHtcbiAgICAgIGlmIChlcnIpXG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICAgICAgXCJDb21ldFRyYW5zcG9ydC5zZW5kSXRlbXMoKVwiLFxuICAgICAgICAgIFwib24gY29tcGxldGU6IGVyciA9IFwiICsgaW5zcGVjdEVycm9yKGVycilcbiAgICAgICAgKTtcbiAgICAgIHRoaXMuc2VuZFJlcXVlc3QgPSBudWxsO1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBpZiAoZXJyLmNvZGUpIHtcbiAgICAgICAgICB0aGlzLm9uRGF0YShwcm90b2NvbE1lc3NhZ2VGcm9tUmF3RXJyb3IoZXJyKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5kaXNjb25uZWN0KGVycik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgdGhpcy5vbkRhdGEoZGF0YSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wZW5kaW5nSXRlbXMpIHtcbiAgICAgICAgUGxhdGZvcm0uQ29uZmlnLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICBpZiAoIXRoaXMuc2VuZFJlcXVlc3QpIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZEFueVBlbmRpbmcoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHNlbmRSZXF1ZXN0LmV4ZWMoKTtcbiAgfVxuICByZWN2KCkge1xuICAgIGlmICh0aGlzLnJlY3ZSZXF1ZXN0KVxuICAgICAgcmV0dXJuO1xuICAgIGlmICghdGhpcy5pc0Nvbm5lY3RlZClcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCByZWN2UmVxdWVzdCA9IHRoaXMucmVjdlJlcXVlc3QgPSB0aGlzLmNyZWF0ZVJlcXVlc3QoXG4gICAgICB0aGlzLnJlY3ZVcmksXG4gICAgICBudWxsLFxuICAgICAgdGhpcy5hdXRoUGFyYW1zLFxuICAgICAgbnVsbCxcbiAgICAgIHRoaXMuc3RyZWFtID8gWEhSU3RhdGVzX2RlZmF1bHQuUkVRX1JFQ1ZfU1RSRUFNIDogWEhSU3RhdGVzX2RlZmF1bHQuUkVRX1JFQ1ZfUE9MTFxuICAgICk7XG4gICAgcmVjdlJlcXVlc3Qub24oXCJkYXRhXCIsIChkYXRhKSA9PiB7XG4gICAgICB0aGlzLm9uRGF0YShkYXRhKTtcbiAgICB9KTtcbiAgICByZWN2UmVxdWVzdC5vbihcImNvbXBsZXRlXCIsIChlcnIpID0+IHtcbiAgICAgIHRoaXMucmVjdlJlcXVlc3QgPSBudWxsO1xuICAgICAgdGhpcy5vbkFjdGl2aXR5KCk7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIuY29kZSkge1xuICAgICAgICAgIHRoaXMub25EYXRhKHByb3RvY29sTWVzc2FnZUZyb21SYXdFcnJvcihlcnIpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBQbGF0Zm9ybS5Db25maWcubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICB0aGlzLnJlY3YoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJlY3ZSZXF1ZXN0LmV4ZWMoKTtcbiAgfVxuICBvbkRhdGEocmVzcG9uc2VEYXRhKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5kZWNvZGVSZXNwb25zZShyZXNwb25zZURhdGEpO1xuICAgICAgaWYgKGl0ZW1zICYmIGl0ZW1zLmxlbmd0aClcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICB0aGlzLm9uUHJvdG9jb2xNZXNzYWdlKFxuICAgICAgICAgICAgZnJvbURlc2VyaWFsaXplZChpdGVtc1tpXSwgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5yZWFsdGltZS5fUmVhbHRpbWVQcmVzZW5jZSlcbiAgICAgICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUixcbiAgICAgICAgXCJDb21ldFRyYW5zcG9ydC5vbkRhdGEoKVwiLFxuICAgICAgICBcIlVuZXhwZWN0ZWQgZXhjZXB0aW9uIGhhbmRpbmcgY2hhbm5lbCBldmVudDogXCIgKyBlLnN0YWNrXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBlbmNvZGVSZXF1ZXN0KHJlcXVlc3RJdGVtcykge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0SXRlbXMpO1xuICB9XG4gIGRlY29kZVJlc3BvbnNlKHJlc3BvbnNlRGF0YSkge1xuICAgIGlmICh0eXBlb2YgcmVzcG9uc2VEYXRhID09IFwic3RyaW5nXCIpXG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShyZXNwb25zZURhdGEpO1xuICAgIHJldHVybiByZXNwb25zZURhdGE7XG4gIH1cbn07XG52YXIgY29tZXR0cmFuc3BvcnRfZGVmYXVsdCA9IENvbWV0VHJhbnNwb3J0O1xuXG4vLyBzcmMvcGxhdGZvcm0vbm9kZWpzL2xpYi90cmFuc3BvcnQvbm9kZWNvbWV0dHJhbnNwb3J0LmpzXG52YXIgaW1wb3J0X2h0dHA2ID0gX190b0VTTShyZXF1aXJlKFwiaHR0cFwiKSk7XG52YXIgaW1wb3J0X2h0dHBzMiA9IF9fdG9FU00ocmVxdWlyZShcImh0dHBzXCIpKTtcbnZhciBpbXBvcnRfdXJsID0gX190b0VTTShyZXF1aXJlKFwidXJsXCIpKTtcbnZhciBpbXBvcnRfdXRpbDMgPSBfX3RvRVNNKHJlcXVpcmUoXCJ1dGlsXCIpKTtcbnZhciBub29wMyA9IGZ1bmN0aW9uKCkge1xufTtcbnZhciBzaG9ydE5hbWUyID0gVHJhbnNwb3J0TmFtZXMuQ29tZXQ7XG52YXIgTm9kZUNvbWV0VHJhbnNwb3J0ID0gY2xhc3MgZXh0ZW5kcyBjb21ldHRyYW5zcG9ydF9kZWZhdWx0IHtcbiAgY29uc3RydWN0b3IoY29ubmVjdGlvbk1hbmFnZXIsIGF1dGgsIHBhcmFtcykge1xuICAgIHN1cGVyKGNvbm5lY3Rpb25NYW5hZ2VyLCBhdXRoLCBwYXJhbXMpO1xuICAgIHRoaXMuaHR0cEFnZW50ID0gbnVsbDtcbiAgICB0aGlzLmh0dHBzQWdlbnQgPSBudWxsO1xuICAgIHRoaXMucGVuZGluZ1JlcXVlc3RzID0gMDtcbiAgICB0aGlzLnNob3J0TmFtZSA9IHNob3J0TmFtZTI7XG4gIH1cbiAgc3RhdGljIGlzQXZhaWxhYmxlKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBcIk5vZGVDb21ldFRyYW5zcG9ydDsgdXJpPVwiICsgdGhpcy5iYXNlVXJpICsgXCI7IGlzQ29ubmVjdGVkPVwiICsgdGhpcy5pc0Nvbm5lY3RlZCArIFwiOyBmb3JtYXQ9XCIgKyB0aGlzLmZvcm1hdCArIFwiOyBzdHJlYW09XCIgKyB0aGlzLnN0cmVhbTtcbiAgfVxuICBnZXRBZ2VudCh0bHMpIHtcbiAgICB2YXIgcHJvcCA9IHRscyA/IFwiaHR0cHNBZ2VudFwiIDogXCJodHRwQWdlbnRcIiwgYWdlbnQyID0gdGhpc1twcm9wXTtcbiAgICBpZiAoIWFnZW50MilcbiAgICAgIGFnZW50MiA9IHRoaXNbcHJvcF0gPSBuZXcgKHRscyA/IGltcG9ydF9odHRwczIuZGVmYXVsdCA6IGltcG9ydF9odHRwNi5kZWZhdWx0KS5BZ2VudCh7IGtlZXBBbGl2ZTogdHJ1ZSB9KTtcbiAgICByZXR1cm4gYWdlbnQyO1xuICB9XG4gIGRpc3Bvc2UoKSB7XG4gICAgdmFyIHNlbGYyID0gdGhpcztcbiAgICB0aGlzLm9uY2VOb1BlbmRpbmcoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoc2VsZjIuaHR0cEFnZW50KVxuICAgICAgICBzZWxmMi5odHRwQWdlbnQuZGVzdHJveSgpO1xuICAgICAgaWYgKHNlbGYyLmh0dHBzQWdlbnQpXG4gICAgICAgIHNlbGYyLmh0dHBzQWdlbnQuZGVzdHJveSgpO1xuICAgIH0pO1xuICAgIGNvbWV0dHJhbnNwb3J0X2RlZmF1bHQucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcbiAgfVxuICAvKiB2YWxpZCBpbiBub24tc3RyZWFtaW5nIG1vZGUgb25seSwgb3IgZGF0YSBvbmx5IGNvbnRhaW5zIGxhc3QgdXBkYXRlICovXG4gIHJlcXVlc3QodXJpLCBwYXJhbXMsIGJvZHksIHJlcXVlc3RNb2RlLCBjYWxsYmFjaykge1xuICAgIHZhciByZXEgPSB0aGlzLmNyZWF0ZVJlcXVlc3QodXJpLCBwYXJhbXMsIGJvZHksIHJlcXVlc3RNb2RlKTtcbiAgICByZXEub25jZShcImNvbXBsZXRlXCIsIGNhbGxiYWNrKTtcbiAgICByZXEuZXhlYygpO1xuICAgIHJldHVybiByZXE7XG4gIH1cbiAgY3JlYXRlUmVxdWVzdCh1cmksIGhlYWRlcnMsIHBhcmFtcywgYm9keSwgcmVxdWVzdE1vZGUpIHtcbiAgICByZXR1cm4gbmV3IFJlcXVlc3QodXJpLCBoZWFkZXJzLCBwYXJhbXMsIGJvZHksIHJlcXVlc3RNb2RlLCB0aGlzLmZvcm1hdCwgdGhpcy50aW1lb3V0cywgdGhpcyk7XG4gIH1cbiAgYWRkUGVuZGluZygpIHtcbiAgICArK3RoaXMucGVuZGluZ1JlcXVlc3RzO1xuICB9XG4gIHJlbW92ZVBlbmRpbmcoKSB7XG4gICAgaWYgKC0tdGhpcy5wZW5kaW5nUmVxdWVzdHMgPD0gMCkge1xuICAgICAgdGhpcy5lbWl0KFwibm9wZW5kaW5nXCIpO1xuICAgIH1cbiAgfVxuICBvbmNlTm9QZW5kaW5nKGxpc3RlbmVyKSB7XG4gICAgaWYgKHRoaXMucGVuZGluZ1JlcXVlc3RzID09IDApIHtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMub25jZShcIm5vcGVuZGluZ1wiLCBsaXN0ZW5lcik7XG4gIH1cbn07XG52YXIgUmVxdWVzdCA9IGNsYXNzIGV4dGVuZHMgZXZlbnRlbWl0dGVyX2RlZmF1bHQge1xuICBjb25zdHJ1Y3Rvcih1cmksIGhlYWRlcnMsIHBhcmFtcywgYm9keSwgcmVxdWVzdE1vZGUsIGZvcm1hdCwgdGltZW91dHMsIHRyYW5zcG9ydCkge1xuICAgIHN1cGVyKHRyYW5zcG9ydC5sb2dnZXIpO1xuICAgIGlmICh0eXBlb2YgdXJpID09IFwic3RyaW5nXCIpXG4gICAgICB1cmkgPSBpbXBvcnRfdXJsLmRlZmF1bHQucGFyc2UodXJpKTtcbiAgICB2YXIgdGxzID0gdXJpLnByb3RvY29sID09IFwiaHR0cHM6XCI7XG4gICAgdGhpcy5jbGllbnQgPSB0bHMgPyBpbXBvcnRfaHR0cHMyLmRlZmF1bHQgOiBpbXBvcnRfaHR0cDYuZGVmYXVsdDtcbiAgICB0aGlzLnJlcXVlc3RNb2RlID0gcmVxdWVzdE1vZGU7XG4gICAgdGhpcy50aW1lb3V0cyA9IHRpbWVvdXRzO1xuICAgIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICAgIHRoaXMucmVxdWVzdENvbXBsZXRlID0gZmFsc2U7XG4gICAgdGhpcy5yZXEgPSB0aGlzLnJlcyA9IG51bGw7XG4gICAgdmFyIG1ldGhvZCA9IFwiR0VUXCIsIGNvbnRlbnRUeXBlID0gZm9ybWF0ID09IFwibXNncGFja1wiID8gXCJhcHBsaWNhdGlvbi94LW1zZ3BhY2tcIiA6IFwiYXBwbGljYXRpb24vanNvblwiO1xuICAgIGhlYWRlcnMgPSBoZWFkZXJzID8gbWl4aW4oe30sIGhlYWRlcnMpIDoge307XG4gICAgaGVhZGVyc1tcImFjY2VwdFwiXSA9IGNvbnRlbnRUeXBlO1xuICAgIGlmIChib2R5KSB7XG4gICAgICBtZXRob2QgPSBcIlBPU1RcIjtcbiAgICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJvZHkpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYm9keSA9PSBcIm9iamVjdFwiKVxuICAgICAgICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShib2R5KTtcbiAgICAgICAgYm9keSA9IEJ1ZmZlci5mcm9tKGJvZHkpO1xuICAgICAgfVxuICAgICAgdGhpcy5ib2R5ID0gYm9keTtcbiAgICAgIGhlYWRlcnNbXCJDb250ZW50LUxlbmd0aFwiXSA9IGJvZHkubGVuZ3RoO1xuICAgICAgaGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXSA9IGNvbnRlbnRUeXBlO1xuICAgIH1cbiAgICB2YXIgcmVxdWVzdE9wdGlvbnMgPSB0aGlzLnJlcXVlc3RPcHRpb25zID0ge1xuICAgICAgaG9zdG5hbWU6IHVyaS5ob3N0bmFtZSxcbiAgICAgIHBvcnQ6IHVyaS5wb3J0LFxuICAgICAgcGF0aDogdXJpLnBhdGggKyB0b1F1ZXJ5U3RyaW5nKHBhcmFtcyksXG4gICAgICBtZXRob2QsXG4gICAgICBoZWFkZXJzXG4gICAgfTtcbiAgICBpZiAodHJhbnNwb3J0KVxuICAgICAgcmVxdWVzdE9wdGlvbnMuYWdlbnQgPSB0cmFuc3BvcnQuZ2V0QWdlbnQodGxzKTtcbiAgfVxuICBleGVjKCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5yZXF1ZXN0TW9kZSA9PSBYSFJTdGF0ZXNfZGVmYXVsdC5SRVFfU0VORCA/IHRoaXMudGltZW91dHMuaHR0cFJlcXVlc3RUaW1lb3V0IDogdGhpcy50aW1lb3V0cy5yZWN2VGltZW91dCwgc2VsZjIgPSB0aGlzO1xuICAgIHZhciB0aW1lciA9IHRoaXMudGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZjIuYWJvcnQoKTtcbiAgICB9LCB0aW1lb3V0KSwgcmVxID0gdGhpcy5yZXEgPSB0aGlzLmNsaWVudC5yZXF1ZXN0KHRoaXMucmVxdWVzdE9wdGlvbnMpO1xuICAgIHJlcS5vbihcbiAgICAgIFwiZXJyb3JcIixcbiAgICAgIHRoaXMub25SZXFFcnJvciA9IGZ1bmN0aW9uKGVycikge1xuICAgICAgICBlcnIgPSBuZXcgUGFydGlhbEVycm9ySW5mbyhcIlJlcXVlc3QgZXJyb3I6IFwiICsgZXJyLm1lc3NhZ2UsIG51bGwsIDQwMCk7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgIHNlbGYyLnRpbWVyID0gbnVsbDtcbiAgICAgICAgc2VsZjIuY29tcGxldGUoZXJyKTtcbiAgICAgIH1cbiAgICApO1xuICAgIHJlcS5vbihcInJlc3BvbnNlXCIsIGZ1bmN0aW9uKHJlcykge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIHNlbGYyLnRpbWVyID0gbnVsbDtcbiAgICAgIHZhciBzdGF0dXNDb2RlID0gcmVzLnN0YXR1c0NvZGU7XG4gICAgICBpZiAoc3RhdHVzQ29kZSA9PSBIdHRwU3RhdHVzQ29kZXNfZGVmYXVsdC5Ob0NvbnRlbnQpIHtcbiAgICAgICAgcmVzLnJlc3VtZSgpO1xuICAgICAgICBzZWxmMi5jb21wbGV0ZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXMub24oXG4gICAgICAgIFwiZXJyb3JcIixcbiAgICAgICAgc2VsZjIub25SZXNFcnJvciA9IGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIGVyciA9IG5ldyBQYXJ0aWFsRXJyb3JJbmZvKFwiUmVzcG9uc2UgZXJyb3I6IFwiICsgZXJyLm1lc3NhZ2UsIG51bGwsIDQwMCk7XG4gICAgICAgICAgc2VsZjIuY29tcGxldGUoZXJyKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIHNlbGYyLnJlcyA9IHJlcztcbiAgICAgIGlmIChzZWxmMi5yZXF1ZXN0TW9kZSA9PSBYSFJTdGF0ZXNfZGVmYXVsdC5SRVFfUkVDVl9TVFJFQU0gJiYgc3RhdHVzQ29kZSA8IDQwMCkge1xuICAgICAgICBzZWxmMi5yZWFkU3RyZWFtKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmMi5yZWFkRnVsbHkoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAodGhpcy50cmFuc3BvcnQpXG4gICAgICB0aGlzLnRyYW5zcG9ydC5hZGRQZW5kaW5nKCk7XG4gICAgcmVxLmVuZCh0aGlzLmJvZHkpO1xuICB9XG4gIHJlYWRTdHJlYW0oKSB7XG4gICAgdmFyIHJlcyA9IHRoaXMucmVzLCBzZWxmMiA9IHRoaXM7XG4gICAgdGhpcy5jaHVua3MgPSBbXTtcbiAgICB0aGlzLnN0cmVhbUNvbXBsZXRlID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gb25DaHVuayhjaHVuaykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2h1bmsgPSBKU09OLnBhcnNlKGNodW5rKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdmFyIG1zZyA9IFwiTWFsZm9ybWVkIHJlc3BvbnNlIGJvZHkgZnJvbSBzZXJ2ZXI6IFwiICsgZS5tZXNzYWdlO1xuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oc2VsZjIubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIFwiTm9kZUNvbWV0VHJhbnNwb3J0LlJlcXVlc3QucmVhZFN0cmVhbSgpXCIsIG1zZyk7XG4gICAgICAgIHNlbGYyLmNvbXBsZXRlKG5ldyBQYXJ0aWFsRXJyb3JJbmZvKG1zZywgbnVsbCwgNDAwKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNlbGYyLmVtaXQoXCJkYXRhXCIsIGNodW5rKTtcbiAgICB9XG4gICAgcmVzLm9uKFxuICAgICAgXCJkYXRhXCIsXG4gICAgICB0aGlzLm9uZGF0YSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgdmFyIG5ld0NodW5rcyA9IFN0cmluZyhkYXRhKS5zcGxpdChcIlxcblwiKSwgY2h1bmtzID0gc2VsZjIuY2h1bmtzO1xuICAgICAgICBpZiAobmV3Q2h1bmtzLmxlbmd0aCA+IDEgJiYgY2h1bmtzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjaHVua3MucHVzaChuZXdDaHVua3Muc2hpZnQoKSk7XG4gICAgICAgICAgc2VsZjIuY2h1bmtzID0gW107XG4gICAgICAgICAgb25DaHVuayhjaHVua3Muam9pbihcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRyYWlsaW5nTmV3Q2h1bmsgPSBuZXdDaHVua3MucG9wKCk7XG4gICAgICAgIGlmICh0cmFpbGluZ05ld0NodW5rLmxlbmd0aCkge1xuICAgICAgICAgIHNlbGYyLmNodW5rcy5wdXNoKHRyYWlsaW5nTmV3Q2h1bmspO1xuICAgICAgICB9XG4gICAgICAgIG5ld0NodW5rcy5tYXAob25DaHVuayk7XG4gICAgICB9XG4gICAgKTtcbiAgICByZXMub24oXCJlbmRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmMi5zdHJlYW1Db21wbGV0ZSA9IHRydWU7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmMi5jb21wbGV0ZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgcmVhZEZ1bGx5KCkge1xuICAgIHZhciByZXMgPSB0aGlzLnJlcywgY2h1bmtzID0gW10sIHNlbGYyID0gdGhpcztcbiAgICByZXMub24oXCJkYXRhXCIsIGZ1bmN0aW9uKGNodW5rKSB7XG4gICAgICBjaHVua3MucHVzaChjaHVuayk7XG4gICAgfSk7XG4gICAgcmVzLm9uKFwiZW5kXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGJvZHkgPSBCdWZmZXIuY29uY2F0KGNodW5rcyksIHN0YXR1c0NvZGUgPSByZXMuc3RhdHVzQ29kZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBib2R5ID0gSlNPTi5wYXJzZShTdHJpbmcoYm9keSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdmFyIG1zZyA9IFwiTWFsZm9ybWVkIHJlc3BvbnNlIGJvZHkgZnJvbSBzZXJ2ZXI6IFwiICsgZS5tZXNzYWdlO1xuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihzZWxmMi5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUiwgXCJOb2RlQ29tZXRUcmFuc3BvcnQuUmVxdWVzdC5yZWFkRnVsbHkoKVwiLCBtc2cpO1xuICAgICAgICAgIHNlbGYyLmNvbXBsZXRlKG5ldyBQYXJ0aWFsRXJyb3JJbmZvKG1zZywgbnVsbCwgNDAwKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0dXNDb2RlIDwgNDAwIHx8IEFycmF5LmlzQXJyYXkoYm9keSkpIHtcbiAgICAgICAgICBzZWxmMi5jb21wbGV0ZShudWxsLCBib2R5KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVyciA9IGJvZHkuZXJyb3IgJiYgRXJyb3JJbmZvLmZyb21WYWx1ZXMoYm9keS5lcnJvcik7XG4gICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgZXJyID0gbmV3IFBhcnRpYWxFcnJvckluZm8oXG4gICAgICAgICAgICBcIkVycm9yIHJlc3BvbnNlIHJlY2VpdmVkIGZyb20gc2VydmVyOiBcIiArIHN0YXR1c0NvZGUgKyBcIiwgYm9keSB3YXM6IFwiICsgaW1wb3J0X3V0aWwzLmRlZmF1bHQuaW5zcGVjdChib2R5KSxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBzdGF0dXNDb2RlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmMi5jb21wbGV0ZShlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgY29tcGxldGUoZXJyLCBib2R5KSB7XG4gICAgaWYgKCF0aGlzLnJlcXVlc3RDb21wbGV0ZSkge1xuICAgICAgdGhpcy5yZXF1ZXN0Q29tcGxldGUgPSB0cnVlO1xuICAgICAgaWYgKGJvZHkpXG4gICAgICAgIHRoaXMuZW1pdChcImRhdGFcIiwgYm9keSk7XG4gICAgICB0aGlzLmVtaXQoXCJjb21wbGV0ZVwiLCBlcnIsIGJvZHkpO1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBpZiAodGhpcy5vbmRhdGEgJiYgIXRoaXMuc3RyZWFtQ29tcGxldGUpIHtcbiAgICAgICAgICBpZiAodGhpcy5vbmRhdGEgJiYgdGhpcy5yZXMpXG4gICAgICAgICAgICB0aGlzLnJlcy5yZW1vdmVMaXN0ZW5lcihcImRhdGFcIiwgdGhpcy5vbmRhdGEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy50cmFuc3BvcnQpIHtcbiAgICAgICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlUGVuZGluZygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBhYm9ydCgpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJOb2RlQ29tZXRUcmFuc3BvcnQuUmVxdWVzdC5hYm9ydCgpXCIsIFwiXCIpO1xuICAgIHZhciB0aW1lciA9IHRoaXMudGltZXI7XG4gICAgaWYgKHRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgdGhpcy50aW1lciA9IG51bGw7XG4gICAgfVxuICAgIHZhciByZXEgPSB0aGlzLnJlcTtcbiAgICBpZiAocmVxKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJOb2RlQ29tZXRUcmFuc3BvcnQuUmVxdWVzdC5hYm9ydCgpXCIsIFwiYWJvcnRpbmcgcmVxdWVzdFwiKTtcbiAgICAgIHJlcS5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsIHRoaXMub25SZXFFcnJvcik7XG4gICAgICByZXEub24oXCJlcnJvclwiLCBub29wMyk7XG4gICAgICByZXEuYWJvcnQoKTtcbiAgICAgIHRoaXMucmVxID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5jb21wbGV0ZSh7IHN0YXR1c0NvZGU6IDQwMCwgY29kZTogODAwMDMsIG1lc3NhZ2U6IFwiQ2FuY2VsbGVkXCIgfSk7XG4gIH1cbn07XG52YXIgbm9kZWNvbWV0dHJhbnNwb3J0X2RlZmF1bHQgPSBOb2RlQ29tZXRUcmFuc3BvcnQ7XG5cbi8vIHNyYy9wbGF0Zm9ybS9ub2RlanMvbGliL3RyYW5zcG9ydC9pbmRleC50c1xudmFyIHRyYW5zcG9ydF9kZWZhdWx0MiA9IHtcbiAgb3JkZXI6IFtUcmFuc3BvcnROYW1lcy5Db21ldF0sXG4gIGJ1bmRsZWRJbXBsZW1lbnRhdGlvbnM6IHtcbiAgICBbVHJhbnNwb3J0TmFtZXMuV2ViU29ja2V0XTogd2Vic29ja2V0dHJhbnNwb3J0X2RlZmF1bHQsXG4gICAgW1RyYW5zcG9ydE5hbWVzLkNvbWV0XTogbm9kZWNvbWV0dHJhbnNwb3J0X2RlZmF1bHRcbiAgfVxufTtcblxuLy8gc3JjL3BsYXRmb3JtL25vZGVqcy9saWIvdXRpbC9kZWZhdWx0cy50c1xudmFyIERlZmF1bHRzMiA9IHtcbiAgY29ubmVjdGl2aXR5Q2hlY2tVcmw6IFwiaHR0cHM6Ly9pbnRlcm5ldC11cC5hYmx5LXJlYWx0aW1lLmNvbS9pcy10aGUtaW50ZXJuZXQtdXAudHh0XCIsXG4gIHdzQ29ubmVjdGl2aXR5Q2hlY2tVcmw6IFwid3NzOi8vd3MtdXAuYWJseS1yZWFsdGltZS5jb21cIixcbiAgLyogTm90ZTogb3JkZXIgbWF0dGVycyBoZXJlOiB0aGUgYmFzZSB0cmFuc3BvcnQgaXMgdGhlIGxlZnRtb3N0IG9uZSBpbiB0aGVcbiAgICogaW50ZXJzZWN0aW9uIG9mIGJhc2VUcmFuc3BvcnRPcmRlciBhbmQgdGhlIHRyYW5zcG9ydHMgY2xpZW50T3B0aW9uIHRoYXQncyBzdXBwb3J0ZWQuICovXG4gIGRlZmF1bHRUcmFuc3BvcnRzOiBbVHJhbnNwb3J0TmFtZXMuV2ViU29ja2V0XSxcbiAgcmVzdEFnZW50T3B0aW9uczogeyBtYXhTb2NrZXRzOiA0MCwga2VlcEFsaXZlOiB0cnVlIH1cbn07XG52YXIgZGVmYXVsdHNfZGVmYXVsdDIgPSBEZWZhdWx0czI7XG5cbi8vIHNyYy9wbGF0Zm9ybS9ub2RlanMvaW5kZXgudHNcbnZhciBtc2dwYWNrID0gcmVxdWlyZV9tc2dwYWNrKCk7XG52YXIgQ3J5cHRvID0gY3JlYXRlQ3J5cHRvQ2xhc3MoYnVmZmVydXRpbHNfZGVmYXVsdCk7XG5QbGF0Zm9ybS5DcnlwdG8gPSBDcnlwdG87XG5QbGF0Zm9ybS5CdWZmZXJVdGlscyA9IGJ1ZmZlcnV0aWxzX2RlZmF1bHQ7XG5QbGF0Zm9ybS5IdHRwID0gaHR0cF9kZWZhdWx0O1xuUGxhdGZvcm0uQ29uZmlnID0gY29uZmlnX2RlZmF1bHQ7XG5QbGF0Zm9ybS5UcmFuc3BvcnRzID0gdHJhbnNwb3J0X2RlZmF1bHQyO1xuUGxhdGZvcm0uV2ViU3RvcmFnZSA9IG51bGw7XG5mb3IgKGNvbnN0IGNsaWVudENsYXNzIG9mIFtEZWZhdWx0UmVzdCwgRGVmYXVsdFJlYWx0aW1lXSkge1xuICBjbGllbnRDbGFzcy5DcnlwdG8gPSBDcnlwdG87XG4gIGNsaWVudENsYXNzLl9Nc2dQYWNrID0gbXNncGFjaztcbn1cbmxvZ2dlcl9kZWZhdWx0LmluaXRMb2dIYW5kbGVycygpO1xuUGxhdGZvcm0uRGVmYXVsdHMgPSBnZXREZWZhdWx0cyhkZWZhdWx0c19kZWZhdWx0Mik7XG5pZiAoUGxhdGZvcm0uQ29uZmlnLmFnZW50KSB7XG4gIFBsYXRmb3JtLkRlZmF1bHRzLmFnZW50ICs9IFwiIFwiICsgUGxhdGZvcm0uQ29uZmlnLmFnZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEVycm9ySW5mbyxcbiAgUmVzdDogRGVmYXVsdFJlc3QsXG4gIFJlYWx0aW1lOiBEZWZhdWx0UmVhbHRpbWUsXG4gIG1zZ3BhY2s6IG51bGwsXG4gIHByb3RvY29sTWVzc2FnZUZyb21EZXNlcmlhbGl6ZWQ6IGZyb21EZXNlcmlhbGl6ZWRJbmNsdWRpbmdEZXBlbmRlbmNpZXNcbn07XG5pZiAodHlwZW9mIG1vZHVsZS5leHBvcnRzID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGV4cG9ydHMgPT0gXCJvYmplY3RcIikge1xuICB2YXIgX19jcCA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gICAgaWYgKChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiKSB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZnJvbSkpIHtcbiAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0bywga2V5LCB7XG4gICAgICAgICAgZ2V0OiAoKSA9PiBmcm9tW2tleV0sXG4gICAgICAgICAgZW51bWVyYWJsZTogIShkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG87XG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0gX19jcChtb2R1bGUuZXhwb3J0cywgZXhwb3J0cyk7XG59XG5yZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFibHktbm9kZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../node_modules/ably/build/ably-node.js\n");

/***/ })

};
;