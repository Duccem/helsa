model Doctor {
  id String @id @default(uuid())

  licenseMedicalNumber String? @unique
  score                Float   @default(0)
  experience           Int     @default(1)

  schedule              Schedule?
  consultingRoomAddress ConsultingRoomAddress?

  userId      String @unique
  specialtyId String

  user      User      @relation(fields: [userId], references: [id])
  specialty Specialty @relation(fields: [specialtyId], references: [id])

  educations   Education[]
  hospitals    Hospital[]         @relation("DoctorHospital")
  ratings      Rating[]
  diagnostics  Diagnostic[]
  treatments   Treatment[]
  appointments Appointment[]
  tests        MedicalTest[]
  references   MedicalReference[]
  prices       Price[]

  searchDoctor SearchDoctor?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Specialty {
  id           String        @id @default(uuid())
  name         String        @unique
  doctor       Doctor[]
  appointments Appointment[]
}

model ConsultingRoomAddress {
  id String @id @default(uuid())

  city            String
  address         String
  roomCoordinates Json

  doctorId String @unique
  doctor   Doctor @relation(fields: [doctorId], references: [id])
}

model Schedule {
  id String @id @default(uuid())

  days                  Json[]
  appointmentDuration   Int
  maxAppointmentsPerDay Int

  doctorId String @unique
  doctor   Doctor @relation(fields: [doctorId], references: [id])
}

model Rating {
  id String @id @default(uuid())

  score   Float
  comment String?

  doctorId  String
  patientId String
  doctor    Doctor  @relation(fields: [doctorId], references: [id])
  patient   Patient @relation(fields: [patientId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Education {
  id String @id @default(uuid())

  title       String
  institution String
  graduatedAt DateTime

  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])
}

model SearchDoctor {
  id String @id @default(uuid())

  name       String
  userId     String
  specialty  String
  score      Decimal
  experience Int

  doctorId String @unique
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  searchSchedules SearchSchedule[]
  days            SearchDay[]
}

model SearchSchedule {
  id String @id @default(uuid())

  day            String
  appointments   Int
  availabilities Int

  searchDoctorId String
  searchDoctor   SearchDoctor @relation(fields: [searchDoctorId], references: [id], onDelete: Cascade)
}

model SearchDay {
  id String @id @default(uuid())

  day   String
  hours Int

  searchDoctorId String
  searchDoctor   SearchDoctor @relation(fields: [searchDoctorId], references: [id], onDelete: Cascade)
}

model Price {
  id String @id @default(uuid())

  name     String  @default("Consulta")
  amount   Decimal
  currency String
  duration Decimal

  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  typeId String
  type   AppointmentType @relation(fields: [typeId], references: [id])

  appointments Appointment[]
}
